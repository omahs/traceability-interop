{
  "collection": {
    "info": {
      "_postman_id": "7f2d134c-0652-4763-bcaa-ff75092b3e39",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "ac39c9ea-f18a-49be-86c8-d7d03166e7e5",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "506d22c3-e718-4cd7-9367-c9c4116e6ab4",
            "name": "Positive Testing",
            "item": [
              {
                "id": "0b7e6a24-474d-42da-a053-3521cd27a268",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "dfa6ea91-b200-4d15-a0a4-f71cca8d9b2f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5c36bc40-3f8d-44aa-acbb-1719c7d5a6e2"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0806dd99-d133-467b-a259-b92d78e30391",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3e54c0fd-449d-422d-a5f9-af4e7f2760d6"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "1b2e31b6-257a-48a5-8670-c51736c48931",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c6791983-4a80-48df-82c8-be14a1ce0208"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1808da23-f0b3-447b-a70c-427804f1b931",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "90ffee3e-ed56-46dd-9fda-3d60c23af3f0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "dea056fa-6f87-4371-8da9-b61e76028688",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d847bece-72e4-46ac-9e01-3d7a7706b51d"
            }
          }
        ]
      },
      {
        "id": "0e0d38a4-04ac-40ab-8983-2d214c06d16a",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "662b6c49-bf3d-4afb-8cf1-f93f3e0ebb23",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8921aab4-9f71-4dae-9c02-22c1d9e9fc44",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "4c6de58a-8b76-4ad7-bb1a-2cd28974248d",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37bbb5f3-eb6d-4ee6-8be3-c827390ba162",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ee445173-be0b-4163-8d0a-676baca2e979"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6cc07c7-72ea-4c74-bd30-4fd2477e630e",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f36bb25-42a3-4f63-9b65-a2c05215eb6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "caea8ead-7175-493e-a5ae-713b4ede6710"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8c24829-f606-4909-9d09-b47436e2cedc",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c2da119-a815-48ee-92b1-2b193c674d11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "dba4198f-cb9d-497c-8935-3e12839efa9b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "265eb01c-16f9-4a04-9188-d75ac6e1a9c5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "59eaaec1-50ee-4491-a17f-0ea34e907fd0",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0afdeb8b-2b1a-4f6c-a38e-ad3c8bb659bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9f0cc676-1ca4-4e62-b09a-1bb1136ba2d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecc0914c-97c5-4269-8fff-a4995db6d755",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6759ef85-1ea7-4a13-b5be-ad22413ff0fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "798892ca-12c6-45eb-a971-f02039e44d67",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1e45739-992a-48ea-8c91-3139aeb813b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "347e9ba3-7837-481f-a7ad-aedb9dee75b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cca0e615-36a8-4286-8be3-238b50ef7977",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "4b2b5b90-a959-4522-bd2f-a78a6c77a204"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "fbecde50-07d6-467b-bfa7-e253cd672863",
            "name": "Positive Testing",
            "item": [
              {
                "id": "3d48ad4d-7787-43f9-8ec9-c09aa737f9b1",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "208ea6a4-2a14-4bf6-b89b-313026f18044",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "5e3ce47b-9a03-4b0f-b4cd-45e22ac88ded"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e883774a-d140-46bc-94a7-5d660cbb360e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "cb581025-8a3f-455d-b3be-d1ddad4644c3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0e42961b-83f3-4a4e-a07d-5c08f6f50e66",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b101acc9-aca7-46d3-8f64-a65596004621"
            }
          }
        ]
      },
      {
        "id": "e62c70f2-6a8e-4c36-a541-7da5a3b1922c",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "d0a5fc82-e1ee-46fc-8dc5-caf31f93f79f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "61cdf678-e5cb-4fcf-9b4c-0665b9315db6",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "e87459c8-be59-42e2-ac68-2e2c1c763816",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fffc7a14-dd8b-47b6-9046-8d431f7e53af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e09478f-cbf2-45f5-98e5-695f673aa722"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfcd2359-18fc-4098-a586-e12794ae5597",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "529747aa-cbc5-4359-a339-6318c007dc6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "695df2fd-91d7-47a2-9388-013d65d29e88",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ebdac14-b3d2-4601-825c-3c675e4832a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab2cc6e4-327b-405c-8ec9-5fb16e54a2dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6fb3c19-ee6d-431d-b5a5-0479aab6c502",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "184f4e6e-3e9e-43ee-97ee-78933cd437c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bc16cd8-2c64-41e1-a8b8-16fdb81b9717",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a1a545e-086c-4fd3-9252-2b61f5cc627b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63651037-db5d-4fa1-a5f2-b73400f86a0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11ccdc88-8d3e-431f-92ea-50541d135b4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "84706b23-2ebd-4ae8-93b6-c4a67a5f31c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46fe3e53-3cdc-462b-88fc-837f2c44dbab",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d9ce80e-41d9-4745-85e3-33fb4c070288",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1299d940-5c7a-4b4f-8393-a0fe9a1305a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63a19e34-3189-4675-a6aa-d11534b04520",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "727965f0-4ed9-447b-83c4-9c06be141fa3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb9cb45f-0897-49c9-8ae3-3c5734ed24f9",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b3d191d-d0e0-4f19-8e41-efca7e99b875",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7975ecf1-a803-478c-bb9c-10a05d73cb24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bda652e6-6358-4cce-9364-743a06dcc100",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b583c5d0-aa75-4fd6-9787-183130337c39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3947145-3e3d-4f98-8a98-369685abdbcc",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de5ddbac-6e05-44bc-be8b-2e361fdea149",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25676f17-0e2c-4403-9aa9-5ec5c0d3ccaa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9d04fe4-5b13-405a-9cb1-ded3fb9e7967",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "51ac02b4-6b54-44aa-ba2a-5f6c6203afc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc0a1150-ba17-447c-8ff4-2f1a043225d7",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68030f8d-357f-4bc8-bae5-ac59990b6673",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9cb6cf9-c1ba-4758-b8b1-58c2867a6266"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e5b6864-de69-4348-9ff1-05da0633bbc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9952cfbe-bb33-4356-8e13-74725bfb5bda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c427b10-7c61-4c6a-8938-2319cb8161c3",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1020d00-4952-4e3d-8a92-eed509101e6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0fbbaf27-8a03-4c14-b918-d0498fd5a938"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "438495dd-93d8-4869-951a-4645efabe476",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5a2fe26d-8da8-4f5b-9f8e-e49b455d40e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e26fc9d-f05d-4432-a255-87124e07de34",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f3eb578-4950-4738-adfc-a296e19b8781",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0e264f0-8261-43d3-85de-ba74acb12d00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9281415-bb28-4bfe-882f-3860b68d75b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ce1af533-f8c5-48b2-8d47-be3ada89c075"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b566cd1a-87ed-4c20-ba95-d7acdf2e784a",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e44d1365-0617-4d7c-b971-f75585c47f3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c68357d8-db0a-46c4-aca5-61f71daccd01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43081c2e-1bd2-48d7-acbf-86d63bfd4c15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7f1267c1-9f1c-4e0a-95ed-a4bbe00c268e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56356df6-71d1-4991-abd4-be24248c27f9",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9860788e-9176-4ff6-84f1-4bb8b89bae04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45db1e06-1dbc-4187-966f-599cd9bcf459"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "982f4c68-59da-4d4e-944a-a69de04bf06c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "41ac53c4-8ef8-416c-955d-df153fdb2f36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52cb59f7-0c26-413b-a76d-dcec50d6544b",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91074605-a258-4782-87fb-38d1489ac461",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3eca6d05-6821-41a1-b5a6-a9b224e38bc6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97762903-9815-4167-a6c1-18632cf28e43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ce4e9cb7-2c98-484c-9c6f-6b23ec40eba1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bf73fec-f476-4c5e-a92d-f92017acb025",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "395c5e85-165d-42ea-b695-f684b0a2966a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41571c62-2164-44f5-84b3-a3b2cffde7c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "559c904b-1013-4d71-87f2-b5ef7962da28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "49c70cb3-bcf1-4cfa-bf2a-2cadf32095f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6fab9ce-75e2-4ac3-b3b1-74415f985cbb",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad3abca8-9083-4983-93bf-ab69f649cf5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2dbb273a-8a4a-416f-8b12-0e768103b8ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1374022-2cd8-461f-894c-6a63846f5468",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b70111f8-41d1-4e2c-8b14-64fac5e72397"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fe439f1-4015-448b-b040-c25c2632b734",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6f85454-50ef-4f11-b108-16d4e26fb2d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04cfe7fa-b899-4d73-aec0-b08a25c26147"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "910124cb-3534-4ae0-99a0-4a5aee72cf0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4e8522e8-05a0-4e6e-82f8-f9a31ab831e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36fd06cd-9081-4675-8bf3-075c84595c93",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d771885d-1682-46e2-b122-506a746028f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5dbc2c69-6fb6-4ced-8368-7cadb219f04d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad4a24c7-5481-4d04-81b7-71a1b0e6ac21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "313c68f9-1fdc-4112-9313-313b5eb9431e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83f757f6-7f9b-4051-8f93-65ee60d1401f",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80155583-00e7-450f-9c95-18fc6261c56b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1a1d835-2a84-4e38-b673-405dcd6551d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d1f02c4-d09c-472f-a478-882487f28957",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0c910fc7-98e7-48cb-b741-b43e83c48b0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e45fb2c-175a-4ef9-a925-9ccfdf37dd58",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01615eb8-e983-4cdb-a180-6f99d6eb11be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a8cc72e-52c1-4d3e-86bf-f437072a29ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1fa517b-bfca-4cee-8fe2-894d9cb1d471",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "e5e8a7b2-254d-483f-8c7a-2d583f58ce36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c3b6925-9d88-483c-8c5d-7926f07cf19f",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0a94fe2-defd-4bd5-9b89-2ec043476a7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6fdc4b93-01a3-49af-a4e5-fcebdd9d234f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3aa492f3-83ed-45a2-9c42-aaeb27f7ed72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "35ffe9c0-7265-454c-a327-32d83e85eb65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "653952f6-797c-4518-9a80-32e0fbdd3df3",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13d0c202-fba2-437c-b6e8-4d4fd3e4af5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bac23137-7580-463d-a581-2e7647f60c67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "778a1e15-8c5c-47d3-bb57-437e602e7c64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4a2ab16e-2aaf-4009-b115-b23254de6d2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afb0f17c-55c5-4d8d-8e4b-39084e97329a",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad0c2165-00b7-4c6e-b75e-8fe8c27d97de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4be80d67-f616-4444-b1f0-8eaf9583d88c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06c1e7ad-8e9f-4e3b-a15a-1a8bae981450",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6f23ae9a-82d8-49dc-85e7-7aca24a8b474"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0b3ee9a-700f-49d8-9855-4812684dda17",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e3189c2-92b8-4325-9184-a28f316043a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f0c8681-2ff3-4ae4-b606-9f47686c7605"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d785deb-cf10-4b2c-b99f-87e2cfc0b577",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3860e72a-0d93-4e03-8c78-a637f57557a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a26be9e-1d33-4098-b7cd-9bdc50e95ef0",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "015d3355-6b0a-4e17-9a6c-b1b69aff4403",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c415a9f-bdf9-457f-b736-c72d29ac1699"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "799e6669-edf2-447a-a542-8ebd5952af4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ae01eee4-dd15-4ac7-b4b1-937fb000bf61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d983abb5-e84d-4f63-92c9-6086f284290f",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4a0f3cd-e39f-4339-bfd0-0d5dc97f2718",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0fefaee9-e813-4dc0-9575-20daa87c402e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae1be5a0-0ae7-4988-9345-28c8f018a025",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "4161d7ff-2817-4c5e-b958-7f5151a666aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1ca37bd-497e-43f7-9e57-10f1bba6b028",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "429fe2db-a452-44d6-9260-d123d795957a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "135edc8e-6fbb-436b-b1d7-bda3618a2880"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16ad1ccf-cf5d-407e-8f15-3ac4db4b9863",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "73eefa99-fc91-41ad-ad99-55f8b3983cb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a2de0ff-41e1-43aa-8724-2b3b073fcdd7",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1ed55c4-f968-489e-a459-9422fd4e5867",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c464648a-d437-401c-a1c5-fb254dde57af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff9a1485-2467-45d8-a1fa-5e6d13f10bb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7c0fef2e-27c1-4db8-a912-d7e07d2f639b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3da838b7-254c-462a-8019-0c68e8690b76",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3342241-ff3d-44eb-837f-b13f4fd48f14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68623727-9bee-4cbd-93ee-a6f650b3fd7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a89d056-a709-44b5-a6e5-d6eecdbe5d42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "67aad1ca-302b-4be0-a2d6-945c139f6206"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33f9bc9a-1c00-4676-9045-dac9921c07f6",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a9636c4-8b59-4dad-952c-e8eb6474785c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e456f98-e251-4fc5-a35d-5a687877d9c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd5680bd-93c3-449b-9ad3-2e707256310f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d87f8598-e472-4cae-a730-e57f4b9c82b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fb2f832-ed65-4579-9887-ca91cd9921df",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3d173df-a46e-4e70-a5f8-a46dbb3ef9e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57c30da6-95c0-4c55-84c7-3cc9ecbe8663"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efa31c99-8780-4395-9274-91aa2ae6ee99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "00b4e67b-0748-459f-b762-0cd4d4cc010b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5c5a6ce-4fea-44e0-9c94-f1ce935ec26e",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4d90fff-b36c-4cbd-b040-6f4b5f1af920",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5bd6cab0-9a40-421c-8133-05d9db63c389"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7634c2b6-dfcb-4624-9ff7-f7791c8927ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "92d8cc77-b7d0-45e6-8f41-4babb94c03d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4e08b02-bda8-4c9f-84d7-383c837b0872",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4256dc73-598a-4417-996b-9532fe53b3a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68e503c6-324e-41bf-8851-af489baad391"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d9445fb-56d5-4d89-a9f4-e688d54482f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "7e6106a6-06a5-4bfa-87eb-117433d109b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e902e07-e305-4a3c-b3a4-415f9b38b523",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12f79364-f1c0-4992-8350-daacbd11405f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc39c66a-fcff-40bb-b467-6faeb368a43b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51cd94ca-dd6a-4c82-ac5b-4eed2aab8ef0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c0d4b442-f1cb-45ba-8cd8-3a8a29a7456f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "978fdd93-8ca6-4925-a46a-49686fe72cb6",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aead3797-97e9-4355-8c4b-736bab70d5f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d86d73b1-c5e5-4e9f-bcef-30671a59e3a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3f4bbcc-ac4b-4e36-ac63-4dfd0ca4d8f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a28f7430-e5f1-4290-9d3e-f81dec8eff25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7652b680-cc33-4a3a-a0c6-b39df90ea129",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bb8c5b8-137f-4dac-ab37-96d6625ed9ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abdb2250-3d63-4d38-af21-603969c3921d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f7f12c2-0dc6-447d-a091-9b077c2df4fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bc4b1310-36d2-46fd-90c7-8abdf9354a02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3a57ecb-857c-41e6-8d23-a7f23394c8b3",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "176a21a1-13ba-4b30-9a92-b2d7bba3971f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab48b482-d93a-49c4-a937-d036b6b83c20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df824586-18ca-4f9e-84c7-b6bc12033c0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "fbd2af5c-aad1-48fc-bdaa-7fa4f13a1646"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc545ba6-25a8-48bd-ba49-fa59b7e07f28",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32eca4eb-7c4c-4afa-8cc0-80b7d5e99d94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d45539c-586c-4cd7-9487-654329e5ce1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b371c9f-d7ae-4f76-bb95-b3951007395f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9484d576-7ec8-4aea-82b0-352580a1786c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f599502-55d4-4dad-bc4e-2bbda5e77dd2",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc99c2b3-046d-4fb2-b366-77a336dbaf01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1706241e-6465-4fc3-9dd9-80146846226b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75af914f-6650-4fc0-b1a8-32e29e080019",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a209ac82-a278-49ea-9e31-c0bcc8bd514f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc02c19c-69c9-47d7-93d8-7fc110a979ad",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a960ac10-41a2-41e0-8de5-3e446556c964",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ef0a275-a624-4efc-aced-39419ea2018c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "137a7512-3a65-480d-b627-99e929a783bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "27fb77f8-1090-4218-8082-72871160f247"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a04e16a4-e5e9-457a-bd73-c20f33e3a75b",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b5cc85e-7a52-456c-b5fd-484cbf30f335",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6fe1af8b-61de-4163-bb75-ac6c0a8a430c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be1811ae-0697-4db2-9463-15265849b6cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "2c8fa8e0-63ab-4783-a375-c0f2bff9ad68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f9b14ee-3b9d-43f7-ba87-a1152719bb60",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b36b6b08-0055-4e22-8e5d-904a163a13a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ff7719e-2f49-4cc4-87f8-713a413476d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ac7ab5c-5239-4f99-a9e4-0e1f690bac16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "c73017f7-408e-4e8a-9f10-e0366ef4cf65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03ce2589-f29b-45f7-97e7-e1575880e067",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b29e0a08-bc77-45a2-93db-b1eec1309b5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb3561b8-176b-4115-82a6-14cb46a3f04a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0872c754-edd2-485d-97c0-5d92c6f07bc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "e973c9eb-3552-41e2-8050-aa3181e588c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b49b5876-3c72-4555-9ad3-5985b86bf403",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49c170fa-ea56-4159-8d88-450500a04ed3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57b17c6d-7041-4a70-8477-895556ca4721"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffd88f23-3b41-4b08-ba1d-138f44c5032a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "a872ca4e-d4c1-48d6-af43-29fea1b692b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7920cab-4e92-45dc-9a14-28672589155c",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc2c35dd-0636-4cce-b3d7-d5d28ef717be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "043d5fd4-f563-427e-bdf0-6a0ea6eb8b99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9e3d0fc-c2dc-405c-9102-5f52572013cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "c1b0890b-8940-41f5-97bb-97960ad30588"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6266987c-6ba0-4dab-a781-7d3b29d7ad6c",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "181447cd-a794-4678-9312-e55ac861c89f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2cfc3ba8-99bf-4eae-ada7-f8c980e3c618"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75c11a26-6f2b-48ed-a6d6-d571cbcddd08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "e9a59c0b-089c-422d-8d6d-a880d7493c13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cffc185d-46af-44d1-a1ed-a9a4d3510287",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0e88bf5-297d-4f53-9567-9be81933c2aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f610013e-517e-40f4-bee4-b57cd0603eeb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8335aa8-9946-43d1-9781-47887bbb965f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f103f925-c389-4e69-be69-db94feed53c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "721f7870-7931-4471-8a6b-547c8376e736",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb2fa261-4faf-4f59-963d-e4a7309bf501",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7392346-6441-4798-ad07-e853b69c7cc8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03527f45-94d5-4166-a25e-2225a4f40392",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "02bce6ee-f23c-4e36-91a5-895e7a575741"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb9f4d17-5316-4ff6-a1ef-2cd6e2dc15b9",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68acafc3-c77d-4941-bc11-754b48a29b73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88cc42ff-e730-425b-9d9f-a2a8efdd13c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cd6f5b2-074f-4e7c-a1a1-fefc246f3410",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5691b989-3906-4db9-91ab-1aceb467e8a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c929b1dd-e5f0-425f-a52f-320df7acfa1d",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9dbaa2f-05b0-4723-8ea5-35ea52af37e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0806922-fb7b-4b64-9c95-b35acb1bbb11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aca67cdf-39f1-4018-82a9-035172d857fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "61c56e8b-cf89-4730-9379-0d6341855566"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e811e05c-f45f-4c18-b009-1f37315692cd",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "282caa88-7f06-4c2d-aa59-6f0e5a1c28f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "782572c8-c816-4f77-846c-15b820c60406"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77f719a0-6d85-4f02-b548-d944ee41776d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d7a6ca6b-7441-447a-a300-8c8656ffc158"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1e90e70-2256-4875-aa5d-dd7a0259796e",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13a1da49-76d6-491a-a81b-436be845d2fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf3c7303-c918-4dbf-aedd-9fdd8d34d5c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c2b91e2-b0fe-4fb9-aaaf-704d47c83279",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ecab091f-53ed-419c-913a-4e1e8eac3860"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1aace2d7-3e2e-48e3-ae9b-28dfb4e763ad",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b39efa5-6dbe-4166-a54e-7ba234d9c221",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8027c3f6-7c42-437f-b442-9a0e36cced4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b9d6664-037f-4ebf-a254-1f4908c06ae8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "86a58842-d6f0-4878-9097-6c6b268d6bfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32d4134b-27bf-4df4-9f34-82df16029bbf",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "005b40dc-1c96-4faf-ad52-c3a54216a27b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64f13434-3d1e-49af-9327-f88697a709f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ae9ac20-7d49-4787-95b5-5ea489de80df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "902cfea5-2fd6-4df8-acd9-6f67b7dc6a10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4931b46f-e79f-4174-b11f-18cf4629eea0",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df18f68c-0d31-4514-9a31-d445dcc188d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1be9a694-f1d5-4be3-9339-64e9cb2a5458"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e25d726-fd94-4e67-b1c9-3c5ea6af9669",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5d7cc333-42ec-4fbf-94ac-eb20fe90c7cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98adf749-7f9d-4852-8621-d5631558d9c8",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d8036f2-189d-4bac-8cdf-3598eb2e926a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "434493cf-077d-4621-a997-e7aa792b32df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07c821ff-fa07-4061-8554-f3010bd93805",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6d06d358-94f1-4b5e-91a3-005f0f3fe250"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19351125-c1ee-4704-a1fe-21b9c7731f29",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5166d6be-e1a5-4579-a219-9a343115c353",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d28d51f-c06a-49aa-8b35-74e15987d704"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db6f90ba-8323-4b81-a287-0aeb2a80cee8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d6598242-2da8-49db-97b2-761703494df5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86a30886-8127-4d08-ae7b-448e516763f4",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8500e4eb-3a1e-43e2-a4dd-5dee29951cad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "704bb410-d758-443a-b544-094213743ef0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e6d573e-adf0-4d77-b40b-f0c7677a4dfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "82fc4623-59c5-43f3-8c0f-c753fd0207df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "198fe8a2-1d9d-4a74-9da8-7092ac846572",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84e86be9-780e-4f6b-95d0-d424592e5a5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe918847-ac01-4752-b7b7-66bb8d36bf0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eae6077a-421f-47b9-881a-b6724d56cee8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "57ae62cf-12cf-465c-8f06-457ecbaa3b53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53562df4-2df5-44c8-8528-6c0210bc18ed",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3dd026f-c785-44f2-a6f6-4e1ab4c5b2b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d24d6f1-0fc4-4583-9c03-a7888d29c2ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5b9b73e-b7b6-4e95-ab90-fd7fc692bd01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "4143b029-3d56-4611-8575-9d326b538f81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a6437e2-ede7-43b5-b6de-17e250d6c3bc",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69cecbdf-3d0c-49c2-ab04-be8aa5b65f28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7b334ed-883c-4065-b7b1-e1561837f9b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d4fd03e-4f4b-43fe-a8ce-7870250d6d10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "3b06a8ea-5da9-4942-bcd4-534bc27a3395"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dddca609-5384-4e4b-ad08-9bc8b34ccff0",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da76e6f9-08b9-490b-9e06-d49369f69c98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8682fc42-e34c-4a5f-9a5e-b28fc538242b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6ee1951-7cd7-4195-bd4d-f2ba94500498",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "584b9e5d-f5d4-433f-b757-52f9ebeac4c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92a4decb-b0c2-403d-98be-8e5a21e2215b",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a00a660-d942-40ff-a7bc-b8a7dd5f993c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1eec547b-08f0-4b5a-aad1-fd85377ff622"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c02bea0-b0b3-424f-9fc4-90e363da7419",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "86bb1595-d20b-4a88-b9be-a0d82566207d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bc9ed90-283c-48e6-a4d6-81750e8e5847",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a214883d-bea1-4913-843c-724e3c76467a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "881e9c22-fc51-4110-92ff-68a90cf5db27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb42739e-9d62-4517-9646-119068bcd054",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "0f867062-fa38-45f1-a44d-064a5a885607"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b2c5ae2-4f91-4900-b586-3f6f2c868f52",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96599203-f793-4a32-a458-bd2d06590ff5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c949219-4f46-4562-9bb3-71c7b990b913"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67252ed5-fdb4-494a-a74f-251e2a120f9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "cbe97022-4713-4444-a9c1-5c0292b87d3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4221f755-129f-4dc0-b476-7d2a27d15e94",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20f16534-bbbb-471d-8d44-0e3966bb9b2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17ced02e-1add-4820-8426-fca64888d72c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "218efd06-6c13-448c-a697-e6cb0d2a1d92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a003a068-39f1-4504-831b-5d6908bf4877"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a85afe14-709e-47d6-abe2-d49240d85665",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbbed0cd-76d8-4357-9704-148b26489e7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1b6869d-7e8f-4a85-b7a3-54a2217afe4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "073c4040-b4cc-47a8-8081-0bd3fe636b16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6db1331e-eb40-4cf9-accd-fd2ed8a54a1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d732a46-6cf3-4956-a224-d80a7e39a75b",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a40ee3f0-a626-4542-b0ac-3a85147567c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea547d59-1eff-4812-bbac-6abf0f413dfa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84d06a88-4790-4f0c-b5cf-9afaa42b0522",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b70baa4f-893f-42bb-b177-62e45ea4f70a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80a92fac-a62f-4b37-8139-cb2445dc35a0",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ac6d3bd-6a4f-4375-a01e-492583c22aa7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "519d1c14-0c50-47e0-b421-3bb1cca3332d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "970e0312-da7e-45ba-a454-2a493c8760e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3bfcca5e-de21-4b9e-8880-ac42744052e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "855651f0-01c5-4f3f-bf07-b592e0465413",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f28b6984-977d-491f-a00a-11630d6e77b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4926d01c-1e56-4c82-b440-d931046d8bf9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "889107ed-5771-4a27-8973-bbc705469b81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "c91d3928-b1e4-4303-80c2-f38d7de5395e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f100890-831c-429e-a0d7-85dbb2e69b96",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33352051-341a-4f53-84d6-b4eaa6316862",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c94f8c9-88b9-43aa-b6e2-daac134a47a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a007027c-7511-4de2-855e-2660fbca68ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "3dd38939-1201-4f1d-8d73-0883c486ca9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "047ba676-66c9-4e6f-b115-a9ac6ad56022",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fb2f34a-718e-4384-9e1b-2b5ce8d49ba1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93000328-f43f-4870-9f1a-02251e91fc21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21ea925c-bb63-4ab1-b034-011f8c199e19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7d642aef-9623-4c73-84e2-48178c7212e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "669a6508-d3d6-4994-b167-37c245a43f44",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44af7161-5927-486c-b316-ece84c9288dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4dd0a0b-8802-48ec-ac18-4853ac2bafc3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40ed0cd5-bb7d-4620-83bf-eebf9755cd28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "cfedb2c5-2418-40fe-b39c-4026061cfc98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01938d9e-3646-4a38-a56a-715300eca4d8",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efa67f82-e416-4755-9750-ab23b166c162",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e4f41d3-6aab-4f3c-b543-128760ddba9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "508311eb-82c2-4747-bc5d-679001d79cde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e1069124-4bef-4615-93be-2ba9d34f47f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef96dc1b-cc1c-45f9-a930-f70f7d879ba4",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1237bda-d69a-4711-8bc9-9144feabdabe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68359dcd-7535-4fe5-a7fe-4f19542daf59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4075bce2-da18-4882-a49a-c23cde89b080",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "fc935b79-a005-49aa-a9d4-b975c15d411c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2364c89-e521-4d51-ae6c-0bf9176a72be",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73542ec3-16ad-4c8a-b388-4b445674072a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab0d464d-a19f-45be-a508-374be6f5b44d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95ff139f-51d4-4134-b167-6c9bc18f0006",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6706c4fd-3993-46eb-9f47-6611d9d14d00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0f0311d-a192-4113-9e5d-529fde467fe1",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4870f8a6-688b-4add-8179-55014a75bbaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b842fc9-3f21-4c53-9c23-9d1bab450610"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18a57604-4c4f-4a4d-96a8-9f11850cddbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "db479999-3322-479d-b9ef-120828d10f7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a78dd384-02b3-44da-a042-3b23b83d94ae",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f641b32-f0f2-4b62-929c-97f2d309d13a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17ca23a6-1d20-4535-9327-1fa5a004f4c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4f57af9-524e-41ac-93f9-b2e170b2b948",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c5164900-bdce-4023-bace-64929b6d93be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f0b6e61-8437-4cb9-94fb-9eb35ed0d45b",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "192c4c1c-b787-4655-880f-b459dd05f132",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "959e5305-c387-4182-92e6-5989d8ae68a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94823bad-a2a0-409a-9de0-62c82b28e7c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5bf974e2-8b14-4040-973f-fbbc0d3dbf31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4d83f93-ba85-4d22-9fe2-e1d50e27efba",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5cf4096-daee-42bc-97d4-bbe0ea0d7012",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7314093-6f40-4ee3-b4e8-b9a07a86380a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7826880c-41ab-4ab1-b208-a6fcd0e5b5b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "029b89e7-f278-460c-8d23-a4a5bb2a346a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d724f0c9-ecf3-4149-973f-dc8bbfe86f7d",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "094fe2c9-475d-4379-891e-ff3db0b7a530",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d635a0b-ed9c-4b22-b23b-5504dfb398d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "714d4ca0-8fc9-48b5-943e-66f53c4f92f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e303ec61-44bc-437d-b9df-4612fa9133f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cee5605-6dd7-426b-abed-99936217a587",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d60c24a-cab4-421d-b21f-67c4bac6a538",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "957fc588-f024-41eb-b6b6-50863497f060"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03655cef-546e-4497-9f5b-cff4a4391ba6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e4d7767b-b918-4272-8182-269a0ee62dd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95320da6-8dc7-43dc-a1aa-4377160419e3",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d16cd8cc-1724-4ea3-bb89-eb6f5f8bf192",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "663370c2-5b4a-48ba-9ca3-68db975e16c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdf94344-194b-4e14-b275-1532e9a36dc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "c51f94cc-3382-41ab-b01c-8b7917467d00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6397fda-4a85-4344-a4f5-3c9db66a04b2",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "167621f3-fa87-405a-9a3f-22403d9f33ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef6e2c15-67db-4ede-b70d-aa9039e16385"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8d47c43-7e68-4454-9cfd-f3a5a45f93a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "c97d4cf5-78b2-4b9e-a7f5-64064df74160"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdf8992c-e27d-4ffc-b278-2bf264e3ce71",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "acb7a582-69e0-4d47-bc92-9af2196734fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e763f08-bc84-46e5-9cde-c673d04576d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b835472-28ee-4035-a542-08ccf1923df4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "f4e4dc85-0920-4012-9837-79b515b770a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29063245-b325-487d-9af6-ef29d2f8a74f",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c0edf15-5461-4442-8c53-d5a3b4f17575",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f329895-6888-4365-bcc1-799e29a5056c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d57565db-c8d0-418a-8a56-37117864a43d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "8b54bcda-a5d7-4051-ba58-ac108080bd46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a11e67ff-728e-45e3-a82b-ee2b75ce5a2e",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97593cbc-8c3a-4009-865d-ebbb4970bb6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35eaa1ed-8a60-4a73-87fb-cc35c670db62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fd545e1-dc4b-487e-ae0b-031adf3aad25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "1ecaede4-c85b-4c24-b942-75bc02b70151"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7b81858-684b-4b9b-b1d5-193e3794b23b",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9c2e504-8bd4-434c-a4a9-4f9e5e348bef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "489d60d5-3bea-4caf-996b-7067a101944b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59faef19-2b20-4f87-b0e6-b9b952408a0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "b15f9af2-7fc9-43b4-b832-36da1d46cadb"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f84cb842-c64f-47e1-a850-fbc00d51ffee",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "32c2d053-f98f-4a83-a73e-a39ed26a3bb9",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "975fc06a-d68f-465b-bc77-3ecce717ffd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "527b8ae9-a4ab-426e-99e1-b77432d6b3bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6272d4e-a944-4261-ad17-23ef3bbb8e69",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "28c9f72c-77f5-4550-83e4-7cbf0faecf74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14ec9b63-119e-413e-9846-be358f66ece8",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dc949c4-12c7-4f6e-bc9a-5ca50912d0b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ebb067af-f223-4a36-b76e-c8bf61a5e373"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1137221d-5cd9-489d-9070-9e4d4170091a",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "6115550e-4cce-48b8-a94b-23f1313cf5bc"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b08bbad7-1f8f-4e59-b184-cc68c13918e3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d80e3b56-fedd-49e1-80c4-7375acf9a7a6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "04f7deb9-98de-4622-9a14-b935e35f2fd7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4203f7d6-a72a-4ae2-9842-ad14a0c58631"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "82b3337b-1396-47c6-9194-e76d23d2cf8f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "57377ee5-5c1a-4b14-bc5a-b1cbf05db324"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "1d5fb252-2cc0-4ec2-a2df-fe07cf721a24",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "dd651c2c-f290-4236-ba14-acf239885020"
                }
              }
            ]
          },
          {
            "id": "20295345-f136-4383-8ab0-31efb825c615",
            "name": "Positive Testing",
            "item": [
              {
                "id": "9035c53e-0227-4135-b456-88db15425637",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8d1bdd3c-3205-4f2a-8ed5-fd1ac23bc5d7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json();",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json();",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuance_date\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json();",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "12619b93-a382-4757-b2d2-d73b9ea986e9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "58cb5b12-66d3-427f-afe2-ab4fa4a732bf",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "8801934a-448a-4eaa-9cf7-bd9214c6d207"
                    }
                  }
                ]
              },
              {
                "id": "e1ae0017-d8ed-4e69-b475-1e67826ec4fc",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a2ea88de-7f4d-4289-a427-dec02b7bed1f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "47395f6c-907d-4cec-ac74-f02683fbcfa1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4d700521-9926-42ec-ac3d-b20bf2c03d46",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.id is optional",
                        "rawBody.credential.id = pm.variables.get(\"credential_id\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "b2c58883-fbca-4193-b33f-d8302b371b66"
                    }
                  }
                ]
              },
              {
                "id": "93014e6d-2920-4ff5-9359-c7f0840c5e22",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7358903d-d629-4882-a68f-696d75519aa3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a9f5cf33-4a53-4dbe-8511-afc702e8aa6d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "80221b2b-47d9-46ab-8074-418459b000d7",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.issuer can be an object with required 'id' element",
                        "rawBody.credential.issuer = {\"id\": pm.variables.get(\"credential_issuer_id\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "9dad2a4e-d678-4f4d-a6c0-c70a4c96d42e"
                    }
                  }
                ]
              },
              {
                "id": "47cf3b6b-3336-4382-86f0-aee437096925",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0d600e16-7ea5-4dff-af15-2c67382df456",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credential_subject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f3a81b68-15da-4f47-b7a5-68f359296914"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "32fcb8bf-d4e7-442e-8cb0-653c0cda7ac5",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.credentialSubject can be an object with optional 'id' element",
                        "rawBody.credential.credentialSubject = {\"id\": pm.variables.get(\"credential_subject\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "e66126a1-358e-43e6-92d1-ee3a781347b3"
                    }
                  }
                ]
              },
              {
                "id": "4489f515-9f3a-49e4-b0ef-a437067fa16a",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8ccabaf6-6a0f-40c6-bbc8-959596117bef",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a512c824-0976-4fdd-97dc-060e0ba0f0d4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6bd4a4d0-0ef5-45d4-9bf2-7f952d1af488",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.created can be an optional string value",
                        "rawBody.options.created = \"an arbitrary string\";",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "c354448c-d5b2-4658-8489-304741ad0a84"
                    }
                  }
                ]
              },
              {
                "id": "82cf4a4c-3226-490a-bc3d-bb4e7dde66fa",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "19e36304-1c87-494f-a16c-a76acb6387b7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "53fad2fa-48d6-49c6-ac84-31300d8cf094"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2320f999-3234-43bf-8d77-e65a6442ffd9",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus can be an optional object",
                        "rawBody.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "d3c7b60b-1296-4a0e-9651-37df68e46284"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "618107f4-6532-4785-8fa8-9ff513fc9abd",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "76bad930-a99f-41f0-8f05-f238c1aa3bc4"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "4791d063-1d23-44a6-9784-4e867e9877ab",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "af17762c-4f78-4320-965d-e1bf4baf3583"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "da1afc70-2f03-4293-ba32-7bcc5c2d6db4",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "ba025fcf-7135-4de3-860c-7b8d6125ee53"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e004d43a-eb36-4a72-9daa-d609148ca237",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f3f083ae-ed2e-4de9-8f4e-7ac34a92342b"
            }
          }
        ]
      },
      {
        "id": "c45a1bac-12b4-47a6-82d6-77c1f632bd9e",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "c3ae6706-7f13-46fc-a99c-9dc35f955842",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ae1fd21e-dbc1-4a6e-8df1-d5004c12ac2a",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "06bf6399-361f-4f5c-b1a7-52601038b8c9",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "928d15b5-f3db-4c16-bb95-9576fd173f9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9cc6d72-ab99-4b1a-a861-ad0101356227"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a434fb47-ab17-4732-9f2c-c4452e9133b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "543f9d3d-1520-41f7-b2f3-4882d813971f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca5ab59f-e5c3-4122-8bb5-9e5111e04772",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d40a3db1-96d8-483e-bbe7-adb45c2908df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7e74deb-4aea-435b-8b95-0392ea309f1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d22ff1e-01c8-4f99-b863-3870633bf145",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b43c0cd0-7fd2-470c-843e-84614962d820"
                        }
                      }
                    ]
                  },
                  {
                    "id": "665bd1b0-d458-4099-8ae4-e15eb1d84aef",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "906e42c4-0465-46eb-82bd-41ca327d6aff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56bdcfbf-f0d7-4bc9-b72b-1fd123251e52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2b09f07-61af-4e41-b156-2eff6edf40ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "29f2acd8-bbfd-4ce8-b107-eacc93ab661d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cac4a60-36c3-46ab-a0d5-287346c32562",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c7e3bed-2e90-4ff7-b174-9bc8bedc19fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90a12d8b-030b-4ca4-8053-b40c8940f7c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b10bc02b-cdbb-4172-9f8b-8e79f09d6d1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3bb10933-ad3e-49f7-ac6d-095c3df18c26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f42dfe0-a838-414b-a1d3-6dbbefc3464b",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "013d1a27-8f07-4b60-937c-f3ed30b2778e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8609abd5-44fc-4737-b8a7-160ede3dcb6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75f986ca-4fbc-4ce3-b171-fff48e754960",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8fb9720e-618e-4d30-8770-3d9be981afac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a67e12ed-b75c-4100-8d89-3f0dee7a1aa0",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15fc00ac-9364-4bc5-8a6f-09a7f6d24e52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7de3e718-acd8-41d5-a044-f97b594c890b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48b9280b-2913-4d97-8c00-3da8b83b6fed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6856e829-4dfb-4094-bb98-f74641d4d3b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9837dcc-c257-4257-8f4f-4d019045c209",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe70be18-f39f-4fb7-92ee-bb3878932722",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d632566-be7b-4a23-9c3e-d7eb873f44ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01aedd97-f97a-4874-998c-7a3ee2ed949b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "72486cbf-a103-4680-9761-ab376938044a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f48f943-379f-452f-b9cf-b8ce3e690315",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "192f857c-aa6a-45e3-800c-5532a9ec2901",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fedcf4b1-aa4f-4736-a108-552310ed7315"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9d73f09-e525-488e-89ee-0f1c033337cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5bc68a37-271e-41c2-ab49-7a9e35b5f8b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "981ae14f-f9ab-475d-a9cb-7eee91da3d4c",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8f1dd36-8614-4424-a197-04de8702bd83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a586303a-8aa4-4d79-8bda-f12901b36953"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92058776-05e0-4cbe-b6ff-0cd533001b60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "cb7228ab-74eb-41ec-b49c-0a626da91c51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60576898-7e29-4988-9668-31db1a4d3058",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d1077ca-3434-4888-8838-f7a0799e940f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46b4015f-6b4e-4f38-a466-1d12110179bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee120164-4007-4226-a088-a103c393d51c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "98d630bc-cadb-42de-a027-71b9c2cbb703"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e247cc38-a8e1-49cf-9d39-77ff3c96f7cf",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "752f823a-0cbd-4a00-99de-021e8808995b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e4719b5-be2b-4bee-904a-2fd9112cf265"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b24be6d4-a138-42c6-915a-9ccd398bec88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "e3970129-a20f-47c9-aac7-2fb608498d96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b690f31-b97a-4284-820e-5ff5355f933d",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3721eca7-9f7f-4897-bf3b-b81f329287aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e591667-7944-4c50-bab9-4337987cee42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c47b3815-4e75-4fb2-a61e-928f5561dd0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "209046ee-0cef-47a8-bf48-6b27f30befcf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12587a97-bb5e-420b-a493-ea2dab4e61f7",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d399db5-da6b-4c19-a48d-b1c1dd3db8c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4df00722-ebf2-4512-a6c7-8c543b09512e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ae036f1-7e16-46ee-8c25-bfd287f0b59b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f1146baa-4002-4ada-8cd2-491f3016724e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa7f008f-423a-4943-aeb7-f303f0cde71b",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c048107f-b49e-4544-b11a-5a6105238aa1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f708b14f-5e52-4b9c-8ec7-e6d72cec7592"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c0a0d99-5ed1-4a18-9f16-8892a51d169b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "4daeb882-26db-4014-860c-301b86133c89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fd53544-6e47-41b8-98b7-2c5ba5fc2d77",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b150d1f5-e340-401e-b348-c0218c90e3a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f155f5a-8277-42ef-9c56-b0cb6ab59f66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ff6743d-61ba-421d-9541-61eb24c50581",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "51780931-3928-4301-a883-e6953f08b988"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55d6b5ad-03c5-4f27-a15f-12b7dd27d8e9",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "455a5d72-eaf8-4b13-b922-29dca650bb64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce7c2960-c14a-4f90-9f2e-6137ca411c21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "069411fc-00d5-4623-9135-45fbbb8563d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "c49eb7f9-420d-4b84-b2ae-bb11a2ff24ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2e1ba88-5c3f-4888-a082-5ada2f5d163c",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "477c6f84-e333-43d9-8e22-0269038d2986",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1af082d7-5950-4f77-bb96-9f364daa55af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58395579-f418-43ff-af1b-03df5473c39b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "f92f0534-e1e9-412d-be1c-37dc97d8c5c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "678a7a17-7f12-4d42-812c-f03a29cb7d14",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a777fc1-9422-47a5-b9df-85397f1075d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67928553-da9c-4255-824d-cd29de38a61a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46fbb465-f562-4e2b-ab6b-bc06af855ca6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "34ef1580-c7be-4609-b344-387d07b7dd61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21dba9b7-24b5-4237-bc9f-ff140614433e",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa7ebc51-636e-4997-930f-fa84389f31e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90a81f4c-073b-419a-8e76-97a05fe5dd9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c330c8f4-e737-41de-9d0a-5fb90dd47fcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b41f26ae-0de0-49c6-815c-4aff1d826369"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59c5cd74-6119-4820-8cea-96319228bc74",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3009cea8-f6a4-4102-8b39-0b87fa6d1343",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ec6e7c1-777b-471b-ada3-9b290a329dda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3137b6c8-bad3-493d-9a5e-69972449c44b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ccc01929-a7ad-44c2-ad42-f9e916235652"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07ff6cf9-60ec-4ced-9fac-ec8511f83f49",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7fa48b1-96b6-405f-97f4-9506fdb92695",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d14093c9-16ab-4c62-834c-639ffb00f3fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ecd6d74-066f-40bf-9da6-7a3c2e17522b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "00528bc5-d86a-46a2-849b-9f5a256b9440"
                        }
                      }
                    ]
                  },
                  {
                    "id": "354e7da1-657f-41ae-8498-ae1cfd82b370",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0f0fa8e-ca3c-4dc4-b028-e0ec1455e129",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e871f5c5-d73e-4717-8090-17513ba1718d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c835d43-a76c-412f-8391-38502f27e141",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "745c45ea-43ef-4642-b2c1-fd0397f01c9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "720ce7c1-8009-45a3-a21d-92442f0c919e",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89b630b6-30d7-4e37-b3a8-6931ddb3960a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "988d4d19-6490-4b97-904a-77358a855c1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0022e3e-bc93-4a8a-b73d-22f71624a19e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bfa4aa2f-7d0a-471a-9077-12c18fb9e681"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9ab2c5f-0669-4e7e-9334-707ad6af74d2",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e183918-2a5f-46f5-9ccf-9288438823b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94b388e7-83f8-497d-839a-aff0788bf8cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77771e5a-356a-4c60-838c-f038256636d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "287b5bd9-efe3-4919-927d-2375ff6eeb61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d79a7f7-1fbc-4a75-9eb3-21b623f833dc",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "972a82ab-71f2-48b5-9c49-0c476a5e1369",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "142e9674-d59c-4ebb-91cf-7a1bc0e98de4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a9e5f0e-6bf3-467a-9bc7-1c7aa4e4c0e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "480935bb-6e35-4111-85f8-ee79b518739c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f854ac6-754d-422c-bcaf-f16416f08aa8",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a58b013b-9b01-4331-b4c8-a5bc638b8bae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00a2f46f-30c3-4df8-9d34-0a439e2f1b8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca22d7c6-ac40-45f4-8dff-63efbcf0e4c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "85ce22d9-2da7-43d9-8cfb-7796091f4706"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ced3c6e-cc62-46ab-8fa9-fe2437201bf7",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fccc5302-34bb-4545-b22e-b8be315e154b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e73f82b-9390-496a-b980-6d1bd07ba426"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33b61501-00d4-4f1e-813a-275fcb426a28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e6ffd840-bbaf-4c18-bb2c-24d30fce99b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "964ca0b4-6f4d-4c82-85d7-c5921dbcbf51",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03a4f29f-50d9-45ba-8eda-69be3841eb2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69cb0f75-7c81-4504-ba91-b3665b1a9480"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a13fab59-bf8a-4f12-84d8-e702f05fffba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7a603d2b-d6d7-48e4-bcec-76edb600bd19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f796016-d960-4f04-ba04-397e368cc137",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e983f2d5-49f9-4a6c-9e46-c83f32a2f60b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a390289c-d4e1-40e3-8d0b-c7fb4345d953"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ea62b91-bc2c-410a-a16a-8ee1a5c8a0d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d16ba475-6e7c-4bd6-914d-390725471b6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cebb33d-651a-45f5-a8b7-1e5832c31f17",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dfef60e-93bd-4caa-8c27-1fe2b8b9f3da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ab80e48-a705-4e12-a4d5-6c41c81dad81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a990b306-6ea6-4e42-93fc-bb0f99d7e95a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "827b19d9-700e-4018-bd4e-664b5cb16fc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8de56231-8dce-4235-8b8a-2ab7e429a3d4",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc20f499-df0e-42c1-a4b5-9edaf1fedbf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "673248a6-1b60-497d-97a2-0fefae838c77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d640db6d-2691-47ee-8a35-92b6cf0f5f9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ec154f17-c65c-4715-bb1e-f172d2c438ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5f0d3f3-6987-4586-b23c-9249fc5fb198",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a2370db-b5c5-4fb0-8e73-6119b8dc43c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd66918a-d67c-4b18-b500-fdcf177083de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08db4b45-7df7-476d-9cce-7ec5f8bc0e63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5d782621-daf1-4ed9-a450-23f1b742717a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "3ce5101a-f5ca-4afa-ad23-8a248d0a585b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "982fe244-34bf-448b-bf03-925a663c73cd",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a89900e-b5c9-40c5-be54-8682c3c3eaa2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31af4968-e9d9-4a66-8c2e-5cb017027395"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "858b73e8-1cea-44ee-8fd0-0c6fc6c378c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ec3ccfad-b331-45ea-8af1-18625744d4db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab7d6517-2b2a-4611-a43e-11b498c3dada",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f93d96a-42c6-49e6-af2e-98c5c906e85a",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "21a88d9b-48cc-4aef-8d96-2bfc84caf6a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "054b6e50-557b-44f1-a331-80961e2fcc45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9d62d066-8dbd-41ee-8f4d-30c58effa75c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "118979e5-6281-4aae-a733-407039f4b781",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f47a9d29-896b-4107-a74b-5e25215e6d04"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "da576277-e0fb-4d02-bea7-663c09ef396e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "227e6c99-801b-462a-9f27-a0cebacdc8d1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a1e35793-8d73-4571-bce5-5fc8ef03a7fd",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "462a240c-7db3-4f47-b941-eae7ac77d0ce"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "07db5a14-d3a2-49ef-9b94-7878cf4d7cfb",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "afa4e82d-8a5e-4ec0-bd70-1c6dc8d9b257"
            }
          }
        ]
      },
      {
        "id": "0d50e628-dc89-4f19-b034-439848053e9a",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "db305bfc-eb4a-4a79-9454-3b40ef2799b4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c71d3232-dced-4a65-be9d-02ad29d29404",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "84c46dd0-c0e3-47a6-979f-0df21917d81b",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98fde331-0fb9-47be-ad0f-b3f54520344b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fe3b490-5baa-4c3d-a406-46eea0ed40a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d38fbe2-98bf-4077-8d4b-a2085c368a66",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "faeae3ee-0f0d-4d90-b389-fbd1897220ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bac8f7b5-2f3a-497d-beca-d96214bca981"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30986c0d-11c9-4f34-a254-7b717c9dc91f",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1072929b-0694-45f5-adc6-06a874f928f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19660c5f-70ae-40ae-9712-84626d202025"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b838d3d9-693c-4c71-ab49-9ea84381605d",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a0be915-edc0-4b69-99cb-637a541bc4a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29f58590-a934-46f0-9933-9c88e103e600"
                        }
                      }
                    ]
                  },
                  {
                    "id": "280276af-f8c6-4877-b75b-e5749b4bcd49",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b63c9b82-422f-4de5-8e0d-55fa93339357",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90f5a9b2-fa6d-4bf4-b465-ea2fde574e14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4aa3f6c2-ddb9-4df5-89e6-89e9c595e9ed",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "524483c8-b532-46a5-9c58-910c99c0d97c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d7be06f-48f6-44b4-a3c0-987e62ee1101"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a036d9fe-cb50-43f3-b8e4-e28e7ace103e",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0286f75c-e023-4e27-b399-cc4ab58b8fd9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b62bc45c-e930-4338-bf93-99eec9defb4c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20f1705c-8729-4f3c-950b-5a9a2fab346c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95375292-1d4e-4be2-a7b1-0a77174c588b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eed68b2b-42b5-4756-8e93-c601366e0319",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "986962d0-69d4-46db-91b8-fd86424c49c0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "070152ff-78c2-4577-b3b4-e58713b2f3da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c85be999-3e47-4e86-aaa6-b6e65078dac3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20c34ae5-e014-42b9-b2b2-947c81c98222"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22f89be2-18cd-4e0b-b470-18a2ec10d03c",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2139faa7-9ecb-44b7-9995-2bbaf883dc91",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4d5a89a7-ce7c-4832-a6cf-bd538e315948"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26ae2d18-dc3e-4132-a761-0312a347d202",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fdd8dfa-a5bb-4962-99bf-d3ee798ebe85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0595821d-2a8d-4e95-963d-4011af5b17dc",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a2edc2d-df14-44a2-945d-63cc4ae1ba40",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8e221ace-8371-4fa3-ace7-7a22ac2c371c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a68e0dba-e51b-41cb-be33-811d046c6537",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59129a03-4c42-44cc-9def-d4cdba21ba8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be12ae76-5894-487c-afbf-ceeb113403d6",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..zF1sQbNclnV5pE5MfuXqMaTVBquwie4ctwzSdbC_LJ1Lx5qRK6V-y9wl5oTvN_GpuOvMIvlG3kQdjgqL3GBKDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5d35ae6-c613-4ef0-ae5f-80e36ff10bb2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b705d3e-3a69-472e-971a-5f613b921913"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dfb312a-fb9e-4328-9e5f-0d39e5345a45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8300d52f-ad22-4359-8fce-eebd2d43a410"
                        }
                      }
                    ]
                  },
                  {
                    "id": "182d1402-0747-4e80-8e05-5e637e1b309b",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a04d5d1-684f-4cdd-9367-e056c3a84798",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c4ebccd-28c5-425f-959a-cdf67a68fc35"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4df375b3-d297-4bd6-8b10-42f5600d9bae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ead9ea7-0e4f-44ae-a193-c63ffd484e87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55102658-50f0-457e-9e08-03747a2fa975",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d956c9d3-041d-401d-ac5c-a7e9580f5b92",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2b9f9a25-223e-4028-a85c-69c4992167be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "187228e0-950c-4242-b981-dae3c8f050b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6dd4420b-120d-4107-bfe5-b1fa139e3bdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23827234-dfdb-4e26-92cc-161b1d11ef36",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29b3eceb-4404-4c40-9e26-a1b8d2417345",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cc2b72b2-61c9-4132-8b07-78796aab5ece"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60d72586-6b52-4e1e-a041-1e497cb0f913",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4f254bf-668e-45e5-bb33-235d0a2d611d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c554907-df38-4827-8cd5-caeb2a6d7c18",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6713145f-24ed-4266-a6b4-b72d70ac9823",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "356bb5d3-06b4-456b-a1e5-e91de441ac66"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83732aee-2587-4c64-84ec-42b8bed23c94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d672e05d-2e13-4df1-88f7-10779c52cc0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0dc4bba7-e1a6-4668-9082-23fb9e576c7c",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0c13abd-0a62-4faa-8c1c-bba319fd0807",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "75cab378-f21d-4f79-8393-996a3fb452f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68865c88-b5c9-4b0e-8a8f-4816a19af12e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d196276-356b-4f25-9ec7-efd1b4d0a586"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61167cab-04a1-46b7-ba1d-d449c9787a6d",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d5ae5c9-a29b-447f-a924-55970918fa4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9cf8afaa-c3e3-44e4-8fe6-f16452d41e74"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac593068-f7b8-4ca4-8dab-847100818c49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "920b4033-b701-4b6f-a857-75e6517fd8f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24516290-947e-469a-9db7-8575168a2469",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3c32a53-3bc6-4862-8da4-5957d106fbd6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "592e41eb-32fd-46f3-88ab-2333b43f83c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cb2bc28-b605-465d-a58b-5c22baeb392b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2b78d3e-45e0-4a80-9f1b-28dd43db5c2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75901b85-ad2e-447e-9504-8f9d1341f442",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": false,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45dfc4e8-530e-4dbb-aee0-20960035cc5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08a33897-59be-48d8-ad66-7804fd0b1b6d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3b82889-1a66-48fa-b3df-9bdf3893f85c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f782eae1-218d-4783-98fc-cdc969b36862"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61e2feea-e3b3-4faf-b0b4-5798c4ac9513",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": 123,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "131d4f76-ae2b-4408-9c80-56e527ddcdd2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b46615fc-8361-4444-8db6-12561053b124"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de709fb7-9b21-47e7-88e7-962af8ef6953",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95fcaba7-9878-4682-a44a-7d47decf4ded"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22e6fe8b-a012-4726-8d1a-e620c26471de",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": null,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a43fd68-423f-4b10-a136-5dd32e59b288",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5541ada-3fa4-455f-88d9-134b0548628c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dd6e6b2-4c97-4048-9d31-089f81b10598",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee1065d7-293b-4091-b6f6-21a172445bfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d877a29-9635-47de-82b8-810942b1eec0",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..5J-iTBtI5WNIe9L3kLF22cjjDx6iQuJAgl6yYYoIGMC-X_crKNlSlB5bRJsrb2MV-NDlWMtHe0grtMqRG1N0Bw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f0967d4-b225-4f8f-aa8f-fe761725b259",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f531f781-6d7b-4867-a65d-f0aa8e376f7a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "599539b5-74b7-4c88-ba97-4b020af45794",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e12158d-a45e-42fd-bb39-444b94c3cfcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f6bd673-53d1-4f0c-8329-112570eb8166",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6954dc74-9d32-428b-93f9-d4136338069c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39a554da-58f3-4b22-9dc9-9db827c40326"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f05de970-6074-4fc5-9139-3823645589dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad26c904-ab18-419e-baa4-648a68be536e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39381556-44e1-44be-8733-ca0eaaced744",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9c09216-c95d-45d7-acbf-ae102f4b73a8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fa109db7-9ee5-4a99-bac9-fe8c96120d0c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d19a5be-4178-47f7-9c5d-6ec8edce6aee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb1ad503-dea9-4a30-8c1c-1979a72f802c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ba25f8f-aa97-4a22-87b2-5ebcb14f53ec",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fca58e9a-86b9-4b8a-9cd1-f3525c36feb6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "289f2f1c-1a8e-4b1c-9104-7ff6e1f583f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b513bcf-efb4-4930-8359-752be469b2af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "861e7298-0cfa-42c7-bec1-c6bcbd324a23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16646c69-61fc-4812-9b33-1f841de4b108",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67fa0ea3-9f9a-4666-b710-524a97c40517",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0383e498-1a73-41b3-873f-f6380c5f73c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffdf728e-3d57-46a1-8197-e0e16512bfcb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d19f6382-7c0c-42c9-b945-ff8428c72660"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d96e096-c838-45de-93d0-3760a6d08652",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0283cb4a-f0df-4a85-9c8d-71bd7c4fd8ed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "90a09cbc-946e-4008-b9a2-c1f635ad71b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c625c182-f356-43b9-9fd6-930d4f4bc694",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd9cea38-2de0-421e-88c1-d8822885c2b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96631712-58a0-41dd-8cea-52e8d3796d07",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aecc6b6e-b682-4011-a60e-b1cef3911056",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06784455-ccdc-486c-b237-cebe2537c2e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "430402e7-79a2-42d1-a4b3-c8de404ce6b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ad93c91-7c91-48a9-a3fa-06554700150f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65a62274-cd7b-4a9f-99f3-3b6f57172e08",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41badc1c-e815-4a61-9045-215b086e3dd7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1b5169dc-a6e5-4170-a08b-96dce7cf4ab3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "625eae59-d01e-47a4-ad92-6fe5fc1a51c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba0c722a-efd9-430b-92bf-267d92ae8940"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d27dc00-bf37-42d2-81ce-9d435182df62",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f555692-83a7-4539-a2e8-c7404afe58db",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d23729ce-fcbe-4ecb-889d-f836e23b436b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eada38d9-1690-4562-9ff8-07d29b76d22a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebbc1e7a-59c3-4cd2-bd64-7baf10c2678c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5eb93e86-76cd-4945-a68a-6fa8baf80893",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "195e4496-3474-4c5a-9654-df7354b540ab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "203a7979-923e-49cf-b23c-d54910f1d100"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "035df2c1-07fe-4b8f-9e21-9729e8fd97ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe1e440c-4ebd-477d-ba38-b9075b9f9805"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07cd6687-a163-4a7d-b43f-0aadd69612bf",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6b08284-cd04-4e0b-878d-7d3d1bed8237",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "02c0a1a2-ad24-4637-9d3e-f691d13d417b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7be1cdcc-e54a-4d83-bf28-05b88a401608",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "859d7b24-c41a-4768-b223-2e7c22c7933a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "012a8627-c1f1-414e-a91c-8d65001642cf",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b63f83b1-371a-4411-bd63-efc594b564ff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "25e8a8f7-2323-4080-89ef-7a9a9c590bdc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b76182c-931c-43ff-853e-4cfc57831794",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d999d90-1c64-4f5b-bdd7-ea17653591d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5737e22a-81ce-4460-bcaa-569ba6ac2811",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b346c5c2-afca-40ad-8dc4-215d3569db94",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1cdfb183-c2ef-4699-9495-3bf5f1fb3b3b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "124fd704-8b3c-4ad4-ab49-7c37ac2e7179",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "351d0a53-3803-4d47-9ab6-7e1252660cc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fb93168-f11b-4340-8788-3b081fe5b8bd",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75384cde-b57b-4ae6-922d-9cf722752a0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9f38bf2-efbf-41c7-a6b6-45c44e25b53c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74f71197-edc2-4262-aa47-bd49e977b267",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c246328c-c68a-4951-8b4e-c86475db48d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9b94b5d-35c0-449a-88a2-a4d6f2695c74",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x7a3s_8HfmUqGT6SDkktN-jeRmBR2xQ_9tOhJx4kEG3SCsRTySfDxya9yy57LNv__qbY1eMkm9SNrwdYiqlBAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5712904a-0752-4efb-bf7e-df8354552f1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7974cd2d-9bd1-4ffb-894a-0ff98d0ce882"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2ded668-1ee2-488c-944e-b70e55056c29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "678ef92c-378d-428e-aa48-92e871602634"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d017865a-f940-4787-8607-e54af861ebf1",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mMaPSvG48oEf3bv0t-6eLR3zvU3_BKoRIkgzkuZfm8zvjqbI7iy05D8k1mTeoSZEw3xYV-_sH1rChqGmmp7KDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "496ba1e2-b898-45ae-8611-00145a0e32d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fca678f5-3ff1-4784-89d6-704603c74b80"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f582134d-3338-4d3e-ac6a-868ee93fa4e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "623b8c9e-9bba-4bd7-bdd1-6b15550965b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "badad404-c699-45a7-81fa-1371c0df95d8",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..rAVfo-Gnj0vUX6yDAr7pslI6XAAyF2LHTXpiZEmnH5Hb4RsKcmDZZawaLSCg931y1cBUgZ1PQvGbJEdb094ZDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d988a38-a0fd-4651-ad9a-5b3e74866203",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e24f5587-0b11-4360-9923-d7ffc9c0e5db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b39346e3-b9ec-462c-8fa5-e208bfef0bcc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "377a8bb9-0343-44fa-9e86-564a0866dd60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47b3f234-8381-4568-b211-1031e4535f32",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "647a650f-f702-4aa5-a9fb-198e1db98136",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5a1a26a-e75e-4b44-b145-ddea46b7fa57"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc6e0461-b046-461a-acc9-bb7f15ab60d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb1d7be1-8b57-4cc0-9331-c9e86416cc80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97ce4591-0a0b-404f-a0cb-9dbe34ef324c",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e08e6dfc-a186-4c27-b03a-a61405a324d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab490a19-b88a-43ec-a03b-a0d84000d984"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "303f0be4-74f6-4a22-8b4f-5b8c5ee56d41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d24d4241-78db-4889-bf39-c43753484466"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f462a1e-5b57-4125-8862-8ef3b1b9c1a0",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..vv4qa5LGRlgeMxW5G5VjEKDfjKKosQnvpx6oapYDlfUSWVagQsDoDcRmkotKzFHDcTh-opjGLp__agL6_d4OCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e333047-6bf5-4723-98a1-a2aba1e4d311",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72020a05-de38-4593-8d57-4c6293d4e13a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "726edf3c-360f-4aba-9bff-2f45992569c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a797b53-4131-40af-b0cc-d38c8995fa26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed6cc0e5-14a7-4d2c-af79-460d01d5feda",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TTwcmWS6_0_t8XPlAGXbzWVSL_dL7OeYojY0FZz1WXCFvDfeAQtMh3dcIxuCeDqON6St3PODGfxluO_q1vWCDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b9adbd4-e92e-4d78-aa1c-a0982b4c6b0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "770ae788-1895-48d7-b4b5-49aa38bca49c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95e6a471-d074-4709-ba03-a685a1c99262",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "574dd2f4-b528-45eb-bd4c-92a3a1cd5597"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63ad246f-0fa3-4ba6-b344-a62dcb4229a0",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..wpkNYYEOCjKMWm9xTYNn0J7IgXZQbbkEoohMQbloz_Zxb15UVu6DqiqsENotAeHvlRWd7RH2O9v4FwWBeqvPDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42118f47-90af-4217-bef6-2da726b05e21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8472b0ca-7213-413a-812f-3d474e25ca50"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bad4d7c-6c6b-4c54-81c0-0a32612ad8e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d5c5db7-c2de-4017-96b2-56008d465e6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb208d22-0e02-44d2-9c29-cfc780ee5123",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "288004a8-9d57-4748-b505-8ad43f95c88e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b14722e-b515-4769-b6be-17a06b404443"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65e83615-996b-40a5-b7fd-3a43ea3d9607",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29e5f46a-f810-42e4-9f25-cf30cd8e2997"
                        }
                      }
                    ]
                  },
                  {
                    "id": "537d855d-9c18-40e0-8740-f7a46ad2884f",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHJmwuqqXWMdd298m7RCTGyGoAzsCx1y9tewaHukqaJJoPn2-TLDCQuXvlnFeAYAE_Cy3j1UScfoVx5k-eclAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4572d141-e8fe-46e9-b124-c465fb3068c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21e1d0b7-f322-432a-af45-a7df91f9a369"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "388da705-b311-433c-917a-8f9f5c1715c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "504c2208-1704-4569-9d83-2ee80afc2fbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a6a9436-814a-4a34-ab5c-4ec810a5a3f8",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b55e500-e9bc-4a28-a349-c5ee24fcb906",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f36a344c-a582-4bc3-b1e8-ced7e9cf3d14"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92e7f6a7-9716-4489-94ed-d546fc185b7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef0d3b84-41d6-4d4d-aeff-de483955be90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b76402df-5ebe-43a9-a67b-7274ae2368ea",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..OzKfWk00QpV3_FJru3xJ3_ktwlU4O68prZWWCmdy3mQTbCz2lPFRl2sB4AkdD3AZUFMAnwxhscd9B0UnqxTZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3f609ca-0f0b-416e-bfc0-4432fac28059",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "beba8b36-441c-49ef-b644-b9d5e0c5c57e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a60d6639-508e-4390-bd25-b040ade1dc1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c77e05e-8e6a-4b76-9f8f-050ae5a3cf24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f0ed1b6-8cf6-4066-9231-836e66ee5403",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1W7WM5cXb0daWooGxEOYn_zm72mkmpF_tu8Fij39luQwNGDgK7h4nZGBFcS80HTVqiBKxzlhGq1yNnpUlLG-Ag\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3c9e159-e678-46d9-a980-3c41edb58eeb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24b6359d-5a73-4923-9fd3-174698ebfb6b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "050399d5-8541-424d-a984-00f2936c9f27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10ef0ff9-33f6-4ae3-b0f3-c05f63f913fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4236423d-f342-410c-ae31-fd873fc01bf2",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dkiU2sStrvQWiNFK8cKmCbAcRGsC9kbDdKyr-NRlPc9ORQczitwUEymjviemIi1Oot23VohpyMcSFvgFIKIFDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01013e3b-da06-4104-bce6-0f7b06e5f4a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70fb8727-19e7-4ca6-8055-60dd074408d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c372b13-9444-4b1c-a080-d8b4bba5afb5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d686a73b-5363-4c35-8562-1d0345985b89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f80b619b-78c0-44bd-8448-27131f69bde6",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0955ba7-c7db-4ddc-bb75-472a785fefb9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d50e59a4-bab2-49e7-9ca4-f63863345cdb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e96ae79f-6a2a-4378-a9da-7e82d84c72cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "482ccafb-de53-4f32-9d60-58c08922b003"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48f79db3-cbdf-49fc-9805-cb9f2510a2fd",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pNIbeUn6DL71QxEWTF1wQTqKfAJET5JB9FlmoLXk4-rv1owG68DqQY6qwcPx6fUbMijsWsXlvaFvzND0jAg1AA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42cefeda-6808-4acb-9f1e-2d58d5a85329",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0fbe786-dffc-4c93-b405-6849749b919b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f1be0d9-aa80-40dc-a1cb-78ed48f8443e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6c43436-44bb-4db9-a0f2-375590ee5e4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7cf334d-022e-46eb-99d1-bcd502283988",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z0P0ndVABJRB7mCsv4C-EgB-1SxgnfrU2uQBDSwKm2KfB1jBnzsEzY9enxOn7V1lBAPNxELTEaxPCAK7_n3bBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdab68bd-958c-4670-8fcf-45155a2776cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "094f3771-3e71-4c0d-900d-67c9a4a67189"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a2cf632-87a7-41b9-a15f-a17a4e710089",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5190cd65-3393-4080-a917-5062cd12cd5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01ff96c8-d200-4a5c-b113-e0a0689eaf93",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89743bea-caba-478f-8e04-6dde53417ea1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9015ac77-f84d-4f06-8dc3-1608063e5e7e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6047cfe3-3564-4d3d-a09c-c8fdc3f7b8aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81a9898a-c119-4e76-93a0-e6a54b80e7a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d6577af-803a-4774-b35a-5b2066d1445a",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2abf94b2-701a-4fab-908f-4d8eb582d072",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0abf40ec-1cdd-40b1-9ab5-074de65eccf2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dd3f276-3ba6-48af-8ea6-c541356d8401",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "061ca324-daf0-45d4-b413-418017c5b443"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a84f38a-69bc-48b8-8c0b-bc2650a3fb8f",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..IXaPbANtKFiA3Sh28esCkg9kdwpHScJg3bOCF7Phmb5n9RC981EeIobgDnMzWIjP4v0S92FDEcZqA_XbW43GDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9844b926-059a-49de-9a2a-66283f5132e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2753e02b-2229-4696-a196-b6b35a264618"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "676d02f1-0452-468f-b311-8b355f647c99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91010216-a0b3-41a4-8741-0d3cb7775b4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d72ac6a-ac0c-44fd-a28a-584d18014e52",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iM5Xr2lBqwFIQhq9RI7Dv4K0dzdQ0z7i5YN4ELsstv9vDC9xA-GY2Ft-PsfubsbgVyQsQYjchCv23GULmhauCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fc6e828-13e1-431b-ac87-0594d9898eda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56bc53f3-77e4-464c-90c0-f83175c628a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb3b6b16-d35b-4f88-891e-f7d824df8beb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef99c6a4-cebe-4b79-a68b-804076d38872"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bcd7107-1b7f-4843-9c1d-60ab5bd9bd71",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e07c374-d7b1-4694-a4d0-ca619f2825b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4bcb6b8-e01e-4e0a-96f9-6704099a4888"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "066f7f7b-d7c7-4e73-906b-cdeace2ec2c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4900fb0f-070d-4774-962f-82a731f69350"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92c1e3cd-a40c-46aa-adec-b1d9818940b7",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29db0f1b-dcea-49c4-8fdc-f6f211c42424",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52f5d428-d86f-44af-aed1-d1362801899b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1932512-77c4-4abb-8531-4b9ddab93aed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4617a1bf-5752-4dbd-8872-c0e680e8d2df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf2bc690-64bb-4241-b8a6-58f94933f877",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..GBcSurXcOJcVinhthkmqvV40OS1rN2fY57Kad0HMLUuykp14JJCtNw_gmtf6SwZxhB860OVsUmuNbZXsMCi-DQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fd6d121-88b8-4fd8-be6e-08db8f57f4dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3d9cfaf-a405-41e8-baff-d98bc6a779cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10fccc2f-3f7c-4003-b1be-be7832c3997d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41ab2132-58fe-4035-a031-97338babaff7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc388edb-738c-49ec-af26-174be7ff811f",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VWowmcXQAjabeJENG3aOcLzQ9HrvmSIs2pOWcaEMLdJtvJfP7oWohIBiqp94-eo1pd4Ocgk3hT0cLvS5qKBYAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71365ab9-e2ab-445b-a00c-16ff35614576",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d5977b6-43e8-40c6-8cbf-4bfb406dedab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85361a6a-29a2-4784-9a95-87bc813a82d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab3142a3-d02a-45cb-83a8-9a5b39da4d69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e355a4d3-119b-4922-838a-c36eb84d48c1",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..-awe55AAvkjymZEpagD4fdSQk0uCGFfjyFwg7upmg_CISWk12JfezKe-N3hjTwYKCSCjScynLGvlH2x4iSgbDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d98dd97-b4a8-4e39-bfc9-169178bf0cca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "373cec51-963d-4487-9bb7-37bca839ba08"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc530702-b836-49ec-8c73-db72915936d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86f36601-435c-41e1-98c2-18aea95d1c6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d93b2646-c910-4b19-bd63-a70940ee65b9",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..NDwZvVUWw-xG0zU8VsWhiXPWrYycgK_zwN8zZts05DTw23rOTd9IOXQxqhEMzo_X0c25jzowIbpDfEFxqfmnAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1681d714-89e4-423f-ae78-0c0973a0aaf0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc83abaa-40f5-4902-b434-e6c9bc07d995"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74d909d5-924b-45cd-afae-63fbfe0ead98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6bbcf570-3b0a-451d-97f8-74490fe6ab2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52913934-4725-4d22-b553-cbd8027ca577",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..y_7VEjN1ENYoedOrj2jsIqgL7FSYelxGgFZD5ckqKvSDM5BVEWiEctD24BWppCndRR7WR9_1ByBm2F1yBSaoCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb639ea4-f7c4-49cd-9358-0cf735e40ebe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8a5a046-934d-4c3f-b2e6-14341ff53479"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9ced3f9-3d2a-466a-9481-48cbfc225ec0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4c03aae-dff3-4b8d-a605-8ebbed2ddb8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fc2faae-3219-4477-9ca4-126cf099a323",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0d56ad0-1b21-4d71-adb8-03f3ecb48606",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f0917441-6597-4328-9b21-185e1c1536a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84149fc0-1827-4f44-a055-8801486be122",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa58e2fa-782b-49c1-b0ab-9c2ba86c4797"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed8d0b45-d00b-44e5-905d-688be43a3358",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "696e013f-29b9-4803-837e-7d03d2ca0fa1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "41aa0b3a-c119-4d93-8983-9718a0fa5024"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c47acbdb-e403-43b1-8ec6-cc0ced960c26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a6d705d-3664-428a-8e07-ad68a345a229"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8134831b-7fc4-48c9-8b94-1ea6e3e360aa",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b952665-054e-4f43-aa6d-1f24d8b87768",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a596a84e-b04b-4d69-813e-ac822e3639f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f2b4cc7-d892-4bfb-be7f-a653ff07b69a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7e5dd73-0b64-4ed8-b4da-062e29f47d3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94e3c717-3402-4ec8-8f3e-9f846a19615c",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cab39792-00f5-4ac5-a733-aaf9e6a9c683",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "36f9e2e7-d063-4b5e-93a3-1be0b8370992"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "944ac1ce-d9f6-401b-a8d0-0e31427efffb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68d19369-2be8-4a16-9d41-cf1859acae57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af1872bb-cb89-4b47-9c4b-bc93a93fdd55",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76f94ef8-2bff-443d-a46f-ce0e80fdaf9d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eb804f76-8d5f-4ef1-b154-1696686de9fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f59aa779-6fd7-463d-9061-c493c422f7d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1a10e7a-389d-4609-acdf-f369cf33e64a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ade14701-049d-479e-a7b5-5a960ddbb4b5",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0de9c724-d690-4bc5-8bbd-b2f5410ff938",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d80306e0-108b-4dbf-b1f3-bf0b213b6a2d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "428e26a3-e147-4087-899e-176072b45f98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26d30c23-3a3d-478a-bab9-884622599061"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3a14ede-3956-4b3b-a4cb-b307863b0809",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0687b6f7-03f9-4422-83d9-21c4bab590fc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1a6549d6-1cf0-475d-bb25-70c32acf2520"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "446595ac-ad1b-4ead-be5b-fea7773c07af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d3b4bd1-1cc4-4480-9586-e3a3da411c7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d2a021d-f47d-4b07-97e3-7bd1b9a70c3c",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c33ca85-ffae-4c64-80f6-6ed8ad923cf3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "78d99f6f-e268-4041-aea2-83e847bd230a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "842ab6d7-1e30-48fc-9933-0d2928237a32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75222229-93a8-40d3-81b9-88c591ce6304"
                        }
                      }
                    ]
                  },
                  {
                    "id": "521e9d6b-c94a-4858-8282-e060aab6bd1d",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5905c3b1-ff4b-411f-ad98-586926fe3471",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b756a192-6cb1-4ab3-8fa8-3926c153bda3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b62698db-9788-4e43-a070-7c09118d27e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74a1332f-be32-4331-99ef-b4acfb5ae5ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47d906cc-754b-4413-8106-4572257d424f",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b600007-e2b5-4295-a4e1-9ad398bd9fb8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "19369bdb-b802-4683-8c28-c62773bce682"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2c81f2f-6ff0-46b6-b162-75ef8c81ce56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb2bc650-cdb2-4c72-aff2-cef2c6f3eafe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50b2e9f1-d9d3-48d5-9071-f16f297836db",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36d91aa8-02e6-487e-a0ca-a4c3a06ffaef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e4901928-8249-4443-8efd-caf3c5b46ea3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ca57fe5-3355-4892-985d-84d989da7361",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7249ee8-5815-4b4f-aeda-bc173488e4cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8375b229-a50f-4298-b655-66853f8d45ed",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07aaf42f-8d63-4312-8d89-1d6195fb6af1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8974d7b6-e024-4955-b7bc-98588471be6e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "012eb782-9623-41fa-9afd-cd8384274d0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6422da14-5952-43b0-af01-f35f3f30b728"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c5f7b5f-39d3-4d1a-8642-a8808133b9a3",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd52089e-8062-46f8-b137-c7cec7191e79",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d4f43866-894a-426f-b2b4-d191601f48e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52ea43ca-1308-412b-a0a2-90561ab3fec9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "640b04ec-cd55-40d2-9801-4a643fb81071"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7900bde0-dea7-4fed-9be4-4f4e5141e42d",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd319502-7481-487c-a957-8bf270fa25bf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0e06871e-e982-4b44-a1f6-52a0cf5018ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f33c4dfe-da46-41ab-9fac-92e0c6b2c6fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84da9ab9-2b32-46f1-9779-56792dc97826"
                        }
                      }
                    ]
                  },
                  {
                    "id": "887dbfec-742e-423a-8ca8-599e0b8e9eb3",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a79d1b65-28cd-4c26-8308-3f1c0754cc95",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4abd3d40-d5b8-4b2b-bffd-1cfde4f3a78c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02da8caa-ca6d-4bd9-8e48-b22821007ad2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "976fa238-ad26-48ad-a3c6-b74fc1caab75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9187de26-aa65-4f14-a8d6-1dab56519aa0",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3415667-0036-4fa4-a921-44e5c5c5c81f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "82b6779f-a609-49de-9ea2-fcaf19a6c050"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87141394-dde0-45ff-8ec5-d98bd7bb6741",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "278fd05b-e25a-43f5-9825-433aeca9d55c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6883c026-54eb-44b5-a8de-7362026fff45",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c94e96d-8d9c-48c9-af75-933f2edef811",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "47fd6a43-ecbf-40e6-8e99-149fe93e9619"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7223a4da-e6c5-4982-9f6d-5a3956b401e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd9783bc-f4e4-4993-8f0c-272bc4b37fa7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c52ea40-a943-43fa-a629-aafef03b0c7c",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bf6d2f5-da16-4258-a758-0b32d74f66ea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d511a8da-3e96-4b2a-b676-290c27758a45"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f40493ce-d2ec-4f94-a765-d504dd5a7a39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59be3c56-904b-4718-bc87-11471add0c50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ae66a1d-60ac-4106-bd6d-b451a18c0d7c",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed33543b-7f85-44f0-b519-e78fdc940f67",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5c2e7bc2-d941-43fb-b5e4-d1fe5d52b9e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a89ede43-5ec7-4aa8-896c-df7f3656345a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1e2ab72-c6e4-401e-98c4-cb1b642bb7f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a02a87b3-de0c-4c54-aa36-d22673242603",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "879d81d7-4d2e-466c-9395-e882db6b2fcf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e4a0a594-d207-43b3-a880-43d5fef4ad03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1321b66a-7afe-46b5-bdce-fad353ffbc3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "401987c9-e906-45ad-a464-ee62ced0a202"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d72fffd-e635-477b-812c-9fc50531fa2b",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b65b09b-3962-4a9e-aea8-047eac66320d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "18cf71e9-287f-4918-b162-b45ab06684df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b46443c-321a-4da3-94fb-e45ac0932868",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "040d9dbd-15ea-4da7-9e1d-c4e2c98d23c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b008291-e586-461b-b864-459ccf963cbc",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f204090-0902-48aa-b14c-1fda43e551b9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dc4e64d8-8ccc-4292-983c-35b601ac48d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53583c3e-73a0-4597-8e84-e4fdd39e25b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79e3b7aa-2cfb-49d5-be1d-a08310167c8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3efe77c9-a139-470c-bf24-5767389be009",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fce336f-d21d-4545-9b09-e9700b230903",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "353a038e-714b-4799-af66-791c46855a66"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dd87d63-e577-486b-b020-1a3f5a52c676",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eab7cd53-c124-4d26-a797-7495dcb5232d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d88ab882-525a-40a9-8eac-9c4aa1404abd",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67e8fa14-4103-4549-b589-09240bab685c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3fb6f484-0862-40af-8a4d-d7e13956e668"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af452eb0-92ca-4e77-8c8c-16c7b53bab64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "465088d7-ff9b-4f65-a1a1-3028b1efd066"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac0e8775-e5eb-447b-ad85-1b35d10069b6",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f103268e-1ff2-4684-9ee4-87795468e8ea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "89285be7-3d16-4e21-9109-08d9537756b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4954a23-a5f9-4f00-8e50-68e7f5f429ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3116ba32-eeb8-4307-a89d-42e3fd90448c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4c0d344-23a9-4937-9caa-ea75ff8c5cfe",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18629fc7-8fca-4c67-916b-f7868089a6eb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "de59e15d-3349-4d0b-b625-1685b17c5ae3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89d623a1-d439-4aee-b018-3d6ba27fc54e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebdee86a-6a0e-4591-9820-11875be7d8a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61be591b-6e5b-4995-9201-7c905ea88d15",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb0fb69e-f354-447f-9b41-aacafd8e0b80",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "40e71784-2f1e-4ff8-b67a-1a27dfc08ee3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd32af8f-06e3-4fec-be22-46c4fba906a8",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62492c85-b75c-48f1-8f04-194e342b9fee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ea959ed-2487-4be7-8e46-b84857030eeb",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff570326-bd64-4184-88aa-139726f27aa7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f92af6af-5d64-4819-b3e6-37a96ddbe19e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9ca65a0-56fa-4785-8278-448dbe56ef8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f10ad6ee-9705-4018-b98e-179fdefb88b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc1e843c-4ae7-4c5e-bfc7-c6306bd2a814",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdd22e11-038d-41c9-b916-6b4a6bf55af9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e4a338f1-fbf6-47fb-a5ba-73b36476a6aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab8957d7-7982-473a-ab0f-01d364101ab2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5676664-8c51-41b7-ad85-9ec03837e5c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcefc3f1-d823-4be0-a0c3-1384a2d352eb",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64a79804-6f6a-4f82-96bf-b4248cdc0032",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4d24dc6f-e224-40a1-8036-42107702c919"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f920e56-e964-4502-bbd1-eff2576735f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8cbec8a8-53cd-43f4-a547-7f712552985d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8b653d9-5b8e-4799-8d07-b5ef3d6397b6",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eabb7b0c-effe-4cdb-ad5e-631164a941ab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c82d47c6-2de6-41a6-a0e2-76017e1501c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf1ed3e7-50be-4200-a7cc-6164aab71a4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a50d931-8a56-4957-92a1-737d55b219c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7c420d4-37f9-46db-9c3d-c62db717b0cb",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "085ed237-017c-4858-83ce-f29aa6d27fce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0ad6766d-8973-415b-9a0b-dc1b378d04f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f52a3a29-f979-4f34-b36a-be1d43c414d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69a97045-00e6-45dd-b77f-cc5683fd6592"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e2c927a-1ebb-47a4-b5d3-d01a9b51b06b",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a01fdc3f-f458-4412-8245-bffe4c88e067",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "21bcf16a-019e-411d-b8be-64e7ad7a2395"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a39ec27-3bca-4210-820e-9c53bbe39893",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "190c635a-5deb-4b3d-936b-eebed859e579"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d43df0f0-7ea4-4539-9ae4-ebb3b46dfc2d",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22300edc-cc2a-4083-843b-3c50dfee5256",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f26b94af-e4d5-417a-8dd6-30653cdaccef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52b3147b-1f27-462b-80f1-655693719aac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8779630f-524a-4ba1-bdd9-40d94845aa02"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6478b9ef-ade5-4a0f-ad58-f0247097a19b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a5fef295-aa5a-473f-9650-a6be536b00a3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "38731cf0-e9d7-4e5a-bfe0-3db077b597cb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "90dfab83-76d9-4dde-8582-4e525d1958a5"
                    }
                  }
                ]
              },
              {
                "id": "244d59dd-035c-45d6-9314-12e91dbcaf7d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9408e52e-5d03-4d2a-be5e-fe02bc2f4cab",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "707b9de4-ef2b-40ee-8b98-96d5043e4d39",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "86aaa887-9d0c-488e-b917-3cb5f2c42fb3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "964e9bb5-c510-4f3a-a9ac-d93db938970b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "855a0676-f960-48d9-8c47-ba5f8d806ec6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c936b87-6709-4bcc-92eb-80c77a34f84f",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "400fe9af-fa12-4c44-a142-d6da599e4d8a",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "2af23b2d-a988-4b62-8617-855f3c6cbd87"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7258c633-0a6b-4d5f-974c-343f58dcfbc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "abe20959-7551-4df5-a333-6ff617fbe5be"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "98f7aa6b-e614-4aae-8ac1-71b889d76fe2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "aa8d2955-7976-4f9c-ab3e-40f540afd7a4"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8684f1a3-d125-4cac-a759-12b2160af0c2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a45eda10-3ed3-4535-abf5-26b423553df0"
                    }
                  }
                ]
              }
            ],
            "event": []
          },
          {
            "id": "2c85af79-e270-4772-953f-edd05329b54e",
            "name": "Positive Testing",
            "item": [
              {
                "id": "2070dc0b-5cc9-43d1-a4e7-4fb2ba1f4063",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f6ee8996-090f-45fa-80da-fbc328681b45",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2ef2bd02-a4c7-42c9-b935-00331c324b8e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0f368f4c-cdd1-4dd7-b883-d511833586cf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4f50f3d9-da8e-4088-a8a1-78f9b9161508"
                    }
                  }
                ]
              },
              {
                "id": "9aff4cb5-1aaa-4907-85b9-bd26335506bd",
                "name": "credentials_verify:id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9691495b-eb10-44f7-b559-307d86401653",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "35d0c97d-33b0-4bab-8545-cf2900adfe85"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d581ff85-9b85-4a1f-a60e-6d8b2e9bf3bf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "eb525b94-e145-4991-aeee-0c4912a57723"
                    }
                  }
                ]
              },
              {
                "id": "24b822bd-c180-4bc8-bead-565100045484",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "61f9920c-fa0d-4a78-8ada-74d91c3b69fa",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3a294b63-ebbe-4082-afa2-8ff2192026b9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "daa12bfa-fcb2-45a9-aa77-9b6a9df224be",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "303aa0bb-d2b3-49b5-ad07-eab41d119162"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e77f3e61-cf95-4e68-808d-a511b7291d93",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "7354fd0f-91e3-4fef-98ac-3fa3572aef19"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a5b76e0b-8230-4595-8343-adafdfbb1f9a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "82ad7746-96b9-499e-b9a9-db9afa926d47"
            }
          }
        ]
      },
      {
        "id": "87541e7d-34a9-4f76-9f26-a04ebd22a43f",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "29752f0a-ac16-4543-aff0-42972d0d2041",
            "name": "Negative Testing",
            "item": [
              {
                "id": "03bed996-081f-419f-a54d-8a521bd69ba2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a057ffdc-2ebb-4e58-bc00-3913d38b10dd",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf3d7c79-5729-4e93-a3e5-34b284d177e8",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "8bf85141-0093-4a3c-9faa-5f33b479bc13"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e5263d7-2fe7-4b75-be33-8ba70cd868fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a9047d90-be96-42a2-9474-06f7587670d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dded9cf-7641-4f90-b4db-0b2ff146c9b5",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3af01ef-1f98-462d-b78e-e1b0b03af380",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "a24edf88-ae2e-429f-bf74-600dba41d287"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be888ce3-dffd-4a84-a0dd-2c8bcc81adc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f552468b-fb35-4846-ac88-260891204279"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5f0bbbc5-5f82-406e-abd0-3a42ab6f8a3c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "20909aa4-0a68-46c1-9f7d-cda4ff4a9ef1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7e40d1a1-5ecc-4058-8ad0-491a27dd33ed",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "39142a52-8953-4c4e-98ab-771c633af9f5"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4fb64b10-0768-43a9-87c1-ae036db98f40",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "8aa6ac1c-f85f-4406-9dee-65c973d51c98"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3b93a3f0-b1d5-4a10-9b08-02934d7d4dc7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6533b153-a580-4d41-9d9f-796a3702c098"
            }
          }
        ]
      },
      {
        "id": "ed462fe4-7a2e-4d3e-8696-e2d9c42fdae4",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "fb20cc68-5a7f-4e60-9570-f4fe6e9884a1",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8c88fd3f-dbac-4e23-8287-c929727ed53c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9c9d73c1-bf92-4381-a6af-d2ecca424a87",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5db6959-5cce-42f4-86b1-226fa561e6fe",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "86ddb654-ae2e-4e05-823e-5ceaf78fb26f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "372f8265-9bfd-466a-9772-2311b9917fe5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fbcc00f1-61a4-4adf-9ce7-7bfb46948ae5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f7a1b7f-a00b-4b25-a640-1e138ab03a72",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d07da04-1533-4f01-a4ef-8cbfee49c5d2",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "acdfd010-0a03-4823-8e23-4ebdd4db3610"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4242dae2-d816-4aed-9f0c-fa84d57e6703",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a6005cea-4002-4508-8269-af87256ce962"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e566743e-704d-422f-b092-1259d5ba0e24",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "44f1d34d-b3e0-46fe-8788-df41f73cd925"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "794586c4-cbe4-4e8d-9933-58f980f6732a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7cc7d62f-c6fd-4105-bc30-4e357e239c21"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "90cdea8a-728a-451d-a2b1-59a87c8a08a4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "a7a5be56-563f-4fa8-b24c-06f003869449"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "de9765bb-ed08-42e3-acc3-5bacbf3107f5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "56880cff-38b6-459c-a299-46ed328b7792"
            }
          }
        ]
      },
      {
        "id": "8f73164c-e9b1-4815-828c-890c13874a93",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "b3cbab5b-a1f9-48a3-9050-62acb431be29",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ec19ed40-2c69-4af9-82bf-62cb393aa597",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "922829da-08c0-443b-a28f-2e8e82ccb206",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3d8b209-4e29-4255-a30c-5274ac626a93",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "657d941e-d732-4106-874b-245fe64a013b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0762de62-aebf-4f3d-b4ac-030addce3816",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e4e3cee1-de1a-407e-9359-7eaef67c5332"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bacf7c3d-1dc3-4609-82a1-87c1a17ddf21",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d8b3492-5d11-4940-93bd-d838323d7708",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "82532c76-f2e3-4a3c-84c4-db88de0feb55"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d256fa7d-aded-41fc-a492-076461f265fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "86226150-8c27-42e8-adb2-f6fc3c42bb5a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a245a5ba-ff01-4025-b45b-e89db1086ea3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0ab1d868-4dce-4c0b-b83d-1033bb4b414a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9f5a3785-214f-4c7e-9853-5d981d5f873b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a36d3c43-e8f1-4a85-bf49-d212939ea494"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fa17440d-e64e-4c72-8868-cf4ff9130dc7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "e3b1f5ee-4d03-4ac9-9c15-e836a7b99763"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "db766c65-c462-4c52-af50-e89b0fc5ac95",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0bfee777-db56-4c69-b3b0-da8bf76ad07c"
            }
          }
        ]
      },
      {
        "id": "3aeb31af-a889-4e8d-8c3f-b9f99ba9e3d3",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "14046d0b-11e8-4880-b3e7-509e8e3ddfe4",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cb8ee699-c578-4832-8bb1-ebef4eb7f11f",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "ba246b6b-be5d-4f65-be2c-56aa92fa7b15",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4ccd661f-205f-42b7-8aa6-51ff9f672861",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3cf5b173-89d7-4cc7-a489-340eae667632",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 243,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1855,
        "pending": 0,
        "failed": 5
      },
      "prerequests": {
        "total": 243,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 243,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 492,
        "pending": 0,
        "failed": 345
      },
      "testScripts": {
        "total": 933,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 922,
        "pending": 0,
        "failed": 5
      }
    },
    "timings": {
      "responseAverage": 390.4246031746033,
      "responseMin": 32,
      "responseMax": 3967,
      "responseSd": 363.3179527514559,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1665622678191,
      "completed": 1665622787594
    },
    "executions": [
      {
        "id": "0b7e6a24-474d-42da-a053-3521cd27a268",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 243,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "02d02a92-f057-4972-b974-ed45c0d30016",
          "httpRequestId": "6e4dad64-277c-4c18-a750-22fa7bc10c90"
        },
        "item": {
          "id": "0b7e6a24-474d-42da-a053-3521cd27a268",
          "name": "did_json"
        },
        "response": {
          "id": "d3bc022a-40df-496b-bb26-255bb66c71a3",
          "status": "OK",
          "code": 200,
          "responseTime": 357,
          "responseSize": 1640
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c6de58a-8b76-4ad7-bb1a-2cd28974248d",
        "cursor": {
          "ref": "6373fc8c-5886-4b41-9ed2-82a834410366",
          "length": 243,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "d7205010-b236-483b-bdf8-8dcf2a1efaa1"
        },
        "item": {
          "id": "4c6de58a-8b76-4ad7-bb1a-2cd28974248d",
          "name": "did:invalid"
        },
        "response": {
          "id": "efaccc3c-736b-4abe-aa06-236460eb8172",
          "status": "Not Found",
          "code": 404,
          "responseTime": 504,
          "responseSize": 64
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:2)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:2)"
            }
          }
        ]
      },
      {
        "id": "4c6de58a-8b76-4ad7-bb1a-2cd28974248d",
        "cursor": {
          "ref": "6373fc8c-5886-4b41-9ed2-82a834410366",
          "length": 243,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "d7205010-b236-483b-bdf8-8dcf2a1efaa1"
        },
        "item": {
          "id": "4c6de58a-8b76-4ad7-bb1a-2cd28974248d",
          "name": "did:invalid"
        },
        "response": {
          "id": "efaccc3c-736b-4abe-aa06-236460eb8172",
          "status": "Not Found",
          "code": 404,
          "responseTime": 504,
          "responseSize": 64
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:2)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:2)"
            }
          }
        ]
      },
      {
        "id": "f6cc07c7-72ea-4c74-bd30-4fd2477e630e",
        "cursor": {
          "ref": "cad8e7c0-f798-4db3-a17d-1814b39ae7af",
          "length": 243,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "f82971e5-9628-49ca-b11b-d68827c3dfbf"
        },
        "item": {
          "id": "f6cc07c7-72ea-4c74-bd30-4fd2477e630e",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "7974c785-2a66-4131-a6b6-f72bcbe47cec",
          "status": "Not Found",
          "code": 404,
          "responseTime": 521,
          "responseSize": 64
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:3)"
            }
          }
        ]
      },
      {
        "id": "c8c24829-f606-4909-9d09-b47436e2cedc",
        "cursor": {
          "ref": "7dcecbea-c7b3-4ec1-97ce-952a905ef539",
          "length": 243,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "c125070c-883b-4e05-8278-b1bdf54d86e4"
        },
        "item": {
          "id": "c8c24829-f606-4909-9d09-b47436e2cedc",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "efe66e7a-1cfa-4196-8d85-c78d60ab2dad",
          "status": "Not Found",
          "code": 404,
          "responseTime": 396,
          "responseSize": 64
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "59eaaec1-50ee-4491-a17f-0ea34e907fd0",
        "cursor": {
          "ref": "685124ef-ff36-4b16-b33b-bfda08c3a53a",
          "length": 243,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "9c2e1568-594b-4d24-bacf-6f9c53133f7a"
        },
        "item": {
          "id": "59eaaec1-50ee-4491-a17f-0ea34e907fd0",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "bbcf2555-204f-415c-b7cb-f7089d7adb60",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 34,
          "responseSize": 0
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "No data, empty input at 1:1\n\n^",
              "stack": "JSONError: No data, empty input at 1:1\n\n^\n   at Object.eval sandbox-script.js:2:5)"
            }
          }
        ]
      },
      {
        "id": "798892ca-12c6-45eb-a971-f02039e44d67",
        "cursor": {
          "ref": "ed5aff48-9725-4aaf-82f1-0094636428ba",
          "length": 243,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "12d5e9ec-0b6f-4f30-82c6-6af62c071f0f"
        },
        "item": {
          "id": "798892ca-12c6-45eb-a971-f02039e44d67",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "72b105e0-07c3-4e6a-ad9b-62ea0f9d0de7",
          "status": "OK",
          "code": 200,
          "responseTime": 523,
          "responseSize": 1656
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "id": "798892ca-12c6-45eb-a971-f02039e44d67",
        "cursor": {
          "ref": "ed5aff48-9725-4aaf-82f1-0094636428ba",
          "length": 243,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "12d5e9ec-0b6f-4f30-82c6-6af62c071f0f"
        },
        "item": {
          "id": "798892ca-12c6-45eb-a971-f02039e44d67",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "72b105e0-07c3-4e6a-ad9b-62ea0f9d0de7",
          "status": "OK",
          "code": 200,
          "responseTime": 523,
          "responseSize": 1656
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "id": "3d48ad4d-7787-43f9-8ec9-c09aa737f9b1",
        "cursor": {
          "ref": "561d3b1d-dd61-4496-a142-40408bd47add",
          "length": 243,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "fd0c46fa-c38e-4643-8d17-b58d301c0209"
        },
        "item": {
          "id": "3d48ad4d-7787-43f9-8ec9-c09aa737f9b1",
          "name": "identifiers"
        },
        "response": {
          "id": "87fd33db-24e6-42ab-884a-609cdf79b8c2",
          "status": "OK",
          "code": 200,
          "responseTime": 528,
          "responseSize": 1656
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e87459c8-be59-42e2-ac68-2e2c1c763816",
        "cursor": {
          "ref": "916dcb84-00f8-4225-b865-e9ddabf0f175",
          "length": 243,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "e3fca12f-5a42-4728-ae25-c06c5f569c02"
        },
        "item": {
          "id": "e87459c8-be59-42e2-ac68-2e2c1c763816",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "11c7bfd5-3872-4412-b08e-4c1b5ccf9615",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 385,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "e87459c8-be59-42e2-ac68-2e2c1c763816",
        "cursor": {
          "ref": "916dcb84-00f8-4225-b865-e9ddabf0f175",
          "length": 243,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "e3fca12f-5a42-4728-ae25-c06c5f569c02"
        },
        "item": {
          "id": "e87459c8-be59-42e2-ac68-2e2c1c763816",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "11c7bfd5-3872-4412-b08e-4c1b5ccf9615",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 385,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "695df2fd-91d7-47a2-9388-013d65d29e88",
        "cursor": {
          "ref": "b6f60670-78f1-4523-a8fb-8059605c5e17",
          "length": 243,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "a594e825-b150-4308-8a40-1e38f962ea8c"
        },
        "item": {
          "id": "695df2fd-91d7-47a2-9388-013d65d29e88",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "26c6c7e8-87fe-4194-b880-513b20013bbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 374,
          "responseSize": 441
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "6bc16cd8-2c64-41e1-a8b8-16fdb81b9717",
        "cursor": {
          "ref": "675c0fbf-336e-4e1c-9000-9b6fcd546304",
          "length": 243,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "62e702f9-8d2f-49d7-a2fb-43d59023e116"
        },
        "item": {
          "id": "6bc16cd8-2c64-41e1-a8b8-16fdb81b9717",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "4662c8db-60fb-42d5-9c8a-efd94b45db55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 550,
          "responseSize": 960
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "46fe3e53-3cdc-462b-88fc-837f2c44dbab",
        "cursor": {
          "ref": "b6288b48-fe98-4e95-ae76-f2332dc2903e",
          "length": 243,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "cbfb35b5-e59c-424f-a31e-a75079821161"
        },
        "item": {
          "id": "46fe3e53-3cdc-462b-88fc-837f2c44dbab",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "ced94772-d055-4d5e-8d44-f7d9801b0366",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 561,
          "responseSize": 957
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "cb9cb45f-0897-49c9-8ae3-3c5734ed24f9",
        "cursor": {
          "ref": "b1efb229-a364-4889-a059-8a39e1b935cd",
          "length": 243,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "66e5183d-e2a7-4432-8f76-9425b7729d1e"
        },
        "item": {
          "id": "cb9cb45f-0897-49c9-8ae3-3c5734ed24f9",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "0a11e801-1647-496b-82cd-bcb0ba834862",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 577,
          "responseSize": 959
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "d3947145-3e3d-4f98-8a98-369685abdbcc",
        "cursor": {
          "ref": "10b7bed0-12fb-4ef6-b9c1-d9581ca7f952",
          "length": 243,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "737d60f1-3470-44a8-8979-8aa3c0fcbb4e"
        },
        "item": {
          "id": "d3947145-3e3d-4f98-8a98-369685abdbcc",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "a5e0c201-717c-4352-bd8d-590bbbe1120b",
          "status": "Created",
          "code": 201,
          "responseTime": 3967,
          "responseSize": 645
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "bc0a1150-ba17-447c-8ff4-2f1a043225d7",
        "cursor": {
          "ref": "94cc0bdf-506e-4493-84b3-7ebecb9cc43e",
          "length": 243,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "34523b10-5247-4c0f-b5ab-7330b2e8553c"
        },
        "item": {
          "id": "bc0a1150-ba17-447c-8ff4-2f1a043225d7",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "4f299407-f30b-4a42-b54d-145ddf9ab655",
          "status": "Created",
          "code": 201,
          "responseTime": 1871,
          "responseSize": 634
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "7c427b10-7c61-4c6a-8938-2319cb8161c3",
        "cursor": {
          "ref": "f5706002-f1ce-44e3-984b-b7c14423fe77",
          "length": 243,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "a4efd3be-b4cd-46b4-9bce-6386bd33b6ea"
        },
        "item": {
          "id": "7c427b10-7c61-4c6a-8938-2319cb8161c3",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "8c5da3e3-90e6-4acb-8e06-8d6c162f2feb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 381,
          "responseSize": 1448
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "4e26fc9d-f05d-4432-a255-87124e07de34",
        "cursor": {
          "ref": "a813d0fe-e3f3-49f7-885c-993fc25f9fcf",
          "length": 243,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "8fbea9a9-c74a-4db2-acd9-8f59d9d778f7"
        },
        "item": {
          "id": "4e26fc9d-f05d-4432-a255-87124e07de34",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "21e7c1bb-d815-482f-912d-90b21f235afe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 440,
          "responseSize": 1417
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "b566cd1a-87ed-4c20-ba95-d7acdf2e784a",
        "cursor": {
          "ref": "193795ae-0622-4bfd-a218-1933b9519767",
          "length": 243,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "f1103d09-17b5-4ddb-ad2e-8984db0512a1"
        },
        "item": {
          "id": "b566cd1a-87ed-4c20-ba95-d7acdf2e784a",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "06c03c6b-5db2-49f5-9f5a-d0e713e83f6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 407,
          "responseSize": 1414
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "56356df6-71d1-4991-abd4-be24248c27f9",
        "cursor": {
          "ref": "713c56e3-e09e-45bf-9b87-f34e4b0f72f1",
          "length": 243,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "473ccf8f-25a8-4d53-aa7d-3db7cbbfb44a"
        },
        "item": {
          "id": "56356df6-71d1-4991-abd4-be24248c27f9",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "e2f0a08d-288e-4d9e-806f-7be7a1606130",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 435,
          "responseSize": 1416
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "52cb59f7-0c26-413b-a76d-dcec50d6544b",
        "cursor": {
          "ref": "58e2ea8d-2912-45bc-83b6-d6b3828fea69",
          "length": 243,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "f6b07289-dc81-40f9-9601-9f310965e123"
        },
        "item": {
          "id": "52cb59f7-0c26-413b-a76d-dcec50d6544b",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "cc1328c2-e348-4700-bd7f-3f543d6eb408",
          "status": "Created",
          "code": 201,
          "responseTime": 1619,
          "responseSize": 682
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "7bf73fec-f476-4c5e-a92d-f92017acb025",
        "cursor": {
          "ref": "b82865d6-72d8-41b2-b567-ea063d2f2b82",
          "length": 243,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "429b220f-f253-41d9-ba10-7e6ac7bdd083"
        },
        "item": {
          "id": "7bf73fec-f476-4c5e-a92d-f92017acb025",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "6b1d4c28-d152-41d3-a7fd-5f03383b2831",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 425,
          "responseSize": 522
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "b6fab9ce-75e2-4ac3-b3b1-74415f985cbb",
        "cursor": {
          "ref": "590f6ee9-88a9-48ee-9ba1-d72b044f5fbc",
          "length": 243,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "34a05622-5610-4a56-a278-702ae5c8123a"
        },
        "item": {
          "id": "b6fab9ce-75e2-4ac3-b3b1-74415f985cbb",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "631104f7-abf1-4ed7-82e8-ff57e565eb93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 383,
          "responseSize": 478
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "3fe439f1-4015-448b-b040-c25c2632b734",
        "cursor": {
          "ref": "0f948195-d282-41a7-add4-d08037ae15ee",
          "length": 243,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "fafee0df-5801-454a-accc-c98db89935a3"
        },
        "item": {
          "id": "3fe439f1-4015-448b-b040-c25c2632b734",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "b9dcd85d-dbd7-4489-b10c-9db3d3e20a21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 413,
          "responseSize": 475
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "36fd06cd-9081-4675-8bf3-075c84595c93",
        "cursor": {
          "ref": "a45ce1b1-1f88-47ff-a494-78dd1b8679ce",
          "length": 243,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "5d2e598f-5770-472c-b768-7f73e441a3f3"
        },
        "item": {
          "id": "36fd06cd-9081-4675-8bf3-075c84595c93",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "99e23a9c-4474-4057-8bb0-acd37da295ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 373,
          "responseSize": 477
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "83f757f6-7f9b-4051-8f93-65ee60d1401f",
        "cursor": {
          "ref": "b6310f0c-0d3b-446b-97b5-11113ae39a46",
          "length": 243,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "f8df4c18-98f6-4405-96ad-62fce749c7bb"
        },
        "item": {
          "id": "83f757f6-7f9b-4051-8f93-65ee60d1401f",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "b58e94bf-26be-4e08-9af9-d5357f4ad727",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 399,
          "responseSize": 527
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "9e45fb2c-175a-4ef9-a925-9ccfdf37dd58",
        "cursor": {
          "ref": "395cee60-8d10-4308-be4e-b3b8b1381f6e",
          "length": 243,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "39b8e8fb-c261-42cb-b514-9f14d05728e7"
        },
        "item": {
          "id": "9e45fb2c-175a-4ef9-a925-9ccfdf37dd58",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "d97f9330-96fe-4e4d-b4cf-90aa1c27dbba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 367,
          "responseSize": 455
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "8c3b6925-9d88-483c-8c5d-7926f07cf19f",
        "cursor": {
          "ref": "55cea59b-e522-47cf-b487-24b353ce0ac8",
          "length": 243,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "580db2c0-8f49-44e5-b7b6-cd03018cf9b6"
        },
        "item": {
          "id": "8c3b6925-9d88-483c-8c5d-7926f07cf19f",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "89036167-2ca9-4592-8e7f-09384c22b3e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 370,
          "responseSize": 757
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "653952f6-797c-4518-9a80-32e0fbdd3df3",
        "cursor": {
          "ref": "c5427c29-0ef1-4a5d-a184-f32728d34760",
          "length": 243,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "63c4685a-e711-4e50-89cd-c0b1d8c216d0"
        },
        "item": {
          "id": "653952f6-797c-4518-9a80-32e0fbdd3df3",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "0cd28397-130e-4c06-b308-2d07d72b837d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 385,
          "responseSize": 754
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "afb0f17c-55c5-4d8d-8e4b-39084e97329a",
        "cursor": {
          "ref": "411b043b-2ff0-46b7-a133-77a663fdcb5c",
          "length": 243,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "d1428e91-eebb-484a-ba47-6019a2e25e2a"
        },
        "item": {
          "id": "afb0f17c-55c5-4d8d-8e4b-39084e97329a",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "a7238765-3ca3-4b17-a1de-05506bb79950",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 387,
          "responseSize": 756
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "e0b3ee9a-700f-49d8-9855-4812684dda17",
        "cursor": {
          "ref": "47d72c25-c142-4797-8ac2-60aaa90fa253",
          "length": 243,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "3528463a-76a6-4a20-ac58-d5bc2ca5ca0d"
        },
        "item": {
          "id": "e0b3ee9a-700f-49d8-9855-4812684dda17",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "2b7df55d-2d15-4eee-b69e-10d6e797e510",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 401,
          "responseSize": 754
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "7a26be9e-1d33-4098-b7cd-9bdc50e95ef0",
        "cursor": {
          "ref": "e2793480-61db-44eb-8fdc-a8a3d4457b2c",
          "length": 243,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "34b7007a-cf79-46ba-acfc-e03cf496a8b4"
        },
        "item": {
          "id": "7a26be9e-1d33-4098-b7cd-9bdc50e95ef0",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "a0e89ed2-4174-44c0-a4ab-6733720d336c",
          "status": "Created",
          "code": 201,
          "responseTime": 2321,
          "responseSize": 634
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "d983abb5-e84d-4f63-92c9-6086f284290f",
        "cursor": {
          "ref": "f90ba3eb-4506-4b9e-8843-7b4686b62ab3",
          "length": 243,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "2eb5d08c-ceb5-41e9-8cd4-96d702c12162"
        },
        "item": {
          "id": "d983abb5-e84d-4f63-92c9-6086f284290f",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "7043f5cf-8172-45a2-b301-1aafdd1e1900",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 527,
          "responseSize": 174
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "d1ca37bd-497e-43f7-9e57-10f1bba6b028",
        "cursor": {
          "ref": "b7b1c45f-096c-4994-9862-c8506fd8574d",
          "length": 243,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "d9d1b36d-5360-493a-9c33-b33b0f4d60b5"
        },
        "item": {
          "id": "d1ca37bd-497e-43f7-9e57-10f1bba6b028",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "79505881-b347-45ef-919e-10a0226727ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 946,
          "responseSize": 802
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "2a2de0ff-41e1-43aa-8724-2b3b073fcdd7",
        "cursor": {
          "ref": "fa330aa7-37e9-4eae-8820-e342b332a299",
          "length": 243,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "fcf3bc31-459a-4173-8f3e-2129921afcf0"
        },
        "item": {
          "id": "2a2de0ff-41e1-43aa-8724-2b3b073fcdd7",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "b223fede-b701-406f-a44d-1708bbf4c2e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 670,
          "responseSize": 792
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "3da838b7-254c-462a-8019-0c68e8690b76",
        "cursor": {
          "ref": "5e5cedbb-1da2-402c-86ae-705d9691583a",
          "length": 243,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "85bb5ce0-3b7a-417b-a618-93fecba1fd21"
        },
        "item": {
          "id": "3da838b7-254c-462a-8019-0c68e8690b76",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "ffceae3e-1040-4313-8e42-2c314128b036",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 658,
          "responseSize": 789
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "33f9bc9a-1c00-4676-9045-dac9921c07f6",
        "cursor": {
          "ref": "80e06612-f718-4ef4-8eb3-51b9ab4ff947",
          "length": 243,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "7c0d02bc-90b2-4757-85a5-5652c2a0e713"
        },
        "item": {
          "id": "33f9bc9a-1c00-4676-9045-dac9921c07f6",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "1ba6ca09-a188-4774-8048-47d7e6376991",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 623,
          "responseSize": 791
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "6fb2f832-ed65-4579-9887-ca91cd9921df",
        "cursor": {
          "ref": "6eba6d3b-56ff-4282-a043-5bbf1f7fd912",
          "length": 243,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "254b25a3-d146-4cfc-89a4-4b8a9590c713"
        },
        "item": {
          "id": "6fb2f832-ed65-4579-9887-ca91cd9921df",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "baabc5d5-aec5-4e47-a5cb-75056a8082db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 479,
          "responseSize": 789
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "a5c5a6ce-4fea-44e0-9c94-f1ce935ec26e",
        "cursor": {
          "ref": "9ca182b3-34ba-4f3f-aa47-60908fa67dba",
          "length": 243,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "42bc0c89-d822-44d6-a287-78d1eef8ee52"
        },
        "item": {
          "id": "a5c5a6ce-4fea-44e0-9c94-f1ce935ec26e",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "7482ca81-8695-44f3-9afa-9c75260441da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 676,
          "responseSize": 407
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "f4e08b02-bda8-4c9f-84d7-383c837b0872",
        "cursor": {
          "ref": "05a000b6-3406-476a-99c5-276b84ea8664",
          "length": 243,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "e9288a0c-4857-4aff-a995-dd80778fe93b"
        },
        "item": {
          "id": "f4e08b02-bda8-4c9f-84d7-383c837b0872",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "b9a2865a-b728-49cf-b0a2-dcab1527af92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 498,
          "responseSize": 753
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "0e902e07-e305-4a3c-b3a4-415f9b38b523",
        "cursor": {
          "ref": "8083249b-4b71-4ac9-ad4b-0ee881678b78",
          "length": 243,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "45e8fb10-8d3d-4731-9114-0691d494036c"
        },
        "item": {
          "id": "0e902e07-e305-4a3c-b3a4-415f9b38b523",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "f574dbb0-f915-4bfa-9825-e29a6363081f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 391,
          "responseSize": 682
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "978fdd93-8ca6-4925-a46a-49686fe72cb6",
        "cursor": {
          "ref": "44235471-ed29-482c-b746-8bff211ff8dd",
          "length": 243,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "7954f628-559b-4392-83f1-b19a41855403"
        },
        "item": {
          "id": "978fdd93-8ca6-4925-a46a-49686fe72cb6",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "47ac3c74-6014-449a-ad92-1249d782d3fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 399,
          "responseSize": 679
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "7652b680-cc33-4a3a-a0c6-b39df90ea129",
        "cursor": {
          "ref": "5e5e1d9d-0a0a-41f7-8c84-a6748eceb307",
          "length": 243,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "6216d91e-74de-491a-8051-1ccf94c2ca49"
        },
        "item": {
          "id": "7652b680-cc33-4a3a-a0c6-b39df90ea129",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "58121eea-96bf-456f-a32a-76b974ab035b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 394,
          "responseSize": 681
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "d3a57ecb-857c-41e6-8d23-a7f23394c8b3",
        "cursor": {
          "ref": "8720e645-c0fb-41e7-b566-82e0991d5aa9",
          "length": 243,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "e5313f21-c631-4319-b317-14c270987c29"
        },
        "item": {
          "id": "d3a57ecb-857c-41e6-8d23-a7f23394c8b3",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "dd8e11c0-842a-400b-ae2b-ff278581748c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 388,
          "responseSize": 930
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "bc545ba6-25a8-48bd-ba49-fa59b7e07f28",
        "cursor": {
          "ref": "1a719464-a393-44c5-9f8a-fa6c10b80a02",
          "length": 243,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "5fd2c5cf-3d5b-487e-9e7e-c0040efd7121"
        },
        "item": {
          "id": "bc545ba6-25a8-48bd-ba49-fa59b7e07f28",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "a181db90-2650-47ee-b142-482a5e7eb2ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 486,
          "responseSize": 966
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "4f599502-55d4-4dad-bc4e-2bbda5e77dd2",
        "cursor": {
          "ref": "f74d3d16-bd9a-48e2-a135-548fcdc5a374",
          "length": 243,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "8338d66e-eeb7-469d-9077-a847f37390a8"
        },
        "item": {
          "id": "4f599502-55d4-4dad-bc4e-2bbda5e77dd2",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "0873f150-0bd4-405b-8fb4-6a748ab7a42b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 392,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "cc02c19c-69c9-47d7-93d8-7fc110a979ad",
        "cursor": {
          "ref": "f446fc66-37d0-4d59-8d11-6fa86062fa39",
          "length": 243,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "a1321d4a-6ec9-493b-a0cd-46b8f77a3d46"
        },
        "item": {
          "id": "cc02c19c-69c9-47d7-93d8-7fc110a979ad",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "2398a40b-6df9-4382-8cf9-008889ff2b92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 402,
          "responseSize": 778
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "a04e16a4-e5e9-457a-bd73-c20f33e3a75b",
        "cursor": {
          "ref": "57fa6682-f972-4380-9614-737bc148b60a",
          "length": 243,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "daf6adac-fafe-415d-95e0-9bbc6999e8d7"
        },
        "item": {
          "id": "a04e16a4-e5e9-457a-bd73-c20f33e3a75b",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "26c6ae0f-f491-43a3-b4c8-f994e8534ae0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 382,
          "responseSize": 707
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "5f9b14ee-3b9d-43f7-ba87-a1152719bb60",
        "cursor": {
          "ref": "61ce6d82-cf29-4141-a088-2cbf98ea8c2a",
          "length": 243,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "109ea913-eaa8-4379-8fc5-c668d5ac52b4"
        },
        "item": {
          "id": "5f9b14ee-3b9d-43f7-ba87-a1152719bb60",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "52206fdc-78b9-4d82-a875-95812a43fe06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 397,
          "responseSize": 704
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "03ce2589-f29b-45f7-97e7-e1575880e067",
        "cursor": {
          "ref": "52d9eab2-495b-4580-8bc2-03a805b8bb71",
          "length": 243,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "3c666dd6-0b2f-47c0-80fd-cc10527aecf8"
        },
        "item": {
          "id": "03ce2589-f29b-45f7-97e7-e1575880e067",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "f794f788-6b09-42b0-9a19-a2a0dc8d8da3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 402,
          "responseSize": 706
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "b49b5876-3c72-4555-9ad3-5985b86bf403",
        "cursor": {
          "ref": "7022a69f-05ec-4352-a757-57b7bb95c7d5",
          "length": 243,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "1d6bcd2e-38d7-4f76-bb8d-a215a133927c"
        },
        "item": {
          "id": "b49b5876-3c72-4555-9ad3-5985b86bf403",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "63d296bb-423e-4c98-ab71-5df320356527",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 390,
          "responseSize": 955
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "e7920cab-4e92-45dc-9a14-28672589155c",
        "cursor": {
          "ref": "89849fa3-009f-4d60-be7b-07fec0aacc5c",
          "length": 243,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "f552b457-c780-4443-b1a2-d9708558804d"
        },
        "item": {
          "id": "e7920cab-4e92-45dc-9a14-28672589155c",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "1c368624-de80-49f6-9bd0-d5293c86a334",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 518,
          "responseSize": 991
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "6266987c-6ba0-4dab-a781-7d3b29d7ad6c",
        "cursor": {
          "ref": "139f0ae4-5737-4167-8ef4-8de233bae8f9",
          "length": 243,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "58258318-b799-4f42-8974-7343d4c38039"
        },
        "item": {
          "id": "6266987c-6ba0-4dab-a781-7d3b29d7ad6c",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "e35c87dc-7f92-4fde-9fc7-47942e317538",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 400,
          "responseSize": 465
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "cffc185d-46af-44d1-a1ed-a9a4d3510287",
        "cursor": {
          "ref": "fb728e59-5b42-4a23-9419-92e1ef37f611",
          "length": 243,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "803d75a2-67be-43c8-8321-0362337ba37a"
        },
        "item": {
          "id": "cffc185d-46af-44d1-a1ed-a9a4d3510287",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "4e79b448-6d0c-4021-99b5-a21fc4039a0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 424,
          "responseSize": 489
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "721f7870-7931-4471-8a6b-547c8376e736",
        "cursor": {
          "ref": "c61d7201-ddb6-4595-9a6b-6c2122e88b95",
          "length": 243,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "ff44e4fd-7676-4902-8ca7-2e3e41a7ec00"
        },
        "item": {
          "id": "721f7870-7931-4471-8a6b-547c8376e736",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "72d6737d-ef0e-467b-a18b-f7ba7956dcce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 442,
          "responseSize": 470
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "eb9f4d17-5316-4ff6-a1ef-2cd6e2dc15b9",
        "cursor": {
          "ref": "92dc035d-18cf-480e-89c5-193da29e8ef3",
          "length": 243,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "4f82c8d9-9277-4b01-8f71-100ceb0ce90a"
        },
        "item": {
          "id": "eb9f4d17-5316-4ff6-a1ef-2cd6e2dc15b9",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "77b29e9b-7459-4e7f-ae39-a2e448942736",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 407,
          "responseSize": 467
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "c929b1dd-e5f0-425f-a52f-320df7acfa1d",
        "cursor": {
          "ref": "3db1bce7-603c-4246-ad90-c19eed3d3c46",
          "length": 243,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "d059b617-20d4-44bb-a017-1a73c837fe61"
        },
        "item": {
          "id": "c929b1dd-e5f0-425f-a52f-320df7acfa1d",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "d8519849-15dc-4d4c-815a-04e7814abc43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 393,
          "responseSize": 469
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "e811e05c-f45f-4c18-b009-1f37315692cd",
        "cursor": {
          "ref": "150ca656-24a6-4351-b0e4-68a334233ecb",
          "length": 243,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "866b47af-906a-4e65-be90-285157f88427"
        },
        "item": {
          "id": "e811e05c-f45f-4c18-b009-1f37315692cd",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "66d5bf9d-66d3-4703-96c4-e91588b50769",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 405,
          "responseSize": 467
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "a1e90e70-2256-4875-aa5d-dd7a0259796e",
        "cursor": {
          "ref": "8f81e353-2b55-4884-9605-8c17a4fe12ad",
          "length": 243,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "fcd22f28-9cd1-485e-97d7-19ee44e66e89"
        },
        "item": {
          "id": "a1e90e70-2256-4875-aa5d-dd7a0259796e",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "a39e5379-602f-4f64-8192-2faccef50e5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 542,
          "responseSize": 237
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "1aace2d7-3e2e-48e3-ae9b-28dfb4e763ad",
        "cursor": {
          "ref": "c1a5ef08-8201-466d-b7ae-c7d958b62153",
          "length": 243,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "feab8c47-8ea7-4e47-9fab-7d310b4139f1"
        },
        "item": {
          "id": "1aace2d7-3e2e-48e3-ae9b-28dfb4e763ad",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "ce28972c-ec58-4e8e-abe8-c0817b66f1a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 426,
          "responseSize": 490
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      },
      {
        "id": "32d4134b-27bf-4df4-9f34-82df16029bbf",
        "cursor": {
          "ref": "6e7e12a9-e15d-442a-9c07-c79985eb89ed",
          "length": 243,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "49de0d4f-132d-4288-8428-e564ce9370e3"
        },
        "item": {
          "id": "32d4134b-27bf-4df4-9f34-82df16029bbf",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "9bbdfba8-e62a-4012-863a-48846dac3a71",
          "status": "Created",
          "code": 201,
          "responseTime": 1439,
          "responseSize": 653
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:59)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:59)"
            }
          }
        ]
      },
      {
        "id": "4931b46f-e79f-4174-b11f-18cf4629eea0",
        "cursor": {
          "ref": "78ea47c6-267c-4139-8eda-471521d8dbe4",
          "length": 243,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "98aaa51c-7534-4a67-853b-98e78752f2d9"
        },
        "item": {
          "id": "4931b46f-e79f-4174-b11f-18cf4629eea0",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "344f9605-efd6-4336-8972-fe7c849fca8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 431,
          "responseSize": 935
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "98adf749-7f9d-4852-8621-d5631558d9c8",
        "cursor": {
          "ref": "e51005d0-7dbf-4476-be6b-629b25c9aeda",
          "length": 243,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "4726439e-af48-46de-9aff-c7554034e0bd"
        },
        "item": {
          "id": "98adf749-7f9d-4852-8621-d5631558d9c8",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "243a1fb2-7e6d-4a00-b83e-1f1f3f180b48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 387,
          "responseSize": 932
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:61)"
            }
          }
        ]
      },
      {
        "id": "19351125-c1ee-4704-a1fe-21b9c7731f29",
        "cursor": {
          "ref": "abcbf032-22ca-4ed5-9480-7a13d8ce64b5",
          "length": 243,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "797885c0-c634-4cbe-b04f-8a9500dee945"
        },
        "item": {
          "id": "19351125-c1ee-4704-a1fe-21b9c7731f29",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "5fe3b205-81b3-44dd-8a01-b7d057dc49a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 396,
          "responseSize": 934
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:62)"
            }
          }
        ]
      },
      {
        "id": "86a30886-8127-4d08-ae7b-448e516763f4",
        "cursor": {
          "ref": "d86fc87f-db2c-418d-9b4b-be1bd24f5901",
          "length": 243,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "7a7c72b4-1de9-4574-a873-afba9810a20f"
        },
        "item": {
          "id": "86a30886-8127-4d08-ae7b-448e516763f4",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "da7ba858-67e8-4a1a-8372-247a11858b16",
          "status": "Created",
          "code": 201,
          "responseTime": 1515,
          "responseSize": 651
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:63)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:63)"
            }
          }
        ]
      },
      {
        "id": "198fe8a2-1d9d-4a74-9da8-7092ac846572",
        "cursor": {
          "ref": "cee15252-4c79-40e8-b177-a131b33e826e",
          "length": 243,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "0784b889-a653-4af0-bf1a-94c2ba408fcd"
        },
        "item": {
          "id": "198fe8a2-1d9d-4a74-9da8-7092ac846572",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "fbaee527-0f26-42b1-b438-99e4010e9d61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 386,
          "responseSize": 1273
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:64)"
            }
          }
        ]
      },
      {
        "id": "53562df4-2df5-44c8-8528-6c0210bc18ed",
        "cursor": {
          "ref": "3829d0f2-575b-43a2-8fe8-3de947838211",
          "length": 243,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "a795ad84-1804-4a65-a41e-41ba29c99c42"
        },
        "item": {
          "id": "53562df4-2df5-44c8-8528-6c0210bc18ed",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "877c39ee-410c-4182-bc89-935e5442dd69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 398,
          "responseSize": 1259
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "7a6437e2-ede7-43b5-b6de-17e250d6c3bc",
        "cursor": {
          "ref": "5dd36188-6417-4514-9e83-b91cd7b65cae",
          "length": 243,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "29408687-236a-43f7-bff1-2b2e448849c9"
        },
        "item": {
          "id": "7a6437e2-ede7-43b5-b6de-17e250d6c3bc",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "7faca7e8-1bb9-4efc-9398-a0d454231634",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 395,
          "responseSize": 1256
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "dddca609-5384-4e4b-ad08-9bc8b34ccff0",
        "cursor": {
          "ref": "af91cd9b-335f-42cb-9b68-d24ea79ac49e",
          "length": 243,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "6609eb8f-a02a-4bbb-b3de-5ffd3ca8bb31"
        },
        "item": {
          "id": "dddca609-5384-4e4b-ad08-9bc8b34ccff0",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "a57a5113-b3c6-4e04-b75a-efe11355e9ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 394,
          "responseSize": 1258
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "92a4decb-b0c2-403d-98be-8e5a21e2215b",
        "cursor": {
          "ref": "bc54f740-5f7f-4a8c-a5a7-fe548d4ee3e7",
          "length": 243,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "ab04d02f-9ddd-49a9-969a-ad7e29f72422"
        },
        "item": {
          "id": "92a4decb-b0c2-403d-98be-8e5a21e2215b",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "8005d560-f2ab-4acf-9764-17d527db21ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 492,
          "responseSize": 1256
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "0bc9ed90-283c-48e6-a4d6-81750e8e5847",
        "cursor": {
          "ref": "694fac71-c191-4f76-8238-8c83f92ab61b",
          "length": 243,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "f2ff7c4b-72ae-4f0f-837d-8b846cc66624"
        },
        "item": {
          "id": "0bc9ed90-283c-48e6-a4d6-81750e8e5847",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "cf82f038-7ba5-480d-8efd-f6b1cec03359",
          "status": "Created",
          "code": 201,
          "responseTime": 1478,
          "responseSize": 636
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "6b2c5ae2-4f91-4900-b586-3f6f2c868f52",
        "cursor": {
          "ref": "85b5943a-17be-493a-a777-8b0929b33dd9",
          "length": 243,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "a476de81-09af-4e53-97a8-c1c66c961387"
        },
        "item": {
          "id": "6b2c5ae2-4f91-4900-b586-3f6f2c868f52",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "bc138f1d-bdf6-480d-9a9d-6ab67b99464a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 408,
          "responseSize": 460
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "4221f755-129f-4dc0-b476-7d2a27d15e94",
        "cursor": {
          "ref": "38f75994-7b29-45ff-9cab-699cc159cb71",
          "length": 243,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "7bfbbcf8-a05a-41dc-b321-ab9df5eb1c62"
        },
        "item": {
          "id": "4221f755-129f-4dc0-b476-7d2a27d15e94",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "300fc979-7f96-4b89-8e89-f7bd7b8b59ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 385,
          "responseSize": 463
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "a85afe14-709e-47d6-abe2-d49240d85665",
        "cursor": {
          "ref": "0564aa45-e545-43d4-b117-b25ceea91611",
          "length": 243,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "17b91611-e970-443c-9b0f-b11b3d74014f"
        },
        "item": {
          "id": "a85afe14-709e-47d6-abe2-d49240d85665",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "bd4bb5b0-7ca0-4095-9a80-3c239b138605",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 502,
          "responseSize": 460
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:72)"
            }
          }
        ]
      },
      {
        "id": "3d732a46-6cf3-4956-a224-d80a7e39a75b",
        "cursor": {
          "ref": "74480c3d-4993-4873-8def-333e9e0e4f6e",
          "length": 243,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "31294ad8-4d1e-4b41-ad61-bf3bca0058b8"
        },
        "item": {
          "id": "3d732a46-6cf3-4956-a224-d80a7e39a75b",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "1c5f057d-41c2-4e0e-9231-7815f28e73c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 393,
          "responseSize": 462
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:73)"
            }
          }
        ]
      },
      {
        "id": "80a92fac-a62f-4b37-8139-cb2445dc35a0",
        "cursor": {
          "ref": "67a21408-71d4-41ec-a99c-b7751f7fea18",
          "length": 243,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "7898080a-dbd4-4a43-a9e5-d13eed060ac0"
        },
        "item": {
          "id": "80a92fac-a62f-4b37-8139-cb2445dc35a0",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "231c800a-ff42-42c6-af67-9d4c552620bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 481,
          "responseSize": 460
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:74)"
            }
          }
        ]
      },
      {
        "id": "855651f0-01c5-4f3f-bf07-b592e0465413",
        "cursor": {
          "ref": "9b161874-3c5c-434a-9c7a-b09e326b4eb4",
          "length": 243,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "23576fbd-244d-46d2-b0f1-f778959292b9"
        },
        "item": {
          "id": "855651f0-01c5-4f3f-bf07-b592e0465413",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "780d90e2-c599-454f-9445-9715c496ba2f",
          "status": "Created",
          "code": 201,
          "responseTime": 1456,
          "responseSize": 636
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:75)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:75)"
            }
          }
        ]
      },
      {
        "id": "2f100890-831c-429e-a0d7-85dbb2e69b96",
        "cursor": {
          "ref": "0655add2-280c-498c-96fc-5aa50f0813be",
          "length": 243,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "6ee5844c-30be-4146-a500-b2abb429e5c0"
        },
        "item": {
          "id": "2f100890-831c-429e-a0d7-85dbb2e69b96",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "09192e12-9754-495f-bb29-6ccf6cd8d144",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 399,
          "responseSize": 512
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:76)"
            }
          }
        ]
      },
      {
        "id": "047ba676-66c9-4e6f-b115-a9ac6ad56022",
        "cursor": {
          "ref": "1daecefe-8f6f-4bb0-a03c-45f770ce27e7",
          "length": 243,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "1fb4c8a2-366f-461c-ad72-275ecfcaa9ae"
        },
        "item": {
          "id": "047ba676-66c9-4e6f-b115-a9ac6ad56022",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "51049c1b-9451-46d0-8aab-d08b20a68c1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 418,
          "responseSize": 493
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:77)"
            }
          }
        ]
      },
      {
        "id": "669a6508-d3d6-4994-b167-37c245a43f44",
        "cursor": {
          "ref": "df2c1b61-6068-4ad0-be1e-f8442a526628",
          "length": 243,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "72b06798-85ae-49c1-a3de-ebc846ac9ae1"
        },
        "item": {
          "id": "669a6508-d3d6-4994-b167-37c245a43f44",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "8c94ff5e-a36e-491a-a014-43c20e40a562",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 491,
          "responseSize": 490
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:78)"
            }
          }
        ]
      },
      {
        "id": "01938d9e-3646-4a38-a56a-715300eca4d8",
        "cursor": {
          "ref": "652284d1-aa40-4b3a-829d-98b1abfab057",
          "length": 243,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "41fc5cba-5eae-4fa4-a5e8-ce612efe31f7"
        },
        "item": {
          "id": "01938d9e-3646-4a38-a56a-715300eca4d8",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "3fd2b77c-93ff-49f4-a317-d6bc0d730462",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 601,
          "responseSize": 492
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:79)"
            }
          }
        ]
      },
      {
        "id": "ef96dc1b-cc1c-45f9-a930-f70f7d879ba4",
        "cursor": {
          "ref": "9fa2f233-6a5d-4362-8d45-3ef301637fa4",
          "length": 243,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "4b3f5e02-98e6-48c2-b3a7-4280fbbdd689"
        },
        "item": {
          "id": "ef96dc1b-cc1c-45f9-a930-f70f7d879ba4",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "8ff051b6-03ee-492e-8af7-902c5e326a54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 510,
          "responseSize": 490
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:80)"
            }
          }
        ]
      },
      {
        "id": "d2364c89-e521-4d51-ae6c-0bf9176a72be",
        "cursor": {
          "ref": "cf4f7201-d42a-482a-97ef-66b76a187a28",
          "length": 243,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "b9705b05-66d8-46ae-b1ae-3fec3106a63b"
        },
        "item": {
          "id": "d2364c89-e521-4d51-ae6c-0bf9176a72be",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "d66c0020-5d88-49f2-b1c4-00719aef4a57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 450,
          "responseSize": 588
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:81)"
            }
          }
        ]
      },
      {
        "id": "e0f0311d-a192-4113-9e5d-529fde467fe1",
        "cursor": {
          "ref": "3c1ebaf1-221d-415b-bd4c-401f651aba13",
          "length": 243,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "ae68b142-3174-4b8c-9384-366672e2f2b4"
        },
        "item": {
          "id": "e0f0311d-a192-4113-9e5d-529fde467fe1",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "da45d1c1-5876-443c-baeb-9392475a854b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 384,
          "responseSize": 582
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:82)"
            }
          }
        ]
      },
      {
        "id": "a78dd384-02b3-44da-a042-3b23b83d94ae",
        "cursor": {
          "ref": "69d97653-39c2-4179-b3b6-7bae7cfeb1bf",
          "length": 243,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "4f7f99db-ff71-42af-b0aa-4adacf63313f"
        },
        "item": {
          "id": "a78dd384-02b3-44da-a042-3b23b83d94ae",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "67369512-53ed-4b9b-b1df-2b18bf0cbb5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 400,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:83)"
            }
          }
        ]
      },
      {
        "id": "3f0b6e61-8437-4cb9-94fb-9eb35ed0d45b",
        "cursor": {
          "ref": "a13a4a5a-7cd7-4ca2-b715-82b5c76e1174",
          "length": 243,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "6c079e6f-aa8d-4ca1-9b0e-fc9b9b262df5"
        },
        "item": {
          "id": "3f0b6e61-8437-4cb9-94fb-9eb35ed0d45b",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "333ad911-7d89-403a-8be9-b072831fea1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 377,
          "responseSize": 556
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:84)"
            }
          }
        ]
      },
      {
        "id": "c4d83f93-ba85-4d22-9fe2-e1d50e27efba",
        "cursor": {
          "ref": "88e8d9a4-4883-4181-8134-e88281c9223c",
          "length": 243,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "f6e2832b-2262-43de-a759-fb0bfaef4a01"
        },
        "item": {
          "id": "c4d83f93-ba85-4d22-9fe2-e1d50e27efba",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "1bc90f5e-03dc-44fc-ba89-318d6ac58cdc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 460,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:85)"
            }
          }
        ]
      },
      {
        "id": "d724f0c9-ecf3-4149-973f-dc8bbfe86f7d",
        "cursor": {
          "ref": "9384adce-d79f-4117-92c2-7ad775b4ce2b",
          "length": 243,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "6a870150-1ca2-4ed0-8e14-2db9bb980865"
        },
        "item": {
          "id": "d724f0c9-ecf3-4149-973f-dc8bbfe86f7d",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "710eab7f-5f38-4f0c-ada7-8856d016335d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 401,
          "responseSize": 580
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:86)"
            }
          }
        ]
      },
      {
        "id": "7cee5605-6dd7-426b-abed-99936217a587",
        "cursor": {
          "ref": "1adb712b-741a-48cf-91d2-63aa4dcb5e1c",
          "length": 243,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "148342b6-2c60-4239-a32d-d244dc40af47"
        },
        "item": {
          "id": "7cee5605-6dd7-426b-abed-99936217a587",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "a4b2f2e8-2370-4382-8c6f-bfef33d255d5",
          "status": "Created",
          "code": 201,
          "responseTime": 1930,
          "responseSize": 973
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "95320da6-8dc7-43dc-a1aa-4377160419e3",
        "cursor": {
          "ref": "53bc3389-e0cb-4684-8d14-eecf9dfaaf90",
          "length": 243,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "55c3054a-6d4d-46f8-af62-7fa268a2bdfa"
        },
        "item": {
          "id": "95320da6-8dc7-43dc-a1aa-4377160419e3",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "3e86975f-00d5-48ec-9924-21f86c6cd432",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 401,
          "responseSize": 612
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:88)"
            }
          }
        ]
      },
      {
        "id": "e6397fda-4a85-4344-a4f5-3c9db66a04b2",
        "cursor": {
          "ref": "e3a52223-2d83-4371-9b68-46a4dab82c73",
          "length": 243,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "22d468a8-0935-4e68-986c-3e805fe7d912"
        },
        "item": {
          "id": "e6397fda-4a85-4344-a4f5-3c9db66a04b2",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "8d771a32-78fc-43fe-a256-f586cde80a97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 483,
          "responseSize": 589
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "fdf8992c-e27d-4ffc-b278-2bf264e3ce71",
        "cursor": {
          "ref": "e36b7f11-16cd-40c9-a722-5fa52e110f68",
          "length": 243,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "be90a911-700d-4155-8dc5-49ef141f6ecb"
        },
        "item": {
          "id": "fdf8992c-e27d-4ffc-b278-2bf264e3ce71",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "4a4d42e4-d6f6-4704-8e09-a940b32c3859",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 451,
          "responseSize": 586
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:90)"
            }
          }
        ]
      },
      {
        "id": "29063245-b325-487d-9af6-ef29d2f8a74f",
        "cursor": {
          "ref": "a9c70e51-811c-4829-9676-baf25f71cb95",
          "length": 243,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "e2d69ff5-80cd-42e8-b915-bf8ae734fd5d"
        },
        "item": {
          "id": "29063245-b325-487d-9af6-ef29d2f8a74f",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "1ce5f657-948c-4671-a378-3d6dab64ebff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 399,
          "responseSize": 588
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:91)"
            }
          }
        ]
      },
      {
        "id": "a11e67ff-728e-45e3-a82b-ee2b75ce5a2e",
        "cursor": {
          "ref": "4614f717-c390-4981-8f9c-3d886da20849",
          "length": 243,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "592d6328-eadc-4215-9ffa-80f9436ba5a2"
        },
        "item": {
          "id": "a11e67ff-728e-45e3-a82b-ee2b75ce5a2e",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "aee90a4b-d278-445d-930e-fb0b4f251333",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 406,
          "responseSize": 586
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:92)"
            }
          }
        ]
      },
      {
        "id": "f7b81858-684b-4b9b-b1d5-193e3794b23b",
        "cursor": {
          "ref": "e8338198-3a30-4c90-a0c9-c588d5af1dc2",
          "length": 243,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "bb983e0e-f80a-4c3e-b359-139d6cdd1bcb"
        },
        "item": {
          "id": "f7b81858-684b-4b9b-b1d5-193e3794b23b",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "6d210d85-a518-4da3-9df0-998927c35c18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 390,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "32c2d053-f98f-4a83-a73e-a39ed26a3bb9",
        "cursor": {
          "ref": "27b7ac51-166f-4066-adcf-2b314c391a66",
          "length": 243,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "76223e74-87a5-4b2c-803c-1a5902c68548"
        },
        "item": {
          "id": "32c2d053-f98f-4a83-a73e-a39ed26a3bb9",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "e1adc82f-447f-46f5-a027-75aedde94d60",
          "status": "Not Found",
          "code": 404,
          "responseTime": 32,
          "responseSize": 0
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 404",
              "stack": "AssertionError: expected response to have status code 401 but got 404\n   at Object.eval sandbox-script.js:1:94)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "No data, empty input at 1:1\n\n^",
              "stack": "JSONError: No data, empty input at 1:1\n\n^\n   at Object.eval sandbox-script.js:2:94)"
            }
          }
        ]
      },
      {
        "id": "14ec9b63-119e-413e-9846-be358f66ece8",
        "cursor": {
          "ref": "ac565b6f-60e4-4635-bb31-382fc302dfce",
          "length": 243,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "f304114a-7cd4-466f-bfe4-80d53ab7507e"
        },
        "item": {
          "id": "14ec9b63-119e-413e-9846-be358f66ece8",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "ce0e755a-251d-4364-bde4-b017cfaf8c23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 428,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "9035c53e-0227-4135-b456-88db15425637",
        "cursor": {
          "ref": "d54a15e5-5a5c-43a4-9e15-d347fa29a64e",
          "length": 243,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "601a0fd7-f36c-4bd2-a8ce-884ae737686e"
        },
        "item": {
          "id": "9035c53e-0227-4135-b456-88db15425637",
          "name": "credentials_issue"
        },
        "response": {
          "id": "be148903-4321-4c2b-b13d-049296bf4e75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 380,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:96)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:96)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 3,
              "test": "response credentialSubject matches request credential.credentialSubject",
              "message": ".empty was passed non-string primitive undefined",
              "stack": "AssertionError: .empty was passed non-string primitive undefined\n   at Object.eval sandbox-script.js:4:96)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 5,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot read properties of undefined (reading 'created')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'created')\n   at Object.eval sandbox-script.js:6:96)"
            }
          }
        ]
      },
      {
        "id": "e1ae0017-d8ed-4e69-b475-1e67826ec4fc",
        "cursor": {
          "ref": "2e56440f-4416-45da-9280-f2c566559f51",
          "length": 243,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "8a28eaa3-0f47-4dd7-91f9-b7fa05cada48"
        },
        "item": {
          "id": "e1ae0017-d8ed-4e69-b475-1e67826ec4fc",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "3cec6c74-1caa-410f-8833-a88bae351c1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 422,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:97)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:97)"
            }
          }
        ]
      },
      {
        "id": "93014e6d-2920-4ff5-9359-c7f0840c5e22",
        "cursor": {
          "ref": "a4e099c8-b139-4caa-bc35-f4b4a8af0b29",
          "length": 243,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "2da8b0a1-00de-4df4-ad41-a79c4ab6ad68"
        },
        "item": {
          "id": "93014e6d-2920-4ff5-9359-c7f0840c5e22",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "f0ab35a8-3ca8-4e98-9dab-13a916100a53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 406,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:98)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:98)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:98)"
            }
          }
        ]
      },
      {
        "id": "47cf3b6b-3336-4382-86f0-aee437096925",
        "cursor": {
          "ref": "dccf1884-1dd1-415c-ab26-38774380c5dc",
          "length": 243,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "38d3a5a3-856d-439e-b0c1-46cc88c7bba8"
        },
        "item": {
          "id": "47cf3b6b-3336-4382-86f0-aee437096925",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "430a6cdc-a256-4573-938b-9f6c0cfa1161",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 387,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:99)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:99)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:99)"
            }
          }
        ]
      },
      {
        "id": "4489f515-9f3a-49e4-b0ef-a437067fa16a",
        "cursor": {
          "ref": "48505098-be1b-49a8-82d6-14806dd15d2e",
          "length": 243,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "63f2af2f-7912-4677-ba21-a000a78bfb99"
        },
        "item": {
          "id": "4489f515-9f3a-49e4-b0ef-a437067fa16a",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "d5c79732-39ba-4db0-8e76-f42af87e3d7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 417,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:100)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:100)"
            }
          }
        ]
      },
      {
        "id": "82cf4a4c-3226-490a-bc3d-bb4e7dde66fa",
        "cursor": {
          "ref": "551b1137-0109-442f-a279-37d94f25ac51",
          "length": 243,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "390d6460-6314-4f9a-b7ac-ca345a61163f"
        },
        "item": {
          "id": "82cf4a4c-3226-490a-bc3d-bb4e7dde66fa",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "b2ae0269-d301-46ae-8d5a-c789385e94c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 381,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:101)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:101)"
            }
          }
        ]
      },
      {
        "id": "06bf6399-361f-4f5c-b1a7-52601038b8c9",
        "cursor": {
          "ref": "da878d1a-249a-455a-8b25-855ce73c21be",
          "length": 243,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "dc8747e2-46da-49c3-8557-f9707fcf05fb"
        },
        "item": {
          "id": "06bf6399-361f-4f5c-b1a7-52601038b8c9",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "52ed023f-0dff-41a3-82c2-e6b18aa3d079",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 390,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "06bf6399-361f-4f5c-b1a7-52601038b8c9",
        "cursor": {
          "ref": "da878d1a-249a-455a-8b25-855ce73c21be",
          "length": 243,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "dc8747e2-46da-49c3-8557-f9707fcf05fb"
        },
        "item": {
          "id": "06bf6399-361f-4f5c-b1a7-52601038b8c9",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "52ed023f-0dff-41a3-82c2-e6b18aa3d079",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 390,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "ca5ab59f-e5c3-4122-8bb5-9e5111e04772",
        "cursor": {
          "ref": "ff5b8c5e-0061-4425-8ead-48ce6fcb0847",
          "length": 243,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "8781227d-4ffb-41a8-921f-8474623db149"
        },
        "item": {
          "id": "ca5ab59f-e5c3-4122-8bb5-9e5111e04772",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "34ee041d-a4ef-451d-92a9-8c2b676235c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 385,
          "responseSize": 327
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "665bd1b0-d458-4099-8ae4-e15eb1d84aef",
        "cursor": {
          "ref": "14c33fd9-1c0c-49bc-9da4-f62417ca7b82",
          "length": 243,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "e8461d16-40af-409a-a07d-9b7c45a90d84"
        },
        "item": {
          "id": "665bd1b0-d458-4099-8ae4-e15eb1d84aef",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "b96ac03c-e50b-4159-bde7-94524332219c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 392,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:104)"
            }
          }
        ]
      },
      {
        "id": "6cac4a60-36c3-46ab-a0d5-287346c32562",
        "cursor": {
          "ref": "dfedb06c-2a84-49fb-931e-7cdc4dda5405",
          "length": 243,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "d6d598ed-cf5e-4cba-9667-38d0500f9385"
        },
        "item": {
          "id": "6cac4a60-36c3-46ab-a0d5-287346c32562",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "1e2e262c-0fa9-4559-9021-116846d5e81b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 379,
          "responseSize": 280
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:105)"
            }
          }
        ]
      },
      {
        "id": "9f42dfe0-a838-414b-a1d3-6dbbefc3464b",
        "cursor": {
          "ref": "7b9f3138-acec-43d5-be67-67d284c6f511",
          "length": 243,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "55813c7f-6db5-4977-964a-fc5b64a0cc13"
        },
        "item": {
          "id": "9f42dfe0-a838-414b-a1d3-6dbbefc3464b",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "bb0f80e0-adac-4fd5-afb7-0334c2d02b00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 411,
          "responseSize": 282
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:106)"
            }
          }
        ]
      },
      {
        "id": "a67e12ed-b75c-4100-8d89-3f0dee7a1aa0",
        "cursor": {
          "ref": "6d0f46e9-57ec-4ba6-b4c6-8b924b069577",
          "length": 243,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "9524627e-ebaa-455d-9c23-9c437c97e159"
        },
        "item": {
          "id": "a67e12ed-b75c-4100-8d89-3f0dee7a1aa0",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "b2c4cd85-998e-4921-b6bf-97363b5ea126",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 390,
          "responseSize": 280
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:107)"
            }
          }
        ]
      },
      {
        "id": "c9837dcc-c257-4257-8f4f-4d019045c209",
        "cursor": {
          "ref": "ae7f75bf-30e6-4388-90b6-e087017cf885",
          "length": 243,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "e5c3ad45-8631-4bca-8693-0fea120f98cc"
        },
        "item": {
          "id": "c9837dcc-c257-4257-8f4f-4d019045c209",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "7b922795-528f-4ab0-8845-e2c982032170",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 407,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:108)"
            }
          }
        ]
      },
      {
        "id": "1f48f943-379f-452f-b9cf-b8ce3e690315",
        "cursor": {
          "ref": "5fc79afb-4343-48f2-bb8b-277f72edfcd9",
          "length": 243,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "fb730529-d1ec-4017-b163-13a73efe8929"
        },
        "item": {
          "id": "1f48f943-379f-452f-b9cf-b8ce3e690315",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "e92dd369-c118-451a-b0f3-ea508a4f530e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 393,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:109)"
            }
          }
        ]
      },
      {
        "id": "981ae14f-f9ab-475d-a9cb-7eee91da3d4c",
        "cursor": {
          "ref": "1a9e8490-fd9a-4f53-bb23-bad209a1cbb9",
          "length": 243,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "79c25822-7dd4-46ee-b7d2-b323d3dafccc"
        },
        "item": {
          "id": "981ae14f-f9ab-475d-a9cb-7eee91da3d4c",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "aed5b595-95f6-4420-8a51-dd8988c25269",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 411,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "60576898-7e29-4988-9668-31db1a4d3058",
        "cursor": {
          "ref": "8a681de5-dc6c-4cea-ad57-de5fd8cfc757",
          "length": 243,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "5f34f342-dcbf-497e-94e8-6836406dea92"
        },
        "item": {
          "id": "60576898-7e29-4988-9668-31db1a4d3058",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "22592d0b-bfe9-494b-8eb9-bb7882d4b07f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 464,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "e247cc38-a8e1-49cf-9d39-77ff3c96f7cf",
        "cursor": {
          "ref": "5f756962-26db-48d7-b8ad-17e876ab6f2f",
          "length": 243,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "96cdadeb-6464-454a-9506-4778e041cb80"
        },
        "item": {
          "id": "e247cc38-a8e1-49cf-9d39-77ff3c96f7cf",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "7a7b2034-ac72-4499-8ff2-2d5234a6f2e2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 393,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "9b690f31-b97a-4284-820e-5ff5355f933d",
        "cursor": {
          "ref": "021020da-a4ef-4964-a142-a9ba2bdff970",
          "length": 243,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "6201f457-8074-46d6-bc2d-adde34cbbba9"
        },
        "item": {
          "id": "9b690f31-b97a-4284-820e-5ff5355f933d",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "7f40b9cb-cbbe-4d04-9249-6298f552e7b1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 414,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "12587a97-bb5e-420b-a493-ea2dab4e61f7",
        "cursor": {
          "ref": "773ea901-0539-4023-bf3f-627582a9945d",
          "length": 243,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "265840a2-1c4b-4830-b377-99e407cf2210"
        },
        "item": {
          "id": "12587a97-bb5e-420b-a493-ea2dab4e61f7",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "359e2b55-2c07-4112-afd9-671d665f78ca",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 391,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "fa7f008f-423a-4943-aeb7-f303f0cde71b",
        "cursor": {
          "ref": "0c4be90a-ec08-41f7-9b23-c6102dc4d303",
          "length": 243,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "a4283284-1ee0-42ad-bd28-515d2496e7cb"
        },
        "item": {
          "id": "fa7f008f-423a-4943-aeb7-f303f0cde71b",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "167bda18-5060-4fcd-b507-e7681190e4be",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 385,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "4fd53544-6e47-41b8-98b7-2c5ba5fc2d77",
        "cursor": {
          "ref": "a7c7aa26-91bc-4719-89ba-e90b56dc17b0",
          "length": 243,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "80da349c-9f7a-4ff7-aeaa-3bbdbf262121"
        },
        "item": {
          "id": "4fd53544-6e47-41b8-98b7-2c5ba5fc2d77",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "8f109ae7-3b9f-4836-95c2-1e17905c1d4d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 410,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "55d6b5ad-03c5-4f27-a15f-12b7dd27d8e9",
        "cursor": {
          "ref": "9ff9518c-c6f4-4953-91b1-46833ccc5bb5",
          "length": 243,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "1bb5a974-d42c-4efd-a66b-41334f2f7643"
        },
        "item": {
          "id": "55d6b5ad-03c5-4f27-a15f-12b7dd27d8e9",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "8fd94c68-9591-445d-aef3-b0f7f50cbbdf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 406,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "b2e1ba88-5c3f-4888-a082-5ada2f5d163c",
        "cursor": {
          "ref": "ea689b30-9b4e-45fe-9ba4-910dbd5c6b65",
          "length": 243,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "2f82cb02-5304-4a71-8ad2-e0b0c0d206d7"
        },
        "item": {
          "id": "b2e1ba88-5c3f-4888-a082-5ada2f5d163c",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "33412f6b-9409-406c-b5c2-0957f3e4aded",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 441,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "678a7a17-7f12-4d42-812c-f03a29cb7d14",
        "cursor": {
          "ref": "78251769-ba3d-4ddf-84c7-2ac1ca518719",
          "length": 243,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "206cf5f4-c0df-4c15-ba84-4134321d74d0"
        },
        "item": {
          "id": "678a7a17-7f12-4d42-812c-f03a29cb7d14",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "dd327200-ea7f-447d-8b03-b5af899e5ed4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 402,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "21dba9b7-24b5-4237-bc9f-ff140614433e",
        "cursor": {
          "ref": "09932e2f-0f76-453f-909a-f9f96073def1",
          "length": 243,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "34aac869-a98d-45e1-aa94-2d80ea0e58c4"
        },
        "item": {
          "id": "21dba9b7-24b5-4237-bc9f-ff140614433e",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "c9eb85d7-94d8-4565-83ed-f0c1a1bc023d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 431,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "59c5cd74-6119-4820-8cea-96319228bc74",
        "cursor": {
          "ref": "0187ed6a-592c-470e-823d-62d401913f94",
          "length": 243,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "3762c7fe-202b-4823-93a9-e6c6107d167e"
        },
        "item": {
          "id": "59c5cd74-6119-4820-8cea-96319228bc74",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "9dc2cafa-38c9-45d4-bfdf-e27ed2b167e6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 379,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "07ff6cf9-60ec-4ced-9fac-ec8511f83f49",
        "cursor": {
          "ref": "8404e0ca-67c3-471d-b0b8-4bb54764f7fa",
          "length": 243,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "0d385cd8-9871-41d1-ad75-82f2b8127720"
        },
        "item": {
          "id": "07ff6cf9-60ec-4ced-9fac-ec8511f83f49",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "39487a66-6ad2-45c3-9b0e-7a78af044599",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 408,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "354e7da1-657f-41ae-8498-ae1cfd82b370",
        "cursor": {
          "ref": "0b90445d-c747-4454-a475-8d04db6cbab9",
          "length": 243,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "740fdb48-d8cc-412d-bedc-cd41a563ba22"
        },
        "item": {
          "id": "354e7da1-657f-41ae-8498-ae1cfd82b370",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "557d13d9-fb99-42f1-b9f9-33954f68703d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 401,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "720ce7c1-8009-45a3-a21d-92442f0c919e",
        "cursor": {
          "ref": "65201493-b311-4fcf-9d9b-eb1fe1786034",
          "length": 243,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "5e92448d-6d47-4a6a-ad74-ebc8018be570"
        },
        "item": {
          "id": "720ce7c1-8009-45a3-a21d-92442f0c919e",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "3872ce46-8ecf-43bf-8343-145fc0ecad48",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 437,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "d9ab2c5f-0669-4e7e-9334-707ad6af74d2",
        "cursor": {
          "ref": "d9f29f76-6bfe-487e-94f6-d46049003887",
          "length": 243,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "61aa7ae4-e92c-419b-b958-b70e9c89d93c"
        },
        "item": {
          "id": "d9ab2c5f-0669-4e7e-9334-707ad6af74d2",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "3448b2f4-c617-40ca-b42b-c17c086fb913",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 386,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "1d79a7f7-1fbc-4a75-9eb3-21b623f833dc",
        "cursor": {
          "ref": "5611df92-862d-4004-a481-8cbbc2e83c8a",
          "length": 243,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "7b84d3b9-627c-4090-93a6-9f16572f2e96"
        },
        "item": {
          "id": "1d79a7f7-1fbc-4a75-9eb3-21b623f833dc",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "0dce41c4-89c0-4e45-978a-27e0b3f7a90a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 403,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "8f854ac6-754d-422c-bcaf-f16416f08aa8",
        "cursor": {
          "ref": "c69b32d1-8f21-4183-9b68-09b141c3cb82",
          "length": 243,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "c689b66a-5304-4bf4-9fa1-36f4d5bbc402"
        },
        "item": {
          "id": "8f854ac6-754d-422c-bcaf-f16416f08aa8",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "b8a8731c-a1af-4bda-bb61-a36b0fc5f5db",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 403,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "3ced3c6e-cc62-46ab-8fa9-fe2437201bf7",
        "cursor": {
          "ref": "8fb2a3de-5cb8-4ce2-a7bf-670cafd6bb51",
          "length": 243,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "5fcf6cb8-d0d1-41f6-9a6c-a720d7316c27"
        },
        "item": {
          "id": "3ced3c6e-cc62-46ab-8fa9-fe2437201bf7",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "0e11da72-b140-43e8-bb40-d12103b430e4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 400,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "964ca0b4-6f4d-4c82-85d7-c5921dbcbf51",
        "cursor": {
          "ref": "41a2252e-4982-4451-8a1e-0b5f791b996e",
          "length": 243,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "96fd5465-26d6-4d2b-919f-0e731d34d95c"
        },
        "item": {
          "id": "964ca0b4-6f4d-4c82-85d7-c5921dbcbf51",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "f9b2b55e-7408-48c9-855d-cdcc3cb38848",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 421,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "3f796016-d960-4f04-ba04-397e368cc137",
        "cursor": {
          "ref": "724fca0b-36ff-44f1-b40e-6af95c787a07",
          "length": 243,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "b3979699-01cc-4dd6-9830-623a10078bcb"
        },
        "item": {
          "id": "3f796016-d960-4f04-ba04-397e368cc137",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "fe53c33e-d0c1-4bc5-acda-e1093e5f05b6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 402,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "3cebb33d-651a-45f5-a8b7-1e5832c31f17",
        "cursor": {
          "ref": "987a527c-f528-4357-b1b5-2e4af725bbb8",
          "length": 243,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "efd5c526-9cbd-4547-9521-f5291db3e20a"
        },
        "item": {
          "id": "3cebb33d-651a-45f5-a8b7-1e5832c31f17",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "59bc44e5-d0e3-4b4d-b76f-528eeedc458e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 398,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "8de56231-8dce-4235-8b8a-2ab7e429a3d4",
        "cursor": {
          "ref": "b0885dcb-7ac8-4a76-a6ec-0589676049f5",
          "length": 243,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "b5507772-0d5f-4e04-88e3-2dac0eec53a1"
        },
        "item": {
          "id": "8de56231-8dce-4235-8b8a-2ab7e429a3d4",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "eac08285-f4ca-44d7-ac84-f3d7afe0ef9d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 519,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "f5f0d3f3-6987-4586-b23c-9249fc5fb198",
        "cursor": {
          "ref": "2d9ad34c-d80a-4129-a436-53bf2e61c86d",
          "length": 243,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "1daa09df-d1bf-4741-b781-43035bf7fb5e"
        },
        "item": {
          "id": "f5f0d3f3-6987-4586-b23c-9249fc5fb198",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "3fa5f9ad-a7b5-4935-9103-d18310dfa1cf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 949,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "982fe244-34bf-448b-bf03-925a663c73cd",
        "cursor": {
          "ref": "0256dd0d-86e3-46ff-8da4-fa7947e4579b",
          "length": 243,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "7a3eb1c2-7bb9-4821-954a-affbd3ffe8ea"
        },
        "item": {
          "id": "982fe244-34bf-448b-bf03-925a663c73cd",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "c843f4f9-3fe9-4ed0-867a-e420fd191e7b",
          "status": "Not Found",
          "code": 404,
          "responseTime": 33,
          "responseSize": 0
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 404",
              "stack": "AssertionError: expected response to have status code 401 but got 404\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "No data, empty input at 1:1\n\n^",
              "stack": "JSONError: No data, empty input at 1:1\n\n^\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "ab7d6517-2b2a-4611-a43e-11b498c3dada",
        "cursor": {
          "ref": "eefbae8b-bf10-4e87-96bc-5412add98493",
          "length": 243,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "f814e20a-12d9-4d70-afee-3792497bc1cb"
        },
        "item": {
          "id": "ab7d6517-2b2a-4611-a43e-11b498c3dada",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "57fc79fb-8cd0-4722-aaec-facfcf91e89f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 786,
          "responseSize": 206
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "84c46dd0-c0e3-47a6-979f-0df21917d81b",
        "cursor": {
          "ref": "6214aa38-0ac6-41c8-a810-df85717d10e0",
          "length": 243,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "eb64bb25-0c28-47b1-a629-aab72cd71a58"
        },
        "item": {
          "id": "84c46dd0-c0e3-47a6-979f-0df21917d81b",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "259b90ea-4f95-4df5-843c-233908e4b7e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 583,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "84c46dd0-c0e3-47a6-979f-0df21917d81b",
        "cursor": {
          "ref": "6214aa38-0ac6-41c8-a810-df85717d10e0",
          "length": 243,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "eb64bb25-0c28-47b1-a629-aab72cd71a58"
        },
        "item": {
          "id": "84c46dd0-c0e3-47a6-979f-0df21917d81b",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "259b90ea-4f95-4df5-843c-233908e4b7e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 583,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "7d38fbe2-98bf-4077-8d4b-a2085c368a66",
        "cursor": {
          "ref": "c703d25e-c5a5-43c6-b6ec-266a085e02b4",
          "length": 243,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "644682bc-d1c2-4753-8b58-2dbda39cbdb8"
        },
        "item": {
          "id": "7d38fbe2-98bf-4077-8d4b-a2085c368a66",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "2b2c1503-8a16-47c8-8c8c-a38400954081",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 508,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "30986c0d-11c9-4f34-a254-7b717c9dc91f",
        "cursor": {
          "ref": "4c986bbe-e8d0-4374-977f-f4e3a73878e2",
          "length": 243,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "5b05202e-b0a5-47ca-b423-f1dece555424"
        },
        "item": {
          "id": "30986c0d-11c9-4f34-a254-7b717c9dc91f",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "46284874-c14c-4718-9c92-79a1bc3fbd5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 449,
          "responseSize": 541
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "b838d3d9-693c-4c71-ab49-9ea84381605d",
        "cursor": {
          "ref": "e2d9ed2e-522f-48cb-9116-4d7dc41e1818",
          "length": 243,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "445cb8dd-0130-4185-a65e-4fb7abefaf57"
        },
        "item": {
          "id": "b838d3d9-693c-4c71-ab49-9ea84381605d",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "09c257e0-c1d7-4ac6-9a00-d00877ed3ca5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 474,
          "responseSize": 540
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "280276af-f8c6-4877-b75b-e5749b4bcd49",
        "cursor": {
          "ref": "36460b43-009b-4696-9e13-f53b199385fb",
          "length": 243,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "df9f0381-ee76-4b28-86bd-077bcf971235"
        },
        "item": {
          "id": "280276af-f8c6-4877-b75b-e5749b4bcd49",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "2242c542-5da8-4829-961f-a855cf172542",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 446,
          "responseSize": 541
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "4aa3f6c2-ddb9-4df5-89e6-89e9c595e9ed",
        "cursor": {
          "ref": "8fcebbc3-4476-45c4-81a2-0fae82f98ad4",
          "length": 243,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "66925585-bb9c-4763-ad6e-359dd7cd190a"
        },
        "item": {
          "id": "4aa3f6c2-ddb9-4df5-89e6-89e9c595e9ed",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "8e21059c-13e2-45aa-a2d3-778969544e82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 554,
          "responseSize": 539
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "a036d9fe-cb50-43f3-b8e4-e28e7ace103e",
        "cursor": {
          "ref": "b1267e82-23cd-4ac0-9337-99f72f5f86bd",
          "length": 243,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "6ce76bdc-905a-4bfe-956c-596b76f53fd3"
        },
        "item": {
          "id": "a036d9fe-cb50-43f3-b8e4-e28e7ace103e",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "c04b4104-7240-4df6-a00f-019d87d419ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 261,
          "responseSize": 1154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "eed68b2b-42b5-4756-8e93-c601366e0319",
        "cursor": {
          "ref": "aae6f8b7-a824-47d3-9ee4-206702bd9305",
          "length": 243,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "7183e9b9-827f-4167-a8fb-af9b090b4b4f"
        },
        "item": {
          "id": "eed68b2b-42b5-4756-8e93-c601366e0319",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "5fdd3311-1ad9-4212-8920-67b2a343bbe9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 230,
          "responseSize": 1700
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "22f89be2-18cd-4e0b-b470-18a2ec10d03c",
        "cursor": {
          "ref": "5e828177-c564-4881-a1c1-adeb4020f644",
          "length": 243,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "94b72336-f05d-4ef5-ad1e-aa3ac5448503"
        },
        "item": {
          "id": "22f89be2-18cd-4e0b-b470-18a2ec10d03c",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "39a2a708-a323-4a51-ab27-72cd6bb7923e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 245,
          "responseSize": 1699
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "0595821d-2a8d-4e95-963d-4011af5b17dc",
        "cursor": {
          "ref": "d0f6137c-ef4f-4cac-bf94-da7ed5f33ba6",
          "length": 243,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "c86b4244-7968-4502-9b1a-3e0a1f5efbff"
        },
        "item": {
          "id": "0595821d-2a8d-4e95-963d-4011af5b17dc",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "d45dcd99-b8fc-4f2f-80c7-a8974be99d91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 175,
          "responseSize": 1700
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:145)"
            }
          }
        ]
      },
      {
        "id": "be12ae76-5894-487c-afbf-ceeb113403d6",
        "cursor": {
          "ref": "c9498975-a115-464f-b75b-4fed3ecbd8c2",
          "length": 243,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "29671b9d-c22c-4385-a7c5-95cc3fbac141"
        },
        "item": {
          "id": "be12ae76-5894-487c-afbf-ceeb113403d6",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "73961601-21da-475b-b923-3e96dfef8439",
          "status": "OK",
          "code": 200,
          "responseTime": 427,
          "responseSize": 334
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:146)"
            }
          }
        ]
      },
      {
        "id": "182d1402-0747-4e80-8e05-5e637e1b309b",
        "cursor": {
          "ref": "9666318a-677d-4e03-b626-2b0b987bdedc",
          "length": 243,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "0a1373f2-d50d-43c0-be1e-bc4bcd52ecd4"
        },
        "item": {
          "id": "182d1402-0747-4e80-8e05-5e637e1b309b",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "249859e0-cb90-42da-89e4-53ede38c0c47",
          "status": "OK",
          "code": 200,
          "responseTime": 287,
          "responseSize": 334
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:147)"
            }
          }
        ]
      },
      {
        "id": "55102658-50f0-457e-9e08-03747a2fa975",
        "cursor": {
          "ref": "e39451c2-c745-467b-a9bf-10536573f137",
          "length": 243,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "1e6370a5-430b-459a-a7b9-b9c54fd117fc"
        },
        "item": {
          "id": "55102658-50f0-457e-9e08-03747a2fa975",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "1730553b-0eba-425c-8748-77dded985a4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 186,
          "responseSize": 2187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:148)"
            }
          }
        ]
      },
      {
        "id": "23827234-dfdb-4e26-92cc-161b1d11ef36",
        "cursor": {
          "ref": "a21126e5-ba20-4de9-98e0-ab1b2fedc873",
          "length": 243,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "a65531ef-71b4-4fda-afaf-f58debea0106"
        },
        "item": {
          "id": "23827234-dfdb-4e26-92cc-161b1d11ef36",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "3f2f67fc-b18b-4b03-b749-0e19f6ea22aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 171,
          "responseSize": 2177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:149)"
            }
          }
        ]
      },
      {
        "id": "7c554907-df38-4827-8cd5-caeb2a6d7c18",
        "cursor": {
          "ref": "00e98ee2-ce36-4955-bd89-008eb473fbb4",
          "length": 243,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "85c5208c-6f96-429b-b3c5-cedeebd43a44"
        },
        "item": {
          "id": "7c554907-df38-4827-8cd5-caeb2a6d7c18",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "1e361d04-c452-472a-aeca-f792d43515e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 173,
          "responseSize": 2176
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:150)"
            }
          }
        ]
      },
      {
        "id": "0dc4bba7-e1a6-4668-9082-23fb9e576c7c",
        "cursor": {
          "ref": "2de67420-c2b6-4e85-86fd-b76799ab0a2e",
          "length": 243,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "3d77592c-6616-4b54-af39-30208173435f"
        },
        "item": {
          "id": "0dc4bba7-e1a6-4668-9082-23fb9e576c7c",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "8083df45-e79e-45ce-91f4-e6c1716bf072",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 222,
          "responseSize": 2177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:151)"
            }
          }
        ]
      },
      {
        "id": "61167cab-04a1-46b7-ba1d-d449c9787a6d",
        "cursor": {
          "ref": "6a998ef0-2268-45d1-ade6-900a5ef9c8df",
          "length": 243,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "c23ffac3-f1d9-4bff-8c7b-893437113b59"
        },
        "item": {
          "id": "61167cab-04a1-46b7-ba1d-d449c9787a6d",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "3982b812-c288-4b4a-8718-80c7ba87f68b",
          "status": "OK",
          "code": 200,
          "responseTime": 252,
          "responseSize": 334
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "24516290-947e-469a-9db7-8575168a2469",
        "cursor": {
          "ref": "faa565a1-a148-435e-a7c8-4103e5c30150",
          "length": 243,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "5b44634b-57bd-4b45-a961-d2225653e3da"
        },
        "item": {
          "id": "24516290-947e-469a-9db7-8575168a2469",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "9a03a5da-ca3f-441f-8ea8-4a2f6d72e522",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 189,
          "responseSize": 1235
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:153)"
            }
          }
        ]
      },
      {
        "id": "75901b85-ad2e-447e-9504-8f9d1341f442",
        "cursor": {
          "ref": "f25f7559-822f-436b-a3c2-e2701b7170a3",
          "length": 243,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "97acafc9-435f-4100-b1de-c23eac18a606"
        },
        "item": {
          "id": "75901b85-ad2e-447e-9504-8f9d1341f442",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "bb0db7f1-3e35-4bc8-86a0-c2bdea9f6245",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 172,
          "responseSize": 1191
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:154)"
            }
          }
        ]
      },
      {
        "id": "61e2feea-e3b3-4faf-b0b4-5798c4ac9513",
        "cursor": {
          "ref": "4565e763-6a39-4ea1-9826-1dd1dba90434",
          "length": 243,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "3f8698a4-51a1-46da-b7f8-d0aca5fb6092"
        },
        "item": {
          "id": "61e2feea-e3b3-4faf-b0b4-5798c4ac9513",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "a0a82497-bcb6-4550-8366-d47e936bdcec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 196,
          "responseSize": 1189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "22e6fe8b-a012-4726-8d1a-e620c26471de",
        "cursor": {
          "ref": "33fa6807-34ae-4c04-832c-0c6cdd4707ef",
          "length": 243,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "405ea7de-a82e-4c7a-9a97-88b284596396"
        },
        "item": {
          "id": "22e6fe8b-a012-4726-8d1a-e620c26471de",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "60dfdbc8-3d35-4411-81db-81bb53cbc0ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 179,
          "responseSize": 1190
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:156)"
            }
          }
        ]
      },
      {
        "id": "9d877a29-9635-47de-82b8-810942b1eec0",
        "cursor": {
          "ref": "e90b34d1-91c4-421a-b45f-571b26dcaaa0",
          "length": 243,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "a119a9fc-d9eb-4749-b2a6-97772c826f49"
        },
        "item": {
          "id": "9d877a29-9635-47de-82b8-810942b1eec0",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "dc901337-8256-4628-8ed0-610680712003",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 180,
          "responseSize": 1241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "7f6bd673-53d1-4f0c-8329-112570eb8166",
        "cursor": {
          "ref": "ed787ffa-f7cf-4fc1-a1e6-e6560e405372",
          "length": 243,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "9cd11a4c-e69c-492f-b9e8-15167e361a4d"
        },
        "item": {
          "id": "7f6bd673-53d1-4f0c-8329-112570eb8166",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "da15d7e1-08a6-45e7-9086-8a65f0496376",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 183,
          "responseSize": 1168
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:158)"
            }
          }
        ]
      },
      {
        "id": "39381556-44e1-44be-8733-ca0eaaced744",
        "cursor": {
          "ref": "f038caf5-d0a1-4dea-a4c3-e3ab35776961",
          "length": 243,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "c04a10a8-373d-4ca5-8e57-413edf396fc8"
        },
        "item": {
          "id": "39381556-44e1-44be-8733-ca0eaaced744",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "a1b2a99e-db4f-4f56-ba01-ee92692293ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 181,
          "responseSize": 1489
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "0ba25f8f-aa97-4a22-87b2-5ebcb14f53ec",
        "cursor": {
          "ref": "d630c351-3930-4651-a204-33668f3ac906",
          "length": 243,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "589105a5-bbd3-44fd-8418-65d6fd5a2617"
        },
        "item": {
          "id": "0ba25f8f-aa97-4a22-87b2-5ebcb14f53ec",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "c5d8d8f9-7081-4806-8b42-e0e3a5442692",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 205,
          "responseSize": 1488
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "16646c69-61fc-4812-9b33-1f841de4b108",
        "cursor": {
          "ref": "dd9a0320-4e1b-4e22-abb1-99abf4a56589",
          "length": 243,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "d14a92b2-026d-4b14-b983-5311f4e0b707"
        },
        "item": {
          "id": "16646c69-61fc-4812-9b33-1f841de4b108",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "9e9d83e2-9b6f-4923-a840-6c26f571bf8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 208,
          "responseSize": 1489
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:161)"
            }
          }
        ]
      },
      {
        "id": "4d96e096-c838-45de-93d0-3760a6d08652",
        "cursor": {
          "ref": "1fb18f09-f0b6-4c79-b289-ddef70347544",
          "length": 243,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "c4c77db4-7751-49c2-b9c4-6f2608fafc73"
        },
        "item": {
          "id": "4d96e096-c838-45de-93d0-3760a6d08652",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "d09f925c-aca3-4f84-9a25-b9246700684b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 186,
          "responseSize": 1515
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "96631712-58a0-41dd-8cea-52e8d3796d07",
        "cursor": {
          "ref": "dd7640fa-a215-45b2-8ace-456c1ad0546b",
          "length": 243,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "960efc51-437e-44fd-9889-cf6f3c208fa3"
        },
        "item": {
          "id": "96631712-58a0-41dd-8cea-52e8d3796d07",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "f015c63e-d457-49d8-bff7-47193544fb03",
          "status": "OK",
          "code": 200,
          "responseTime": 291,
          "responseSize": 334
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:163)"
            }
          }
        ]
      },
      {
        "id": "65a62274-cd7b-4a9f-99f3-3b6f57172e08",
        "cursor": {
          "ref": "03d72439-24df-4423-81f0-a3027827210c",
          "length": 243,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "f2d5078c-492c-4d8f-a5dd-804816f278da"
        },
        "item": {
          "id": "65a62274-cd7b-4a9f-99f3-3b6f57172e08",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "474270cd-f745-4fa8-a3c7-a5009cc74c40",
          "status": "OK",
          "code": 200,
          "responseTime": 190,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:164)"
            }
          }
        ]
      },
      {
        "id": "1d27dc00-bf37-42d2-81ce-9d435182df62",
        "cursor": {
          "ref": "5b643502-fc9f-44a0-b754-d4718bc489b0",
          "length": 243,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "b8c53ac4-6302-4c05-85cb-1ef1c57c2358"
        },
        "item": {
          "id": "1d27dc00-bf37-42d2-81ce-9d435182df62",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "2ed1364e-05fe-4483-a959-6df37e5c8787",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 220,
          "responseSize": 1534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:165)"
            }
          }
        ]
      },
      {
        "id": "5eb93e86-76cd-4945-a68a-6fa8baf80893",
        "cursor": {
          "ref": "dfae17d1-6033-4274-a080-46210571b93b",
          "length": 243,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "24f81a23-a544-4fe4-8a86-b23dab4a82b2"
        },
        "item": {
          "id": "5eb93e86-76cd-4945-a68a-6fa8baf80893",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "35bb34de-b189-4272-b995-410acfe756f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 189,
          "responseSize": 1524
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:166)"
            }
          }
        ]
      },
      {
        "id": "07cd6687-a163-4a7d-b43f-0aadd69612bf",
        "cursor": {
          "ref": "3165e074-4874-493a-b2b3-ae95cf2d5f38",
          "length": 243,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "b72c6979-e406-4c35-9824-ab2f98f2c9b8"
        },
        "item": {
          "id": "07cd6687-a163-4a7d-b43f-0aadd69612bf",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "80e51568-8a1d-46c6-8bf7-248a74359f74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 189,
          "responseSize": 1523
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:167)"
            }
          }
        ]
      },
      {
        "id": "012a8627-c1f1-414e-a91c-8d65001642cf",
        "cursor": {
          "ref": "6efd3284-b967-4656-9f13-d9ec19276d4a",
          "length": 243,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "6eaf4aef-6e95-4c22-b88e-0a8f3e84a960"
        },
        "item": {
          "id": "012a8627-c1f1-414e-a91c-8d65001642cf",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "70172f4f-dcc7-4d5d-8d71-0578518fbf3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 189,
          "responseSize": 1524
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:168)"
            }
          }
        ]
      },
      {
        "id": "5737e22a-81ce-4460-bcaa-569ba6ac2811",
        "cursor": {
          "ref": "ad98e54c-7c34-4950-965b-58fbdc67fa8a",
          "length": 243,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "4e1611fc-9c0b-4f8e-9e8a-68270e6d8bcf"
        },
        "item": {
          "id": "5737e22a-81ce-4460-bcaa-569ba6ac2811",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "8119a563-5731-4357-b4ae-18689f71bbd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 200,
          "responseSize": 1550
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:169)"
            }
          }
        ]
      },
      {
        "id": "7fb93168-f11b-4340-8788-3b081fe5b8bd",
        "cursor": {
          "ref": "9b472e8c-e757-4cb3-b95b-5e0a335ae212",
          "length": 243,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "9b9908d3-ff42-4694-a408-53c6d644f4b8"
        },
        "item": {
          "id": "7fb93168-f11b-4340-8788-3b081fe5b8bd",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "fe4452e8-a485-42e2-93f9-2d3c2c494223",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 173,
          "responseSize": 1136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:170)"
            }
          }
        ]
      },
      {
        "id": "c9b94b5d-35c0-449a-88a2-a4d6f2695c74",
        "cursor": {
          "ref": "9e860c3c-617c-4dda-b472-ad700f7df68a",
          "length": 243,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "d7c61021-ed09-44fc-9d86-4f23c837a956"
        },
        "item": {
          "id": "c9b94b5d-35c0-449a-88a2-a4d6f2695c74",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "95f645f6-1c90-4756-9f06-f6bb159e0488",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 179,
          "responseSize": 1445
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:171)"
            }
          }
        ]
      },
      {
        "id": "d017865a-f940-4787-8607-e54af861ebf1",
        "cursor": {
          "ref": "1f88e89f-f373-412d-a3c2-f37f3138cafe",
          "length": 243,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "5ac0a0d8-5ef1-41b4-82cc-dc6e9322577c"
        },
        "item": {
          "id": "d017865a-f940-4787-8607-e54af861ebf1",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "79f1cece-85e6-4fd2-a3df-1efb488970eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 173,
          "responseSize": 1431
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "badad404-c699-45a7-81fa-1371c0df95d8",
        "cursor": {
          "ref": "367e892f-5cbe-4070-9d00-beb3cdda0376",
          "length": 243,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "f83297f8-31da-44fb-b014-cee4fa891718"
        },
        "item": {
          "id": "badad404-c699-45a7-81fa-1371c0df95d8",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "55cc9517-67aa-4b75-ac70-7edf29831f24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 195,
          "responseSize": 1429
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:173)"
            }
          }
        ]
      },
      {
        "id": "47b3f234-8381-4568-b211-1031e4535f32",
        "cursor": {
          "ref": "6b39fcb1-d7f7-4f2c-85ff-a251d0677b83",
          "length": 243,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "7456028e-5973-42d1-944f-5b0f34d6a8e7"
        },
        "item": {
          "id": "47b3f234-8381-4568-b211-1031e4535f32",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "572c2d1f-1c12-434b-b42b-09866350643c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 230,
          "responseSize": 1430
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "97ce4591-0a0b-404f-a0cb-9dbe34ef324c",
        "cursor": {
          "ref": "785ed8bf-f95e-40f9-ad16-eff1a27c868d",
          "length": 243,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "cc891237-b8f1-4240-a022-c5e6febacb78"
        },
        "item": {
          "id": "97ce4591-0a0b-404f-a0cb-9dbe34ef324c",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "75f4c32d-a39f-48d1-8878-4a9e94dbaf48",
          "status": "OK",
          "code": 200,
          "responseTime": 203,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:175)"
            }
          }
        ]
      },
      {
        "id": "3f462a1e-5b57-4125-8862-8ef3b1b9c1a0",
        "cursor": {
          "ref": "b78574ed-4450-4352-9621-dbd6838dab36",
          "length": 243,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "e0590ee7-5c87-4fd6-b435-47e210742c3e"
        },
        "item": {
          "id": "3f462a1e-5b57-4125-8862-8ef3b1b9c1a0",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "ea923cb6-b3b7-4bc5-a1f5-0b1852da4846",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 180,
          "responseSize": 1470
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:176)"
            }
          }
        ]
      },
      {
        "id": "ed6cc0e5-14a7-4d2c-af79-460d01d5feda",
        "cursor": {
          "ref": "2588dcfa-cede-435b-943f-fb3403c6e9f1",
          "length": 243,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "0a43314c-9334-417a-9b51-836af2f8ecd2"
        },
        "item": {
          "id": "ed6cc0e5-14a7-4d2c-af79-460d01d5feda",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "e2608b7c-28ad-47be-860a-ac1d5e934db9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 175,
          "responseSize": 1456
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:177)"
            }
          }
        ]
      },
      {
        "id": "63ad246f-0fa3-4ba6-b344-a62dcb4229a0",
        "cursor": {
          "ref": "cbbcb919-85ec-42ed-8e0c-6838bb07123b",
          "length": 243,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "4aa4a666-6472-4627-a0ae-ac603604926b"
        },
        "item": {
          "id": "63ad246f-0fa3-4ba6-b344-a62dcb4229a0",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "67151e87-b7d5-496d-b96d-a106e3ded13c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 193,
          "responseSize": 1454
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:178)"
            }
          }
        ]
      },
      {
        "id": "bb208d22-0e02-44d2-9c29-cfc780ee5123",
        "cursor": {
          "ref": "d0e60403-7b7e-4737-994c-670ecb598d0d",
          "length": 243,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "08b951f8-e32a-41ca-957f-0cdb408eb97f"
        },
        "item": {
          "id": "bb208d22-0e02-44d2-9c29-cfc780ee5123",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "6db28046-0e20-4f19-9c64-6e4ae9fc8f3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 198,
          "responseSize": 1455
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:179)"
            }
          }
        ]
      },
      {
        "id": "537d855d-9c18-40e0-8740-f7a46ad2884f",
        "cursor": {
          "ref": "091ffacd-92df-41cd-80f1-67b0e833c452",
          "length": 243,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "90926616-6f0f-4304-bfc3-bced776bb029"
        },
        "item": {
          "id": "537d855d-9c18-40e0-8740-f7a46ad2884f",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "7d5d512c-e5a1-48f9-bfe6-d7748bb72d9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 198,
          "responseSize": 1476
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:180)"
            }
          }
        ]
      },
      {
        "id": "7a6a9436-814a-4a34-ab5c-4ec810a5a3f8",
        "cursor": {
          "ref": "3145327f-8f91-41c9-9282-bb5cb13bf3b2",
          "length": 243,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "1b204a04-4bbb-4cf4-b163-692edece4e88"
        },
        "item": {
          "id": "7a6a9436-814a-4a34-ab5c-4ec810a5a3f8",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "7d616c34-9eca-4b0c-827c-007f3cf78f62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 181,
          "responseSize": 1178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:181)"
            }
          }
        ]
      },
      {
        "id": "b76402df-5ebe-43a9-a67b-7274ae2368ea",
        "cursor": {
          "ref": "875c575d-9550-4dd1-871b-1ca2b7e66bcd",
          "length": 243,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "488c7906-af8e-4987-917c-554d9d0488a9"
        },
        "item": {
          "id": "b76402df-5ebe-43a9-a67b-7274ae2368ea",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "b424144b-a34f-4574-aa8e-7fd27a77287c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 194,
          "responseSize": 1202
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "4f0ed1b6-8cf6-4066-9231-836e66ee5403",
        "cursor": {
          "ref": "0a5ebdd0-d6c8-4e79-950a-6d41058ce3ba",
          "length": 243,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "a5d8ec13-ee02-415b-9375-00921e605d66"
        },
        "item": {
          "id": "4f0ed1b6-8cf6-4066-9231-836e66ee5403",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "7ec71a2e-ff37-41bc-9146-75afb21779cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 229,
          "responseSize": 1183
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "4236423d-f342-410c-ae31-fd873fc01bf2",
        "cursor": {
          "ref": "f16e00b1-0229-4116-8d96-db9ead741de2",
          "length": 243,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "f6011173-3824-4c52-9420-e287bd5197b3"
        },
        "item": {
          "id": "4236423d-f342-410c-ae31-fd873fc01bf2",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "e7da308b-c6a9-4c6d-905a-7c65bebd5aca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 188,
          "responseSize": 1181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "f80b619b-78c0-44bd-8448-27131f69bde6",
        "cursor": {
          "ref": "519bb9fd-295a-45eb-a8b2-d218637bdf8f",
          "length": 243,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "999112a1-9486-49e6-be94-d5ce10347a23"
        },
        "item": {
          "id": "f80b619b-78c0-44bd-8448-27131f69bde6",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "2fb377d9-fef4-4479-8fbe-4cbc9f7e963b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 176,
          "responseSize": 1182
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "48f79db3-cbdf-49fc-9805-cb9f2510a2fd",
        "cursor": {
          "ref": "64004df0-1ad2-4fdd-8542-975c6a421225",
          "length": 243,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "98bf836b-35fe-4b82-82d2-665ed60d5a07"
        },
        "item": {
          "id": "48f79db3-cbdf-49fc-9805-cb9f2510a2fd",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "7b58e495-40d4-4ea1-a4f9-4749e3f2b9be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 191,
          "responseSize": 1208
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "c7cf334d-022e-46eb-99d1-bcd502283988",
        "cursor": {
          "ref": "b3df0ec9-0ac2-4272-a22f-73df25487560",
          "length": 243,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "8779f231-e373-4a34-9888-e555be79bc67"
        },
        "item": {
          "id": "c7cf334d-022e-46eb-99d1-bcd502283988",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "6a4a4738-59ca-4b54-9242-dd38a77882f6",
          "status": "OK",
          "code": 200,
          "responseTime": 262,
          "responseSize": 333
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "01ff96c8-d200-4a5c-b113-e0a0689eaf93",
        "cursor": {
          "ref": "749ce049-3b5d-4d33-8029-c1ced2044a5d",
          "length": 243,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "3d5965ff-1fb5-4a43-98cd-759f184af35a"
        },
        "item": {
          "id": "01ff96c8-d200-4a5c-b113-e0a0689eaf93",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "95f83ca4-e45a-478c-a96f-c6a97886e378",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 192,
          "responseSize": 1181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "8d6577af-803a-4774-b35a-5b2066d1445a",
        "cursor": {
          "ref": "22f44c17-e087-4aa9-b09a-db67a6e847ea",
          "length": 243,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "d3132912-fd2f-48ca-a11a-f678fec7254c"
        },
        "item": {
          "id": "8d6577af-803a-4774-b35a-5b2066d1445a",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "40173ddc-2558-4732-aeca-12b36d5b1837",
          "status": "OK",
          "code": 200,
          "responseTime": 253,
          "responseSize": 334
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "0a84f38a-69bc-48b8-8c0b-bc2650a3fb8f",
        "cursor": {
          "ref": "07ef7bac-be34-4355-bfce-5ee15cec93bc",
          "length": 243,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "9c17cfc4-0362-4901-a540-8d138b5d77f7"
        },
        "item": {
          "id": "0a84f38a-69bc-48b8-8c0b-bc2650a3fb8f",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "61a8c2b4-a05a-4c5b-bf03-b76bfa6d7b68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 241,
          "responseSize": 1656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "5d72ac6a-ac0c-44fd-a28a-584d18014e52",
        "cursor": {
          "ref": "ee71d1d6-acfd-4ce4-89b0-9583cd905b7c",
          "length": 243,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "60c84eac-1519-4f60-a1f2-94486332a9d6"
        },
        "item": {
          "id": "5d72ac6a-ac0c-44fd-a28a-584d18014e52",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "8853cebe-aa4e-489d-a8dd-eaa3d2ae8c53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 192,
          "responseSize": 1654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "9bcd7107-1b7f-4843-9c1d-60ab5bd9bd71",
        "cursor": {
          "ref": "74aa3b23-4fe4-41df-b8c0-2e060581883f",
          "length": 243,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "765934a5-026d-4a37-867f-dec3c768f506"
        },
        "item": {
          "id": "9bcd7107-1b7f-4843-9c1d-60ab5bd9bd71",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "d50abf8c-4245-4af8-a671-b2c99edb62e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 201,
          "responseSize": 1655
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:192)"
            }
          }
        ]
      },
      {
        "id": "92c1e3cd-a40c-46aa-adec-b1d9818940b7",
        "cursor": {
          "ref": "119f1348-014a-4d91-8dd1-e0645d019ff2",
          "length": 243,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "219c931b-63d3-403e-9c06-acb94abc45ed"
        },
        "item": {
          "id": "92c1e3cd-a40c-46aa-adec-b1d9818940b7",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "59a42869-2973-47ed-9aaf-65b1019ce23a",
          "status": "OK",
          "code": 200,
          "responseTime": 246,
          "responseSize": 334
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:193)"
            }
          }
        ]
      },
      {
        "id": "bf2bc690-64bb-4241-b8a6-58f94933f877",
        "cursor": {
          "ref": "f8d58dc0-aa8a-4352-a267-5e07cb73a2c6",
          "length": 243,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "03fca665-9f7b-44c4-82bf-ab375566568a"
        },
        "item": {
          "id": "bf2bc690-64bb-4241-b8a6-58f94933f877",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "f78b27b9-e0d5-45fc-b2c1-06dd085e22ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 191,
          "responseSize": 2014
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:194)"
            }
          }
        ]
      },
      {
        "id": "fc388edb-738c-49ec-af26-174be7ff811f",
        "cursor": {
          "ref": "48e9a742-7c77-4e93-8394-479276ee8994",
          "length": 243,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "df111d05-8fb7-4466-8ee0-ccd583742bf2"
        },
        "item": {
          "id": "fc388edb-738c-49ec-af26-174be7ff811f",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "8222faec-f5f8-4f16-b84d-2e93dc99c5d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 192,
          "responseSize": 2000
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "e355a4d3-119b-4922-838a-c36eb84d48c1",
        "cursor": {
          "ref": "efc2b7e9-0d7c-4e1d-a2e4-b3badcdd9a8c",
          "length": 243,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "bdc882b1-5acc-446a-a9e9-b8a9a9837194"
        },
        "item": {
          "id": "e355a4d3-119b-4922-838a-c36eb84d48c1",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "1d2ee0af-0cc8-4685-90ea-cb8901c234ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 197,
          "responseSize": 1998
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:196)"
            }
          }
        ]
      },
      {
        "id": "d93b2646-c910-4b19-bd63-a70940ee65b9",
        "cursor": {
          "ref": "f13f1989-2c7c-48f3-8d6f-78187e16d825",
          "length": 243,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "f8636251-44f0-43d6-bd93-8954546e4c51"
        },
        "item": {
          "id": "d93b2646-c910-4b19-bd63-a70940ee65b9",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "e4f2c48a-19dc-4d7f-8ecb-850a6a85f899",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 181,
          "responseSize": 1999
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:197)"
            }
          }
        ]
      },
      {
        "id": "52913934-4725-4d22-b553-cbd8027ca577",
        "cursor": {
          "ref": "73370ab3-c8fd-42c0-b83b-200280587087",
          "length": 243,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "6b561648-de7c-44ea-90a4-c9c110b4803f"
        },
        "item": {
          "id": "52913934-4725-4d22-b553-cbd8027ca577",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "77b29315-c5b0-47b2-88e8-76174438ffec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 195,
          "responseSize": 2020
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:198)"
            }
          }
        ]
      },
      {
        "id": "5fc2faae-3219-4477-9ca4-126cf099a323",
        "cursor": {
          "ref": "1fbbd435-9a0a-4c31-9627-9131bb322c4b",
          "length": 243,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "8510d501-9a59-4c24-a042-f497ac745e88"
        },
        "item": {
          "id": "5fc2faae-3219-4477-9ca4-126cf099a323",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "0dd5441e-362b-4ea4-ba91-5f2ae3ba7757",
          "status": "OK",
          "code": 200,
          "responseTime": 180,
          "responseSize": 177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:199)"
            }
          }
        ]
      },
      {
        "id": "ed8d0b45-d00b-44e5-905d-688be43a3358",
        "cursor": {
          "ref": "67eff41b-87c6-4024-bbce-26ff8c73a8fe",
          "length": 243,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "e3ad5af7-c3ac-441d-9126-31b24758f793"
        },
        "item": {
          "id": "ed8d0b45-d00b-44e5-905d-688be43a3358",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "4a848674-e6f1-429b-940b-ddecc45d4e37",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 204,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:200)"
            }
          }
        ]
      },
      {
        "id": "8134831b-7fc4-48c9-8b94-1ea6e3e360aa",
        "cursor": {
          "ref": "56b7caf2-7d67-47c6-a155-96fc1bc80f08",
          "length": 243,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "a757e48e-d412-49b1-9315-1e7f9ebc1697"
        },
        "item": {
          "id": "8134831b-7fc4-48c9-8b94-1ea6e3e360aa",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "a5c17bd7-7cd0-4721-8911-09eb0b7e58bc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 190,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:201)"
            }
          }
        ]
      },
      {
        "id": "94e3c717-3402-4ec8-8f3e-9f846a19615c",
        "cursor": {
          "ref": "8c245633-59b3-42e2-af46-6ccfe1851ae3",
          "length": 243,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "c3004efc-6f00-4b86-9425-bde1265986c6"
        },
        "item": {
          "id": "94e3c717-3402-4ec8-8f3e-9f846a19615c",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "69161c71-5e77-4968-9b42-09b3eac97a51",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 241,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:202)"
            }
          }
        ]
      },
      {
        "id": "af1872bb-cb89-4b47-9c4b-bc93a93fdd55",
        "cursor": {
          "ref": "96dd7167-a650-4016-a0db-9ebcc6837315",
          "length": 243,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "d1409325-7822-4bdd-8bdb-46bc49d725f6"
        },
        "item": {
          "id": "af1872bb-cb89-4b47-9c4b-bc93a93fdd55",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "1a91005f-fdbd-45a1-bc15-557161563d34",
          "status": "OK",
          "code": 200,
          "responseTime": 180,
          "responseSize": 177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:203)"
            }
          }
        ]
      },
      {
        "id": "ade14701-049d-479e-a7b5-5a960ddbb4b5",
        "cursor": {
          "ref": "da0c9175-932c-4ad7-a9c3-21c12d3283d1",
          "length": 243,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "1c51b0d3-9a8c-4630-b8c9-76ec9de0768a"
        },
        "item": {
          "id": "ade14701-049d-479e-a7b5-5a960ddbb4b5",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "6cef3a82-4461-4714-91f5-a62252dee59b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 242,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:204)"
            }
          }
        ]
      },
      {
        "id": "e3a14ede-3956-4b3b-a4cb-b307863b0809",
        "cursor": {
          "ref": "0566f1a6-eb7e-4fde-a78d-c995828ac507",
          "length": 243,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "85064454-b989-4373-bf58-073cd8207d1b"
        },
        "item": {
          "id": "e3a14ede-3956-4b3b-a4cb-b307863b0809",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "432a460b-4455-4b00-bea7-bff7822935ab",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 203,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "4d2a021d-f47d-4b07-97e3-7bd1b9a70c3c",
        "cursor": {
          "ref": "6af2ee51-50f9-4bca-bdab-cd8052ba15bd",
          "length": 243,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "32625ad4-5604-4adc-9ee0-e1e474c7dab7"
        },
        "item": {
          "id": "4d2a021d-f47d-4b07-97e3-7bd1b9a70c3c",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "23c7828c-4639-444d-a684-1dee3e2ec2c7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 201,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "521e9d6b-c94a-4858-8282-e060aab6bd1d",
        "cursor": {
          "ref": "57fff3a3-d982-4ced-becb-1fb881ce9bed",
          "length": 243,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "608de809-0b3e-46c0-9145-cc43abb78e7c"
        },
        "item": {
          "id": "521e9d6b-c94a-4858-8282-e060aab6bd1d",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "ae851d66-3644-4118-88f5-f43fa25deab9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 184,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "47d906cc-754b-4413-8106-4572257d424f",
        "cursor": {
          "ref": "bf74ff41-4c1e-4774-9121-ae45d4c88e51",
          "length": 243,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "5b4bc0f6-adff-47de-9fa9-a2df730204d0"
        },
        "item": {
          "id": "47d906cc-754b-4413-8106-4572257d424f",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "aedbe71b-d90e-4f2c-a793-8a26bdb67834",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 203,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "50b2e9f1-d9d3-48d5-9071-f16f297836db",
        "cursor": {
          "ref": "2d010973-7396-4726-ae6c-21e782da324d",
          "length": 243,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "054411f9-3965-48f4-b98a-85e97452e760"
        },
        "item": {
          "id": "50b2e9f1-d9d3-48d5-9071-f16f297836db",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "dda2e31e-ba82-46e3-ab58-56de236a8e03",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 213,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "8375b229-a50f-4298-b655-66853f8d45ed",
        "cursor": {
          "ref": "fefdefdf-2c06-433e-9dbb-8c9c4ba63226",
          "length": 243,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "1cf6f03b-fa1a-47c6-ab2a-c0cc4d8aee00"
        },
        "item": {
          "id": "8375b229-a50f-4298-b655-66853f8d45ed",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "960c604e-1bac-4d60-afe0-a36790065b2a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 219,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:210)"
            }
          }
        ]
      },
      {
        "id": "9c5f7b5f-39d3-4d1a-8642-a8808133b9a3",
        "cursor": {
          "ref": "5b813f44-7db9-4840-b239-ff2e50dc5dd9",
          "length": 243,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "cd219a7a-54bd-40b6-b2be-b39ab984c8b3"
        },
        "item": {
          "id": "9c5f7b5f-39d3-4d1a-8642-a8808133b9a3",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "35b4c714-3dde-41d2-94b4-ac5c8fd388e7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 168,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:211)"
            }
          }
        ]
      },
      {
        "id": "7900bde0-dea7-4fed-9be4-4f4e5141e42d",
        "cursor": {
          "ref": "02360dcb-f490-4532-8f9c-654bb5497dfb",
          "length": 243,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "481eeb09-8b92-471d-a497-1509ee677f97"
        },
        "item": {
          "id": "7900bde0-dea7-4fed-9be4-4f4e5141e42d",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "7628893c-ac5e-480d-b24a-387054b6131a",
          "status": "OK",
          "code": 200,
          "responseTime": 277,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:212)"
            }
          }
        ]
      },
      {
        "id": "887dbfec-742e-423a-8ca8-599e0b8e9eb3",
        "cursor": {
          "ref": "5fabdca0-e7b9-4ffc-8254-edc0939a4058",
          "length": 243,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "7cd54355-071b-48ba-8775-d09c5654f3b6"
        },
        "item": {
          "id": "887dbfec-742e-423a-8ca8-599e0b8e9eb3",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "10877de9-898e-4a64-9821-b4542240dd2e",
          "status": "OK",
          "code": 200,
          "responseTime": 261,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:213)"
            }
          }
        ]
      },
      {
        "id": "9187de26-aa65-4f14-a8d6-1dab56519aa0",
        "cursor": {
          "ref": "78ca4012-6c79-4b99-ac28-d8cc607d454c",
          "length": 243,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "447ef9a0-3419-4bbd-9e6f-a1ec7ca07563"
        },
        "item": {
          "id": "9187de26-aa65-4f14-a8d6-1dab56519aa0",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "7eacc1a5-e06e-44bb-8247-fd0a2af75545",
          "status": "OK",
          "code": 200,
          "responseTime": 367,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "6883c026-54eb-44b5-a8de-7362026fff45",
        "cursor": {
          "ref": "b73691a6-0dfe-4157-a2b0-e423bc0a1ba1",
          "length": 243,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "9b9fd300-f53b-4e01-9a79-694d9c8047dc"
        },
        "item": {
          "id": "6883c026-54eb-44b5-a8de-7362026fff45",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "aa746a94-371d-4bad-9a1b-eb280ccc6aff",
          "status": "OK",
          "code": 200,
          "responseTime": 210,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "7c52ea40-a943-43fa-a629-aafef03b0c7c",
        "cursor": {
          "ref": "db23514a-cf73-4839-a6df-340302246b8f",
          "length": 243,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "75350810-a59b-403e-bbde-91b7b4aab19f"
        },
        "item": {
          "id": "7c52ea40-a943-43fa-a629-aafef03b0c7c",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "af76bb62-8501-4248-84d6-07974253052f",
          "status": "OK",
          "code": 200,
          "responseTime": 215,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "5ae66a1d-60ac-4106-bd6d-b451a18c0d7c",
        "cursor": {
          "ref": "f1e70442-8f2d-413b-a4cf-b3b4417cb70d",
          "length": 243,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "609dce0b-5da4-49dd-adba-ecaa673cd18e"
        },
        "item": {
          "id": "5ae66a1d-60ac-4106-bd6d-b451a18c0d7c",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "a08836de-9dfd-43a1-8674-83427de4591f",
          "status": "OK",
          "code": 200,
          "responseTime": 291,
          "responseSize": 303
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "a02a87b3-de0c-4c54-aa36-d22673242603",
        "cursor": {
          "ref": "cfde33b9-339c-41f3-9312-7c299fb49d7a",
          "length": 243,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "1ac67f5c-301f-4bcf-9e8e-d11ffa119d6d"
        },
        "item": {
          "id": "a02a87b3-de0c-4c54-aa36-d22673242603",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "e3ce63cd-1ff9-4d0e-8d47-1501fa26f06d",
          "status": "OK",
          "code": 200,
          "responseTime": 224,
          "responseSize": 239
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "2d72fffd-e635-477b-812c-9fc50531fa2b",
        "cursor": {
          "ref": "696b160d-77b1-41a6-8762-9bee0f01941b",
          "length": 243,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "ffb5ba16-fcf1-4293-aeb4-c6c7b013f02c"
        },
        "item": {
          "id": "2d72fffd-e635-477b-812c-9fc50531fa2b",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "278a1d50-5def-4fcc-bc33-73f172f3b6ef",
          "status": "OK",
          "code": 200,
          "responseTime": 269,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "6b008291-e586-461b-b864-459ccf963cbc",
        "cursor": {
          "ref": "b3c35c4b-149d-4853-ae29-a43bc5212e02",
          "length": 243,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "26cacddb-4c19-431a-93e5-28bbdf9dc774"
        },
        "item": {
          "id": "6b008291-e586-461b-b864-459ccf963cbc",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "821c0b6b-3eaa-42af-99ba-551b3919ef77",
          "status": "OK",
          "code": 200,
          "responseTime": 200,
          "responseSize": 237
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "3efe77c9-a139-470c-bf24-5767389be009",
        "cursor": {
          "ref": "bc0ebc98-2139-4072-8ec4-2d3aed45b4c8",
          "length": 243,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "d3e41ebe-185e-4acb-b5a6-fcdbcafd8fc8"
        },
        "item": {
          "id": "3efe77c9-a139-470c-bf24-5767389be009",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "028db1b8-8d65-4003-8e6c-2f216357ecd6",
          "status": "OK",
          "code": 200,
          "responseTime": 223,
          "responseSize": 309
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "d88ab882-525a-40a9-8eac-9c4aa1404abd",
        "cursor": {
          "ref": "4d076174-81aa-4bdf-a01e-7b1f92e5e4f7",
          "length": 243,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "7e367b13-ce46-4760-8a2d-578c50b83a7c"
        },
        "item": {
          "id": "d88ab882-525a-40a9-8eac-9c4aa1404abd",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "c4b7b0c1-ce7b-40c0-9f94-9da02abb1267",
          "status": "OK",
          "code": 200,
          "responseTime": 271,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "ac0e8775-e5eb-447b-ad85-1b35d10069b6",
        "cursor": {
          "ref": "9b5a6526-d3c1-4813-ad19-525772ab24a1",
          "length": 243,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "f82c046e-2e57-4e66-bb67-e6073c7885c6"
        },
        "item": {
          "id": "ac0e8775-e5eb-447b-ad85-1b35d10069b6",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "a8ea1b4f-d0ff-44ff-ba5a-2d00df5b2cd3",
          "status": "OK",
          "code": 200,
          "responseTime": 200,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "d4c0d344-23a9-4937-9caa-ea75ff8c5cfe",
        "cursor": {
          "ref": "95b6bdfe-b056-4d61-b922-20080d29d897",
          "length": 243,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "025b90d8-4f16-4e21-a112-e3dc865f2f45"
        },
        "item": {
          "id": "d4c0d344-23a9-4937-9caa-ea75ff8c5cfe",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "d4e4ba40-ae1c-46d1-a6e0-acf7bebdaaa6",
          "status": "OK",
          "code": 200,
          "responseTime": 219,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "61be591b-6e5b-4995-9201-7c905ea88d15",
        "cursor": {
          "ref": "11e36350-2257-4b92-a584-313c88df81d7",
          "length": 243,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "aeb22c3c-452b-4308-a13b-580c7d5ab8d2"
        },
        "item": {
          "id": "61be591b-6e5b-4995-9201-7c905ea88d15",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "f3d880a2-0e49-4373-ba2e-2c58ba9d34d7",
          "status": "OK",
          "code": 200,
          "responseTime": 306,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:225)"
            }
          }
        ]
      },
      {
        "id": "8ea959ed-2487-4be7-8e46-b84857030eeb",
        "cursor": {
          "ref": "c0c7f21d-a8f0-405a-9ed3-ffa3dbc4e519",
          "length": 243,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "2763521d-e6b5-49b5-a635-af2771cd606e"
        },
        "item": {
          "id": "8ea959ed-2487-4be7-8e46-b84857030eeb",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "0b825496-18e9-4ac2-b3eb-254abb2fb4e7",
          "status": "OK",
          "code": 200,
          "responseTime": 188,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:226)"
            }
          }
        ]
      },
      {
        "id": "bc1e843c-4ae7-4c5e-bfc7-c6306bd2a814",
        "cursor": {
          "ref": "eea74842-0a3b-4d9b-886b-897f60f1bc52",
          "length": 243,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "6b263d88-48c8-4af0-a6ef-646ee853c466"
        },
        "item": {
          "id": "bc1e843c-4ae7-4c5e-bfc7-c6306bd2a814",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "ae274df1-d9ab-43ac-96a9-dd4fb13f2aae",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 193,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:227)"
            }
          }
        ]
      },
      {
        "id": "fcefc3f1-d823-4be0-a0c3-1384a2d352eb",
        "cursor": {
          "ref": "f2832654-6c06-431d-9891-1fad272ecd38",
          "length": 243,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "fcc99182-e431-48e7-8cbf-04411e9ccdb2"
        },
        "item": {
          "id": "fcefc3f1-d823-4be0-a0c3-1384a2d352eb",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "2be793cb-0235-4987-b752-93befb2286b3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 193,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:228)"
            }
          }
        ]
      },
      {
        "id": "e8b653d9-5b8e-4799-8d07-b5ef3d6397b6",
        "cursor": {
          "ref": "5d48c3d4-9658-417e-8e55-f4fdd561e6ef",
          "length": 243,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "7e66bef4-8d68-4745-acce-9a90938157b4"
        },
        "item": {
          "id": "e8b653d9-5b8e-4799-8d07-b5ef3d6397b6",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "605c664e-1319-468a-97f0-9e226f3bd332",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 195,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:229)"
            }
          }
        ]
      },
      {
        "id": "d7c420d4-37f9-46db-9c3d-c62db717b0cb",
        "cursor": {
          "ref": "7c176b22-412a-4cb5-9192-fe96e8f5cc91",
          "length": 243,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "203e047d-4aa9-4c35-b6db-0b920f1a0566"
        },
        "item": {
          "id": "d7c420d4-37f9-46db-9c3d-c62db717b0cb",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "3358a3d2-5e3e-452d-aafb-2a397b80b8b3",
          "status": "OK",
          "code": 200,
          "responseTime": 242,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:230)"
            }
          }
        ]
      },
      {
        "id": "9e2c927a-1ebb-47a4-b5d3-d01a9b51b06b",
        "cursor": {
          "ref": "1b0d3c7b-4e93-4582-92d3-3a3b54e5ca47",
          "length": 243,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "863b9b25-fafe-4656-8a3d-6620359d47e8"
        },
        "item": {
          "id": "9e2c927a-1ebb-47a4-b5d3-d01a9b51b06b",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "7502f164-8931-4666-8b03-1150f2240e9e",
          "status": "OK",
          "code": 200,
          "responseTime": 190,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:231)"
            }
          }
        ]
      },
      {
        "id": "d43df0f0-7ea4-4539-9ae4-ebb3b46dfc2d",
        "cursor": {
          "ref": "f0dc1926-f21a-4b1c-ba72-b61e4c19fe99",
          "length": 243,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "d75b2998-fc75-4f21-aa22-914b2c689673"
        },
        "item": {
          "id": "d43df0f0-7ea4-4539-9ae4-ebb3b46dfc2d",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "6e0acc32-7bfe-4fff-96b7-6767c48c2b83",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 192,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:232)"
            }
          }
        ]
      },
      {
        "id": "9408e52e-5d03-4d2a-be5e-fe02bc2f4cab",
        "cursor": {
          "ref": "1bee64cd-aeaa-44ce-af42-7c44ff5cd5f7",
          "length": 243,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "09e2e936-0824-4a24-89d9-b1d3d27cbfa0"
        },
        "item": {
          "id": "9408e52e-5d03-4d2a-be5e-fe02bc2f4cab",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "37e749e6-2f63-4bd2-959e-b93ca91f5b88",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 34,
          "responseSize": 0
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 403",
              "stack": "AssertionError: expected response to have status code 401 but got 403\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "No data, empty input at 1:1\n\n^",
              "stack": "JSONError: No data, empty input at 1:1\n\n^\n   at Object.eval sandbox-script.js:2:233)"
            }
          }
        ]
      },
      {
        "id": "2c936b87-6709-4bcc-92eb-80c77a34f84f",
        "cursor": {
          "ref": "399f92e0-1e0f-4412-99a9-00cd2abbd587",
          "length": 243,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "ba5d64b2-a6b0-4f01-b418-fea3b70999cb"
        },
        "item": {
          "id": "2c936b87-6709-4bcc-92eb-80c77a34f84f",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "38fa3d7f-4285-46ba-8eae-c013d2437a04",
          "status": "OK",
          "code": 200,
          "responseTime": 288,
          "responseSize": 334
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:234)"
            }
          }
        ]
      },
      {
        "id": "2070dc0b-5cc9-43d1-a4e7-4fb2ba1f4063",
        "cursor": {
          "ref": "866f3dc9-e75c-4bf7-a46c-12d17a36e187",
          "length": 243,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "7d7000f7-9962-497e-9346-618950455b4d"
        },
        "item": {
          "id": "2070dc0b-5cc9-43d1-a4e7-4fb2ba1f4063",
          "name": "credentials_verify"
        },
        "response": {
          "id": "7afb4c89-6db6-4b0e-a4bd-d14cbe32d17f",
          "status": "OK",
          "code": 200,
          "responseTime": 261,
          "responseSize": 334
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.verifications[1].title should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.verifications[1].title should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:235)"
            }
          }
        ]
      },
      {
        "id": "9aff4cb5-1aaa-4907-85b9-bd26335506bd",
        "cursor": {
          "ref": "4c134212-0fb9-45aa-adf3-a3aee7c92e67",
          "length": 243,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "b597793b-e615-4c7b-a93d-f69f61196f9c"
        },
        "item": {
          "id": "9aff4cb5-1aaa-4907-85b9-bd26335506bd",
          "name": "credentials_verify:id"
        },
        "response": {
          "id": "888468ad-d15e-44ef-afc1-070cfc869e07",
          "status": "OK",
          "code": 200,
          "responseTime": 272,
          "responseSize": 334
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.verifications[1].title should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.verifications[1].title should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:236)"
            }
          }
        ]
      },
      {
        "id": "24b822bd-c180-4bc8-bead-565100045484",
        "cursor": {
          "ref": "ffa0934d-8c31-46e8-8b94-2c0fbe1a452d",
          "length": 243,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "6bfd2f22-a37c-4db1-8c87-a61d78ba7a21"
        },
        "item": {
          "id": "24b822bd-c180-4bc8-bead-565100045484",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "086b6e48-d2b6-468d-b640-fff2bc2f0651",
          "status": "OK",
          "code": 200,
          "responseTime": 260,
          "responseSize": 334
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.verifications[1].title should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.verifications[1].title should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "a057ffdc-2ebb-4e58-bc00-3913d38b10dd",
        "cursor": {
          "ref": "3c33e359-236e-41e3-aa9c-0bae3ad0cf2d",
          "length": 243,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "81c79b80-422f-4b2c-8a77-da7c009c8b8d"
        },
        "item": {
          "id": "a057ffdc-2ebb-4e58-bc00-3913d38b10dd",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "2139548b-a673-4831-a1b9-cb391225ebb4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 32,
          "responseSize": 0
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "No data, empty input at 1:1\n\n^",
              "stack": "JSONError: No data, empty input at 1:1\n\n^\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "a057ffdc-2ebb-4e58-bc00-3913d38b10dd",
        "cursor": {
          "ref": "3c33e359-236e-41e3-aa9c-0bae3ad0cf2d",
          "length": 243,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "81c79b80-422f-4b2c-8a77-da7c009c8b8d"
        },
        "item": {
          "id": "a057ffdc-2ebb-4e58-bc00-3913d38b10dd",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "2139548b-a673-4831-a1b9-cb391225ebb4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 32,
          "responseSize": 0
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "No data, empty input at 1:1\n\n^",
              "stack": "JSONError: No data, empty input at 1:1\n\n^\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "a057ffdc-2ebb-4e58-bc00-3913d38b10dd",
        "cursor": {
          "ref": "3c33e359-236e-41e3-aa9c-0bae3ad0cf2d",
          "length": 243,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "81c79b80-422f-4b2c-8a77-da7c009c8b8d"
        },
        "item": {
          "id": "a057ffdc-2ebb-4e58-bc00-3913d38b10dd",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "2139548b-a673-4831-a1b9-cb391225ebb4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 32,
          "responseSize": 0
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "No data, empty input at 1:1\n\n^",
              "stack": "JSONError: No data, empty input at 1:1\n\n^\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "9dded9cf-7641-4f90-b4db-0b2ff146c9b5",
        "cursor": {
          "ref": "43b72214-9ec5-4b7a-8fb7-c51a42fa3ea9",
          "length": 243,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "2c014831-596c-4416-bd36-a6f6f8613514"
        },
        "item": {
          "id": "9dded9cf-7641-4f90-b4db-0b2ff146c9b5",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "0c37207b-1ac2-4d2b-a063-e4dc38a5d3f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 198,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "9c9d73c1-bf92-4381-a6af-d2ecca424a87",
        "cursor": {
          "ref": "5d7e24e7-1d4b-49db-bdec-d4473d8420ac",
          "length": 243,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "d1ebcb47-bf5b-434a-8e7f-448c78121aa4"
        },
        "item": {
          "id": "9c9d73c1-bf92-4381-a6af-d2ecca424a87",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "bfda0eec-5a70-463f-a753-40bc8a8a3ddb",
          "status": "OK",
          "code": 200,
          "responseTime": 36,
          "responseSize": 1970
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 200",
              "stack": "AssertionError: expected response to have status code 401 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"/><link rel=\"shortcut\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"/><link rel=\"shortcut\n^\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "9c9d73c1-bf92-4381-a6af-d2ecca424a87",
        "cursor": {
          "ref": "5d7e24e7-1d4b-49db-bdec-d4473d8420ac",
          "length": 243,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "d1ebcb47-bf5b-434a-8e7f-448c78121aa4"
        },
        "item": {
          "id": "9c9d73c1-bf92-4381-a6af-d2ecca424a87",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "bfda0eec-5a70-463f-a753-40bc8a8a3ddb",
          "status": "OK",
          "code": 200,
          "responseTime": 36,
          "responseSize": 1970
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 200",
              "stack": "AssertionError: expected response to have status code 401 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"/><link rel=\"shortcut\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"/><link rel=\"shortcut\n^\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "3f7a1b7f-a00b-4b25-a640-1e138ab03a72",
        "cursor": {
          "ref": "e02ff1cd-4b2d-42d8-aa2e-cb0a8dbc2e60",
          "length": 243,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "9523f46d-973d-4fa2-bf2a-e6d805727873"
        },
        "item": {
          "id": "3f7a1b7f-a00b-4b25-a640-1e138ab03a72",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "57d5cc33-ad61-461c-8e81-3a63c2cfa79a",
          "status": "OK",
          "code": 200,
          "responseTime": 39,
          "responseSize": 1970
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"/><link rel=\"shortcut\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"/><link rel=\"shortcut\n^\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "922829da-08c0-443b-a28f-2e8e82ccb206",
        "cursor": {
          "ref": "cc5f6cb6-e153-4111-a7b9-1488f58a3c8c",
          "length": 243,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "7b5a2dcc-1d04-47a3-bcb2-24df587b9656"
        },
        "item": {
          "id": "922829da-08c0-443b-a28f-2e8e82ccb206",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "dbb67d20-4d18-4ee1-8a98-e07e493c9172",
          "status": "OK",
          "code": 200,
          "responseTime": 37,
          "responseSize": 1970
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 200",
              "stack": "AssertionError: expected response to have status code 401 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"/><link rel=\"shortcut\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"/><link rel=\"shortcut\n^\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "922829da-08c0-443b-a28f-2e8e82ccb206",
        "cursor": {
          "ref": "cc5f6cb6-e153-4111-a7b9-1488f58a3c8c",
          "length": 243,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "7b5a2dcc-1d04-47a3-bcb2-24df587b9656"
        },
        "item": {
          "id": "922829da-08c0-443b-a28f-2e8e82ccb206",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "dbb67d20-4d18-4ee1-8a98-e07e493c9172",
          "status": "OK",
          "code": 200,
          "responseTime": 37,
          "responseSize": 1970
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 200",
              "stack": "AssertionError: expected response to have status code 401 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"/><link rel=\"shortcut\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"/><link rel=\"shortcut\n^\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "bacf7c3d-1dc3-4609-82a1-87c1a17ddf21",
        "cursor": {
          "ref": "1f4399a2-1745-4b83-a892-fca79e4f9e83",
          "length": 243,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "5f99ac0e-9d0b-4a36-89d1-f6a3f7ca8b57"
        },
        "item": {
          "id": "bacf7c3d-1dc3-4609-82a1-87c1a17ddf21",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "de001f61-7f0a-4736-b2b3-9f9fa5490d8f",
          "status": "OK",
          "code": 200,
          "responseTime": 34,
          "responseSize": 1970
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"/><link rel=\"shortcut\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"/><link rel=\"shortcut\n^\n   at Object.eval sandbox-script.js:2:243)"
            }
          }
        ]
      }
    ]
  }
}