{
  "collection": {
    "info": {
      "_postman_id": "7f2d134c-0652-4763-bcaa-ff75092b3e39",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "c27ab3c5-ad22-4eed-9032-be25e11b8f04",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "03a5ad5a-d4b3-4e85-8e7f-448a52654518",
            "name": "Positive Testing",
            "item": [
              {
                "id": "7a3fad05-692a-4f03-9a83-ff731d5b9331",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0a82799f-f8b8-4bc3-8ea9-ac6c2f148da3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7418e991-0cc8-42fa-b2ba-985a322532a4"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "54dd7dbe-c310-4ee1-8733-484ba199b71a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0271b9c3-0984-4755-b48a-9307106f23f2"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "4121b608-b586-4964-bf33-020f6e68fa35",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f1b2b9e6-54da-4068-aa8f-244c8c6ee886"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3a47722b-860d-4958-ab91-fb2d86b05f1e",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "67c38ca1-fb47-4cb4-af38-76ecd5b20c97"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b8300daf-96fc-41df-ab2a-2388cea3e3e9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d71cb72b-dc54-49fd-b05f-311a81854200"
            }
          }
        ]
      },
      {
        "id": "148d5782-6905-494f-a3b6-59d92d379c60",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "c07d2d5c-6f41-478c-8b3b-1b46bc7ca637",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b7a6aa86-f8ce-4c92-90eb-e39a11685156",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "aee4d3d2-c251-4c7c-89dc-0b295e93bdab",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b58a08c-99d5-47ba-ad95-61e2759be88f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "43135170-9379-409c-9441-f3cc57217850"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe83d54b-3477-4e99-9e4b-274d17720cdd",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdeba9c2-7a29-4084-b097-83b711202e5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d1bc7c7d-d417-4ec5-af0e-32b5fd390ed7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bd1da76-0c92-4fff-85d4-2cf26accc713",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27727c45-6eaa-48ef-a5d6-418844c03130",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "73a12ffb-c515-4632-865c-dd1bc1aa3138"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "e9eef1cb-abde-474e-8a09-8d6460112bc1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "49b22a9e-4f0e-4900-a731-e7a943394302",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c3075bf-da25-4878-8c61-644ae08c0c33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "953f238d-655d-4ddd-a924-2a2408e8e7c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fd38bda-e281-4bbf-a700-428d961e6eac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "037fb033-46ef-40c2-81e0-dbc217883146"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68418537-2729-487a-8aaf-a1f1148d9277",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abef8133-aa60-4cee-b14f-89702c9bea03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e15777e4-3494-4e25-ab15-5f3f062f84f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53ad789c-59a0-430b-9d23-a9953159adb1",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "370a1d57-27c5-4cf8-9be2-cd774ecb35aa"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "a6793c2a-c8da-43ce-9d00-b01a711985c1",
            "name": "Positive Testing",
            "item": [
              {
                "id": "5b766a72-51e5-402d-86ab-0ba2e9e66c90",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bd3ca17a-9498-434f-8c11-30245046bbee",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "f39a44fb-d928-42a8-8b6b-61bf4c117461"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0b295800-580b-4f1c-8be6-b3c3f1dbee18",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "3747da3a-0b9b-46ce-8492-8c5cda29f56b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "62b45352-878f-4a20-b408-40108ad1fab3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d415edef-2e1e-4098-b069-cf28a81cb7d2"
            }
          }
        ]
      },
      {
        "id": "4e653f81-7373-4184-b168-30c272402f00",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "30daa577-a7f5-46da-88ed-e0f2c1595c91",
            "name": "Negative Testing",
            "item": [
              {
                "id": "09a0e58c-9587-4f9a-a112-a098c5154b4d",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "9536d305-d4be-4a2d-95d9-82c9a5528ddd",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a49b41c-7bd8-4a52-a677-b8eb0af114a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f30aea5-9cd4-430d-ba30-4df8de91bcb2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42586b6b-cd9c-4b53-b96f-6f6ced442602",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c8cb933e-690a-4420-8f40-7ec2d855affc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8dae4d1e-82aa-4dfa-b47c-4f3d0b5f400b",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e65a47f7-9a32-4abb-9d39-1ff000fb8de2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d899c6c-509f-456b-a77b-cb4acac1ea71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48cb73bd-36b1-4336-ace3-7b357556c52f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ad4442a4-3fc5-4689-9ae9-30cd1c4025bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e323ccae-77ea-4682-a6a9-8f7174100cc6",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d02140c-2b32-46e6-925b-f3fc4762e3c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6270010-d930-41b2-bb5e-2ec4926911b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "beebb66a-3e8b-4862-a8a9-aaab75f5d21d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "57acbc52-2df4-45b0-9e80-35c892ec6e8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ebebf06-8098-452e-8d0e-cf61a06f9410",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34fd091c-a22c-462d-8596-7bd829b1ae49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db3372b1-c8ac-410d-a033-ac4781425b2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca85206c-4387-4e06-991d-668ee4beaa56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7ae30416-5b3e-4460-9517-b38fcff72ec0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77312224-991b-4f96-86b7-0b0c9e18541b",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f964f6e-5a9a-496c-bc96-0b516ae11997",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a7841f4-f064-4b6a-b832-328228dc9fe9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fea49380-b1ea-4f77-81c9-67b792bc9b77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7afe5bb4-3088-4fee-bd6a-8c6c38dd790b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e110d8d1-a8a2-45e2-a6e6-064e9a417c3e",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce669f84-f06b-43a6-897f-3eee02116f49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69633111-8705-4591-a496-7741567ce2c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0145147-3fb8-4523-b84b-6f34535a8fb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b4227e50-a04e-4144-b9e7-fecdabb7ce77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1333ac50-7edc-4341-bb30-e475da4b2bb6",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d180fd7e-35af-4934-9edf-2fdb03de8aa6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c10000a-5ec9-488d-8b2e-53ad08a279cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25660bce-ed95-464e-a71e-95d502540c27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3fd47179-f63a-4428-bef7-5499d33bb849"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1958efec-dfa3-4932-b5b7-1b027989a64a",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08293576-a0b7-49b9-96d6-5ecc7aad91a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ccc7f63e-c528-4ce2-b572-efa4d2b6d807"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efdc2533-d89d-4afb-ab4c-dd7fb707da31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b65bf4a8-06da-4100-ae9a-62fe149a91e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b72ad859-0244-4fc8-90a2-ee4b797776e5",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "414df25a-b79a-47ce-92ca-4b30dbcd16ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "174a86ea-634e-4e3e-b70a-7bd7e659beb3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a28273c9-fe93-4fc6-8548-5bf755d899e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0b7d9662-9ecb-42f1-8e7a-02adc37604c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "363cbe45-0616-4209-abf6-588a922a2805",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52e1ae2c-2d77-43a0-9a9a-c5ffe2f127d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d0ce485-2408-4c80-967c-9d748f703098"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7df79bef-ab76-4858-acb9-db8011d3bcd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2fa499c3-19e1-45d9-b9fd-04ba614dc9c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3321c58b-254c-4af9-88aa-1236174b9f30",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "454c4161-3971-4b81-a88b-c040abd1faac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7e3fd60-12f3-4624-99ce-abbf2e209b33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31f25dd6-13e4-4323-b02e-4f15e5c7b347",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5d646be8-eac7-4263-a17c-4820735a137c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb311ec5-3809-4fdc-8374-f05086728cb9",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cea08d9c-8efa-41f0-81b4-0346b1cb2d80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbaf032b-4d9e-44c1-8b96-4d0510b0b376"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55ce562c-98ca-4178-9b97-98809347cda8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f6cb4703-e42e-410b-bcf6-a638ac4e9b9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f558096a-77d2-4c0a-9f82-e6b421dde0b3",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8a65949-c28d-4472-b8ce-771f33a91a62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a96f6e37-d608-42d5-8072-c24719bbbb75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "563f8487-041e-45e9-bf8a-76b3fcd91ad2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8d0cc00e-1dba-4ca7-b91a-13df70a834c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21b534d0-025f-44b6-a95a-92f9db585317",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fda0d173-7c34-467c-aebd-64c95916d4ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94da78d7-55b2-4d96-8f21-96c067030d05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6820194-9ce8-4cf8-a871-ed29ea7a94af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a63c27ea-336b-4f2d-97fc-84c57186c8b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48ee6730-fcf4-4cc4-bdc7-6c10268ebba4",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f44d87c1-b545-4e4b-8ac8-98da14bdbcb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ccf639b-3f05-4323-9957-99ec51f575ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6f6416a-068a-4dcf-8525-5ef2f069448f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d08f2618-147a-4b55-af26-1139fb4a2f65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2da284ff-38a5-414b-ab7e-8a9e578818da",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "927dc8d7-43ed-4b8f-b0b1-11bf670a5b4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bebe4120-e0cb-493d-9b6f-96c4fa8ab955"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cba9be98-2bea-4253-99aa-feb81aca777c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8173ab76-be5c-401a-9777-fc982e1f84bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e5b53b5-6f42-41c5-a7b7-748ca50305da",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f0e9f01-acc7-417b-9de7-411b92348b81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "047b4fec-497c-4768-8ba6-7a74a9cc093d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93858531-89bf-47f8-b423-9d0b9f3c2fab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "da7c1822-79d3-4b9c-8c74-79899c52f969"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04f23dba-2d05-475f-88f9-5b352c6c0e24",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9759953d-1f93-449f-b154-b6027d23b5d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4621cd28-f778-4253-9fa2-ac82b621e509"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f440fcf9-a72b-4659-8f1b-e771cb6bd380",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "d9cc29de-01fd-42f9-82ff-5b224f399845"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33f6212c-c6fc-4f8e-b343-6c1435b9497c",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4312e0b7-9134-46ec-ae1d-00e478d22628",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f953b45f-35cc-4a85-aee5-715f6601686b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "614bd7b9-7a32-422e-9146-51dc244e0d96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "351c25e7-6802-409f-9af7-1361123c20fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43f58d51-2197-44d5-a2d7-d8a3fb68dffb",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3c3594a-28e4-4b52-ac9c-cb18b695c4b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a419c6f-5c45-4193-9716-340b2a5899fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2a50a60-a264-4b9f-b802-1f5ef9362811",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "cf3f50bb-303e-4092-ab74-12bb40579603"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3522e714-a74f-417d-8de4-42bd1b087c38",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b90a1fd1-2685-4296-8287-f3e007b93a9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f382ccab-b2b8-4f7d-95d1-e0fe54e10d8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43af4f5a-3621-4ef4-a657-b0cfdaf5e84f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1f851c34-465d-4ec5-8225-a67ce2df55a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dcdb37c-d968-4bf6-80b4-76cbde539a61",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb284c87-00b8-4e69-a147-4586037696d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fcffb525-d018-4e1d-982a-040c6d708a0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce7ecb00-930e-4c60-8de4-aa14c3affa0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "973338e2-b38d-4ee5-9ca4-5ed7deb19bc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53d4e04e-21b7-4a27-bbc7-2057fe9f4b94",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07b01e04-2b56-44c5-b658-bfe2d0c1e91b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d522594f-df13-4c2d-9d32-560dd1889ede"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b29fde9d-776d-42f0-8aac-2db94593a199",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d9c8d448-7360-405e-b0d5-85b12f1bd609"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d89ae2f3-d5df-46a9-9ddb-4544dc9e7afa",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "515cf30a-656b-4299-bd6c-9b905c158d0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "626f4646-e395-4d28-bbf7-b91afaa89c9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f56f9cb5-be6c-4197-b8e0-647fdb336159",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "117ad0f8-dc7b-4da4-897e-f6ae0aa27990"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3662fe69-b38c-40a9-8ce9-a3091abab5d0",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "577d42e9-b15a-4212-8e60-fea40ff0085e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2be636a-30ee-4ee3-bbef-6f7bd4c9809e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d293892a-3d5a-49db-a76a-45c010d9a636",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9cde52db-6969-4ad3-899e-cde91d0ce9ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5437a43c-4665-4246-8d6e-5d85928925a9",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ce646c8-8f1c-460a-9c76-83e308bc2707",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9da13c36-af29-4ae9-84f6-6d24bbc79e0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d908d498-a74d-4567-90ff-034e7dcd3ade",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "fc5f58af-a2d7-4d00-aa3f-6449e1361af3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef01e652-f693-49c7-a154-3ee9718446be",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14608c25-f565-4be1-8fad-05686d565ef6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49aa10cc-58e9-481b-afb6-2ca7a40bbda5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b9afb04-cd97-43c0-827a-521647bc1066",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b0c99778-470f-4792-a2bf-cfbf797fcb8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1411d4f4-19fc-49ce-867d-5c24dd7d66d8",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a2f35ee-b237-4847-b872-2bb72fb60628",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f20f7ad7-e821-4ace-a50e-8318f7568390"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37e586e3-ebdf-4309-a6b8-b181cef23f1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9efc89fd-7d69-4c4b-bc36-ac20a1b6f23b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2243870-df41-4537-b0ab-579e4db16067",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2005b01-dbb8-44fb-980e-30dde9acdad5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2adcfd1d-4652-4889-b826-9e885d534042"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "907bb85e-fa6f-4e63-8600-4c1520a25669",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8eb05c7c-635d-4cc7-a7ee-0f7d7ee15435"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20a8d571-aca3-4263-8f05-232284bed173",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc89addd-207d-4052-9c4b-4c40601cfda1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d7e8fa5-4bbe-4d4e-a3d3-41a067069f19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a845205c-b9fe-4794-a00f-fb71253d3a77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "dcaaad95-1957-4c2d-b339-39cf2c8c2935"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17b920ae-85e9-4fa4-b403-6f3f4455c3ef",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c09912f-5d58-48b4-966d-4ea590d42aa3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3e04c54-389b-4325-83b3-ceca59d4dcfd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03a08548-938d-4ec5-a860-b4b9a5bb06eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b6baa167-f9a7-45d5-9231-26acbcd2a132"
                        }
                      }
                    ]
                  },
                  {
                    "id": "368051d5-6108-4bef-97cf-222a8e2c9aa9",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b92d4a20-659b-4fa1-83cb-d4bdcfaa9d7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97d3a748-7190-4df5-8a78-4cbfa4107091"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ac5b3c0-ac72-4c32-92a7-3bc807986071",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "29203122-c770-445e-aecf-08c750027a78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc64c2b6-601b-4105-93df-e644a22574e5",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03dfe530-38c1-42b3-9494-84a998c1dc34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c430ef92-841e-44ee-be5b-8064ecf9c1c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a43ed817-896a-4c0f-bdd8-dcbac2a2e6a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1b07ae0e-933f-496b-b014-0ce0f37f7937"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8990122-fa61-40d8-8edb-9b3e1d33ff82",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bee5572f-5638-4729-9117-8d0efd4792e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e606252a-831e-4b0c-8a04-874b3d203cb9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26d76baf-a593-40f5-81c3-cdd5b26fd455",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e66dc6cc-74b0-4c91-9c36-835251e10eb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc661151-fa5c-44d5-a72c-9d842b0154e2",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b2f1386-0092-4057-b1d1-041e11bff572",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a2d2e3a-e5dd-42f8-bea3-de3ba3906514"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e203a138-b290-417f-a598-aa80574cb775",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "c2febbb1-f8ed-40a9-ae12-65e8cbe92bcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d1ebb23-fce3-4c84-b721-443e95601045",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c20e4bd3-c95c-4cc2-9736-eaf81fb17a74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8974624b-fb46-4bf0-803f-eece91142b6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0731f23a-cd17-4ff9-b500-62736ddaf9b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ace37b2b-a614-4f00-b6c7-c379bc7e2357"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06641c78-1d4a-4332-8e4f-c48dc70c5f66",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "254174e8-c9fb-4ee5-88d8-6047ba17366e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87f5a5ac-afc9-42ee-a8cd-e7e8c7f8a40e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "264f17c6-3ab6-4e50-8a8c-828726c13c79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "754dff82-0d99-49da-80e9-febe0e665909"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2683951e-f822-45ab-bd55-a140125e859c",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebea0ef5-077b-4b41-aa83-af6a80b3032a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f402299-7d58-4942-bdbf-f9fab91deb9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85b529c2-571e-4d66-84bc-73c9951bc17a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "b01fe58d-f8e1-4e96-b995-390d3e479ae6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e323debc-1659-4261-ba41-6c731b1368d1",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66ef60d7-c819-4f6d-9c7b-9294ec2bc9cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e14fdbda-b5d4-4c63-8515-bd134f276f80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f531b65-a667-43f6-b45d-a2bedfce04c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "bc541c3a-0610-42ed-92f7-980d34e2ce0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d7d86b4-e588-4a95-adb0-e11cf3bcb1ca",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61f1d2fa-183c-45e4-9af8-8dfb6ac24075",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4295e87f-de75-427e-adf0-b006d0ae4484"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb42b706-7ec9-4944-b95f-cf30a06c3ed5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "a64215c1-ad1e-40b4-9bc2-7a16387a6b31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb90e12e-6667-4449-9712-690615933854",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "037b8cbd-a096-414b-94ca-081a6955d5b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be913487-1bdf-47b2-bdb6-ac28b16d69fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa5684c9-a232-4f21-b573-7718a2bb00e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "03ffb3c9-e3b3-43f7-ae66-5e9e96e5e0c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef443c4f-bf70-439d-a2c5-15a84d48628a",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a582683-b7db-4cbe-96ea-850fc934f88e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd401fea-a29b-48fc-89a0-b15b8e29c7f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3726cd3a-ea96-49b7-8e5c-ff9d25906000",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "c1f059b3-0f75-4123-b305-9bec9ade5dc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5443761f-dd4a-466e-92b8-f728fa389351",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77cce451-b43a-4fb2-849b-f36ab37afe2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5aebac5c-b95b-48f1-8b23-cd75fd77165a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31f0bb66-c4c8-436c-a4a9-81235a61f135",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "78ad1ee5-103f-4fcb-8f4f-9bc30921c236"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43425595-4cf1-4436-bdeb-59f66832cb10",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32642618-a8d2-4f2d-8f25-d61b5ac51fd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1fb85fc5-61a2-4e6a-8dec-45f13511300e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "caf61f02-a94d-46c0-849b-b8eff42b132e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "ca3cebf1-148b-4f74-8468-c2a89097d1c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4e33dfc-7c2c-42f1-9f97-7dc6dc4670dc",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c81c750b-a162-4a7a-817d-09f833ec9ed6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6bd41ae-349b-4c4d-9e93-95f7b91d693c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65fe0fa7-a2c8-4cc5-b369-0543c1173c65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "2f96c0c2-5650-4b35-bfe1-93a88cf8ccdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3eb552b-d321-4d53-9258-b8f2f14452ba",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57b3366f-cc8b-40ef-b3d8-1defc297ed94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ee076d5-f542-4a32-8e5c-318e6c9f63c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "082c93c7-2d7e-4fb2-b50c-aa24f663c84a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "cd35b832-65d5-45ae-8ce6-a378c03e63eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4fca97b-a4b8-454b-9c00-97d01d09cf76",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40eb8512-d613-47eb-973c-00bafedf748a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09797d83-619c-4c6d-a1f6-5933ec9d2e55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52c6b066-83fa-4828-aabc-25454ad9eb5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "26859882-2cfc-4922-a2c9-4764adb3b214"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3228eed4-cb18-4add-b2e5-fd71d902f0e6",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36e538bf-4990-4462-91ff-a1f5816efd25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "110ee6b7-9e5f-48ea-ae7e-912588ba8313"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f4e5fa0-c6ce-440d-b3dd-b361f4bec9d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6770e22a-228c-4b4f-ae13-51b00ab44739"
                        }
                      }
                    ]
                  },
                  {
                    "id": "178a5a63-32e2-4110-9643-7e068c2ad46c",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b35eea4f-5020-4f1c-9d79-3085b5fce6ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa3d7260-52eb-436c-856c-20a3a2d119c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22b73f80-2641-4fdd-97de-57c1544d83ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "511d00d1-4c62-49ee-ba94-c6895763bdec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b8989b4-ed8c-460d-abd9-1e1db14166f4",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4fdaddf-4e5b-4d53-941a-67b9eb7ababb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0676e98-d9e1-418c-a979-49380e968305"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a7515f1-0e94-4bac-af9b-cc4a16d0d989",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e4586e4e-85e9-49ca-ac2a-26eea5824774"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67902e69-bccd-4b94-9dbf-acd92037ba6b",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51f30567-ac53-4978-ba14-675b8e3ff703",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "990734a2-3c2c-4dac-8360-3e98e032cb1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ae3b883-6d30-4f87-90a4-92989cc26741",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "4c7be7b0-62b1-4735-8a5c-8ff087dc8c1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "578099dd-bca1-4469-8fdc-36c3168c10fc",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01b7640f-1bd8-4089-9ee2-62960176d39f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aae49add-4508-410b-bda4-16f5638787fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92e462d0-f102-4ce0-8c40-ce15b56b67fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "eaa12a65-b143-4e99-9fcd-86598b946d3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a1cf901-6035-4e69-b312-52eb808f8c76",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc70f7a1-ea9b-4059-9000-731e223293a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "326451c6-f67c-4c40-8b57-1312c8d16aed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a72581a-ef96-494e-8a77-9a885b2c287e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "522d2569-db95-4a8e-bfac-6d0411da5f7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9312e45c-5842-4b18-b9ad-642f07d4d81a",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93da6b5b-ed72-4fcc-a952-a5de5e46139a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e314a7e-4e9c-4ef0-b4b0-59e005feba96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d151e6da-cbdd-462f-821a-11f6403b2401",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8aa8d5eb-b3dc-4abc-ad7f-631e1fbfe7aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ea2342d-fcb2-41fd-8162-02403c27cfa1",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "458e4f6b-f49f-4bc3-92b3-d9eed9b52112",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1694b09a-f247-4950-9728-f21ab6ecca30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1a8b62a-3337-46ba-a4cd-a844a01ff23e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "77b643d2-68a1-4a44-a95f-8e13f202be8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e09047c-4543-4ff4-992b-b84f4284314f",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca88b3d3-b313-45dc-b522-6b97ba2f1dc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0cd680a-4304-484a-85d8-a71741f3b36e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ff98c31-9369-4c87-bb51-c88d5f559e75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "d63db871-00ae-4ede-99b9-f88da513f5c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b8c7dc0-0e66-4c24-aaea-14dc6b7a8667",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc799ec7-8cde-4725-b48f-e5440342193c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1e416ec-0ac8-4755-9382-160766c8660c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ed88429-0aa2-47c3-ad31-76a10ba1a038",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "dd6c9de7-42e9-45ff-b4b9-8019e06c974d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40657aed-14e7-4e61-80d3-9768b34c02dd",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bcde1a4-02e0-4c93-9916-21b8d924389a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1bb2127d-faef-4be7-ace9-af646c08e632"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e24fc69-8554-47a5-9947-5b579a92bf7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "67b66982-b9e0-4ba1-8e3b-55383a7135ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e22efdb2-e898-419e-8c56-7ccc52049280",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8816a922-b4ee-40df-8411-c7b56b0f3ccc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c2cf2da-30c6-40a4-8bad-0c44c2b3a043"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adcac5ba-1379-4596-b758-c775837973cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "d804f9a5-b30f-47a4-bdff-126d0b6444cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "259b4640-54c3-495d-941e-b04d68afac8f",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "912ae195-b22c-4d08-a364-c51fcde47676",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "269f3de3-8238-4fd0-b9ce-aa3fdb241202"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc07b572-3616-4507-b348-5d529ff66004",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "ef92978e-ad91-413c-a4d6-c2bf9bc47bf3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5652625-833b-4b01-8a04-01236902ae53",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c36e076-16c9-4d67-9eaa-84d049344819",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e85a6d2-9aea-4dc7-a551-af1f10210f32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a2921c3-4472-468f-acc2-645219012ddd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "fbb71b66-dcd9-4549-a69f-c58c2b1b0d55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d72c6b4-478a-47f7-aa28-ca7f64c04864",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b41155f9-d105-4207-8e78-56399d14d0d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab8e97d3-cfd9-45a2-b7cb-ca638ff0fca5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a541d4a5-7373-4daf-b0c0-8b1e114f33ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "42307b32-14e1-41c9-be13-6b8ee49b4cfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc454522-ebfd-4b21-bbd8-b64e42bc1760",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6e55896-3b72-41c9-8842-4fec87a2b1fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a45ccfb-c73c-48a1-bdd1-c354cd335db8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd7570e8-1c69-42a5-b5fe-c9e95e0e0cce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "69f68fb7-2dc2-4eca-84e9-d0621bcc5f1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ce6b3a5-3184-4617-b1c8-3240f96f8a31",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6aeff148-0785-4c71-8f85-8b38b358ca7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7beb34f6-0568-4fc6-ab63-6c1b7fbf8876"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5a17ca0-283d-44b7-b5f8-427237534529",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "208c15e8-657e-4b37-8e71-a799cd3b5a74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb526216-ee16-4eab-a115-0df755d49551",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "790700fe-e5b7-4208-9113-ca51c8e6a85a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d9bb633-aae8-4cb4-93ff-3986edead5c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1fd4a00-fd01-42b7-9dd3-3264dea613f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "33f09d5a-2b26-4d86-90c8-e34e20d9e558"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f455c692-2dc3-4a32-b0d0-71ffeabaef43",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bee5345-6945-497a-b617-b34147b5108d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "467b8a4c-8b05-446c-a509-e56a19eb9c7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f657a041-5463-4ced-ab46-2c6d2c8e114d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "03ba4891-5c5f-4bfa-9329-d9067e033976"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2835f31-8ad4-45e7-bf00-83ee35444ee3",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7933c327-d0c0-450f-9fde-06926d25d0ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "def33191-2f23-41e7-a6b3-9a54bfdffc73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dccc875-b2a0-4d7a-9ff7-5b5e704bef38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1beb1d31-e0ad-428e-9208-222819761072"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4636248-4e31-49e7-99d3-e202b11ddcff",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd52a17c-d4fe-4e48-979c-d54f35b578b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b1ae643-9962-42ed-ad1f-8a3fb9018e63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e57ec9b7-24c3-43be-8d1e-ca465f8d86f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "a2fbf442-08c5-4e1c-b635-64fefd812f39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4d6a675-2862-4c06-899b-9fab6ee82ed2",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "569f14e9-cd89-4578-899f-83f7ebfb1e6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc2715e9-37f9-4845-ac3f-211cba750c5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39b7e631-3587-4bb5-ac6b-0c8494fecc99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "08db1630-e664-45ac-a165-7119df4a74ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfb3fdd4-1ed2-4e11-aba0-12e6c45cf671",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cce561bf-6c18-4902-a8f8-77e1849fef3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e170660c-f8f6-492b-892a-9ea5994ceb8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82aba8ce-8a3a-4bc2-9f41-0d3bf6ff8dc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "557477c1-1fba-4ea7-a761-3547c443c404"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76fee2ed-d55f-49d6-97c2-534596ae937e",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7bc7ac9-314b-47f6-88f3-afbb42835dd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9cd303e-5280-4b47-afd0-21818a8ef681"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4864d81f-4e94-402e-beac-119e5e451fac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2bc54a4f-0545-4521-84b7-e4505b10e289"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8799cd43-574b-45db-a03b-08ab83dda0da",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fc1fa03-7b84-4abd-8836-60db6abe984f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad94bc2f-697f-4186-b574-b667576ada99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3d44aac-de3d-4e1b-b3d2-7c83cb49016c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9cb55626-9f0f-459e-b3a1-21968b9472d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f670d2c-814a-45dc-9f7f-c5496507ae6e",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d29e90e-47d4-4613-b0c0-77bb82145777",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bccb170e-0b55-4801-abed-5aad074f2e48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "169bd184-67bd-4083-b6ea-61442f1d8830",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8287adc4-d210-4462-ac47-3f4850615686"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de3c03ec-4119-42a5-93ce-d65f2f0d8f5a",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "261ec562-a381-4804-b2e7-a7ba546f6a17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "075c0190-f69e-4eb5-9013-833bd13d95c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb4c316a-c820-4d36-94e0-f2b2e253d5ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "639f659c-27a0-4841-804e-45a0655435d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9774b004-9cc1-47ae-bf70-a2b29ac9429b",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27c3b9e0-8fb2-4010-8631-62313834300a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc36c70f-d52e-4008-94d0-e08316a82ac5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d252363e-c708-4013-a53d-df8eef1aa8a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "ae859590-f7fe-4edc-9ee6-b20df0fd87ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1dcaa3e-23f1-48e8-9572-3d6259a4b5d6",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cfd0447-be98-433f-a4a9-c6eb1729e5a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f36f0d30-0ca1-4b54-a62d-c248ebb954ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bc990e9-0225-44b9-ba5c-dd1a14d3be54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "42f5593b-dfcd-460b-a381-321d64e8d160"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af93882c-4b6a-480d-afcc-a0ba666eb1f1",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aeb65ca7-97c1-43a6-bdc7-aaca96028546",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4c0a27f-104d-4fea-a2ab-1046c9bfdb91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dfcf464-2234-409d-b9ec-13f84089fe62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2e666ab4-be2e-4055-a391-06f4ac280168"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08dd3959-61ec-42be-a9b4-6efc8e2472a9",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55bac424-e825-42f4-bbc5-d0c6d192f119",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1b9ed56-45f6-4cb7-ac72-22ed45970602"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e321651-4aed-4fe1-9be0-34560f7ec47a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3a92a587-0453-4a26-be66-d49a646e16da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d399257f-2d4b-43ca-b350-2bece4fc50af",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3d106ba-a5bc-47dd-a670-a3248f19dc4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94f7ce60-6283-4474-a5cc-07d16516f9e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2300a3c7-4336-493b-b062-8eaab06996de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8ece4665-ec1a-4600-b1a3-22674949a2cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cc18ab2-c83e-4b4b-a8cb-b05f489675ff",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69495aed-07e2-4e0e-8e2c-376e6300c0c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26419871-2e9b-41ed-8ffd-fbd80b6a4249"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae73e7d2-f971-48c3-a82c-eddb01838814",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "91af54d9-84e7-4d92-98ea-25a185a2f958"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce1d4dce-6a22-429a-b319-0c3fc3e4fd0f",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04b42f85-c93a-4c7a-bb1e-799da785259b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d07f73b5-fcfc-4b12-9a95-fbee9be359c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1bdc7a5-62fd-4ebb-9fa0-d0888b1ae122",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "0ae93c6d-dd14-4969-a588-1a73199fb5dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1000a2f0-8ad8-4c9e-8e03-30a65f8377fb",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6389fa1a-025f-4f82-ac93-29f7c4e34d6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c63f002-8809-4347-a574-8fafe37806ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80cc24f5-d87a-4973-9ac8-c44aedefd814",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "dfbc16ff-b4e4-4b47-9b57-7724a8ebd220"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b6d329e-44b1-452d-ae0a-f9368e84bb64",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "836557d6-0f96-4b25-92d3-141741b08d11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6bd0e204-6c32-4dc4-b7c7-ea9c3126414d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51b478a9-0169-425d-bba9-d4a8d253119a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "509ce61b-d70b-43ad-bef6-e0381ffb4078"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8bbc473-a4e5-4515-94b7-d37f97b4ec71",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd0b3d21-a400-468e-8c37-f6864436e8dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df68f510-eb41-48f7-a5a9-de9b51e85439"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e4d2f80-28c2-443f-bb53-44d75d744ec4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "840af94a-1112-4a24-9b3a-fbe30acbec74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c53b48c-6834-4a6a-a39f-096580d513d7",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7aab585b-a88e-46b5-ad9e-c977973151a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f427bb4b-9c1e-432d-b34e-3b7099c64f4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64c877d5-414a-4df9-9360-9c071091c185",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "71883458-fb62-4f00-aabe-805fb03cad0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "000c58dc-39c0-4667-963d-f227b90c9aef",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "045471cb-0234-488a-bdc9-c0e34d3e6532",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "fd0d6cce-424f-4184-8612-c53d25e9c010"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "446f25b6-43bc-4e9c-b3f7-6f25e6a84f43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "4bfe6b66-0472-4949-8cca-36e577353ed4"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "bc9bd8d4-2dc5-4a92-84a9-f2769cf34bd4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "13b0a43c-b1f8-4553-bf64-14793feee271",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0721e260-8112-4a95-ad4a-58ee1fc35fb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d4d49463-e686-4b3f-944b-97d144e32f52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79653c5d-eab0-4fcb-8940-92c58a302897",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "1292a1e8-edde-4f7c-895d-4c5e310914a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a63a663-14a2-4cfb-85c9-bc9daf3079d2",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a8f7cca-c663-4f1f-8ddb-ecbfb4e41908",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2180d2f7-b757-4676-a175-0714ae7f2e26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "471ee417-7932-4af1-b474-14ede6355d90",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "ba234d55-7917-4bce-849e-e2f2c5f97ec3"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "edea350e-57fe-43d3-9123-3c2fd467445a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ef89cbe0-ef0c-4222-b8ce-e5b1dc27a789"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c2c683e6-93f9-4889-a6a5-a31e06c2e939",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f352a0d0-7d59-41da-b90f-ca446e880274"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ffdf1d35-0f11-4715-b4de-49575ddc6517",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ea71c950-a311-4cc9-99f6-d311993b5adc"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "19ea1f15-1886-4ac0-b319-2143dcc824c8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "41bf1372-08e7-48bd-94e0-9f5b9c1c5b17"
                }
              }
            ]
          },
          {
            "id": "c5ab2b38-c081-48ed-b5f3-c2725c143c1c",
            "name": "Positive Testing",
            "item": [
              {
                "id": "ff0380c4-e9c7-4138-8266-3b0800afc69e",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a3cec86a-067b-4520-86bd-fd36b99916b5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json();",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json();",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuance_date\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json();",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "aca7ae08-1ef8-4fe5-880b-a63e9880f657"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "247d210b-3060-4bc8-9b11-6d226a9123dd",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "afe67fe4-3c44-48a4-b9f8-7cd30d86d1a7"
                    }
                  }
                ]
              },
              {
                "id": "88e8d24c-c574-44d4-aad6-d41e75bfe66f",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "265f24ba-7037-46ba-bbd1-2efb991ade81",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7833484b-be0a-48df-a144-3ee6ec8b2ee5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9739ef4d-990b-414c-9f09-fed8b8429812",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.id is optional",
                        "rawBody.credential.id = pm.variables.get(\"credential_id\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "5193c73a-0da8-4ba4-818c-0a667640dc65"
                    }
                  }
                ]
              },
              {
                "id": "0832ce4a-fafd-406f-9e3e-91b4cbdba1a6",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b9b3e5a6-b2d4-409d-9390-f2a2c4dc4fd7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "070f4da5-b4ec-4774-88a8-251bbb14a5b8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "774f3148-7fc4-4bcf-9d79-684dd365c347",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.issuer can be an object with required 'id' element",
                        "rawBody.credential.issuer = {\"id\": pm.variables.get(\"credential_issuer_id\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "d49f0b05-978d-4a42-8551-0648cc6d09d2"
                    }
                  }
                ]
              },
              {
                "id": "2b2e288a-9830-4e93-ab70-b7ebaba091db",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d71c92a7-58c4-4c88-8daf-ccf7d124e1be",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credential_subject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e860179c-63b5-42fa-8e5d-effe33969e80"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7fa57680-8250-4995-b03b-c86983c244a4",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.credentialSubject can be an object with optional 'id' element",
                        "rawBody.credential.credentialSubject = {\"id\": pm.variables.get(\"credential_subject\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "df406928-7de4-41a1-a579-b9b17751ed05"
                    }
                  }
                ]
              },
              {
                "id": "2dcfb166-06e5-4e12-b3d2-783d924a094c",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "01b38d1c-6fd8-4ea3-a4e8-31ab0c7a2639",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "19377943-2a97-4344-a73f-2984cc6e9d9e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fb98e983-42f9-4eff-9b23-5a4b3bb99838",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.created can be an optional string value",
                        "rawBody.options.created = \"an arbitrary string\";",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "0595e9b7-58a6-4b49-93db-979b8c0c5d1e"
                    }
                  }
                ]
              },
              {
                "id": "3837f25b-ede0-4439-b017-252bd818385b",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a389a6a8-dccb-4cf3-8ac7-115f34612753",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e0cb6a05-b50d-457a-a8d3-7805ea276279"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6b45d9d8-9d65-4e1b-a279-3b82bb61e314",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus can be an optional object",
                        "rawBody.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "af7767be-eb4e-4cab-b582-6eea1b7bddb4"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "83f02785-a9a2-421d-8009-928bacfa2304",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b8bfc596-039d-4e73-8d44-0816d0b067c6"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "7b7d1089-49d7-4d28-ae95-4c865cb15c41",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e539c3f8-ded5-4131-95c1-40d04e630e57"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6e9527be-4784-47ad-b949-2fe4dd1bf304",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "a72e64ad-b4c7-40ce-803e-9fe632bd0c59"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ea64f5ed-25b1-405f-96a5-d72556e9ab0c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f96acfca-6843-4245-9cab-83b235ebd382"
            }
          }
        ]
      },
      {
        "id": "591e0c72-8c1b-471e-9956-40857d985f60",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "4b33bf55-bd9e-45d1-8be4-02d30bd5648a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5125be9c-e12f-4a0a-bade-b42c3b9498af",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "edc09205-3f9d-4979-9dc7-896ac682fd74",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ed497f6-eb03-462d-a864-edb6f42f585e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f853e9c-46ed-4fea-8d75-05eabb546ee5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c8b456f-c5b5-4010-acf6-99cdfbbc977b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "33c4dd0c-7f9d-479b-8d43-b06d8ea51de8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "050959f7-255f-4b13-bef2-c2b6349306ce",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c32ceef-1d71-4a1e-8f70-e5eb56c00b09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13b47809-7d51-41aa-91de-4262652608d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b22569cb-52cd-4235-b8ea-1d701cb8fd63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "43ae5114-4741-427e-863d-76ff278e2e4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0e1067b-8bb8-48e0-b733-1727f905e8c5",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44b6ea3b-55c5-45c4-8acb-af6b6349b90f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6700fadd-628d-4d7d-889e-dca875c2795d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad95099e-04a6-4210-afb1-0a0cef06d97d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5ff36ac1-33b6-4a04-8a75-e02bc5272dc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3c94943-4463-42da-82be-06b10e01f647",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f21fdb0-d8bf-483b-92db-42e96f0f62fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56becba7-e7e6-4210-8928-2fdd16fc7698"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24a8a20f-8917-4d5f-ac90-387637f478e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b66fdea6-7e32-4576-a6d7-b33b25b6de69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbb12e8d-cfde-4cfc-8c40-5698e003ec81",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd85312d-6b11-46f5-bc6a-1e5e301d8c58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c72b4bb-516a-4697-83e0-912fd92f2aa6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6af2df68-7266-4769-a55d-6763e9924f67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fc3177a4-f985-4ce3-a7ba-612ea5de741a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f782221-2735-412c-872f-f4798edf5467",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48e78372-db58-4d74-8cca-75de75a6a246",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6de3571-bc3e-40f9-be52-b978759667eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac11cf90-a009-4a55-a59e-fe41a66f0e07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "fbbafbb1-8d48-40f2-980f-1979936f0153"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4da67f66-6a6b-4ddc-a59b-ca6b3c1315a7",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe8d9dd4-9b1f-48b2-b1c0-54d37c2f0b0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4fefde0c-541b-48d4-b00c-7c383e302ae0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5604b930-b6c1-42f2-bb86-1323d9a1f0ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "031d62f3-fb75-4c1e-84ad-5726119b25e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "daff9b53-b62d-40d2-b131-cc4b0bc2cbd6",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54ace5e8-c767-4b68-bb79-bf2f7a3b6b5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca5f171f-bd41-48f9-b44e-24f6528daf34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fadc82e-4174-4691-9e80-d6c0df0875a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "25b995df-9bb2-4d23-9f53-cd76235c469b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc708cd1-9f3a-4568-a34a-878cd8e52c5e",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "417d45ce-edfb-4cb7-8d32-d4d2df3f9fbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c872cd2-8d81-4584-8f03-98281cd6d6e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79511b66-c8ea-40ac-891b-735e26ebbcc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e4b2c695-c9eb-427e-b372-8e6e1cba8c8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f8bbf38-c70e-4b21-b179-ed8d9f33680b",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dc65610-166f-4d3d-be43-e3ff309ebf3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e8649e9-dfd4-434b-879f-96e7d6196880"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0189ad06-234d-4b3b-b067-c0744592a833",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bfa6ff6d-ff56-4c52-a30e-b3a5b96f3c17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e918ad4b-2a80-4002-89a8-0d3c1f1f6c66",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53ec5caa-7848-493c-b49d-ea4fa2fc11d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9eabb327-9125-460b-81d3-7322e84ce4f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e4388b7-47aa-4e11-8cfd-93b175d0e79b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "874ec037-9e1e-440b-bd0f-d5c9b67f3d0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d09af640-8baa-4f3c-b5d7-4ce67c5ad9b1",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5ea6047-7637-4f23-aab6-e7fdceaff51f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ea53019-d04a-44b2-a069-861c5bc7aab5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bccb6bc-e651-4f73-8e52-1325d41e94ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f30f2aa8-05f7-4f40-9f8f-8cabdf5e14ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36fbfa9f-9c2a-4f14-a4c6-ff242f2bfe3f",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22e8f403-f20e-40d1-af2c-450723f5131a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "363d3ede-2b95-415a-8c36-3ba73aa8f468"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dd67fdb-b5c6-4e7d-8545-3287ed6db552",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "039d9a65-bcff-4204-8d18-2f8ffd6ef1d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5257a441-bf3c-44f3-9e41-507c64fcc350",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8774a21d-e6f8-4e92-a5a6-b40c6d366811",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b06588cc-8a5e-4951-8a2a-9919fac54b0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30e3704a-4da0-4eb4-9fa4-c079a097ecc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "7eeeab6e-e55c-433d-a048-2db6cedecdaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0636fae7-03ea-41cc-a306-fc68b9781574",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68a37128-6dcc-4daf-8d10-a3a994712f88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3cb16049-6299-45c7-9a27-fb7798ba1e9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33c03d88-ac92-46ca-883a-135578995642",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "80308b73-9bf5-494e-be63-fc32d9d6f551"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9e12dba-200d-4928-b4e3-0a7163d4c0e4",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a94c586c-39a8-4697-829c-05027871af24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75616161-eeeb-423a-8c5a-b9825f986881"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3223d5a-21ad-43d4-9c07-d47b69149aab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "7c36fb50-4316-4bda-9ce6-0f9d25584015"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f45b17b1-8d29-4e8a-aa31-3dd3df31430c",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dfa6744-5b32-48ee-9b04-8bd6069e8cc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b72b136e-c97d-4f6d-af9e-c94aabaacd51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4af0a8eb-bce7-41e0-add2-305938954711",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "c6063d0f-27aa-48b5-ad35-c03059eaea34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a84d8acb-88b3-4b9c-9b30-ad82ec251d4e",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "962bbb85-d8b0-4153-bc75-ebe895e6bd59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "254ee596-f7c0-4f53-bad0-396bdcc70782"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d79b61a-4ad7-4e74-9bc6-04dafc041e0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "8ada6c35-3744-4775-ab6a-e2eaff32a65a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca3d2854-4d33-4e99-af1c-52196e259832",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29cbd358-7523-4276-8439-61a11fc7af7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c5ff245-1277-41f9-b285-d4341ec473d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81acea02-83f3-4387-9662-1267b8b7bda3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "64281d70-7363-4022-939a-bf995fe4ab60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13552bc4-4fef-4725-8e3c-d41efd9bd5cc",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0eda4a8-0428-43d6-b43f-e366948badf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0459f89c-6e1b-48f1-989f-5820829f1425"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dce26435-5d4c-4ac1-90f5-3fca2dcb26fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "af12193b-9ea6-4964-bdd2-282794e8da4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a666d051-27a8-4eae-8157-7f2a30db1681",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ec6e945-750c-4ebe-baec-6e55e6630594",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a998ed89-3c63-4160-8e7a-e121df838528"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "849b1ce0-4327-4235-98f6-742bc27b864b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c9f0dc75-b968-43ec-b53c-a1e55e35af42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5717cba-22ee-4f38-acf4-b8a5d0b8fb05",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f925b8a-a7a6-44dd-9f48-cdf8a9e0e8ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca76bd9c-b9c8-474a-9190-b2a7f1d4d1f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35b540a0-363a-4269-a0e1-90a8339d81bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "19b7a1eb-dcbf-4006-a34f-7cc8387cf723"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4723b504-755f-4340-a15c-6bac366f1c7f",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cf1ea1a-986c-4a1e-9956-e5968a1bdc5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8eba28e-047e-4fa9-9e5d-7c676ec4bfae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dae07bcb-c833-4256-94db-ece9bf73371f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3065b1d5-74ec-4e21-ad34-21c86b981601"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64b3caff-b020-4cc9-b2df-58a285ccb5a5",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54364417-0811-4af0-8691-560d6dcae82a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9291cef-ce88-4613-a4d7-f9ce7af5d2cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa6c256c-7c73-4224-b913-f3f89570d9c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f09a5ab3-64a2-4ce4-aeb0-ec5468e0323b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "758c3eb9-bf1e-49f3-990e-17b0e58e769a",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3c1da21-685a-411e-8110-ceb1d41c0088",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9dfc4175-d0df-4717-ba12-6053c18b87bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3b2c98a-3de2-4aae-a8fe-6765595ca75f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6da795f9-f73a-4e5e-aaed-922a85860428"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3548a120-9cf1-460e-b76d-8b7bb5bfb42a",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e788a643-a216-4906-a1a0-12a1daf254a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca6e9456-1cad-49e4-8d3c-720d93a97675"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "513e460c-9c4a-4a90-b2d8-f5bbef24805f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e7b0e0c6-f6ad-447c-b6ad-21d96a684d3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84ae7393-6ade-4f40-9d44-5cb8a189e294",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7476be55-b510-4983-96d8-920f00662878",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57fb00dc-d913-46de-92a6-8f9702e6812b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49717099-1d73-419d-afa0-104b3fcb976b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1439c01a-4f20-41df-83be-ad21ff4474ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25a6fdf4-34dc-4130-9724-44132621b79a",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fe3b674-ebfa-4577-83e6-30df1ddd70fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df96242e-477c-4dfa-bdc9-7cca0c99e3b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fc457cf-82df-4541-9198-56f919013580",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d1e74c2f-c54c-4a11-aaf0-7ff435023916"
                        }
                      }
                    ]
                  },
                  {
                    "id": "438ba685-6962-4ffb-9b7d-8bd82daed69b",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48b20c7a-4bd2-44c7-a1a5-04b529f4abe1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a9f5763-4e38-4bef-aab2-e6078a905ff7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09477271-bf38-4ddc-9130-9f45ceeb38f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ccc0ee30-10b5-4a3f-9ab0-427b7344c3f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e954983-0049-4300-987b-a1584ae6f03f",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9d9606e-842a-42a8-8b74-5e8aa0da5f80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de501ea5-e23a-4387-b7a7-0cbf6c7c8291"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adca1369-7a94-41b1-b8b1-9e81b3e06abb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "95a8ddb5-8532-48f9-b406-ec72f63482c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "111126d0-51e4-4357-9503-29162cae2258",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b278e6c1-a8d4-4cb8-be07-88bfab7a3b2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09b278b5-6f18-43e2-846f-bcf414c87dda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdb70445-577d-4bcc-b468-d4f464d4395a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7c877724-55f7-49d7-976d-142d9c08d404"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f87dd75-bd09-4d11-a301-583788333e2b",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "811051b3-76ce-4015-9a48-0f4e4f0acfe5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "883d843f-5c61-484a-9759-9a3810d224b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b83f4bf-4177-4efd-a82d-10627be0f07f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8f141841-ff84-49cc-957d-0b64b2478060"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "ac26a272-6a73-4d96-8a3e-87791dca9bb4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4828e815-b842-4693-b86d-0d11729e2a01",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82e901f1-994d-4d04-89ff-d2ae5a6c782d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3f0aaed-defb-4cd2-bd2f-7902274e22f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02dbcf83-1a81-4968-9ea0-f591c2c0396d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e0a0236b-5bb5-492b-8121-c111c15f02f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b88ccb9a-1e47-42d3-9fea-65e51507853a",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "365660d7-04b3-4c80-9d76-2f1208a97cc8",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "e22df820-d604-430e-b5e5-ad7ebfae59f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2460f5e-46a7-402e-ac67-8d75da4e5666",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "18a9bf98-feda-4e45-9b54-c0837ac41618"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0cc44815-93a7-41e1-9905-6b66bc709fe0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "82934b7c-72df-4b94-b112-dcb5e944fcad"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "73506d82-55f8-47f2-a097-4e702208db2c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "42047c4f-35cf-417c-a001-008a1a6705fc"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c511cd7f-7760-44af-aba3-c3ca223de6b5",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "fa52ec25-a23e-42d4-a14c-4654c0a25074"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bbe3c8b9-4e64-465f-ac4a-87eaf1294e6c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b3e5fa32-0533-4efb-9d14-f91b93b7f5ec"
            }
          }
        ]
      },
      {
        "id": "e39c7a46-6329-4e85-8875-0eb629cd5d4d",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "51af9ca1-4444-46e6-9554-24452a8f8573",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e3256074-ebdb-4c7e-b913-1d91d39c2d59",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "b1a502f9-617e-4443-957c-bdb3b14a7e73",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b7bd430-72bb-486b-a529-674849a6a87e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9438c21d-d534-4a05-8c25-c5cc675299ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b9a61f3-5748-480d-a8fc-559b9ed8c298",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bca6e1c-0b88-4659-a36f-c46ecc4c24e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f965809-0547-4be8-9257-dee989455b33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c67504a-3246-4bba-988f-1194e9371e6b",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ddf0f14-af47-4ab9-9242-fb21c46e3c54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cfa5e87-d433-4bef-ae7c-5705ff8503c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8069f0b-7d7e-4c8f-ba88-6e2fd04e86fc",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bcf8398-95f3-4bda-bf75-4425f89f38e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e810024-5338-4132-bfd0-36c2644274c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7871440-3ac1-40f1-bf49-cea901556e7b",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8483649-a2c6-47b2-ba13-505f6f87c5e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b357e545-8c06-494f-a12e-009a2968b682"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff39592f-308a-40f3-985b-62f029508c9d",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79f8799b-c6b4-4944-8ced-0448e299120b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22a6d513-2fe8-4c69-aae3-f638b1174120"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85469122-84a0-42f8-9565-64f8753e05a1",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eaba508f-e47e-4c85-88b9-903ee685f73b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "685fe2ad-414f-49c0-84ef-1def5104f738"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef464b18-b77c-4f55-9af7-d47635027fa3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80a9a2a9-d49f-45e7-835d-a50153098404"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3223b69-8c72-4c2d-a090-33f274bfa18b",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c78d566-07a6-4b3d-a229-ff41f71c6c02",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e8eacfb9-6abe-48c1-b747-cb30a26221dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3f768b5-661e-42f5-bde5-84a9bba8bc22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a75586d-a875-404b-956e-f46ebad4098c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7da188c-bc1a-4841-a32f-453484dab8c8",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dc53f0b-a57b-46fe-b120-6af23ff01803",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d5fd1f7b-1121-4f50-8747-9aa553f4b2e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9b2b6c7-b3a0-4e57-a3bc-ae0c01c79ce7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5bcf837-61b9-4755-8c1c-c82792bede37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a41caf7f-0534-4d65-a4ae-00e7c84bdedf",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "858fe0ad-31cc-4ccc-be29-767f704ae241",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "296f8cdf-058a-4c74-b6a8-885c6e0690e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd4326c4-65f6-463e-bef1-9d76c1b3b24a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92827807-253a-4f6d-8d8a-08e4c7f87f79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96c84f86-37bd-4847-9d1b-0d140898e436",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..zF1sQbNclnV5pE5MfuXqMaTVBquwie4ctwzSdbC_LJ1Lx5qRK6V-y9wl5oTvN_GpuOvMIvlG3kQdjgqL3GBKDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc7f8a24-7703-4eb3-986f-b176e762e39f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58324345-48a1-449e-9599-cb464ce3d990"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a3ae546-0404-4445-8948-c1c2b5713292",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa924c4f-2cd2-442a-90ba-18f60642c1c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "296e38e5-eda9-4e49-9eba-aa223e4636c0",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d6722ee-e205-4246-9c29-8a922e45a183",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eff10cad-b553-4b7d-a99c-672edeb153af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5eb29d33-9ea6-4505-9e67-f19bf27d5ec0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7aa8bce3-5a9e-4e90-903a-38bf933b6b88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c42f50e5-1e5f-41dc-a9b4-f183bee1b4df",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "210e6208-1b81-40c4-8da4-9ae19758ac32",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "110ed402-1688-4a3e-bc3c-e33b8c63c3b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcdb6483-c486-4670-b588-f557f78809ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e46828d-4186-4a3f-b7cb-085f8a123730"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6c151c2-6ce1-4234-a9ac-7df84bd6bc01",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "392bc997-ed39-4905-ac1b-35f5fc29a58c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6a9d9c82-2ef2-4ab0-94ee-fdbd1949b51d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94126bff-2ef8-4fcb-99c1-252171568ac6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0d4676c-adac-423a-88b0-2e3685dd9726"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c102fb39-cb5e-482d-9fa6-18cd78ae1cb8",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "735c7c64-c920-49e6-a5e0-2be0c3f2b42f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6172afc7-1525-4490-b54b-9448dad9fab6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2aaf8ec-58e1-4198-b332-69d0573d4e9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9109824-0ef0-4d60-bc71-b381119f3e7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c45a195a-7bde-4ea2-8025-9a020d7931b0",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afd1ea27-78ee-4c95-b12b-36d85f45a622",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b57144cb-3b90-4d5b-ab88-ec55075d72b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f86090f9-4fea-4124-a6ec-3923c9ede6b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ffe5212d-8125-4bc1-ae7f-f01cc3a484e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "828d3a67-6d7b-4649-8470-19dcb5add06a",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11493890-dea3-4709-9793-d9717d4b5efe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba4e92ae-94ee-4a4f-bb0f-a50185217acb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecf7cf90-588b-4dd2-8d52-90f943c30c0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aab0aefa-6e2a-461d-9b7a-4defcf00baf7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd9fad2b-3a7a-4e98-96e4-3ddb6f30b531",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e44b1ce-51a2-48bc-8e7b-2956e1a067cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "463466c4-bcbb-4630-86b6-ef20b5c9d825"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e036979-4d90-4117-a6b9-0c92f7844d7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b64052eb-b0a4-4614-8e78-d06d6b98c5f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86a8147b-9831-4a9f-bdc0-b748304e0005",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": false,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "298098a1-3f39-4852-b7cc-243317ba73eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "512e6625-2c6a-4cf7-917d-c670e9424618"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "861816eb-37df-4894-ba69-2911bd9dc2cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ca4cb6d-7d7d-4a93-ab2e-97eb4a1df418"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8e5157c-5a96-4c6f-b410-a7311203aba8",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": 123,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32cebe34-15aa-41fb-95a7-941d5c04d5c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2dbe294-613f-43c8-a9ff-6579850bf4e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42880d1f-fece-4311-8fdd-06e8350d4937",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b31d8fe-85e7-4bf9-90ab-48aeae26f7b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6eb23337-4fb5-4020-801f-30532cee2120",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": null,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebcd5de1-871d-4f39-8dc9-b51d74f00942",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3376c1cd-aa4a-4bda-85ee-fbc701c40e03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "079abee5-8a55-4ef6-997c-20021ea26d0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f80dfd55-e1d7-4fd7-8a86-901e626e3faa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17499a00-071c-40dd-b7bc-da3138f2fe8c",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..5J-iTBtI5WNIe9L3kLF22cjjDx6iQuJAgl6yYYoIGMC-X_crKNlSlB5bRJsrb2MV-NDlWMtHe0grtMqRG1N0Bw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dac516c-3475-464a-bff8-dc0878cfc63c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51237e12-2500-4034-b5da-8b2ed8d0fa43"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58ffab70-e9b2-4131-8026-6aea7e44f4f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4993e2fc-a688-4aba-9493-9ce91e120f54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "069c6249-149b-4ced-933b-cd5585fc6d70",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b05d8bdc-6209-4303-bf58-53c655d3d9e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ad6dc96-946f-4bfd-a37a-85404b457d33"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6770e0de-0683-4cc5-aa09-0a0223f84f28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60e6029f-9a91-4e0a-b5be-a21ad484a379"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d73d4bdf-baf5-48a7-819e-56f34599a625",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fadf4179-ff87-4121-ac62-95c06cfd1712",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "983a0be2-2e94-4e9a-8db3-a3da6f03fd8f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74fe43ae-d0a9-4755-af8b-b1e84a74b78f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f59efb2a-cac1-4d82-bf43-f12ee0f088ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0fb58ed-f6ae-4e14-a077-026a77800c0c",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "469236af-ae98-469d-b990-18308718ed1b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8e45d6ca-cec2-40d8-af9d-335775bc6e04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebc4779e-2ff6-44f7-acd2-b12ac99cc0c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "152ec8a1-f21c-4482-8eb7-3c782046d80a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a495b379-b320-42c4-becb-0587dfb4e13f",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b89acda-b1c4-45f4-92f4-388f2b6af3a0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4df5a516-53e6-4b0d-b7d0-d5eae8f81b86"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd56d963-b57c-49fa-87dd-cee7aab05ea1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b4aa56c-511a-4830-ad76-399e86b2b9bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a67021fe-53ec-4564-831f-cbe53872a71e",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1eba414-aa2c-4b8e-a527-f107d6194d13",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "38a29227-12c8-4171-ba82-bfab8ed21546"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cad8f21a-480e-459b-894f-59142280633f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb182b5a-809c-4aa7-902f-3935a335887d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7008aac9-7c0f-4c90-b8ae-fde7c9234962",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4baddbd1-25a3-40e9-9321-686f5b5ef073",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "adc9255d-8493-4524-9dae-7bfc9f4fb668"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "798e45d9-0399-4aab-98c8-1c641cc42cc5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5cf34d51-63b5-4516-8583-7f4abbfb06fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1373965d-9004-4faf-93f4-208154e7ae0c",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81b3353d-b17d-462a-92c2-065003a63b31",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5d6cc59a-f4c5-448b-9b5b-109e55bfa2a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0563e50-15ce-4ebb-9e54-7b1983017bcf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a540d9a-c245-4cf4-af34-03cd929100d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "023aff23-9438-42c6-8ce5-c6bbcd5d90aa",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71e34cd8-7e9f-4d80-b6d8-a4112657302f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d2bf6cdd-e65f-48dc-a6d3-e9b7519fde66"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cbae1af-0d0e-42d8-ac51-3178633cec6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f417008a-d1ab-46ff-a705-86385e929edd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dad5f468-8c3c-49f9-afed-5c1b761e6807",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ee72983-971b-4385-9bca-02f0ffca02ea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "79f995b2-00da-4cfa-a3d4-ca7ef919b97d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94b2a504-3ba7-42ac-a49b-4fb6f67b02ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1b539d1-0140-473b-96b9-d154758fbe02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94c117e0-9b1f-4c91-ae44-5e448f2ab1e3",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9af5f58-582d-4b78-9ed3-a3ae1b23401d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "62879d4d-9158-43c8-a0b3-02e1a3a3e91f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d08baa6-d4a1-4efb-a847-c37d930b78a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ec03ab1-ef4f-4d27-b65b-328a2f610183"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c445640d-b692-4951-acc4-b266faaab4a9",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ad37622-b292-474b-940e-a05815945220",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c50db966-29aa-4cb5-a339-ba81d4a125c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5833af8-1ad5-4820-b13b-f33431aa6a82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "236483f8-61ab-4ccc-a096-49c990594b22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e735532-0849-425e-be02-aa83e4274caf",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5b66148-6700-4779-b7e5-09fcd72c9a90",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6e9b99a4-859f-423b-85cc-b814a84ab015"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79c4496b-c372-4053-8ca8-51b722491a92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72bab10d-1641-44a8-92df-929525ae25ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa519081-ec6b-4fd1-9ac5-629d4c7ff77a",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16694257-36cb-44cc-8aeb-e60fa4a3bdbd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e826cf72-8009-4e53-878e-10c00f6a9ba2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "333f4873-dbde-4218-a78e-b703fc0ecac5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1d72491-385b-44d5-b764-4416f1170e1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb8405c0-367a-4fa9-b869-cef6ee943880",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x7a3s_8HfmUqGT6SDkktN-jeRmBR2xQ_9tOhJx4kEG3SCsRTySfDxya9yy57LNv__qbY1eMkm9SNrwdYiqlBAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1efbc31e-6c40-4eb8-9418-8851ce0f8a62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6adc5aa0-cc91-4d3a-9cf4-20f0b0e8c97d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bc16b80-4f27-4ef4-9ee7-70ed5766fda0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06e1fbf0-897d-4bd3-bae8-26191896b2bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c8c7ecf-64c7-4830-b218-e2bd9877c5a9",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mMaPSvG48oEf3bv0t-6eLR3zvU3_BKoRIkgzkuZfm8zvjqbI7iy05D8k1mTeoSZEw3xYV-_sH1rChqGmmp7KDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f506f99-5707-450c-ad87-816f4dfe23d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78959aad-6bc1-4ff4-8415-1a6aeb96f3fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5336df8a-8b3b-48ab-943c-222db35fb483",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "614a0c61-fb5e-4c6d-8f31-b533d3618ce0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e2c6d8b-bd3d-40d6-9c5c-e78b323bd677",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..rAVfo-Gnj0vUX6yDAr7pslI6XAAyF2LHTXpiZEmnH5Hb4RsKcmDZZawaLSCg931y1cBUgZ1PQvGbJEdb094ZDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8e19ff4-150e-4410-b37e-48b9ee933b78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a827d70-044e-4bbf-b211-85fd59c28dd3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfaae4ee-5d12-4147-a5a9-90884f4d5f76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8192ec69-6437-4fa3-b1ca-ac48459dbb8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8df7e75-200f-4bac-b81c-2ee2781a832f",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1780e3dd-d5ff-4028-8d52-510cf54dc71f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0afe6ab3-0a09-491e-8309-8fbbf47a96b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "640f963b-513c-4fca-9877-ce28090a27cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4466ea35-79fe-4d87-8fba-7a78d637c56d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36c2fd07-50c6-4de2-92df-17fe65d7bef7",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e65b962a-2dec-4862-afd9-d0d947a77340",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "706aa624-0553-44c0-b00e-47947a35226e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "593501f0-c752-423b-89d2-b3910af0afc0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92de6981-c442-4a36-b7e0-b36a7b865e34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04bc3619-240f-4602-b08d-a82101d3f035",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..vv4qa5LGRlgeMxW5G5VjEKDfjKKosQnvpx6oapYDlfUSWVagQsDoDcRmkotKzFHDcTh-opjGLp__agL6_d4OCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "993ea445-0b4a-4e76-a58e-81667ba4322b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00a92909-4290-4662-b64e-ee8c3db5ab09"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2758ee1-26ff-42c0-89b0-60f64e79d948",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f8c99ea-cc7a-4303-8255-84551c0909f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9813af08-f7d1-404d-8735-48cc2c560a62",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TTwcmWS6_0_t8XPlAGXbzWVSL_dL7OeYojY0FZz1WXCFvDfeAQtMh3dcIxuCeDqON6St3PODGfxluO_q1vWCDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11fe6d07-54e8-4b52-b893-257c79bcea78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7d8f45a-b44e-4b24-98ea-a12eaee0122a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a50060f-4ebd-4382-ac30-3838a6a1190c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1df33460-3586-4ce7-bc49-c3ff2dc18148"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e12ef8c9-ffad-434e-aa66-1f9b9959d34e",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..wpkNYYEOCjKMWm9xTYNn0J7IgXZQbbkEoohMQbloz_Zxb15UVu6DqiqsENotAeHvlRWd7RH2O9v4FwWBeqvPDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9993dc1-8b28-492e-84f5-59d4d0edd0b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22d456f6-4383-44ac-bb9d-e6619705d36c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eaf6d115-5553-4617-a865-dbc594c3a57d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "928e2fcd-42a9-4f2a-ab2b-b8685a3c7d21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fd582f2-eea4-443e-a968-c4d6d2475f5f",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6262046a-77ef-4e1d-af54-c2d88f862207",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0a108a1-80c2-4e31-92aa-ab5abbe87df0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ca50fd0-e30e-4190-9396-ca7af54bda72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "938dd7e8-7388-44dc-b282-dd606920bcc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47ebe18b-c5eb-475c-b6fd-ce8a55cb0a74",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHJmwuqqXWMdd298m7RCTGyGoAzsCx1y9tewaHukqaJJoPn2-TLDCQuXvlnFeAYAE_Cy3j1UScfoVx5k-eclAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10d74c4c-a0ee-41fd-9a65-d2591225dd4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3c9603d-654e-47dd-a3d4-a7538fab8385"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7660ca7b-df50-4772-a065-af8817bccf77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "baffac89-6425-413a-a728-4ddd69d21d59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d199ba6-c2b2-4408-9eb8-5566e27d7344",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0c11ca5-a641-47f9-bbc8-d5e7db6e9831",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a40dcd62-bea6-49a8-9c85-ff0b89f448bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27a76fc4-18da-4d1f-8830-f2eb00961dfd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "739d0428-6313-42f8-9f0a-2f6ff89fdff0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6426bfc1-0188-4dcf-900e-e7de0cf0faa2",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..OzKfWk00QpV3_FJru3xJ3_ktwlU4O68prZWWCmdy3mQTbCz2lPFRl2sB4AkdD3AZUFMAnwxhscd9B0UnqxTZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6542fb0d-0742-4e43-8aab-809c1a249fcd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b6cf758-e726-4b80-a6f5-d74613bf9c9b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e22aed7-d713-4dd7-a1e0-7c7c662c9f4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "299b2e21-3c46-403a-9115-b329a3d11e05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f31279e8-36e6-4ef4-9312-aa846fd4d377",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1W7WM5cXb0daWooGxEOYn_zm72mkmpF_tu8Fij39luQwNGDgK7h4nZGBFcS80HTVqiBKxzlhGq1yNnpUlLG-Ag\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5faaf63c-29b1-4bda-885c-98ece1fbeee4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "980fa3af-7a85-45ef-a041-1ff0badfb5ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0c8ba99-f807-485d-9441-168bcb749920",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62187f82-0cac-4578-bf6c-7f3ea0c0f259"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b663b21a-9f75-478f-ad9d-1f32f94a31e8",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dkiU2sStrvQWiNFK8cKmCbAcRGsC9kbDdKyr-NRlPc9ORQczitwUEymjviemIi1Oot23VohpyMcSFvgFIKIFDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8b98e4e-8440-49b8-b95d-16b002a5f0f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09f13842-6574-4f9c-804e-03b231359fbf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3d2009e-c8c2-4f5c-ae9b-efa4c1205715",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9748d8c-3ca0-4037-95c1-82a2bae722e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e6f8da1-9dd1-48fa-a420-9a99c87bd03f",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86934667-78a5-40e7-82ea-93deaf1b58a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd956a1f-24ae-4ad1-bf68-ab6f94915689"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f94fb5d6-1162-46fa-85f5-cb63b253500b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7852c97-9df0-4135-bec0-92c6c0e4fc96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0359d07a-ea73-4701-9f34-ec8c81a22cc2",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pNIbeUn6DL71QxEWTF1wQTqKfAJET5JB9FlmoLXk4-rv1owG68DqQY6qwcPx6fUbMijsWsXlvaFvzND0jAg1AA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bedfb850-abd6-4ed5-914d-c785c868cd8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f7507a2-4e92-4092-a936-810545403b97"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3d936b7-b0d3-4602-b410-5c6e23b7b32a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d668cd1-e8fc-468c-80bb-6f7b09df5f06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c93ecd3d-3078-4776-8c85-6ce452509e64",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z0P0ndVABJRB7mCsv4C-EgB-1SxgnfrU2uQBDSwKm2KfB1jBnzsEzY9enxOn7V1lBAPNxELTEaxPCAK7_n3bBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d75105b-fd26-43d9-b273-5defeac54ef1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14316b1b-36be-4b4d-b0e6-9c57e813e2e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f25e85d-fb15-4781-a73c-f090cfb5cca1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28e393ac-9f80-4f65-a886-3a024b262522"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e54ff09d-d8fa-4057-918d-bf07bc35bf5d",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a8a80eb-8825-4ff2-8186-d15c18a6e989",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c80aa72b-0fc8-4212-a805-43bf4ec8ee75"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b00e9902-e9b2-4d57-917f-a9db1fab05b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "931d2b1a-3199-4855-98de-66b06b5f2cb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cb9fee8-c5e0-44c2-8fbe-f80582a32b71",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aecc18fd-f752-4a74-9bc2-437e6108b93b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fe51380-918f-472a-9cb8-8745178f7115"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e30f6da0-cc5f-444b-8964-abd9bc8903f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa0cda6f-cfd0-4558-abaf-b4d6bb35e045"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92e6dbf9-c2d0-462f-9415-b201da653135",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..IXaPbANtKFiA3Sh28esCkg9kdwpHScJg3bOCF7Phmb5n9RC981EeIobgDnMzWIjP4v0S92FDEcZqA_XbW43GDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7177d3af-1d6c-47b1-9e9d-4a17e9915314",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8db9ca9-feaa-4cda-ad23-24c6f8224919"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "539957cd-411b-4c85-912c-86e0fe3810e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ab4861e-9f70-4f70-878e-24b03a98938f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b113d30-4605-4655-b27f-9a72cc0a302a",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iM5Xr2lBqwFIQhq9RI7Dv4K0dzdQ0z7i5YN4ELsstv9vDC9xA-GY2Ft-PsfubsbgVyQsQYjchCv23GULmhauCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b62719d-1005-4e95-aa10-07073aa3ea43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fdfe9b17-ad98-439d-a39d-6a15963b150e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f80cffcb-7932-4bad-a5c1-3f38dc9e26bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0cca0a93-9381-4b9b-87d7-cd4abfc3a29a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe847261-e085-4339-8f1c-574c3197e40a",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c267d18d-7591-407e-9ce8-21386ec7bc72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61b45d69-e2f3-43e9-ab33-6eba00700f3a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cfba84a-207a-4412-aa12-106193424072",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e2f912f-5e91-48fd-808a-78be3cc00e9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c73e3a2-1fa9-486d-b19a-2e45ba1185d7",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3511f74c-58bf-4464-a4b2-ac3461e27bee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ad260d3-4871-4e6d-b9b2-f76dea6b64f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77b6eb92-1ff5-4f19-b6a3-113e58e25684",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "335218b5-31c1-4332-91a7-ee1bddfa11bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7526b65-cd5b-4218-9554-010b484b9ffa",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..GBcSurXcOJcVinhthkmqvV40OS1rN2fY57Kad0HMLUuykp14JJCtNw_gmtf6SwZxhB860OVsUmuNbZXsMCi-DQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d87860de-1f14-441e-9b55-8c33d5a258d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb1240c9-46f8-4607-86cb-98ab3da7e4fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95f5cc03-31d3-4556-bec7-bb6a10d53cdd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "569744ff-f2cd-4511-b207-acfc62c8ce66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "153b82d5-073a-4159-a22e-ea9e361ce648",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VWowmcXQAjabeJENG3aOcLzQ9HrvmSIs2pOWcaEMLdJtvJfP7oWohIBiqp94-eo1pd4Ocgk3hT0cLvS5qKBYAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "719aa8c9-106f-42f4-a655-e53a28393865",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb09d32f-1fce-42cd-be93-bfe50c2be375"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95c61706-4806-4869-83e0-d8e1453ea8a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf74a61f-976c-4b06-89b3-11f8781ac4c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6e3f4f4-ba93-47fb-9c1d-1b530cb956cd",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..-awe55AAvkjymZEpagD4fdSQk0uCGFfjyFwg7upmg_CISWk12JfezKe-N3hjTwYKCSCjScynLGvlH2x4iSgbDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69b935c0-6406-49ef-b16c-4a2fcd58c9e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "351af622-f3a5-450f-9737-f03bce3b720c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5d78575-7066-4a00-8439-37a9c150b940",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "834e01eb-cd49-491b-bdc4-bcc00330e1aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbede27e-6b09-4930-b0ef-d5fbffebbe83",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..NDwZvVUWw-xG0zU8VsWhiXPWrYycgK_zwN8zZts05DTw23rOTd9IOXQxqhEMzo_X0c25jzowIbpDfEFxqfmnAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4374361-7ae1-44bd-91c4-2a52c58d5f7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dea01197-8307-44bf-85d3-f8b50eaa925e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67d03f98-da11-47bf-8cad-8f768003e95a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bdba2c38-0ce2-40c4-9b7d-3455b5ab19e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa4470df-a46d-4e80-aaf7-2819716f2ebd",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..y_7VEjN1ENYoedOrj2jsIqgL7FSYelxGgFZD5ckqKvSDM5BVEWiEctD24BWppCndRR7WR9_1ByBm2F1yBSaoCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "368d4c9d-ed8a-46ad-aaff-e0ee9043195d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "271a9069-e178-4692-84d2-0cf9469f9b94"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "850181da-d0d9-462a-9ee2-0de3ea829aaa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c3632b1-5705-41b4-90f9-3bee4779d4c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8008ddde-9903-4b16-b326-bac7b148abd0",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfa5773e-b0d2-42b9-bad2-5aa64dd38c6e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "61d9094e-5296-466c-83e6-33ebb211d106"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c4ded40-e132-4179-ace0-79b16cddf50d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8accd1eb-9689-47cf-99d2-0c85c108fef6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c8dc653-788d-4fd6-8f21-6b34a50798ce",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da83d173-2773-46c7-9695-de82c10d9c64",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e5521eb9-cb3d-4b20-8590-be9c09d38d93"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aca7ca3e-5838-43f5-9fe8-f76642df6955",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c498ddb5-74dc-4a2f-ad68-9e6e72cc4b2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0359ddb2-83f0-4a2e-ad9d-80393f5a8bee",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f007058-6302-4b05-89a3-d817e7bcf29b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a3bc6d44-3f71-40be-9cdd-1f0f84ad282e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67462fda-b0b8-4406-b2a4-c5e400a53210",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9cc10fd-a4a4-48cf-9e4d-a06265c6393a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5169022d-dc10-47c1-8896-44ef0ccff903",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3d71c61-e9b0-46b1-ae51-d2bf05aea790",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "af86e42a-97a7-4254-bedf-edadbe601f24"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cc74aa9-f63a-48ce-abed-5d6196bfeb95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82fb1a5a-f4f1-43a2-8a14-08f3ad77ad42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "936579c2-e1c8-4918-893d-89b8b5dbabbe",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97ac16e8-2e59-4138-a3e0-df6ca1927db4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f30a92cf-b45f-4904-aa7e-f8fa4ce81714"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee6cf6ee-f9f4-40c4-a274-3d5c6dcd3668",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43ea794c-1726-4730-a463-1422add16756"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6ee210b-8330-4a8a-8906-83a5bd757c91",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48e9bbdf-31ad-41bf-86e2-fe02d35dbf5a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dfa9059c-27c1-48e9-9e4d-7ef1d8ec08ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da6881f5-a09f-4231-a421-7298b6ba88c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65d1fdec-8c6a-4746-91c4-f51a6acef45f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62b4a310-9f79-4ba8-9bf6-1b8dc256ccbf",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0184393b-03e1-4277-b047-d0dd552ded10",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8af5b135-2b60-40e7-a537-5fcf619daf29"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f749e0ae-7ad2-4b6a-bd40-400dd712acba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "739afbdc-ec93-4327-8393-e9a475784897"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3ce8bdc-a221-49da-84ad-0c6594925051",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f81fb10-bdaa-4506-8d97-c83e854d175b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b33594c8-25eb-4c28-a568-ee3ecba448cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0da0dbc-d864-4fe8-92a5-58ef141b2aa6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02422a3e-d4e2-415e-911e-564f42ab3891"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6c90cc2-1653-4e4c-8608-7fef414e2206",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e8764b9-52f2-4859-873f-7d68a149981c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5ec4672c-2f47-44d2-bf96-2138bd97b051"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e1f9afd-992d-4a67-87bd-49093823ebdf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e16d88e0-0f41-4555-a884-15e48356bbc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f925369-0ef1-4258-a36b-5b8cb7f06187",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfab6a10-ab44-4f51-b0e1-8920b79b6b11",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a6db8080-316a-419d-89f7-68d217b3061e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcd16241-bc2a-4afe-b2a8-79be8f0a693a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2aaf4e80-1b09-45a4-9507-0d4f3738c870"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48348c72-d384-4f80-a80a-816a6f477e91",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "918a57a9-7d7e-4826-b8ea-d81a75488a41",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "70441eae-877d-4a55-9a9d-7b4e00217b40"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbc1d8ff-c031-47b8-915f-f6d43f89cf0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c57746f-a375-4b51-8e1c-6e32ef9e2316"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31f0ff30-9711-463b-b393-953a7a34f2be",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7319aa7b-ebae-43a3-ba53-23e47ac56d91",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "19ad2fc2-58b2-4d1a-a916-c25983ce1ded"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99298f48-0df3-4e0b-96fa-eae08c62d43c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f860c412-ffc0-4dc0-9fa4-b85ffa22c231"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2d153b8-892e-4bfc-8940-c8d35e30cf18",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdde3794-dca3-4c1e-a230-1f17ff4a7328",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "40590bd1-6f31-40cb-9eea-639ebd32e0a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "493d21c8-d8d8-4f0e-aaa8-1396a6684b84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c97b0809-554e-4d89-b7d0-6c9b22f5ebde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "072dd3c6-ba50-47fd-98cb-e9a293edf3f0",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2601d16c-ae21-4230-ab0a-fe4df63cb3b2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e861e7d2-4d1d-4f76-86a9-4b1b56d58965"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a2ee8a1-0c22-4426-aa4f-1ee4e2386a22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bfa27d9-6a75-40b0-8bc1-a72294a01e0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e52f3c1d-967b-4e22-b0e1-e33cdc9a0de0",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a87c1a3c-1d74-4f20-9129-3e4ddeb760b5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d26681a4-f4e2-48c4-814f-7d9e6cb2f58a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfe3ccf1-89db-474b-a909-be567d894078",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b342093-be36-4140-9005-104fecd2edc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e996c85-0787-4332-ad73-194145d9bc35",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49e27ce1-9981-495f-a6a2-6863ec6e4baf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "771d49ca-9285-41ac-a6c5-76f42632549b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6dcf87fc-5fe0-41a7-8532-684fcc272b47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ad2b0f4-b4f4-41a8-bf3e-f9e5144755c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d13884af-1406-4ae3-8941-da9a98466d5d",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96ee8918-fb9c-4ed6-9c9a-a9ed5cd5ed10",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "49ac9311-5865-4277-b8ff-41a3a05d1f4f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "742defb6-34b0-4c73-a8c5-262f73438387",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1cd5f242-5b85-415f-853b-575f533b4a4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d895420a-50e5-4df1-80c6-001ce111bbea",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80d85050-3380-491e-866e-4052c1abe964",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f5b9dd87-e454-49f1-aed5-e48519d9709c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01dfc6ee-860a-4cc7-8638-4d2e67b01d13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71e61c80-2e33-445a-839f-9cdac3e41c80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71114965-f5f2-4cd8-9b0a-6128470ce6b2",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9065f9f-113d-4836-8085-4a6029307db2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b3938f39-cb87-41c4-a958-240d0a21f36d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80b83f47-e9a2-4f2a-8e0d-ef8ceefaeec5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "978bd768-6d68-4b18-902b-47a57cd12740"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afa9e1ae-cc23-4571-b043-661d8acf5b80",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fc27602-41cb-4f0a-b9a9-0ec6ac63a53a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0ae5e57a-d5a9-4994-835d-dc07a5b0d999"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d30d9c93-7cfa-4c96-a090-fc9c1988a79b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b58fd086-e5ce-4cb4-bc87-4c86bde8a515"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a12203f-e283-4d64-a142-de05924eda32",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f850e5f5-ef00-4241-a79b-f5f5144173bb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7d0fc2e3-f9c3-4b3e-9033-1ec26df960db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41f12cb7-d075-4642-bb32-dc7aee824561",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ab35da6-a56b-43d0-a002-2180f6e5ab3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6350a454-839d-4468-acfc-b5c33532a23f",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8516f69b-3beb-471c-a813-beba17964c80",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5f09c0c3-dc31-4a19-b365-f1fca686a421"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "006cf5f9-351b-418f-bf58-689bd2e3065b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb5aa2fb-9270-4e4f-9261-6fd2776171e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62539589-57d3-4f86-9321-959afe9f18d7",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47665de7-1fcf-4397-9c5b-a0eb2c414601",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a6592a3d-fd34-4de1-b6ae-88ff0827b220"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d78bac92-d0f4-42a2-8409-cfb2f8dd43db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5959ff18-c3c6-48ea-ac48-226c1e568c41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a2c69ba-4962-42bd-bd67-c88627a42364",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02c675bd-3402-4423-ab3b-e525768df8af",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "adbea0be-5258-47bd-ac75-93d60d6e0d30"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09223b64-cf24-4d1a-a3e3-42aaddd5e627",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f6d1064-1dc4-4038-a51f-5c934c518056"
                        }
                      }
                    ]
                  },
                  {
                    "id": "439c154c-9e1b-4562-bb81-d8e2e257cb40",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c65c63a3-673d-4802-b452-35f4628f0897",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3b68639d-8bf1-46f4-aa34-6eea07790381"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e487621-4eef-43af-a0d3-2a0a862fd204",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ba94150-5bd0-4ab3-ba10-fcb1ac837b88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e36edff-6f91-457c-9d81-a420f328a914",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "394116d1-8adc-4e05-83b8-49b02a6023a6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6fe72c3f-3b18-4be1-9259-b133d279ed88"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db54af49-1473-463d-b0fc-6d915c0dcab7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "861238c4-405b-4746-83d6-ea09c74eba69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78c0b4be-a71d-471a-925b-cc45f7eacde2",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1573d253-481a-4a68-8644-e935e46fed6e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3eda0b0d-0141-401f-9d35-b4f337c905a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83fc6475-5d69-4c2a-bc69-930c33eac8d0",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4a40e4c-4d2a-4296-a6a0-7474c75c2e08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b58b625-559f-4d27-bd25-6fe54b923782",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2f284c2-2440-4b0f-90d9-8d463fa199d7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "977de255-c6ad-47d0-8f2a-5a0104fd14f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d57c5659-a76f-4b61-84cf-b1a0fca76d18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7500703c-c221-41bb-81a3-339689406b39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "351fadc3-2d11-4f1f-a4c5-3acdadf8108b",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ee92aab-856d-46de-9cc7-0181a3aee001",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fea2cfdd-e7c6-46d3-ab9a-5f474043fb68"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4876fd0-cc1e-4509-8a64-3e056b0c01f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2958ed5f-f820-42ed-9516-96aea9da1936"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6b28dcc-0566-42b3-8546-b2291945eba0",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f206fe44-fb71-46c8-8ec6-ed15d51283de",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2f49d534-920a-498b-9568-cdf892e754a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbbe5d1a-0bc1-4f4d-9070-64b3a8147bf0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34f03003-43dc-4752-9615-cc0d9a92ec94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0fee5ef-1648-4893-a3f9-b1613583e410",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "428217d7-14c2-41da-866c-478288226e45",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a8e87ccc-0335-4dbc-aee5-652e7d2e4ab5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "505fde37-82ee-4968-ab6f-ace318fb5304",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29abf3f8-7f3d-4375-a540-5f0872aca814"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed8d863d-8d39-4906-9517-bfe31d677735",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2eee937-22f0-4e04-9da6-9976853ab569",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c3777c8d-ecd9-48fb-b10b-c98496fd6f03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70ff98c6-16ae-4b06-9793-0f053b9a5325",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20b3fad3-981c-4eab-8049-b87e2f420666"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d7668e3-312c-468c-98d9-1e3a6a841926",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44ccaafb-edc0-4ec1-b140-71168951e020",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c2d49b53-40ca-4afa-9d57-64a350b29851"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e06d21e4-f19f-4246-82c7-3e649ee9c9c3",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6ffacea-74ea-45b2-90b1-7b8c962c27fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df8d1996-d46d-45d8-8359-d6eb18788bc8",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3d0742e-3a23-474f-9f99-d890506f961c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ecd0caf4-4ac9-41e6-b6b9-9b344aa159a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d83fac1-2b93-434e-8bf2-dd53e8b1b716",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3af40d54-8af0-45a1-87a7-2f116a7d37cd"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2b33459e-5c7c-4ebb-9101-f24fe503cd2e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8df6f3b6-a63b-4311-a278-bbde9807098e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0d97b26f-0c01-44cb-aa44-aae7117f9ff7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "63bf3e9b-f6fb-440b-bc9d-7bf0853f7a6d"
                    }
                  }
                ]
              },
              {
                "id": "4283282f-219e-4133-bd02-2b89d0b8f656",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "70a961ff-3a91-4502-bba9-0b9971f90806",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d4f429b-02b5-402c-87cb-0e2044fa73b8",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "0eaa2c91-8d2d-412d-9f33-030a785bf02f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aaaf2a53-78d3-4225-ac56-9a48899927bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bd8a6699-56a4-4f34-bebf-1f03c73daaa6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28f587b9-dbe0-4c8d-9e23-8bd096ce7c6a",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8642b6bb-e32a-44b1-b986-dc266ef6dbef",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "a52fe958-a0d5-4837-ae05-4e47b6952931"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6d68421-c1b2-4d31-b101-04565e5f6865",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "473dbd12-592d-4fa2-99fb-d9725e69101a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6ec4c50a-aa86-4513-a44e-02d6c52453de",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "865fe23b-7d33-471d-b59b-0f7ea43fb020"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e29453f4-f14c-483f-b6f5-6ca30704bc93",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ef599df4-705e-4bd4-9551-4789ee58cfdf"
                    }
                  }
                ]
              }
            ],
            "event": []
          },
          {
            "id": "40a24b88-ae28-42e7-8960-27eb3c9806ce",
            "name": "Positive Testing",
            "item": [
              {
                "id": "37764c7b-a144-4b76-98a2-4c2526e53527",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5e1831b1-b0b2-4c66-a83f-0e288446fb36",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "824f28ea-99b3-4268-bf7e-5203d3acbe74"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a0b21fa4-aced-4a9a-ab74-4f456daa0765",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "00e4ccf6-1af3-48c9-98a9-e2453c640cd0"
                    }
                  }
                ]
              },
              {
                "id": "31c9bc61-4081-409e-8a5d-8a3f41a17873",
                "name": "credentials_verify:id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "079cd2d9-d8c0-419a-946f-600342875580",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b9f03821-c409-4cf9-adf8-94cedcf09f3d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "50ee5d81-0238-4241-bf5e-2ed5c0c0972c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c69f85e1-b87d-44a5-970f-126d99621a89"
                    }
                  }
                ]
              },
              {
                "id": "aeb31c74-3365-4d72-9a58-7801b25e21b8",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "280b7337-80d7-49b1-b654-f9098461748d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "33593f59-fe49-4f47-9de8-625452d4fd45"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c8df02c6-99b5-43ab-afe8-9e2a0d20f491",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d56bbeb5-490b-46e7-b8c4-c3d8e1553b7a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f4e98829-e937-4318-a95f-9b9b9807068d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "31e0090b-9370-4484-bcc2-95d17eab2526"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f79fdb60-b6d6-40af-accd-95fbf11db0cc",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "166503b2-5da4-4183-b7e0-727f9002d113"
            }
          }
        ]
      },
      {
        "id": "66a28bc0-57ba-49a0-9ce2-c706f6ff37a6",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "ad87fbbb-e14a-48b7-a583-ee27e360b2a0",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5690862c-3040-4420-a173-7d1e28ec30ad",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c4f22ede-853e-4ff4-b747-5def2d146570",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecb51f07-4c76-4f22-9fac-deacdf7b7876",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "2ece4e2d-1ea0-4ec2-8a8a-a9555d34d47e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1124180-6f48-46b4-ad4c-eb1b428979f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f13b1384-17fb-4f20-a116-a314534b8972"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03e93540-4fa5-4ef1-8e78-f13fb00d1bc9",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d230095b-d482-4b11-8b92-b6674b81dcf1",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "a5ccfd56-2ff9-4182-b090-fde7fa301a0b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18bed974-b3bf-44b5-b249-f829335b80ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6f1d2ee4-201e-4b21-b633-eaeec0a16eac"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d40944bf-3021-43e4-9b60-12e0171e203b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3fd114db-bd1a-4f44-9260-05a3d6c7ff95"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "09259ecc-d3fe-418a-a45d-9af693b14d1f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a80e5e03-b209-4788-a414-65c652565ce2"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8c25a06a-8cfc-4edc-b764-911a2b8dc931",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "0fed6f50-14ad-45ea-abfd-dc66f417f6b7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c7664708-f888-4aa7-80c7-b8d5e8f8268d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b2a03964-6129-446f-8382-89b403902886"
            }
          }
        ]
      },
      {
        "id": "b4f32e52-9570-484a-8cad-e3aa32a4ba66",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "071781e9-0e37-4992-953e-081a87884293",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c0d6e8b4-7d2b-4aab-a154-269ee02e3d48",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "379f3a2a-c8ac-4631-a5bc-3d81e30b2408",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92dd9ae5-9078-4494-b01f-df9a38ad8de7",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "1a25f0f4-00d0-461b-b0d9-548b0ad74d22"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec7ad1c3-176d-4811-9e73-29c52966cfe9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "203ab5dd-3fbe-4210-b88a-f4d7dcaea6eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7fd68af-d3c4-49f3-ab05-e8fd6fc2aaa5",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2871a44-82df-419c-bef0-bb343baa671a",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "74f70270-0f1b-4517-a3e0-321176e2cd72"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07c39f6c-fc62-4f75-929e-bad836de4bd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9b7df1b4-37c3-45bf-9377-77478aea8862"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "68db3f02-c324-4b06-81e2-1b11f1ac387b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c275c0af-5007-462f-a669-07fd54eb67a6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ed2fde7e-e5b9-403d-8e68-c2608763aed3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2b1720a4-7191-4672-98df-bcbb50bb08d7"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "60969e1b-8ba3-41a3-b43e-2c35fb10bfb3",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "d5cc0ed8-776e-40be-8fd1-16adfc639bb4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f66d7604-d331-4c40-8d40-5291eeaaee92",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c9a18426-aec3-4326-bb06-c51ddb2f5ec9"
            }
          }
        ]
      },
      {
        "id": "44c85d7d-1125-437e-95e5-904a68fc8e49",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "b4a6955a-fa74-49cd-a3b5-fbb7b232d936",
            "name": "Negative Testing",
            "item": [
              {
                "id": "32622338-8c22-4a2c-8c8d-44152ab275d8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "83fb979e-17c8-4ac7-a03f-cc2d7762dca0",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b273f7d8-13b7-4c70-9c82-496f1f2dba50",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "49735dbb-8f7d-4ee0-9c93-61fd2e14af43"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1735ec4a-1dc9-40db-b248-69cfc0309fce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "31a0a4c9-1044-4bfb-89a2-d5f5540e68e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "349bb9db-0b0c-44da-9024-baa271239031",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0fed9d8-e746-4d2d-aeb3-7dfbeefa1748",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "ea3430a2-d8ba-452f-91a1-85b5d5b20363"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b017de13-2275-48be-a6f5-87e32c75c868",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0356c865-aeb8-4a12-8bdd-f9e052cbb565"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "36b4ecfe-7009-44d3-834a-ca5e6a0f8240",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c15fb0ac-23bc-4d20-9203-6e8740d77bec"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "06f4533f-0808-4732-9bb1-9c9602a95f3d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "41df9c4e-3c69-42f4-8fcc-a37a0f0435c7"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2e9a248f-2322-4974-9645-903885159234",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "3e205bb2-10de-4483-885d-2cbccdb259d8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f63a9b60-d6a6-4e85-b9b8-39d94c713537",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fa9924f8-2edb-445a-b2a0-0060acda0733"
            }
          }
        ]
      },
      {
        "id": "2c4a625c-c538-42e3-8316-19b9f45033e6",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8c06dccc-a99a-4d21-a121-491641e12dbd",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bcd0e01d-c893-404f-81c6-e179f7cf75a1",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "3aca3eef-09ce-4db6-a2e1-dee72ee03510",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bb33255c-ee5a-407a-8d14-6be17d255b5d",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4f043dc0-b3fe-449d-aa72-a1532db2d32f",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 243,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1855,
        "pending": 0,
        "failed": 5
      },
      "prerequests": {
        "total": 243,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 243,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 492,
        "pending": 0,
        "failed": 478
      },
      "testScripts": {
        "total": 933,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 922,
        "pending": 0,
        "failed": 5
      }
    },
    "timings": {
      "responseAverage": 60.21428571428569,
      "responseMin": 33,
      "responseMax": 397,
      "responseSd": 43.830319857097884,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1665622686445,
      "completed": 1665622714773
    },
    "executions": [
      {
        "id": "7a3fad05-692a-4f03-9a83-ff731d5b9331",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 243,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "b990e269-3389-4dd5-8296-0e7fea2ed700",
          "httpRequestId": "0da1f2e0-fbf1-4fe9-9617-2a61387f77c9"
        },
        "item": {
          "id": "7a3fad05-692a-4f03-9a83-ff731d5b9331",
          "name": "did_json"
        },
        "response": {
          "id": "96384aeb-7825-4461-ba40-a9ac1cdf82e5",
          "status": "OK",
          "code": 200,
          "responseTime": 211,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.service[0].type should be array",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.service[0].type should be array\n   at Object.eval sandbox-script.js:2:1)"
            }
          }
        ]
      },
      {
        "id": "aee4d3d2-c251-4c7c-89dc-0b295e93bdab",
        "cursor": {
          "ref": "748fc86d-1dae-455c-a31e-98a9e9d0b8d9",
          "length": 243,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "104b6725-2cd0-46f9-abcc-d20c8dbe6524"
        },
        "item": {
          "id": "aee4d3d2-c251-4c7c-89dc-0b295e93bdab",
          "name": "did:invalid"
        },
        "response": {
          "id": "69106e47-76d2-4481-ae6b-80f4a9c18731",
          "status": "OK",
          "code": 200,
          "responseTime": 35,
          "responseSize": 100
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:2)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:2)"
            }
          }
        ]
      },
      {
        "id": "aee4d3d2-c251-4c7c-89dc-0b295e93bdab",
        "cursor": {
          "ref": "748fc86d-1dae-455c-a31e-98a9e9d0b8d9",
          "length": 243,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "104b6725-2cd0-46f9-abcc-d20c8dbe6524"
        },
        "item": {
          "id": "aee4d3d2-c251-4c7c-89dc-0b295e93bdab",
          "name": "did:invalid"
        },
        "response": {
          "id": "69106e47-76d2-4481-ae6b-80f4a9c18731",
          "status": "OK",
          "code": 200,
          "responseTime": 35,
          "responseSize": 100
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:2)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:2)"
            }
          }
        ]
      },
      {
        "id": "fe83d54b-3477-4e99-9e4b-274d17720cdd",
        "cursor": {
          "ref": "0eb03228-2b05-4b65-a71a-4c0545e0950f",
          "length": 243,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "83f18d1d-3bef-4f5c-a794-f3c160b1bb5c"
        },
        "item": {
          "id": "fe83d54b-3477-4e99-9e4b-274d17720cdd",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "11abad8e-b9ea-4304-bfc4-c5e1be024bae",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 109,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 500",
              "stack": "AssertionError: expected response to have status code 404 but got 500\n   at Object.eval sandbox-script.js:1:3)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:3)"
            }
          }
        ]
      },
      {
        "id": "0bd1da76-0c92-4fff-85d4-2cf26accc713",
        "cursor": {
          "ref": "4b7b4b7c-7823-4dd5-ba02-3280977e0aa1",
          "length": 243,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "5d989c54-3b5a-4e8b-b761-deda999d0ffa"
        },
        "item": {
          "id": "0bd1da76-0c92-4fff-85d4-2cf26accc713",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "bfe81e3e-f3a4-4fbc-9590-a61d9730b227",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 200",
              "stack": "AssertionError: expected response to have status code 404 but got 200\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "49b22a9e-4f0e-4900-a731-e7a943394302",
        "cursor": {
          "ref": "954413f8-7657-4203-ae4e-661e166469a7",
          "length": 243,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "48ce2c60-d1d8-4d3f-92a6-e7c1fe2fe166"
        },
        "item": {
          "id": "49b22a9e-4f0e-4900-a731-e7a943394302",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "45c4e3ca-4221-4603-b851-b6e96b7c4334",
          "status": "OK",
          "code": 200,
          "responseTime": 96,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 200",
              "stack": "AssertionError: expected response to have status code 401 but got 200\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:5)"
            }
          }
        ]
      },
      {
        "id": "68418537-2729-487a-8aaf-a1f1148d9277",
        "cursor": {
          "ref": "d269b9bc-5190-4e69-bc43-afba705bc748",
          "length": 243,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "eb4e47f8-170c-4e28-b1da-18c4f03a5457"
        },
        "item": {
          "id": "68418537-2729-487a-8aaf-a1f1148d9277",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "96b39ed2-3855-42ff-9f4a-24a0b891a926",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "id": "68418537-2729-487a-8aaf-a1f1148d9277",
        "cursor": {
          "ref": "d269b9bc-5190-4e69-bc43-afba705bc748",
          "length": 243,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "eb4e47f8-170c-4e28-b1da-18c4f03a5457"
        },
        "item": {
          "id": "68418537-2729-487a-8aaf-a1f1148d9277",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "96b39ed2-3855-42ff-9f4a-24a0b891a926",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "id": "5b766a72-51e5-402d-86ab-0ba2e9e66c90",
        "cursor": {
          "ref": "6e52602d-f483-439b-a29c-a45b44048181",
          "length": 243,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "b407776c-925f-45fb-8eb8-38c065b7d1d6"
        },
        "item": {
          "id": "5b766a72-51e5-402d-86ab-0ba2e9e66c90",
          "name": "identifiers"
        },
        "response": {
          "id": "ced26c1d-5282-4ac3-9c89-5c5a5791ec6f",
          "status": "OK",
          "code": 200,
          "responseTime": 62,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9536d305-d4be-4a2d-95d9-82c9a5528ddd",
        "cursor": {
          "ref": "738227f9-45e5-41d5-a369-e7ededd108cc",
          "length": 243,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a1bff46a-165f-4faa-8eb8-a46c7f4c7ced"
        },
        "item": {
          "id": "9536d305-d4be-4a2d-95d9-82c9a5528ddd",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "175e575f-61c2-4b6c-953d-d14e2b1f2abe",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 314,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "9536d305-d4be-4a2d-95d9-82c9a5528ddd",
        "cursor": {
          "ref": "738227f9-45e5-41d5-a369-e7ededd108cc",
          "length": 243,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a1bff46a-165f-4faa-8eb8-a46c7f4c7ced"
        },
        "item": {
          "id": "9536d305-d4be-4a2d-95d9-82c9a5528ddd",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "175e575f-61c2-4b6c-953d-d14e2b1f2abe",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 314,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "8dae4d1e-82aa-4dfa-b47c-4f3d0b5f400b",
        "cursor": {
          "ref": "2b4ce8a5-3093-42af-8f93-5c48b829d648",
          "length": 243,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "f8902e9d-85e7-4e29-a411-d33b459d3f31"
        },
        "item": {
          "id": "8dae4d1e-82aa-4dfa-b47c-4f3d0b5f400b",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "e9937857-7967-47eb-aeaa-c2ecfb55f120",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 70
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "e323ccae-77ea-4682-a6a9-8f7174100cc6",
        "cursor": {
          "ref": "38f8801d-7dfb-440b-9c86-7773a03114c5",
          "length": 243,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "90b32344-7a71-40b7-bb95-01e2c3f8a26c"
        },
        "item": {
          "id": "e323ccae-77ea-4682-a6a9-8f7174100cc6",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "85635f18-76f4-461e-a61f-6ea510df6c4e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 70
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "6ebebf06-8098-452e-8d0e-cf61a06f9410",
        "cursor": {
          "ref": "bbaa6d7d-3cc3-4567-92fd-71c2ba4da631",
          "length": 243,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "9c1b2984-8287-4f8b-9e2c-e8a79b76d276"
        },
        "item": {
          "id": "6ebebf06-8098-452e-8d0e-cf61a06f9410",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "46062f03-ceda-4066-b10c-647e4f1a40a1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 54,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "77312224-991b-4f96-86b7-0b0c9e18541b",
        "cursor": {
          "ref": "dfc7a5d5-b569-4339-898b-b14d5fb3f52b",
          "length": 243,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "5a9909ab-10c7-4385-8205-8a60f39d48da"
        },
        "item": {
          "id": "77312224-991b-4f96-86b7-0b0c9e18541b",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "041f1a84-423d-475b-b0ca-796ae2f358b0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 70
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "e110d8d1-a8a2-45e2-a6e6-064e9a417c3e",
        "cursor": {
          "ref": "4596f1b8-2a68-45a0-9ffe-1b18f0a00459",
          "length": 243,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "a0aa2705-af98-4da9-8c33-fbf239af5dbc"
        },
        "item": {
          "id": "e110d8d1-a8a2-45e2-a6e6-064e9a417c3e",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "25b44c1d-d11a-4286-ac6e-1ad26d0f4821",
          "status": "Created",
          "code": 201,
          "responseTime": 60,
          "responseSize": 613
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "1333ac50-7edc-4341-bb30-e475da4b2bb6",
        "cursor": {
          "ref": "03242dd7-81d2-4b1e-a532-6d0f9217bf17",
          "length": 243,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "69db783d-a33c-4bb3-a3ba-08b560321d63"
        },
        "item": {
          "id": "1333ac50-7edc-4341-bb30-e475da4b2bb6",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "05ae292d-8dfb-4060-96c7-fbf4cf8bdc85",
          "status": "Created",
          "code": 201,
          "responseTime": 61,
          "responseSize": 602
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "1958efec-dfa3-4932-b5b7-1b027989a64a",
        "cursor": {
          "ref": "c7e5161c-e371-40dc-b6da-bd2a2f81d295",
          "length": 243,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "6025b3ef-36fb-4852-95ab-c8dac0419b2c"
        },
        "item": {
          "id": "1958efec-dfa3-4932-b5b7-1b027989a64a",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "14b8f39a-3b86-47a8-9316-7ccd2135d7f6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 59,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "b72ad859-0244-4fc8-90a2-ee4b797776e5",
        "cursor": {
          "ref": "76cbdfa3-05ab-48b6-880f-ee25c773a58f",
          "length": 243,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "053adad2-7653-4ede-bdab-89a1c1b21d24"
        },
        "item": {
          "id": "b72ad859-0244-4fc8-90a2-ee4b797776e5",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "65cf7be9-eee5-4911-9f37-9a46c9a1225f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "363cbe45-0616-4209-abf6-588a922a2805",
        "cursor": {
          "ref": "2b0d6647-03f2-429b-8170-69ba1b66e9f9",
          "length": 243,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "ba0efdfa-0629-4c20-951f-a5c5ea8d1f71"
        },
        "item": {
          "id": "363cbe45-0616-4209-abf6-588a922a2805",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "a164d9fd-8593-4840-a7ce-43c1f1918e48",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "3321c58b-254c-4af9-88aa-1236174b9f30",
        "cursor": {
          "ref": "6b5c0c7e-f3dc-48e6-af07-f76384f8f44b",
          "length": 243,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "98390fe9-4ffb-4568-a390-2b3aaa70f58d"
        },
        "item": {
          "id": "3321c58b-254c-4af9-88aa-1236174b9f30",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "94182645-7779-4780-9115-7e6ac7e7c6ee",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 186
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "bb311ec5-3809-4fdc-8374-f05086728cb9",
        "cursor": {
          "ref": "79575f59-8682-4499-80cb-93c3f2f04417",
          "length": 243,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "ad55530a-7ca3-4e2c-bf3c-660aa9ed1348"
        },
        "item": {
          "id": "bb311ec5-3809-4fdc-8374-f05086728cb9",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "6e6f808c-0d43-445d-b5bb-94bde270cefa",
          "status": "Created",
          "code": 201,
          "responseTime": 98,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "f558096a-77d2-4c0a-9f82-e6b421dde0b3",
        "cursor": {
          "ref": "8a7f270b-4cdb-4613-857d-fc0a77106bb5",
          "length": 243,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "72e57ab0-d322-46cf-bba8-e04ec7a10540"
        },
        "item": {
          "id": "f558096a-77d2-4c0a-9f82-e6b421dde0b3",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "558e4c64-8ff1-4a7e-8b3b-9961bf30563d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 64,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "21b534d0-025f-44b6-a95a-92f9db585317",
        "cursor": {
          "ref": "bfcd3501-c973-4092-a8d1-8550225c2284",
          "length": 243,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "5e866627-fbc2-4744-ab59-fab36d20dd8e"
        },
        "item": {
          "id": "21b534d0-025f-44b6-a95a-92f9db585317",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "1751840a-6d63-463a-adc1-cb2250bd51a7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 64,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "48ee6730-fcf4-4cc4-bdc7-6c10268ebba4",
        "cursor": {
          "ref": "94589cb7-4d2e-4d21-b451-150264b4a85f",
          "length": 243,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "865f3784-703f-4c95-8fb4-3e6acc94608e"
        },
        "item": {
          "id": "48ee6730-fcf4-4cc4-bdc7-6c10268ebba4",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "bee70454-9b10-486d-9e32-aff3f734abe0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "2da284ff-38a5-414b-ab7e-8a9e578818da",
        "cursor": {
          "ref": "ba962c76-737b-4725-a7c8-f9fc0eb1c5de",
          "length": 243,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "dc1831bd-9669-4a69-9ba9-c586a128815f"
        },
        "item": {
          "id": "2da284ff-38a5-414b-ab7e-8a9e578818da",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "f3162ae4-2d30-48da-a360-b3483433bcf0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "1e5b53b5-6f42-41c5-a7b7-748ca50305da",
        "cursor": {
          "ref": "18425720-08c2-4285-8f4e-ed958d3920c0",
          "length": 243,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "0d573b21-5a85-431b-b8bb-234de7386995"
        },
        "item": {
          "id": "1e5b53b5-6f42-41c5-a7b7-748ca50305da",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "37e00514-58fb-476b-a097-e75d49bff486",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "04f23dba-2d05-475f-88f9-5b352c6c0e24",
        "cursor": {
          "ref": "a7e02db0-d840-48e0-94cc-b62d757d0b83",
          "length": 243,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "b71d9760-6c8e-4211-b20f-5cc127ad6304"
        },
        "item": {
          "id": "04f23dba-2d05-475f-88f9-5b352c6c0e24",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "df174834-672e-4ab6-9ce6-c28bac6858ac",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "33f6212c-c6fc-4f8e-b343-6c1435b9497c",
        "cursor": {
          "ref": "4123e7b1-7469-47f6-9743-8a093309515c",
          "length": 243,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "373e69e8-3efe-40c0-a125-f5884554588a"
        },
        "item": {
          "id": "33f6212c-c6fc-4f8e-b343-6c1435b9497c",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "cfd8cf59-72d6-4c44-b287-f2e91946afb4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "43f58d51-2197-44d5-a2d7-d8a3fb68dffb",
        "cursor": {
          "ref": "6fd33381-e1f6-4722-857a-1fa49e8d35b6",
          "length": 243,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "851cd930-5f1f-48be-8531-39a6135a4b40"
        },
        "item": {
          "id": "43f58d51-2197-44d5-a2d7-d8a3fb68dffb",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "99665ebb-f0fa-43de-bf37-54c38a1a308c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "3522e714-a74f-417d-8de4-42bd1b087c38",
        "cursor": {
          "ref": "2e968af6-3acd-4bfe-94a2-37f27af63e15",
          "length": 243,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "da0304b4-cf21-4417-bbd3-12c7c0a05d82"
        },
        "item": {
          "id": "3522e714-a74f-417d-8de4-42bd1b087c38",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "db7fd53e-a300-4de7-b293-bd295fb82d9f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 70,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "4dcdb37c-d968-4bf6-80b4-76cbde539a61",
        "cursor": {
          "ref": "89588b67-e7fb-47ea-bbc4-837f33601d6a",
          "length": 243,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "29f0c36f-ff93-4ec6-a01d-ca530e1a44ce"
        },
        "item": {
          "id": "4dcdb37c-d968-4bf6-80b4-76cbde539a61",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "eb954822-d1c2-49b3-99b4-d9cfe138e455",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "53d4e04e-21b7-4a27-bbc7-2057fe9f4b94",
        "cursor": {
          "ref": "87b88717-3d3e-4d68-b7e4-37aaa0fcf925",
          "length": 243,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "b34b0e82-f4f0-47a5-8689-2f620f8d20b0"
        },
        "item": {
          "id": "53d4e04e-21b7-4a27-bbc7-2057fe9f4b94",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "26d38e0d-7a2c-4ff8-bb45-2d3671cb18f6",
          "status": "Created",
          "code": 201,
          "responseTime": 61,
          "responseSize": 602
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "d89ae2f3-d5df-46a9-9ddb-4544dc9e7afa",
        "cursor": {
          "ref": "b020aff5-2e8b-4d43-a47e-f867a7e76db3",
          "length": 243,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "e1f7c259-93d2-4910-8069-d12d0af962db"
        },
        "item": {
          "id": "d89ae2f3-d5df-46a9-9ddb-4544dc9e7afa",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "36b1067b-3cde-492c-b00e-2db7ae448a9a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "3662fe69-b38c-40a9-8ce9-a3091abab5d0",
        "cursor": {
          "ref": "d03289ae-267d-4cf2-bdb5-b517868aa189",
          "length": 243,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "e264021c-04ee-4c12-9eed-6fb35449d909"
        },
        "item": {
          "id": "3662fe69-b38c-40a9-8ce9-a3091abab5d0",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "4741bafc-dbfa-4d69-8c51-3bea941ac73c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "5437a43c-4665-4246-8d6e-5d85928925a9",
        "cursor": {
          "ref": "ce82a9be-7ca0-42c1-ac0b-ff21d905adc8",
          "length": 243,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "8f9d9cf9-0476-43b4-aa03-400f1aa5dfce"
        },
        "item": {
          "id": "5437a43c-4665-4246-8d6e-5d85928925a9",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "1914c2a7-49d4-41cb-9e41-ae9c9e1a1170",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "ef01e652-f693-49c7-a154-3ee9718446be",
        "cursor": {
          "ref": "91f88e25-ca53-4ab5-9f03-6fb7765e3858",
          "length": 243,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "b4abd8ef-bea3-48d2-9d8c-b334f0217157"
        },
        "item": {
          "id": "ef01e652-f693-49c7-a154-3ee9718446be",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "94c7a311-9598-4661-ad7e-9768d29948b7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "1411d4f4-19fc-49ce-867d-5c24dd7d66d8",
        "cursor": {
          "ref": "2dbd3e33-5d9c-45aa-ad68-ee0311c5d4ba",
          "length": 243,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "4ffd9df1-3ceb-4758-898b-4d7300ff0525"
        },
        "item": {
          "id": "1411d4f4-19fc-49ce-867d-5c24dd7d66d8",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "58466117-0b4b-4aa4-ae2b-6303cfb44dd3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "c2243870-df41-4537-b0ab-579e4db16067",
        "cursor": {
          "ref": "21c9784a-b61c-4073-bb2c-63cedf386798",
          "length": 243,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "e60bec6a-e8ef-4c67-816e-d2599b08ef0d"
        },
        "item": {
          "id": "c2243870-df41-4537-b0ab-579e4db16067",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "488b121a-84a4-462e-a679-fac32728573d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "20a8d571-aca3-4263-8f05-232284bed173",
        "cursor": {
          "ref": "850b157c-92bf-45c2-bb49-32afcf46b7f5",
          "length": 243,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "13e8c53f-f293-4d17-a4ed-aa5145f3ded6"
        },
        "item": {
          "id": "20a8d571-aca3-4263-8f05-232284bed173",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "944fe6ac-f6b7-48d1-97fe-638ef065c491",
          "status": "Created",
          "code": 201,
          "responseTime": 62,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "17b920ae-85e9-4fa4-b403-6f3f4455c3ef",
        "cursor": {
          "ref": "3a508252-4f62-49be-9307-44f3949a7b65",
          "length": 243,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "9100a423-00f3-4e95-9b8f-65db70621be6"
        },
        "item": {
          "id": "17b920ae-85e9-4fa4-b403-6f3f4455c3ef",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "ff82936d-21f4-46f6-a449-81743d56bce3",
          "status": "Created",
          "code": 201,
          "responseTime": 69,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "368051d5-6108-4bef-97cf-222a8e2c9aa9",
        "cursor": {
          "ref": "13ac7837-9be3-48c7-8e82-06d3af00f094",
          "length": 243,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "36ae6843-4f47-48d4-b6e6-2344b252d969"
        },
        "item": {
          "id": "368051d5-6108-4bef-97cf-222a8e2c9aa9",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "45d6689f-1968-4562-b363-08cf526cf6be",
          "status": "Created",
          "code": 201,
          "responseTime": 56,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "fc64c2b6-601b-4105-93df-e644a22574e5",
        "cursor": {
          "ref": "2127044d-6983-4256-b36d-c26480747b3f",
          "length": 243,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "0ecea16f-f015-494f-b1a7-da1604786eb1"
        },
        "item": {
          "id": "fc64c2b6-601b-4105-93df-e644a22574e5",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "0a3cd315-c1f1-4880-ab60-6a661d45356a",
          "status": "Created",
          "code": 201,
          "responseTime": 81,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "e8990122-fa61-40d8-8edb-9b3e1d33ff82",
        "cursor": {
          "ref": "905d610d-a3f9-4ecf-bcf1-d962cdeb6dee",
          "length": 243,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "f91b8f84-cf52-48de-936e-5d88ee13998a"
        },
        "item": {
          "id": "e8990122-fa61-40d8-8edb-9b3e1d33ff82",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "d896acbd-574f-4f21-801c-df96153ddaac",
          "status": "Created",
          "code": 201,
          "responseTime": 61,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "cc661151-fa5c-44d5-a72c-9d842b0154e2",
        "cursor": {
          "ref": "ffcdb691-f2eb-4689-bbfb-cc519d657e27",
          "length": 243,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "8236b7b7-3944-4e56-ad22-27caf3a992f2"
        },
        "item": {
          "id": "cc661151-fa5c-44d5-a72c-9d842b0154e2",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "97283e70-c16f-4a21-b69b-7b7b754a4cee",
          "status": "Created",
          "code": 201,
          "responseTime": 63,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "7d1ebb23-fce3-4c84-b721-443e95601045",
        "cursor": {
          "ref": "06b7ac46-6a9b-4198-9468-d9eec182f095",
          "length": 243,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "d71fdb7d-5f88-4cca-a05e-0f396b1c81ac"
        },
        "item": {
          "id": "7d1ebb23-fce3-4c84-b721-443e95601045",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "15ecf731-ce21-459d-8ca4-bb9c246d934f",
          "status": "Created",
          "code": 201,
          "responseTime": 69,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "06641c78-1d4a-4332-8e4f-c48dc70c5f66",
        "cursor": {
          "ref": "d1f035d6-c876-44aa-a0a2-60f9cb392e89",
          "length": 243,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "80680912-d4df-4ba2-a80e-2ca258ca4b05"
        },
        "item": {
          "id": "06641c78-1d4a-4332-8e4f-c48dc70c5f66",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "bc404763-12eb-4531-8e5b-41060d3ab3f8",
          "status": "Created",
          "code": 201,
          "responseTime": 72,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "2683951e-f822-45ab-bd55-a140125e859c",
        "cursor": {
          "ref": "ad7122cc-c8b6-4c82-8b96-72048737a216",
          "length": 243,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "edcc9ffe-7504-4533-8d0c-bd4fcafe60b0"
        },
        "item": {
          "id": "2683951e-f822-45ab-bd55-a140125e859c",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "a2632732-93e2-48af-a0e6-bb1abc4e704a",
          "status": "Created",
          "code": 201,
          "responseTime": 95,
          "responseSize": 611
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "e323debc-1659-4261-ba41-6c731b1368d1",
        "cursor": {
          "ref": "fba04113-4236-4618-9713-7dfa737198d2",
          "length": 243,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "b114455b-0474-4fa2-942c-1c8e74940d0b"
        },
        "item": {
          "id": "e323debc-1659-4261-ba41-6c731b1368d1",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "085140dd-a7d5-49fd-a83e-cc7054c9777f",
          "status": "Created",
          "code": 201,
          "responseTime": 58,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "6d7d86b4-e588-4a95-adb0-e11cf3bcb1ca",
        "cursor": {
          "ref": "141fa62d-4f08-40ac-9b7e-1daa788a8758",
          "length": 243,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "dba53ebe-67d5-4843-9e68-b0f605846dd0"
        },
        "item": {
          "id": "6d7d86b4-e588-4a95-adb0-e11cf3bcb1ca",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "0318257a-a664-4f89-bf73-e153c3828fb6",
          "status": "Created",
          "code": 201,
          "responseTime": 60,
          "responseSize": 611
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "eb90e12e-6667-4449-9712-690615933854",
        "cursor": {
          "ref": "57db5377-edcf-49d1-8cd8-983642572d29",
          "length": 243,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "a60c1f97-876b-4129-b1f3-9b356468820a"
        },
        "item": {
          "id": "eb90e12e-6667-4449-9712-690615933854",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "b6276237-32ea-4fc4-9edb-67320ad949a7",
          "status": "Created",
          "code": 201,
          "responseTime": 63,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "ef443c4f-bf70-439d-a2c5-15a84d48628a",
        "cursor": {
          "ref": "8f1abbb4-0609-4185-be0d-8c1b4f8d94e1",
          "length": 243,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "0c619721-a959-4776-bf90-f9c86077be34"
        },
        "item": {
          "id": "ef443c4f-bf70-439d-a2c5-15a84d48628a",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "07a13c52-fad9-4441-af14-e64de4d3865a",
          "status": "Created",
          "code": 201,
          "responseTime": 57,
          "responseSize": 611
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "5443761f-dd4a-466e-92b8-f728fa389351",
        "cursor": {
          "ref": "2685891c-0481-4cec-8e2f-241d3a1d3232",
          "length": 243,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "245e9beb-ab59-4a0a-94f1-bb10ce605a97"
        },
        "item": {
          "id": "5443761f-dd4a-466e-92b8-f728fa389351",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "f6af1b57-1777-4753-a3a8-285b3668280c",
          "status": "Created",
          "code": 201,
          "responseTime": 61,
          "responseSize": 611
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "43425595-4cf1-4436-bdeb-59f66832cb10",
        "cursor": {
          "ref": "3f60ebea-63b1-4efe-92be-8576014a0e95",
          "length": 243,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "86de0ed1-f6e4-4731-b65d-3fafbfdd1d66"
        },
        "item": {
          "id": "43425595-4cf1-4436-bdeb-59f66832cb10",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "c967b4dd-806f-4e4a-b26e-aabb06384c74",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 52
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "a4e33dfc-7c2c-42f1-9f97-7dc6dc4670dc",
        "cursor": {
          "ref": "0ed21ddc-5fcb-4c10-a1b8-0c6073192c61",
          "length": 243,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "693398ca-84bc-4726-9f57-76902c3baf11"
        },
        "item": {
          "id": "a4e33dfc-7c2c-42f1-9f97-7dc6dc4670dc",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "7ea9cc7f-84a5-4102-8acd-f6c3b3460350",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "c3eb552b-d321-4d53-9258-b8f2f14452ba",
        "cursor": {
          "ref": "2c144d68-e6f5-4c0d-9971-f314bec1ec04",
          "length": 243,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "1402957e-92c8-4dc1-9715-da5f67aaecbe"
        },
        "item": {
          "id": "c3eb552b-d321-4d53-9258-b8f2f14452ba",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "af0b87b3-ea99-4a86-b6c6-9346e7678902",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 52
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "e4fca97b-a4b8-454b-9c00-97d01d09cf76",
        "cursor": {
          "ref": "d0f772be-388f-441e-bf47-a92fde93cbe2",
          "length": 243,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "ab8a710c-c69f-4de5-bbd4-442adb99272e"
        },
        "item": {
          "id": "e4fca97b-a4b8-454b-9c00-97d01d09cf76",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "9a17f63b-9d6f-4f99-86ba-5fa0e16eadd8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "3228eed4-cb18-4add-b2e5-fd71d902f0e6",
        "cursor": {
          "ref": "5ce0dbbf-9fd2-479c-8b81-ebcb7a639877",
          "length": 243,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "74c19c0f-8ae3-4b94-8211-abd89200bef8"
        },
        "item": {
          "id": "3228eed4-cb18-4add-b2e5-fd71d902f0e6",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "7dcf2fb8-fc91-41c1-a928-71de538abcb0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 52
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "178a5a63-32e2-4110-9643-7e068c2ad46c",
        "cursor": {
          "ref": "b6177d87-5fdf-41e5-9af5-a62128f261ad",
          "length": 243,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "daceafb1-1036-4ff8-ae1e-740c5cd4eede"
        },
        "item": {
          "id": "178a5a63-32e2-4110-9643-7e068c2ad46c",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "f2228622-00d4-4686-abc3-b319765e11ae",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "3b8989b4-ed8c-460d-abd9-1e1db14166f4",
        "cursor": {
          "ref": "8fde3e41-eec7-470c-81f4-0c15936a4682",
          "length": 243,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "d3daa9d6-dc48-412f-9705-fd55097f574c"
        },
        "item": {
          "id": "3b8989b4-ed8c-460d-abd9-1e1db14166f4",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "de4a37bf-117b-4911-afa9-6d232eed73a0",
          "status": "Created",
          "code": 201,
          "responseTime": 59,
          "responseSize": 611
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "67902e69-bccd-4b94-9dbf-acd92037ba6b",
        "cursor": {
          "ref": "bb7282f1-2364-44ee-809e-4dc0fec78353",
          "length": 243,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "b2cff187-bf99-493c-bca6-7008de498598"
        },
        "item": {
          "id": "67902e69-bccd-4b94-9dbf-acd92037ba6b",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "48eaa9e2-cdf9-48c1-adba-8bfd7ed4a24f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 57
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      },
      {
        "id": "578099dd-bca1-4469-8fdc-36c3168c10fc",
        "cursor": {
          "ref": "1a94597d-07de-44a1-9134-300ba2ad4b3e",
          "length": 243,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "c4d42991-7561-45d5-96c9-53c4aa8bae1a"
        },
        "item": {
          "id": "578099dd-bca1-4469-8fdc-36c3168c10fc",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "ce83934e-4298-4c17-8ea6-2fc89ad1e561",
          "status": "Created",
          "code": 201,
          "responseTime": 66,
          "responseSize": 621
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:59)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:59)"
            }
          }
        ]
      },
      {
        "id": "3a1cf901-6035-4e69-b312-52eb808f8c76",
        "cursor": {
          "ref": "48a6ce10-a20e-41db-b43f-bd2eaf048f0d",
          "length": 243,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "0d02893f-c949-4093-8702-cf5388c36eae"
        },
        "item": {
          "id": "3a1cf901-6035-4e69-b312-52eb808f8c76",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "7c31b443-920c-435b-a1da-7addbe3b1cae",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 57
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "9312e45c-5842-4b18-b9ad-642f07d4d81a",
        "cursor": {
          "ref": "1a745172-bd99-4542-bdaf-de113f996df4",
          "length": 243,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "bb60ad5e-bda4-40d6-b565-75d69d6421de"
        },
        "item": {
          "id": "9312e45c-5842-4b18-b9ad-642f07d4d81a",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "c08ff9c0-327d-4e2d-a09b-b1bdd9bb72d3",
          "status": "Created",
          "code": 201,
          "responseTime": 65,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:61)"
            }
          }
        ]
      },
      {
        "id": "1ea2342d-fcb2-41fd-8162-02403c27cfa1",
        "cursor": {
          "ref": "62b176e2-7d55-4a5a-ac4a-fee088b59a59",
          "length": 243,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "8196dd23-3512-48d4-9baa-37b67792ffdc"
        },
        "item": {
          "id": "1ea2342d-fcb2-41fd-8162-02403c27cfa1",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "867de5f5-e3c5-47ea-95e5-dc68a9c5c463",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 57
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:62)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:62)"
            }
          }
        ]
      },
      {
        "id": "7e09047c-4543-4ff4-992b-b84f4284314f",
        "cursor": {
          "ref": "bef4b70d-c696-43da-937f-2baea5a41331",
          "length": 243,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "56f5efb4-9662-4029-8fa7-f8cbd710b476"
        },
        "item": {
          "id": "7e09047c-4543-4ff4-992b-b84f4284314f",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "f252518e-7192-425e-9c21-29d35d716e73",
          "status": "Created",
          "code": 201,
          "responseTime": 64,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:63)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:63)"
            }
          }
        ]
      },
      {
        "id": "4b8c7dc0-0e66-4c24-aaea-14dc6b7a8667",
        "cursor": {
          "ref": "e17530e4-e885-469a-896f-1013753197f5",
          "length": 243,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "9008e930-61a8-45d7-9357-7e0ee7bef92a"
        },
        "item": {
          "id": "4b8c7dc0-0e66-4c24-aaea-14dc6b7a8667",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "f652eb87-8da0-4a90-94a2-e69aaf35d86e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:64)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:64)"
            }
          }
        ]
      },
      {
        "id": "40657aed-14e7-4e61-80d3-9768b34c02dd",
        "cursor": {
          "ref": "3ea64e16-0782-4e1b-9f6b-1903377aafa3",
          "length": 243,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "073ea813-9176-4a07-9f8e-42f59c1f4a04"
        },
        "item": {
          "id": "40657aed-14e7-4e61-80d3-9768b34c02dd",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "83b8d67b-ef8e-47b6-99d2-b3b6730c5b22",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "e22efdb2-e898-419e-8c56-7ccc52049280",
        "cursor": {
          "ref": "b49a7613-7231-4f89-aefc-40e332be053e",
          "length": 243,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "eaa70142-9f48-46d4-bb05-a073652137cb"
        },
        "item": {
          "id": "e22efdb2-e898-419e-8c56-7ccc52049280",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "25b2cd48-a48d-4e1b-9250-91277a3f0d46",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "259b4640-54c3-495d-941e-b04d68afac8f",
        "cursor": {
          "ref": "f053f2f3-5db2-4591-8b93-32f6aee27fb0",
          "length": 243,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "6040c7d2-e6ab-42d9-bdaa-9d76e1d79f66"
        },
        "item": {
          "id": "259b4640-54c3-495d-941e-b04d68afac8f",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "ce322488-b57c-4fe0-8635-0b1647fede80",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "b5652625-833b-4b01-8a04-01236902ae53",
        "cursor": {
          "ref": "ecda2afb-cb24-4e61-9cff-06d2dfc50082",
          "length": 243,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "2f400c86-9e3c-4bd7-8fb2-6e2546c805a9"
        },
        "item": {
          "id": "b5652625-833b-4b01-8a04-01236902ae53",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "94fce6e3-07ec-445a-a8af-3b549535d5ab",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "2d72c6b4-478a-47f7-aa28-ca7f64c04864",
        "cursor": {
          "ref": "e0dc65a2-4a3d-4242-9add-0d1c63601925",
          "length": 243,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "0633127a-f52b-4fe6-b57d-3667d41e5c13"
        },
        "item": {
          "id": "2d72c6b4-478a-47f7-aa28-ca7f64c04864",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "82a91aad-0914-4df2-8098-9d87348e7795",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 34,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "bc454522-ebfd-4b21-bbd8-b64e42bc1760",
        "cursor": {
          "ref": "538c6726-c251-4afe-a635-b7c68bf24724",
          "length": 243,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "04733363-0234-4248-8dfe-427edc93a3ef"
        },
        "item": {
          "id": "bc454522-ebfd-4b21-bbd8-b64e42bc1760",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "e4f72434-bfa2-422f-adc0-dddbc9a8d1cd",
          "status": "Created",
          "code": 201,
          "responseTime": 59,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "6ce6b3a5-3184-4617-b1c8-3240f96f8a31",
        "cursor": {
          "ref": "5ad826ed-1ad7-4f04-b3a9-afe1ac497672",
          "length": 243,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "81153dd1-716c-4cc7-aebc-63e45fe44fed"
        },
        "item": {
          "id": "6ce6b3a5-3184-4617-b1c8-3240f96f8a31",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "6d16bc97-54b9-4ae1-81a3-3af7a1f1ed23",
          "status": "Created",
          "code": 201,
          "responseTime": 65,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "cb526216-ee16-4eab-a115-0df755d49551",
        "cursor": {
          "ref": "69695d52-7d71-457f-9ca5-4f0fa3909ada",
          "length": 243,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "75372302-3700-46bd-b1e3-283c6e30ce3f"
        },
        "item": {
          "id": "cb526216-ee16-4eab-a115-0df755d49551",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "566b3994-c683-4936-be18-b7225c238a14",
          "status": "Created",
          "code": 201,
          "responseTime": 58,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:72)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:72)"
            }
          }
        ]
      },
      {
        "id": "f455c692-2dc3-4a32-b0d0-71ffeabaef43",
        "cursor": {
          "ref": "a99a4960-6271-45ad-8ccd-9553d49625a8",
          "length": 243,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "c7ef35d5-8417-44fd-85f9-d7ac2a501f04"
        },
        "item": {
          "id": "f455c692-2dc3-4a32-b0d0-71ffeabaef43",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "f02a30dc-6ce9-4e12-8009-0611f775fc15",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 34,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:73)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:73)"
            }
          }
        ]
      },
      {
        "id": "c2835f31-8ad4-45e7-bf00-83ee35444ee3",
        "cursor": {
          "ref": "1a062cc0-72d6-4b43-bfd7-00c74fb1e6b2",
          "length": 243,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "b46c2a6c-11bb-4b2d-a04a-5ad8300ca47e"
        },
        "item": {
          "id": "c2835f31-8ad4-45e7-bf00-83ee35444ee3",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "98eea865-15ca-45f7-aa0c-5968cd2a5d3e",
          "status": "Created",
          "code": 201,
          "responseTime": 68,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:74)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:74)"
            }
          }
        ]
      },
      {
        "id": "b4636248-4e31-49e7-99d3-e202b11ddcff",
        "cursor": {
          "ref": "06403013-25ab-4f58-86d2-a0fca098ea52",
          "length": 243,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "f10248a6-488d-4e9f-b8d4-05be0a8c24c2"
        },
        "item": {
          "id": "b4636248-4e31-49e7-99d3-e202b11ddcff",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "a5aa68e4-733a-4172-9a3e-73ac8121a6f9",
          "status": "Created",
          "code": 201,
          "responseTime": 72,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:75)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:75)"
            }
          }
        ]
      },
      {
        "id": "c4d6a675-2862-4c06-899b-9fab6ee82ed2",
        "cursor": {
          "ref": "9095f00c-2cde-4166-9e4f-314d5931d670",
          "length": 243,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "b1f55222-409b-4e11-bd47-976aa9857e8a"
        },
        "item": {
          "id": "c4d6a675-2862-4c06-899b-9fab6ee82ed2",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "03c7763f-1ab6-4c9f-a7bf-fd22d237029f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 58
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:76)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:76)"
            }
          }
        ]
      },
      {
        "id": "bfb3fdd4-1ed2-4e11-aba0-12e6c45cf671",
        "cursor": {
          "ref": "cfa27599-94bd-403f-a3a1-b687529b3e2c",
          "length": 243,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "ea9b3ced-69fe-4e1c-9ead-d18ed0a565e3"
        },
        "item": {
          "id": "bfb3fdd4-1ed2-4e11-aba0-12e6c45cf671",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "7b96b409-ebc8-4249-aa9c-4c7e5e143f6d",
          "status": "Created",
          "code": 201,
          "responseTime": 58,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:77)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:77)"
            }
          }
        ]
      },
      {
        "id": "76fee2ed-d55f-49d6-97c2-534596ae937e",
        "cursor": {
          "ref": "13ea7273-75c5-40cf-9548-c6fbf978895c",
          "length": 243,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "fa1f7fe8-f65b-42a2-a726-9e5882629aee"
        },
        "item": {
          "id": "76fee2ed-d55f-49d6-97c2-534596ae937e",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "c22fe31f-5537-4ff0-9adc-f21bdd4069e0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 40
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:78)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:78)"
            }
          }
        ]
      },
      {
        "id": "8799cd43-574b-45db-a03b-08ab83dda0da",
        "cursor": {
          "ref": "88a54bd1-56fa-4a4d-915b-a844513a1f6d",
          "length": 243,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "b3ee5447-a5b8-4b6b-ada7-22133b7d808e"
        },
        "item": {
          "id": "8799cd43-574b-45db-a03b-08ab83dda0da",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "49482445-d328-46f1-be87-fb98ad9dc95d",
          "status": "Created",
          "code": 201,
          "responseTime": 59,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:79)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:79)"
            }
          }
        ]
      },
      {
        "id": "0f670d2c-814a-45dc-9f7f-c5496507ae6e",
        "cursor": {
          "ref": "9bd3ff2b-7c26-4b18-8934-d6b0b02cbac8",
          "length": 243,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "53db94d1-4f9b-4781-acf8-76f61b221360"
        },
        "item": {
          "id": "0f670d2c-814a-45dc-9f7f-c5496507ae6e",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "60b07c14-10da-44a6-86e2-1aeb3525f758",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:80)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:80)"
            }
          }
        ]
      },
      {
        "id": "de3c03ec-4119-42a5-93ce-d65f2f0d8f5a",
        "cursor": {
          "ref": "d82fa271-90ce-4923-ab6f-9f6ff98134fa",
          "length": 243,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "41479e29-0776-4440-aab3-d494dbfc80e7"
        },
        "item": {
          "id": "de3c03ec-4119-42a5-93ce-d65f2f0d8f5a",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "52c04f40-235e-4a4e-9262-913b97c1b488",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 51
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:81)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:81)"
            }
          }
        ]
      },
      {
        "id": "9774b004-9cc1-47ae-bf70-a2b29ac9429b",
        "cursor": {
          "ref": "9aceaa76-8dc7-4183-9965-31a317783f89",
          "length": 243,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "b8bf5fe6-b97d-470c-8548-1830df2dbd34"
        },
        "item": {
          "id": "9774b004-9cc1-47ae-bf70-a2b29ac9429b",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "a6e89a26-f2ac-4f63-8d1c-05018ec495a5",
          "status": "Created",
          "code": 201,
          "responseTime": 59,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:82)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:82)"
            }
          }
        ]
      },
      {
        "id": "f1dcaa3e-23f1-48e8-9572-3d6259a4b5d6",
        "cursor": {
          "ref": "1f8e277d-da71-4985-8273-e7a5e5c0c86e",
          "length": 243,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "99f27483-3bd7-4bbe-8051-c904c29fc69b"
        },
        "item": {
          "id": "f1dcaa3e-23f1-48e8-9572-3d6259a4b5d6",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "7d0c5a20-6b9b-4c16-8539-780bd6ecbaf6",
          "status": "Created",
          "code": 201,
          "responseTime": 60,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:83)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:83)"
            }
          }
        ]
      },
      {
        "id": "af93882c-4b6a-480d-afcc-a0ba666eb1f1",
        "cursor": {
          "ref": "f0626aea-c931-4019-80bd-804b4008c72b",
          "length": 243,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "f7676683-a821-45ee-b534-a78c3e35c18b"
        },
        "item": {
          "id": "af93882c-4b6a-480d-afcc-a0ba666eb1f1",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "3fb8918d-db43-487c-809a-aa89ebc71fdc",
          "status": "Created",
          "code": 201,
          "responseTime": 59,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:84)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:84)"
            }
          }
        ]
      },
      {
        "id": "08dd3959-61ec-42be-a9b4-6efc8e2472a9",
        "cursor": {
          "ref": "a6d5d95e-7588-454a-9fbe-9563f42286f5",
          "length": 243,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "18ba506e-59e3-400e-9b84-b63231b01e03"
        },
        "item": {
          "id": "08dd3959-61ec-42be-a9b4-6efc8e2472a9",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "904f2aee-af42-408a-9ca6-8089cf324a9c",
          "status": "Created",
          "code": 201,
          "responseTime": 64,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:85)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:85)"
            }
          }
        ]
      },
      {
        "id": "d399257f-2d4b-43ca-b350-2bece4fc50af",
        "cursor": {
          "ref": "5b610fba-05b5-4160-ac6e-7fadb14ed110",
          "length": 243,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "b52fd3d0-ed79-406d-8a8d-4a53b6230699"
        },
        "item": {
          "id": "d399257f-2d4b-43ca-b350-2bece4fc50af",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "79557be7-00d8-459e-990b-0d46c79d386b",
          "status": "Created",
          "code": 201,
          "responseTime": 60,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:86)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:86)"
            }
          }
        ]
      },
      {
        "id": "9cc18ab2-c83e-4b4b-a8cb-b05f489675ff",
        "cursor": {
          "ref": "22ecf66c-edc4-4af9-95f8-b6d515270856",
          "length": 243,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "eff6bf3b-64af-43f5-b0f5-07833046023f"
        },
        "item": {
          "id": "9cc18ab2-c83e-4b4b-a8cb-b05f489675ff",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "7fec0c43-a70b-4465-9ffd-c9f406940ece",
          "status": "Created",
          "code": 201,
          "responseTime": 84,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "ce1d4dce-6a22-429a-b319-0c3fc3e4fd0f",
        "cursor": {
          "ref": "3ded409a-5b26-4821-882b-2792cf315868",
          "length": 243,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "d1296780-29f8-4e08-bb2a-d548a08cc4c7"
        },
        "item": {
          "id": "ce1d4dce-6a22-429a-b319-0c3fc3e4fd0f",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "2e7b62a6-a05c-4980-aab4-c9553b8757b1",
          "status": "Created",
          "code": 201,
          "responseTime": 67,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:88)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:88)"
            }
          }
        ]
      },
      {
        "id": "1000a2f0-8ad8-4c9e-8e03-30a65f8377fb",
        "cursor": {
          "ref": "42c33519-97d3-4094-bfbc-9e8d6bae0ed6",
          "length": 243,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "35adb140-8a1c-44ac-a357-5342514a91c3"
        },
        "item": {
          "id": "1000a2f0-8ad8-4c9e-8e03-30a65f8377fb",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "aa7cbd98-0f4a-4722-bcb4-53ca6ce5e51f",
          "status": "Created",
          "code": 201,
          "responseTime": 87,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "4b6d329e-44b1-452d-ae0a-f9368e84bb64",
        "cursor": {
          "ref": "e7018b8d-c1f5-4742-aab5-0987805da338",
          "length": 243,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "f0728059-864a-4e6b-8490-d64489d7770a"
        },
        "item": {
          "id": "4b6d329e-44b1-452d-ae0a-f9368e84bb64",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "61171a24-e9c3-47ee-a9a8-a94f68fad3f4",
          "status": "Created",
          "code": 201,
          "responseTime": 58,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:90)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:90)"
            }
          }
        ]
      },
      {
        "id": "e8bbc473-a4e5-4515-94b7-d37f97b4ec71",
        "cursor": {
          "ref": "813f8e73-abb0-465e-ad1f-254ddab27ea3",
          "length": 243,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "fe006561-de06-4de3-a67f-c9b610be165d"
        },
        "item": {
          "id": "e8bbc473-a4e5-4515-94b7-d37f97b4ec71",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "676853ba-9265-4327-9a89-027f3ea67671",
          "status": "Created",
          "code": 201,
          "responseTime": 62,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:91)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:91)"
            }
          }
        ]
      },
      {
        "id": "2c53b48c-6834-4a6a-a39f-096580d513d7",
        "cursor": {
          "ref": "0b079a92-b0f9-4bf1-8d14-019c29066bab",
          "length": 243,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "2fee1cd7-72cb-4d89-a11b-8a05f5df79f0"
        },
        "item": {
          "id": "2c53b48c-6834-4a6a-a39f-096580d513d7",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "2ec40a5c-b824-4f3e-bad1-62e8005657b6",
          "status": "Created",
          "code": 201,
          "responseTime": 62,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:92)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:92)"
            }
          }
        ]
      },
      {
        "id": "000c58dc-39c0-4667-963d-f227b90c9aef",
        "cursor": {
          "ref": "52a7b1d8-8fb7-434f-b1f3-5b6396c266af",
          "length": 243,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "63cb8e04-db5f-479e-8590-3ec85c9b0c2f"
        },
        "item": {
          "id": "000c58dc-39c0-4667-963d-f227b90c9aef",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "0a623a0f-d2a5-4eea-bdfd-a05de51a8e6d",
          "status": "Created",
          "code": 201,
          "responseTime": 61,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "13b0a43c-b1f8-4553-bf64-14793feee271",
        "cursor": {
          "ref": "d1caafef-5f65-453a-952c-eb6450cdcaac",
          "length": 243,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "d45ac8d8-d12c-41ef-9ddd-17f049392caf"
        },
        "item": {
          "id": "13b0a43c-b1f8-4553-bf64-14793feee271",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "33ce2369-3470-4245-a644-f8010bdfc511",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:94)"
            }
          }
        ]
      },
      {
        "id": "7a63a663-14a2-4cfb-85c9-bc9daf3079d2",
        "cursor": {
          "ref": "2f726073-b4d7-4352-8849-73c5eb42a714",
          "length": 243,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "39784e63-a9e8-4cdd-ab11-76b553dab672"
        },
        "item": {
          "id": "7a63a663-14a2-4cfb-85c9-bc9daf3079d2",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "c42df321-9ce4-45d2-9177-73b6e180f667",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 34,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "ff0380c4-e9c7-4138-8266-3b0800afc69e",
        "cursor": {
          "ref": "53c9bf46-1bef-4e22-9b35-30639c6c0e0f",
          "length": 243,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "54c7ba6d-a22b-4bb3-9064-a34d228aafa9"
        },
        "item": {
          "id": "ff0380c4-e9c7-4138-8266-3b0800afc69e",
          "name": "credentials_issue"
        },
        "response": {
          "id": "51c74616-72a6-47d6-a6a1-1c7c642bb43e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 34,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:96)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:96)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:3:96)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "response credentialSubject matches request credential.credentialSubject",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:4:96)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 4,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:5:96)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 5,
              "test": "response proof.created is close to 'now'",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:6:96)"
            }
          }
        ]
      },
      {
        "id": "88e8d24c-c574-44d4-aad6-d41e75bfe66f",
        "cursor": {
          "ref": "bd835556-9cc0-4b96-a732-f05a0ec70a44",
          "length": 243,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "7ffb92a6-2f3d-4a52-8551-1c45359ce599"
        },
        "item": {
          "id": "88e8d24c-c574-44d4-aad6-d41e75bfe66f",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "002d5247-2e4f-42d0-b1f8-824a96b9efa3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 34,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:97)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:97)"
            }
          }
        ]
      },
      {
        "id": "0832ce4a-fafd-406f-9e3e-91b4cbdba1a6",
        "cursor": {
          "ref": "f5562eb4-850b-4ded-8397-fb3bcf61d632",
          "length": 243,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "f8f9a70b-e4b1-4766-bdfa-7e5b205fb238"
        },
        "item": {
          "id": "0832ce4a-fafd-406f-9e3e-91b4cbdba1a6",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "5388af79-a223-4eaa-bc49-434442b02560",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 34,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:98)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:98)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:3:98)"
            }
          }
        ]
      },
      {
        "id": "2b2e288a-9830-4e93-ab70-b7ebaba091db",
        "cursor": {
          "ref": "2bd0ba90-f707-493c-8215-6de35cde5d24",
          "length": 243,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "9e428858-d73c-44be-b720-012b999ac46a"
        },
        "item": {
          "id": "2b2e288a-9830-4e93-ab70-b7ebaba091db",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "dbdab621-0a04-4409-98c0-4e7b76ebb110",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 34,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:99)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:99)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:3:99)"
            }
          }
        ]
      },
      {
        "id": "2dcfb166-06e5-4e12-b3d2-783d924a094c",
        "cursor": {
          "ref": "1f10b652-ca6d-41cf-bb57-2a0642d9a2fd",
          "length": 243,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "e2f04912-9755-47a3-9021-4452504459d0"
        },
        "item": {
          "id": "2dcfb166-06e5-4e12-b3d2-783d924a094c",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "caaa4954-709d-4cf4-baef-d3ee6e60bc1d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 33,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:100)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:100)"
            }
          }
        ]
      },
      {
        "id": "3837f25b-ede0-4439-b017-252bd818385b",
        "cursor": {
          "ref": "103a30b7-41b6-4c28-8ee0-4ff24cdd3414",
          "length": 243,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "f1cfb914-ba0f-43ca-8f3a-20412a92d465"
        },
        "item": {
          "id": "3837f25b-ede0-4439-b017-252bd818385b",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "afaa092d-7ef8-442c-9c79-a54e943217b8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 172,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:101)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:101)"
            }
          }
        ]
      },
      {
        "id": "edc09205-3f9d-4979-9dc7-896ac682fd74",
        "cursor": {
          "ref": "0e063108-e0c9-40bd-a21d-e93e7099ce18",
          "length": 243,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "47240e7e-cf82-4f89-9db7-f8469849bee1"
        },
        "item": {
          "id": "edc09205-3f9d-4979-9dc7-896ac682fd74",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "df4b0545-3a94-417f-a29d-c11e6e62ee42",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 45,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 501",
              "stack": "AssertionError: expected response to have status code 400 but got 501\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "edc09205-3f9d-4979-9dc7-896ac682fd74",
        "cursor": {
          "ref": "0e063108-e0c9-40bd-a21d-e93e7099ce18",
          "length": 243,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "47240e7e-cf82-4f89-9db7-f8469849bee1"
        },
        "item": {
          "id": "edc09205-3f9d-4979-9dc7-896ac682fd74",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "df4b0545-3a94-417f-a29d-c11e6e62ee42",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 45,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 501",
              "stack": "AssertionError: expected response to have status code 400 but got 501\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "050959f7-255f-4b13-bef2-c2b6349306ce",
        "cursor": {
          "ref": "c49ece5a-c53d-4c72-bf41-4f5a6db5fe94",
          "length": 243,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "f237471c-4677-4b20-af02-418ac1048c6d"
        },
        "item": {
          "id": "050959f7-255f-4b13-bef2-c2b6349306ce",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "101edd18-8858-4e87-8cc1-44f11360bb2b",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 60,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 501",
              "stack": "AssertionError: expected response to have status code 400 but got 501\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "d0e1067b-8bb8-48e0-b733-1727f905e8c5",
        "cursor": {
          "ref": "ed0b8b47-c055-45f4-aefc-b92c114e1c64",
          "length": 243,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "c0972578-e6be-4ea7-807b-bf757edb3d1f"
        },
        "item": {
          "id": "d0e1067b-8bb8-48e0-b733-1727f905e8c5",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "01c198bb-6758-4a1c-b96a-e28fcf802558",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 43,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 501",
              "stack": "AssertionError: expected response to have status code 400 but got 501\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:104)"
            }
          }
        ]
      },
      {
        "id": "d3c94943-4463-42da-82be-06b10e01f647",
        "cursor": {
          "ref": "3ed7cc85-2f2e-4ea5-ae58-9b8a7a8b652a",
          "length": 243,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "89f56f0e-ccfe-4fe9-a803-62ebfdf82e36"
        },
        "item": {
          "id": "d3c94943-4463-42da-82be-06b10e01f647",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "5dc85629-3af5-4a0c-8806-0e764b1e7f04",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 45,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 501",
              "stack": "AssertionError: expected response to have status code 400 but got 501\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:105)"
            }
          }
        ]
      },
      {
        "id": "bbb12e8d-cfde-4cfc-8c40-5698e003ec81",
        "cursor": {
          "ref": "5181606b-da24-4a4c-98b7-4f32b6d83364",
          "length": 243,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "ea92e93e-73ac-4592-882b-029b326d820e"
        },
        "item": {
          "id": "bbb12e8d-cfde-4cfc-8c40-5698e003ec81",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "e5535d08-4bc4-44a9-97d0-f4bab51c3b67",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 44,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 501",
              "stack": "AssertionError: expected response to have status code 400 but got 501\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:106)"
            }
          }
        ]
      },
      {
        "id": "7f782221-2735-412c-872f-f4798edf5467",
        "cursor": {
          "ref": "f739b9a2-8e39-468c-932f-4eaf3d633be2",
          "length": 243,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "a490ac69-df99-4f2b-9c2f-1ba7bf49028d"
        },
        "item": {
          "id": "7f782221-2735-412c-872f-f4798edf5467",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "5865fdaf-67a9-4361-bac7-af9b9e77acdf",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 45,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 501",
              "stack": "AssertionError: expected response to have status code 400 but got 501\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:107)"
            }
          }
        ]
      },
      {
        "id": "4da67f66-6a6b-4ddc-a59b-ca6b3c1315a7",
        "cursor": {
          "ref": "e12fe641-ea4c-4fa2-a0fe-235628d1ec1e",
          "length": 243,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "40247042-58a5-464e-94a2-3e25a78476e7"
        },
        "item": {
          "id": "4da67f66-6a6b-4ddc-a59b-ca6b3c1315a7",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "df741256-b664-47e4-b579-447a3f1f57a0",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 45,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 501",
              "stack": "AssertionError: expected response to have status code 400 but got 501\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:108)"
            }
          }
        ]
      },
      {
        "id": "daff9b53-b62d-40d2-b131-cc4b0bc2cbd6",
        "cursor": {
          "ref": "79d9bb59-9645-439f-ab04-ab31d580aa04",
          "length": 243,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "1f386a50-3027-4c16-9f37-5883094887b4"
        },
        "item": {
          "id": "daff9b53-b62d-40d2-b131-cc4b0bc2cbd6",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "9d6cadf0-64d5-4406-a1eb-c7dc904cdd64",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 44,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 501",
              "stack": "AssertionError: expected response to have status code 400 but got 501\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:109)"
            }
          }
        ]
      },
      {
        "id": "cc708cd1-9f3a-4568-a34a-878cd8e52c5e",
        "cursor": {
          "ref": "705c2a2b-9acb-4339-854d-fc2fa31b72a1",
          "length": 243,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "47aadfde-654a-4e7b-b5df-e10269fa854c"
        },
        "item": {
          "id": "cc708cd1-9f3a-4568-a34a-878cd8e52c5e",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "86fa7007-fcbd-4c0a-b39a-b794311edf0e",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 44,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 501",
              "stack": "AssertionError: expected response to have status code 400 but got 501\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "1f8bbf38-c70e-4b21-b179-ed8d9f33680b",
        "cursor": {
          "ref": "ad366adc-68f1-413a-8df9-9186080657ab",
          "length": 243,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "0426717e-ddbe-413c-ac44-9a969c0b7e59"
        },
        "item": {
          "id": "1f8bbf38-c70e-4b21-b179-ed8d9f33680b",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "470f9611-ff18-4e38-919d-77d40af03824",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 43,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 501",
              "stack": "AssertionError: expected response to have status code 400 but got 501\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "e918ad4b-2a80-4002-89a8-0d3c1f1f6c66",
        "cursor": {
          "ref": "fdc8e149-726e-46bb-b400-c8133e7912c7",
          "length": 243,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "20e15f0a-cb05-4fa0-aa31-7b560973c0eb"
        },
        "item": {
          "id": "e918ad4b-2a80-4002-89a8-0d3c1f1f6c66",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "e9f90501-7980-45b7-ba42-47973097179a",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 45,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 501",
              "stack": "AssertionError: expected response to have status code 400 but got 501\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "d09af640-8baa-4f3c-b5d7-4ce67c5ad9b1",
        "cursor": {
          "ref": "1f624fc0-9571-4b7d-a462-d346099cea49",
          "length": 243,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "e15507b8-75db-4999-be95-17a6b0294a53"
        },
        "item": {
          "id": "d09af640-8baa-4f3c-b5d7-4ce67c5ad9b1",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "db2e0e4a-dd9d-4478-823e-aeec1a2ad637",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 51,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 501",
              "stack": "AssertionError: expected response to have status code 400 but got 501\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "36fbfa9f-9c2a-4f14-a4c6-ff242f2bfe3f",
        "cursor": {
          "ref": "dd990c2e-89f8-4aa4-850f-050ef948a7aa",
          "length": 243,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "2d1634a3-c48a-4254-9aa0-ef3d64666326"
        },
        "item": {
          "id": "36fbfa9f-9c2a-4f14-a4c6-ff242f2bfe3f",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "fd883ebe-8fe7-4738-8bab-a48d8fe41151",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 43,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 501",
              "stack": "AssertionError: expected response to have status code 400 but got 501\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "5257a441-bf3c-44f3-9e41-507c64fcc350",
        "cursor": {
          "ref": "3a98f505-a6cd-416b-a497-c134e6afe185",
          "length": 243,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "f4dfb57d-237c-4a52-b03a-98c943eba00a"
        },
        "item": {
          "id": "5257a441-bf3c-44f3-9e41-507c64fcc350",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "5cd003e7-aa54-4308-ae23-98bf6a3a4193",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 43,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 501",
              "stack": "AssertionError: expected response to have status code 400 but got 501\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "0636fae7-03ea-41cc-a306-fc68b9781574",
        "cursor": {
          "ref": "f939d803-d01a-4ecd-8d32-b2b6e0b2ad7e",
          "length": 243,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "34f5a215-cd41-4645-b965-47c2ac2fb1ca"
        },
        "item": {
          "id": "0636fae7-03ea-41cc-a306-fc68b9781574",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "8b2af96d-0117-47e7-abe1-76582191c78f",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 45,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 501",
              "stack": "AssertionError: expected response to have status code 400 but got 501\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "e9e12dba-200d-4928-b4e3-0a7163d4c0e4",
        "cursor": {
          "ref": "9d5a45e0-35ec-4052-b1b4-aaa58b7e7ca6",
          "length": 243,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "5f80d9b4-17bc-4ec3-a14b-1c2320091e6c"
        },
        "item": {
          "id": "e9e12dba-200d-4928-b4e3-0a7163d4c0e4",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "cad00cc3-dcdf-4450-9994-4fb20244db9f",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 43,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 501",
              "stack": "AssertionError: expected response to have status code 400 but got 501\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "f45b17b1-8d29-4e8a-aa31-3dd3df31430c",
        "cursor": {
          "ref": "de9767ef-3b75-41b5-9ad7-cd59f05bda86",
          "length": 243,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "83170f41-fc6f-480a-9d57-48adb85b42ee"
        },
        "item": {
          "id": "f45b17b1-8d29-4e8a-aa31-3dd3df31430c",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "cfa7a1c9-22ef-4051-88b8-27fcc4a7bc2c",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 44,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 501",
              "stack": "AssertionError: expected response to have status code 400 but got 501\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "a84d8acb-88b3-4b9c-9b30-ad82ec251d4e",
        "cursor": {
          "ref": "16062e0e-b66c-41a2-b66f-b1ccd904c09a",
          "length": 243,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "12a44d64-c734-4364-b506-ce9c6da85dd1"
        },
        "item": {
          "id": "a84d8acb-88b3-4b9c-9b30-ad82ec251d4e",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "65c32798-fcd3-42ba-94c4-0705e5377a53",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 45,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 501",
              "stack": "AssertionError: expected response to have status code 400 but got 501\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "ca3d2854-4d33-4e99-af1c-52196e259832",
        "cursor": {
          "ref": "9c8909f7-615b-42ad-acaf-e78b2022f348",
          "length": 243,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "ccc268a5-ee6a-480c-bb0e-ddd542030bc6"
        },
        "item": {
          "id": "ca3d2854-4d33-4e99-af1c-52196e259832",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "2c98d5be-c0c3-43f2-afb0-e6071fda08fd",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 43,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 501",
              "stack": "AssertionError: expected response to have status code 400 but got 501\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "13552bc4-4fef-4725-8e3c-d41efd9bd5cc",
        "cursor": {
          "ref": "3f86d5fe-69fa-4afb-a46b-710cba9d38e2",
          "length": 243,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "8463f092-0f6f-46cc-a6ad-3f581e73af82"
        },
        "item": {
          "id": "13552bc4-4fef-4725-8e3c-d41efd9bd5cc",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "0ac65364-4e54-4250-8c31-b9a626dcf6b3",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 44,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 501",
              "stack": "AssertionError: expected response to have status code 400 but got 501\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "a666d051-27a8-4eae-8157-7f2a30db1681",
        "cursor": {
          "ref": "903858c4-29f4-4ea3-99d1-4cfa59aaf4fb",
          "length": 243,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "379e6272-6b71-4c3a-ba86-7ebca3fe68a6"
        },
        "item": {
          "id": "a666d051-27a8-4eae-8157-7f2a30db1681",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "39c539a1-234f-4ef2-972a-b56c4fdfc5f0",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 47,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 501",
              "stack": "AssertionError: expected response to have status code 400 but got 501\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "e5717cba-22ee-4f38-acf4-b8a5d0b8fb05",
        "cursor": {
          "ref": "c66f7f62-00e8-412e-a5c0-ca1a038408eb",
          "length": 243,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "6436be0e-f055-4d5f-807a-9ecda90b51f5"
        },
        "item": {
          "id": "e5717cba-22ee-4f38-acf4-b8a5d0b8fb05",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "840fd3cb-cd0d-46b8-b862-ee610a67086c",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 43,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 501",
              "stack": "AssertionError: expected response to have status code 400 but got 501\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "4723b504-755f-4340-a15c-6bac366f1c7f",
        "cursor": {
          "ref": "224e0a12-04d5-42a0-bdf4-f1cd8a60b3f2",
          "length": 243,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "6ad51b77-ec3f-4eb5-8956-e4052485a499"
        },
        "item": {
          "id": "4723b504-755f-4340-a15c-6bac366f1c7f",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "da169a85-3d62-4479-adda-beb53d5a9bd5",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 44,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 501",
              "stack": "AssertionError: expected response to have status code 400 but got 501\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "64b3caff-b020-4cc9-b2df-58a285ccb5a5",
        "cursor": {
          "ref": "375d4687-86c5-4291-be95-ee3e2e9aff94",
          "length": 243,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "7316b9b2-db54-4e66-a4e0-10a772adee32"
        },
        "item": {
          "id": "64b3caff-b020-4cc9-b2df-58a285ccb5a5",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "9070c6a5-bee6-41e1-9373-b5dbe90993da",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 43,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 501",
              "stack": "AssertionError: expected response to have status code 400 but got 501\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "758c3eb9-bf1e-49f3-990e-17b0e58e769a",
        "cursor": {
          "ref": "dfdc9736-4696-4fdf-997f-a4a648ef2559",
          "length": 243,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "98c8ba64-26e5-4aff-b4b9-182fd93cc97c"
        },
        "item": {
          "id": "758c3eb9-bf1e-49f3-990e-17b0e58e769a",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "3b9d140f-7cc3-4676-bb2b-cf028f6f85a7",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 44,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 501",
              "stack": "AssertionError: expected response to have status code 400 but got 501\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "3548a120-9cf1-460e-b76d-8b7bb5bfb42a",
        "cursor": {
          "ref": "8bbdf526-464f-4e94-ae0b-4aeb00837ecf",
          "length": 243,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "74549d44-37f2-45cc-99eb-46757bc3d31a"
        },
        "item": {
          "id": "3548a120-9cf1-460e-b76d-8b7bb5bfb42a",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "4f692a99-4e1a-4c81-94fd-8dc39cfd5687",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 43,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 501",
              "stack": "AssertionError: expected response to have status code 400 but got 501\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "84ae7393-6ade-4f40-9d44-5cb8a189e294",
        "cursor": {
          "ref": "678f8772-cdc1-4b5a-9092-d7c652a83aa9",
          "length": 243,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "250979a4-99e1-4cf8-b58d-02cc3edd3411"
        },
        "item": {
          "id": "84ae7393-6ade-4f40-9d44-5cb8a189e294",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "ed14e1d0-380e-45b8-aa94-8218118b2747",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 44,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 501",
              "stack": "AssertionError: expected response to have status code 400 but got 501\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "25a6fdf4-34dc-4130-9724-44132621b79a",
        "cursor": {
          "ref": "c6766e4d-feff-4108-beb0-3e6302857fdc",
          "length": 243,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "b755da35-959a-415b-93a5-9febf5f2d378"
        },
        "item": {
          "id": "25a6fdf4-34dc-4130-9724-44132621b79a",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "03384e68-5132-4752-b2ab-a63e11a78a77",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 44,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 501",
              "stack": "AssertionError: expected response to have status code 400 but got 501\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "438ba685-6962-4ffb-9b7d-8bd82daed69b",
        "cursor": {
          "ref": "3279c851-7a64-44f1-843d-3c534eb86d7b",
          "length": 243,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "c5600b87-16e4-4213-966b-bd81abc85bd5"
        },
        "item": {
          "id": "438ba685-6962-4ffb-9b7d-8bd82daed69b",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "e23403f1-71de-454a-8256-13c958d28a8b",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 43,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 501",
              "stack": "AssertionError: expected response to have status code 400 but got 501\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "2e954983-0049-4300-987b-a1584ae6f03f",
        "cursor": {
          "ref": "b607c0f6-7203-4e42-86c5-c869050d0ee4",
          "length": 243,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "63bc01a8-b7e0-48b3-a944-f62eb1842b39"
        },
        "item": {
          "id": "2e954983-0049-4300-987b-a1584ae6f03f",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "719ed567-61f3-49f0-a298-b3e83c201935",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 44,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 501",
              "stack": "AssertionError: expected response to have status code 400 but got 501\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "111126d0-51e4-4357-9503-29162cae2258",
        "cursor": {
          "ref": "26bfa1bf-2cb1-4170-88b7-9c00778f44fd",
          "length": 243,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "5178fd53-2206-4c2e-9034-138b48042d20"
        },
        "item": {
          "id": "111126d0-51e4-4357-9503-29162cae2258",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "09483946-d692-4454-93e1-0b8c3cbc0493",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 43,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 501",
              "stack": "AssertionError: expected response to have status code 400 but got 501\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "8f87dd75-bd09-4d11-a301-583788333e2b",
        "cursor": {
          "ref": "2a073de9-629c-4cb8-a4d6-efc6d877ee47",
          "length": 243,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "8bac13ca-9768-44bf-8f5c-0e3c6f6e5fa2"
        },
        "item": {
          "id": "8f87dd75-bd09-4d11-a301-583788333e2b",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "b9ed0244-5dda-44e4-9f89-d1aac7e342f6",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 43,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 501",
              "stack": "AssertionError: expected response to have status code 400 but got 501\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "4828e815-b842-4693-b86d-0d11729e2a01",
        "cursor": {
          "ref": "a8c53891-1983-4469-91a0-b4d3c167a5ef",
          "length": 243,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "d4de16af-0100-458d-af04-712046ebc336"
        },
        "item": {
          "id": "4828e815-b842-4693-b86d-0d11729e2a01",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "7952bdb2-b324-4493-adf7-d39b5f9a2e87",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "b88ccb9a-1e47-42d3-9fea-65e51507853a",
        "cursor": {
          "ref": "e764ce4f-3eac-4fd7-8c41-a0902d3073fe",
          "length": 243,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "4f96d260-7802-4dd3-8c1c-1bd7ff22bc96"
        },
        "item": {
          "id": "b88ccb9a-1e47-42d3-9fea-65e51507853a",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "7d30a147-9360-4f1c-91e2-9179f82147f6",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 44,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 501",
              "stack": "AssertionError: expected response to have status code 403 but got 501\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "b1a502f9-617e-4443-957c-bdb3b14a7e73",
        "cursor": {
          "ref": "080b9636-d435-43ed-8184-bc5f54f171c5",
          "length": 243,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "e45a75fc-485c-4f51-a36d-5c1d6aaa696d"
        },
        "item": {
          "id": "b1a502f9-617e-4443-957c-bdb3b14a7e73",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "53e82be4-6e53-4a11-82f3-807a861cb412",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 44,
          "responseSize": 70
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "b1a502f9-617e-4443-957c-bdb3b14a7e73",
        "cursor": {
          "ref": "080b9636-d435-43ed-8184-bc5f54f171c5",
          "length": 243,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "e45a75fc-485c-4f51-a36d-5c1d6aaa696d"
        },
        "item": {
          "id": "b1a502f9-617e-4443-957c-bdb3b14a7e73",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "53e82be4-6e53-4a11-82f3-807a861cb412",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 44,
          "responseSize": 70
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "6b9a61f3-5748-480d-a8fc-559b9ed8c298",
        "cursor": {
          "ref": "2603a93d-a06e-4cf7-b442-aa0b60ec4b68",
          "length": 243,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "5e6ed620-9659-4a3d-b17b-6d7608f9d40a"
        },
        "item": {
          "id": "6b9a61f3-5748-480d-a8fc-559b9ed8c298",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "9c763b54-3c2e-4a12-b3ba-c2497777c82d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 43,
          "responseSize": 56
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "5c67504a-3246-4bba-988f-1194e9371e6b",
        "cursor": {
          "ref": "32aab29f-432e-4f60-9ef1-af6c81d0437f",
          "length": 243,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "86fead61-377f-4d03-b50b-9c6257260d0d"
        },
        "item": {
          "id": "5c67504a-3246-4bba-988f-1194e9371e6b",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "64a5975e-7a8b-4ae0-8bf8-7a24240d7909",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 43,
          "responseSize": 65
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "c8069f0b-7d7e-4c8f-ba88-6e2fd04e86fc",
        "cursor": {
          "ref": "7556112b-57f6-4738-95d1-2a3061cb9ed7",
          "length": 243,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "4fb891bc-b315-4bca-8ab1-835302e869bc"
        },
        "item": {
          "id": "c8069f0b-7d7e-4c8f-ba88-6e2fd04e86fc",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "9cc3b54e-7ffe-4074-a200-9d8a555e9c92",
          "status": "OK",
          "code": 200,
          "responseTime": 44,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "e7871440-3ac1-40f1-bf49-cea901556e7b",
        "cursor": {
          "ref": "05ed3113-684b-43d2-a11e-04452a1eec21",
          "length": 243,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "ab1201e4-26a1-4deb-97d9-958aa2274882"
        },
        "item": {
          "id": "e7871440-3ac1-40f1-bf49-cea901556e7b",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "5a197141-63df-4b82-b318-f0c3d037fdd1",
          "status": "OK",
          "code": 200,
          "responseTime": 44,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "ff39592f-308a-40f3-985b-62f029508c9d",
        "cursor": {
          "ref": "613d688a-aeb7-4938-84b2-c4db22eb3f80",
          "length": 243,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "1ec21696-2359-4a72-a86e-b7f024b1b4b7"
        },
        "item": {
          "id": "ff39592f-308a-40f3-985b-62f029508c9d",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "7d4d9d96-79ac-4dc2-8f29-f4e64019d6e5",
          "status": "OK",
          "code": 200,
          "responseTime": 48,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "85469122-84a0-42f8-9565-64f8753e05a1",
        "cursor": {
          "ref": "c9b879de-2cac-45d7-b0e0-89277ad9ba4c",
          "length": 243,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "f0f337c5-14c0-41d2-99d4-a0b31f68f654"
        },
        "item": {
          "id": "85469122-84a0-42f8-9565-64f8753e05a1",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "3f14384f-a0ba-43d1-99f6-37fb1888a756",
          "status": "OK",
          "code": 200,
          "responseTime": 43,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "a3223b69-8c72-4c2d-a090-33f274bfa18b",
        "cursor": {
          "ref": "886ffd26-9685-4333-8e04-acec74a34628",
          "length": 243,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "82cbccf7-0dfc-419d-90e4-fba390015481"
        },
        "item": {
          "id": "a3223b69-8c72-4c2d-a090-33f274bfa18b",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "9313a814-5d78-42c0-8426-a76926e2ea19",
          "status": "OK",
          "code": 200,
          "responseTime": 44,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "a7da188c-bc1a-4841-a32f-453484dab8c8",
        "cursor": {
          "ref": "6fdb9517-bfc8-4392-8ffb-9683083a958c",
          "length": 243,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "1c97fb8c-330c-4da6-a84d-af6f9cdabf05"
        },
        "item": {
          "id": "a7da188c-bc1a-4841-a32f-453484dab8c8",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "4a969d2a-d1e9-4783-a02f-8d8a1c3d1490",
          "status": "OK",
          "code": 200,
          "responseTime": 45,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "a41caf7f-0534-4d65-a4ae-00e7c84bdedf",
        "cursor": {
          "ref": "4a312f25-5220-4103-a0d0-651efed2aa2c",
          "length": 243,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "3535cb52-f95f-482e-addf-b8410fb30aab"
        },
        "item": {
          "id": "a41caf7f-0534-4d65-a4ae-00e7c84bdedf",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "6ab5c7ce-7b48-492d-b6d4-2f51c9491059",
          "status": "OK",
          "code": 200,
          "responseTime": 43,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:145)"
            }
          }
        ]
      },
      {
        "id": "96c84f86-37bd-4847-9d1b-0d140898e436",
        "cursor": {
          "ref": "bf9f09e6-fc7d-47d9-b1ba-e5e7d8232b57",
          "length": 243,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "2902e99b-4514-4acf-9ff8-d57bcf24111d"
        },
        "item": {
          "id": "96c84f86-37bd-4847-9d1b-0d140898e436",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "4ea8289c-556e-4fa1-9bcd-4a4bfe45d58f",
          "status": "OK",
          "code": 200,
          "responseTime": 72,
          "responseSize": 17
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:146)"
            }
          }
        ]
      },
      {
        "id": "296e38e5-eda9-4e49-9eba-aa223e4636c0",
        "cursor": {
          "ref": "861d495b-c10b-4162-8a60-1093e7d7fa60",
          "length": 243,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "2242fa2f-1e21-428d-a360-04f7435f7601"
        },
        "item": {
          "id": "296e38e5-eda9-4e49-9eba-aa223e4636c0",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "c00e02c7-e5d9-4e22-aa2e-116fbe621a2b",
          "status": "OK",
          "code": 200,
          "responseTime": 69,
          "responseSize": 17
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:147)"
            }
          }
        ]
      },
      {
        "id": "c42f50e5-1e5f-41dc-a9b4-f183bee1b4df",
        "cursor": {
          "ref": "c24aee26-68c5-453c-a9d6-d62e084b5d6e",
          "length": 243,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "96ece3f0-b0fd-44cf-9f68-8f1b41a61f16"
        },
        "item": {
          "id": "c42f50e5-1e5f-41dc-a9b4-f183bee1b4df",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "051e652a-8638-4f14-8683-65a2138fb6f9",
          "status": "OK",
          "code": 200,
          "responseTime": 45,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:148)"
            }
          }
        ]
      },
      {
        "id": "b6c151c2-6ce1-4234-a9ac-7df84bd6bc01",
        "cursor": {
          "ref": "80191ddf-8d5c-4836-9977-c90b95b365f3",
          "length": 243,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "82fd4d1d-282f-4be0-8696-558168d41568"
        },
        "item": {
          "id": "b6c151c2-6ce1-4234-a9ac-7df84bd6bc01",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "749e8c6d-7822-4fe1-ad88-1d3c9b40a045",
          "status": "OK",
          "code": 200,
          "responseTime": 43,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:149)"
            }
          }
        ]
      },
      {
        "id": "c102fb39-cb5e-482d-9fa6-18cd78ae1cb8",
        "cursor": {
          "ref": "fc3ce54c-5818-4de6-be89-1fd537af568a",
          "length": 243,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "c69dbfd8-e27b-41aa-a8a2-3e25cebd1f75"
        },
        "item": {
          "id": "c102fb39-cb5e-482d-9fa6-18cd78ae1cb8",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "0d99b9ad-0ec7-42e4-8ae3-13ee15ab993a",
          "status": "OK",
          "code": 200,
          "responseTime": 43,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:150)"
            }
          }
        ]
      },
      {
        "id": "c45a195a-7bde-4ea2-8025-9a020d7931b0",
        "cursor": {
          "ref": "73e6434b-f5ba-4a28-bed9-431a114b744c",
          "length": 243,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "5339de86-31a1-4b6a-9d15-3686f72408a4"
        },
        "item": {
          "id": "c45a195a-7bde-4ea2-8025-9a020d7931b0",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "9775af0d-166a-4e9f-b94d-058e5bc6f4f1",
          "status": "OK",
          "code": 200,
          "responseTime": 44,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:151)"
            }
          }
        ]
      },
      {
        "id": "828d3a67-6d7b-4649-8470-19dcb5add06a",
        "cursor": {
          "ref": "7babf3fc-2311-4183-8930-6d8746b7b9f9",
          "length": 243,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "60a8caef-5878-4c17-9d1c-1690cc22c421"
        },
        "item": {
          "id": "828d3a67-6d7b-4649-8470-19dcb5add06a",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "5495d827-1903-4b82-80b8-a5751f3f2deb",
          "status": "OK",
          "code": 200,
          "responseTime": 78,
          "responseSize": 17
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "cd9fad2b-3a7a-4e98-96e4-3ddb6f30b531",
        "cursor": {
          "ref": "d041b162-dc27-43ff-a103-2041e34b6f38",
          "length": 243,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "35a9cdde-3a25-427e-8943-5d6ce08f7da5"
        },
        "item": {
          "id": "cd9fad2b-3a7a-4e98-96e4-3ddb6f30b531",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "be19549f-4bb0-4b68-9f17-aa9ba654c450",
          "status": "OK",
          "code": 200,
          "responseTime": 54,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:153)"
            }
          }
        ]
      },
      {
        "id": "86a8147b-9831-4a9f-bdc0-b748304e0005",
        "cursor": {
          "ref": "639226a5-0f3a-453c-801e-4ef2f3bfee15",
          "length": 243,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "8831639f-fd6c-406b-ac0d-32617209b5fb"
        },
        "item": {
          "id": "86a8147b-9831-4a9f-bdc0-b748304e0005",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "ba93a154-5472-4c6d-9784-cb617c3d3878",
          "status": "OK",
          "code": 200,
          "responseTime": 45,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:154)"
            }
          }
        ]
      },
      {
        "id": "f8e5157c-5a96-4c6f-b410-a7311203aba8",
        "cursor": {
          "ref": "6e690af6-cda3-42e2-b061-7454423b044d",
          "length": 243,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "f73984bd-cff9-4a9c-b947-061927024ea8"
        },
        "item": {
          "id": "f8e5157c-5a96-4c6f-b410-a7311203aba8",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "db2f66d3-ccdf-44ac-9ac1-ce4a49c645d0",
          "status": "OK",
          "code": 200,
          "responseTime": 44,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "6eb23337-4fb5-4020-801f-30532cee2120",
        "cursor": {
          "ref": "11e906db-afe7-4769-bebc-037cceccf754",
          "length": 243,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "cf32e08e-7b88-44db-97f9-66c913e9a1f2"
        },
        "item": {
          "id": "6eb23337-4fb5-4020-801f-30532cee2120",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "57cfd220-ac19-4ddc-9217-8d8dd751eeb7",
          "status": "OK",
          "code": 200,
          "responseTime": 45,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:156)"
            }
          }
        ]
      },
      {
        "id": "17499a00-071c-40dd-b7bc-da3138f2fe8c",
        "cursor": {
          "ref": "34b03651-826b-4f65-9714-471ce385bc58",
          "length": 243,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "3e573b28-14fb-4ca7-9c65-e9e4b69b99a2"
        },
        "item": {
          "id": "17499a00-071c-40dd-b7bc-da3138f2fe8c",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "bafec4a7-655c-4a5d-87b0-048ae6e36b26",
          "status": "OK",
          "code": 200,
          "responseTime": 45,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "069c6249-149b-4ced-933b-cd5585fc6d70",
        "cursor": {
          "ref": "923e7192-a657-435d-8e1d-2cb3dbb06737",
          "length": 243,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "c1a7cfa7-ebb7-4d90-a6fd-cd543dc3435c"
        },
        "item": {
          "id": "069c6249-149b-4ced-933b-cd5585fc6d70",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "249e421b-e90a-4ba7-94c5-60c2a3231a48",
          "status": "OK",
          "code": 200,
          "responseTime": 47,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:158)"
            }
          }
        ]
      },
      {
        "id": "d73d4bdf-baf5-48a7-819e-56f34599a625",
        "cursor": {
          "ref": "d5bd45af-9096-4205-88e2-8039d8446022",
          "length": 243,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "3566da9a-6706-4727-8df1-7b38c5bbe34e"
        },
        "item": {
          "id": "d73d4bdf-baf5-48a7-819e-56f34599a625",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "15968aa3-656a-448c-aec8-fe4f6a1ed6fc",
          "status": "OK",
          "code": 200,
          "responseTime": 46,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "d0fb58ed-f6ae-4e14-a077-026a77800c0c",
        "cursor": {
          "ref": "40fa2dae-4b6e-4573-ba72-f9ceb371d0b3",
          "length": 243,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "b2b232ed-cb8d-44d4-9c14-0818cc3288c1"
        },
        "item": {
          "id": "d0fb58ed-f6ae-4e14-a077-026a77800c0c",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "085b8768-8b29-413c-9bf3-72f5f332b15f",
          "status": "OK",
          "code": 200,
          "responseTime": 44,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "a495b379-b320-42c4-becb-0587dfb4e13f",
        "cursor": {
          "ref": "1ef28190-ed3f-4d5b-b2ad-998c7b801648",
          "length": 243,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "e112d65d-56ed-455e-9c5f-5e082dc96056"
        },
        "item": {
          "id": "a495b379-b320-42c4-becb-0587dfb4e13f",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "7ad8804a-3c9d-42cf-b2c5-a502246f4ff8",
          "status": "OK",
          "code": 200,
          "responseTime": 45,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:161)"
            }
          }
        ]
      },
      {
        "id": "a67021fe-53ec-4564-831f-cbe53872a71e",
        "cursor": {
          "ref": "9302e3d9-b1e0-46da-8f19-a13b1d7aef12",
          "length": 243,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "9c407295-8fd5-4509-ab25-6e6632683275"
        },
        "item": {
          "id": "a67021fe-53ec-4564-831f-cbe53872a71e",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "87d8e528-2b7c-4df7-8db0-ca55bccfb284",
          "status": "OK",
          "code": 200,
          "responseTime": 44,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "7008aac9-7c0f-4c90-b8ae-fde7c9234962",
        "cursor": {
          "ref": "45864e16-2a62-4a54-8f95-e14875795251",
          "length": 243,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "3f560ac0-e33b-489a-a74c-ddb849f75a47"
        },
        "item": {
          "id": "7008aac9-7c0f-4c90-b8ae-fde7c9234962",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "6ca37874-68e3-4466-bcc6-16eaaae4fc9e",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 17
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:163)"
            }
          }
        ]
      },
      {
        "id": "1373965d-9004-4faf-93f4-208154e7ae0c",
        "cursor": {
          "ref": "ee3ceb59-5416-422d-ac19-092978d8cb1b",
          "length": 243,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "942034eb-efe6-4908-83ee-6f05d587fe34"
        },
        "item": {
          "id": "1373965d-9004-4faf-93f4-208154e7ae0c",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "0d4348df-a9bf-409b-a978-d5c7d1114276",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:164)"
            }
          }
        ]
      },
      {
        "id": "023aff23-9438-42c6-8ce5-c6bbcd5d90aa",
        "cursor": {
          "ref": "ec5a1b6e-2eed-4b57-8c29-34fec490cf9f",
          "length": 243,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "e50bf2cf-6478-4d2a-b532-bd58575f6966"
        },
        "item": {
          "id": "023aff23-9438-42c6-8ce5-c6bbcd5d90aa",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "22cb15aa-c461-401f-9afc-efcdbc2d430e",
          "status": "OK",
          "code": 200,
          "responseTime": 46,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:165)"
            }
          }
        ]
      },
      {
        "id": "dad5f468-8c3c-49f9-afed-5c1b761e6807",
        "cursor": {
          "ref": "2e54bc2b-c75f-4a0c-b908-c9c43cf28c17",
          "length": 243,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "00165f89-f289-40f4-a76d-6bb7dfb5b2c2"
        },
        "item": {
          "id": "dad5f468-8c3c-49f9-afed-5c1b761e6807",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "fb6d2897-4e90-4a1f-85e6-45b22f7c960c",
          "status": "OK",
          "code": 200,
          "responseTime": 46,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:166)"
            }
          }
        ]
      },
      {
        "id": "94c117e0-9b1f-4c91-ae44-5e448f2ab1e3",
        "cursor": {
          "ref": "2c614a31-7505-4244-bdfc-4b4f017c6609",
          "length": 243,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "46cd90d4-b96c-4f0a-a256-eb50b0dea35f"
        },
        "item": {
          "id": "94c117e0-9b1f-4c91-ae44-5e448f2ab1e3",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "94b89402-6410-48fc-a1d8-d243accb818f",
          "status": "OK",
          "code": 200,
          "responseTime": 45,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:167)"
            }
          }
        ]
      },
      {
        "id": "c445640d-b692-4951-acc4-b266faaab4a9",
        "cursor": {
          "ref": "408bf073-10b9-42b0-9885-246b27cabeee",
          "length": 243,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "6baf5e85-8928-42df-8d35-694a75e2bcce"
        },
        "item": {
          "id": "c445640d-b692-4951-acc4-b266faaab4a9",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "95d359ea-b5bd-4a54-b5ba-acc00ccb1299",
          "status": "OK",
          "code": 200,
          "responseTime": 45,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:168)"
            }
          }
        ]
      },
      {
        "id": "6e735532-0849-425e-be02-aa83e4274caf",
        "cursor": {
          "ref": "773e8bca-4fda-4bcf-82ff-0e42036012df",
          "length": 243,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "329abae2-2332-49c5-9ac6-50581616bfe4"
        },
        "item": {
          "id": "6e735532-0849-425e-be02-aa83e4274caf",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "b9a9b8ab-07da-46d6-bf11-2a7fbbad1442",
          "status": "OK",
          "code": 200,
          "responseTime": 48,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:169)"
            }
          }
        ]
      },
      {
        "id": "aa519081-ec6b-4fd1-9ac5-629d4c7ff77a",
        "cursor": {
          "ref": "cbcc6f40-dcd0-4de9-a554-98026f4a12b6",
          "length": 243,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "5f555d64-c4ba-4450-855a-ec6854fc7e4c"
        },
        "item": {
          "id": "aa519081-ec6b-4fd1-9ac5-629d4c7ff77a",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "6873dab5-8e92-4350-8895-f9a0cf8ef767",
          "status": "OK",
          "code": 200,
          "responseTime": 48,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:170)"
            }
          }
        ]
      },
      {
        "id": "bb8405c0-367a-4fa9-b869-cef6ee943880",
        "cursor": {
          "ref": "6ec41c22-e30e-4f1e-9ce0-16248417f96f",
          "length": 243,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "ff75a397-1ac5-49fe-8309-36553845d9f5"
        },
        "item": {
          "id": "bb8405c0-367a-4fa9-b869-cef6ee943880",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "3c3b8c50-782c-4989-801b-b335a6f7e68c",
          "status": "OK",
          "code": 200,
          "responseTime": 52,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:171)"
            }
          }
        ]
      },
      {
        "id": "0c8c7ecf-64c7-4830-b218-e2bd9877c5a9",
        "cursor": {
          "ref": "ad084a33-9d0f-499a-9778-37a5f7af137d",
          "length": 243,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "7c3a21c5-648c-4589-9d68-a76d1cd9e3d8"
        },
        "item": {
          "id": "0c8c7ecf-64c7-4830-b218-e2bd9877c5a9",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "ce10216d-80d6-43c1-ba87-008e95657742",
          "status": "OK",
          "code": 200,
          "responseTime": 47,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "9e2c6d8b-bd3d-40d6-9c5c-e78b323bd677",
        "cursor": {
          "ref": "876ab22e-c93d-40c3-9670-6073ad01393e",
          "length": 243,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "12f6dd86-3d56-4086-9382-7360f43677c9"
        },
        "item": {
          "id": "9e2c6d8b-bd3d-40d6-9c5c-e78b323bd677",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "1ebcb481-2731-427f-9766-a47672981ce5",
          "status": "OK",
          "code": 200,
          "responseTime": 49,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:173)"
            }
          }
        ]
      },
      {
        "id": "a8df7e75-200f-4bac-b81c-2ee2781a832f",
        "cursor": {
          "ref": "918a3e57-794a-4f7a-b125-fe823fcba936",
          "length": 243,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "10adfc21-2183-4ec6-864d-5e275986dce2"
        },
        "item": {
          "id": "a8df7e75-200f-4bac-b81c-2ee2781a832f",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "11366e35-9c8f-427b-b16d-8f1447123888",
          "status": "OK",
          "code": 200,
          "responseTime": 56,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "36c2fd07-50c6-4de2-92df-17fe65d7bef7",
        "cursor": {
          "ref": "cbd77700-08ab-4171-8aea-437abff7b676",
          "length": 243,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "f2b9d632-e850-4b58-8de9-a40673fde303"
        },
        "item": {
          "id": "36c2fd07-50c6-4de2-92df-17fe65d7bef7",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "73a841b3-5a32-4473-854b-278607e52bfb",
          "status": "OK",
          "code": 200,
          "responseTime": 49,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:175)"
            }
          }
        ]
      },
      {
        "id": "04bc3619-240f-4602-b08d-a82101d3f035",
        "cursor": {
          "ref": "68afad28-3db0-46e7-8381-ee671dd86776",
          "length": 243,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "6de84640-881a-40f4-9119-7894830c750a"
        },
        "item": {
          "id": "04bc3619-240f-4602-b08d-a82101d3f035",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "c9d1a4c3-4d11-4851-9d85-2cf016ee96de",
          "status": "OK",
          "code": 200,
          "responseTime": 44,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:176)"
            }
          }
        ]
      },
      {
        "id": "9813af08-f7d1-404d-8735-48cc2c560a62",
        "cursor": {
          "ref": "5a5834b7-3c25-4441-88ab-d6a9fabdaf7a",
          "length": 243,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "0b6dab24-3769-483c-bb55-0d52019e8090"
        },
        "item": {
          "id": "9813af08-f7d1-404d-8735-48cc2c560a62",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "59fdbedd-de75-4162-b4d3-7b77a85698bb",
          "status": "OK",
          "code": 200,
          "responseTime": 44,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:177)"
            }
          }
        ]
      },
      {
        "id": "e12ef8c9-ffad-434e-aa66-1f9b9959d34e",
        "cursor": {
          "ref": "815b18d3-ce72-4175-81e5-ab3d18c9e354",
          "length": 243,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "469a1c63-3cd0-4718-9d33-46dbcf145469"
        },
        "item": {
          "id": "e12ef8c9-ffad-434e-aa66-1f9b9959d34e",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "e8c00d58-7312-4f9b-8122-526b08018287",
          "status": "OK",
          "code": 200,
          "responseTime": 44,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:178)"
            }
          }
        ]
      },
      {
        "id": "0fd582f2-eea4-443e-a968-c4d6d2475f5f",
        "cursor": {
          "ref": "fe86afe8-6b23-4a47-840a-cb76bf3b2266",
          "length": 243,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "bc4ec1a2-316e-40e5-8e7a-534683eb6d3e"
        },
        "item": {
          "id": "0fd582f2-eea4-443e-a968-c4d6d2475f5f",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "8b69b9c6-5b37-457d-a2b4-4ddd47ab1274",
          "status": "OK",
          "code": 200,
          "responseTime": 45,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:179)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:179)"
            }
          }
        ]
      },
      {
        "id": "47ebe18b-c5eb-475c-b6fd-ce8a55cb0a74",
        "cursor": {
          "ref": "ef7e99c8-ecc9-4534-9a5c-6778dd77478e",
          "length": 243,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "88d9d995-0ac0-4dc9-94e0-cfbffa572020"
        },
        "item": {
          "id": "47ebe18b-c5eb-475c-b6fd-ce8a55cb0a74",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "b80945f2-e664-48c3-8ca9-f20528f6dcbc",
          "status": "OK",
          "code": 200,
          "responseTime": 45,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:180)"
            }
          }
        ]
      },
      {
        "id": "7d199ba6-c2b2-4408-9eb8-5566e27d7344",
        "cursor": {
          "ref": "0e2e4be9-b9db-4703-b67f-b3fb9aac5f64",
          "length": 243,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "dc7ee9f7-e110-451d-b1f0-974a5b128a24"
        },
        "item": {
          "id": "7d199ba6-c2b2-4408-9eb8-5566e27d7344",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "eb5912b6-6955-4ed3-933f-72187b9dcdb1",
          "status": "OK",
          "code": 200,
          "responseTime": 48,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:181)"
            }
          }
        ]
      },
      {
        "id": "6426bfc1-0188-4dcf-900e-e7de0cf0faa2",
        "cursor": {
          "ref": "c49295e9-c144-4745-af94-dd42df5a949b",
          "length": 243,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "3b9abbae-61f8-4e22-9322-f6de54681935"
        },
        "item": {
          "id": "6426bfc1-0188-4dcf-900e-e7de0cf0faa2",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "e429818f-0bb1-41bb-9124-e2954341c9fd",
          "status": "OK",
          "code": 200,
          "responseTime": 83,
          "responseSize": 17
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "f31279e8-36e6-4ef4-9312-aa846fd4d377",
        "cursor": {
          "ref": "d0890403-a71f-4c16-916b-5f957ad20988",
          "length": 243,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "60d94c40-9d61-471a-822b-a66f13a7def7"
        },
        "item": {
          "id": "f31279e8-36e6-4ef4-9312-aa846fd4d377",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "0103f789-ea6d-4ec1-ac30-0e8ec2b28591",
          "status": "OK",
          "code": 200,
          "responseTime": 49,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "b663b21a-9f75-478f-ad9d-1f32f94a31e8",
        "cursor": {
          "ref": "bf3c80da-f5b3-4f9a-bb69-6852a0fec487",
          "length": 243,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "71d466e9-ea2b-4ec9-8926-d86d336727d0"
        },
        "item": {
          "id": "b663b21a-9f75-478f-ad9d-1f32f94a31e8",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "38de1584-3608-4b6a-a25f-0ab872ec2923",
          "status": "OK",
          "code": 200,
          "responseTime": 89,
          "responseSize": 17
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "8e6f8da1-9dd1-48fa-a420-9a99c87bd03f",
        "cursor": {
          "ref": "b0ca4cae-5381-44e3-b264-f926bb18f60d",
          "length": 243,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "5cad8815-6719-4f45-9e93-764c20b6a06c"
        },
        "item": {
          "id": "8e6f8da1-9dd1-48fa-a420-9a99c87bd03f",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "1facbfb5-b40c-4e1c-908f-697fdbd81838",
          "status": "OK",
          "code": 200,
          "responseTime": 48,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "0359d07a-ea73-4701-9f34-ec8c81a22cc2",
        "cursor": {
          "ref": "8a002999-d9d2-476a-95bf-90ce3d259b02",
          "length": 243,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "2a111167-2992-4166-a2b6-77312fc4ea27"
        },
        "item": {
          "id": "0359d07a-ea73-4701-9f34-ec8c81a22cc2",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "1ffb66ac-53d6-44d5-af4d-9a9780b73e9e",
          "status": "OK",
          "code": 200,
          "responseTime": 49,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "c93ecd3d-3078-4776-8c85-6ce452509e64",
        "cursor": {
          "ref": "472c32bc-c5ee-4ecd-8491-be14ad048f02",
          "length": 243,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "14611d54-9a1c-4d5f-bfe5-bc9809aadaf4"
        },
        "item": {
          "id": "c93ecd3d-3078-4776-8c85-6ce452509e64",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "3ba9822f-f05c-43c5-b9ac-a36415866224",
          "status": "OK",
          "code": 200,
          "responseTime": 71,
          "responseSize": 17
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "e54ff09d-d8fa-4057-918d-bf07bc35bf5d",
        "cursor": {
          "ref": "98b9df01-961e-4e0d-9b20-0b02bccccacc",
          "length": 243,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "68347453-e693-436f-916a-9ae1038e1ab5"
        },
        "item": {
          "id": "e54ff09d-d8fa-4057-918d-bf07bc35bf5d",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "dd8614bf-90fe-4ac9-87be-2d37b7c9bcb5",
          "status": "OK",
          "code": 200,
          "responseTime": 48,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "1cb9fee8-c5e0-44c2-8fbe-f80582a32b71",
        "cursor": {
          "ref": "223a4806-d391-4d9e-91de-e91c6764f004",
          "length": 243,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "e3b6f9b9-cc64-48b6-bd4e-4b62b3e88d7b"
        },
        "item": {
          "id": "1cb9fee8-c5e0-44c2-8fbe-f80582a32b71",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "da87bd5a-84de-4061-a88f-25ae352d6135",
          "status": "OK",
          "code": 200,
          "responseTime": 69,
          "responseSize": 17
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "92e6dbf9-c2d0-462f-9415-b201da653135",
        "cursor": {
          "ref": "e485d166-457f-44dc-9801-baa2c24a50ba",
          "length": 243,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "a65279b0-5276-4703-b0b1-9e2d1b26542e"
        },
        "item": {
          "id": "92e6dbf9-c2d0-462f-9415-b201da653135",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "34b2b82c-ab7a-4e9f-95be-24845d4ee6b5",
          "status": "OK",
          "code": 200,
          "responseTime": 48,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "4b113d30-4605-4655-b27f-9a72cc0a302a",
        "cursor": {
          "ref": "8c4bab65-5ba6-4b9b-97cd-50cff2e583aa",
          "length": 243,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "9947a32d-028d-470b-9a8b-66b0c3b21750"
        },
        "item": {
          "id": "4b113d30-4605-4655-b27f-9a72cc0a302a",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "f18f11ac-0c99-400b-82fd-b38c544c51c6",
          "status": "OK",
          "code": 200,
          "responseTime": 72,
          "responseSize": 17
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "fe847261-e085-4339-8f1c-574c3197e40a",
        "cursor": {
          "ref": "d5836d77-c116-4fc9-8c9d-c3e42e6a90ed",
          "length": 243,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "69031dec-1676-4f4e-a854-75b48a8c58df"
        },
        "item": {
          "id": "fe847261-e085-4339-8f1c-574c3197e40a",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "489f9923-be28-4a47-85f4-70c8aca44b42",
          "status": "OK",
          "code": 200,
          "responseTime": 50,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:192)"
            }
          }
        ]
      },
      {
        "id": "9c73e3a2-1fa9-486d-b19a-2e45ba1185d7",
        "cursor": {
          "ref": "2805b5be-6849-4a3c-a4b1-eb1b27992ddc",
          "length": 243,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "f6842b55-6ae8-4c4a-99cd-021fa5fb23f9"
        },
        "item": {
          "id": "9c73e3a2-1fa9-486d-b19a-2e45ba1185d7",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "47db3a06-3186-4cc3-96a6-45345e9c1229",
          "status": "OK",
          "code": 200,
          "responseTime": 69,
          "responseSize": 17
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:193)"
            }
          }
        ]
      },
      {
        "id": "d7526b65-cd5b-4218-9554-010b484b9ffa",
        "cursor": {
          "ref": "702044f3-0d17-4274-a6ce-40656d7fd84b",
          "length": 243,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "96f85d3a-0732-4397-88a1-eacb2aad40a6"
        },
        "item": {
          "id": "d7526b65-cd5b-4218-9554-010b484b9ffa",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "94f47e33-b653-4cb1-b26c-cfa36fedc0cd",
          "status": "OK",
          "code": 200,
          "responseTime": 45,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:194)"
            }
          }
        ]
      },
      {
        "id": "153b82d5-073a-4159-a22e-ea9e361ce648",
        "cursor": {
          "ref": "0df80098-a3e4-4a10-b2d9-d8e99f1e4c45",
          "length": 243,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "3457ef92-fc1b-4292-a7a6-958362dae670"
        },
        "item": {
          "id": "153b82d5-073a-4159-a22e-ea9e361ce648",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "06dff59c-b53b-4ad0-93c9-fe8434d352ad",
          "status": "OK",
          "code": 200,
          "responseTime": 45,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "d6e3f4f4-ba93-47fb-9c1d-1b530cb956cd",
        "cursor": {
          "ref": "a41812c2-774e-43cd-9bfb-c959a7b04a92",
          "length": 243,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "4008fbcd-ff17-4a94-8ea0-0620613a0856"
        },
        "item": {
          "id": "d6e3f4f4-ba93-47fb-9c1d-1b530cb956cd",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "ff3b0e78-2f45-4d61-839f-331f542f7173",
          "status": "OK",
          "code": 200,
          "responseTime": 45,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:196)"
            }
          }
        ]
      },
      {
        "id": "bbede27e-6b09-4930-b0ef-d5fbffebbe83",
        "cursor": {
          "ref": "c38ed3a4-ff65-43c2-aaf3-00a2c1f53491",
          "length": 243,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "0d884a50-c21d-46e8-b242-b3a2f9ba92aa"
        },
        "item": {
          "id": "bbede27e-6b09-4930-b0ef-d5fbffebbe83",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "a01580d3-52f6-46c6-a811-1a9f8309d08c",
          "status": "OK",
          "code": 200,
          "responseTime": 45,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:197)"
            }
          }
        ]
      },
      {
        "id": "fa4470df-a46d-4e80-aaf7-2819716f2ebd",
        "cursor": {
          "ref": "564a88d9-5454-48a8-84e2-d7b6faefacba",
          "length": 243,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "c47f6208-b381-4d0c-9f69-801cfdca2938"
        },
        "item": {
          "id": "fa4470df-a46d-4e80-aaf7-2819716f2ebd",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "e05e7282-ca76-4a23-9b34-4a9476cd41c1",
          "status": "OK",
          "code": 200,
          "responseTime": 45,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:198)"
            }
          }
        ]
      },
      {
        "id": "8008ddde-9903-4b16-b326-bac7b148abd0",
        "cursor": {
          "ref": "5a640c0b-a1d9-4bb0-b890-498d0f913a52",
          "length": 243,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "9211609d-08c2-4687-8a00-90c179219dfd"
        },
        "item": {
          "id": "8008ddde-9903-4b16-b326-bac7b148abd0",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "0a11ed87-6777-4756-a130-fd7079b4909a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 46,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:199)"
            }
          }
        ]
      },
      {
        "id": "0c8dc653-788d-4fd6-8f21-6b34a50798ce",
        "cursor": {
          "ref": "54eb1731-bc84-4e70-a1c6-ef417e5248fe",
          "length": 243,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "08ef1533-6331-4c0f-b999-a7eff945619f"
        },
        "item": {
          "id": "0c8dc653-788d-4fd6-8f21-6b34a50798ce",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "d031d6c6-119d-432b-948c-d839b85f001f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 46,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:200)"
            }
          }
        ]
      },
      {
        "id": "0359ddb2-83f0-4a2e-ad9d-80393f5a8bee",
        "cursor": {
          "ref": "90821078-ec81-4e9c-9343-f1b0d084ae52",
          "length": 243,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "67599a1d-db2d-4c2a-a725-eb1d783fc9d8"
        },
        "item": {
          "id": "0359ddb2-83f0-4a2e-ad9d-80393f5a8bee",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "134795e8-8d65-4042-bb10-b8e19af3f137",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 156,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:201)"
            }
          }
        ]
      },
      {
        "id": "5169022d-dc10-47c1-8896-44ef0ccff903",
        "cursor": {
          "ref": "726318c6-4878-4997-9f19-261824325343",
          "length": 243,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "bda2deb7-31fe-4023-9673-4fdb8118e5d1"
        },
        "item": {
          "id": "5169022d-dc10-47c1-8896-44ef0ccff903",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "b13800ac-b042-45b4-9ff8-dc9eff616f9f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 37,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:202)"
            }
          }
        ]
      },
      {
        "id": "936579c2-e1c8-4918-893d-89b8b5dbabbe",
        "cursor": {
          "ref": "2b499279-5e7c-4426-92de-7f8372acef53",
          "length": 243,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "c88c61e7-3308-4e73-90e4-15eaa25bb3d1"
        },
        "item": {
          "id": "936579c2-e1c8-4918-893d-89b8b5dbabbe",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "b5260a91-3ce2-4255-bccd-0bff4d8fb3fb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 37,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:203)"
            }
          }
        ]
      },
      {
        "id": "e6ee210b-8330-4a8a-8906-83a5bd757c91",
        "cursor": {
          "ref": "1f4b6daa-f134-4ca2-ac2f-cb69431be88f",
          "length": 243,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "727a29c8-3baf-40c4-847c-9b07d50db3d4"
        },
        "item": {
          "id": "e6ee210b-8330-4a8a-8906-83a5bd757c91",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "8a9dcd9c-f5aa-4e57-a280-2a21accf239a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 39,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:204)"
            }
          }
        ]
      },
      {
        "id": "62b4a310-9f79-4ba8-9bf6-1b8dc256ccbf",
        "cursor": {
          "ref": "0c1a956a-e760-4c23-96f0-10cb50240c8c",
          "length": 243,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "37f7ad30-a3e5-41ab-b896-5ee56557d08c"
        },
        "item": {
          "id": "62b4a310-9f79-4ba8-9bf6-1b8dc256ccbf",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "8ddb0a74-7fb8-4a71-99b2-243cc754d269",
          "status": "OK",
          "code": 200,
          "responseTime": 38,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "d3ce8bdc-a221-49da-84ad-0c6594925051",
        "cursor": {
          "ref": "920735cb-a295-4d9d-b00e-91ddf3a91ff2",
          "length": 243,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "bdf40579-c6bd-4bdf-960e-a0f8932e6ec3"
        },
        "item": {
          "id": "d3ce8bdc-a221-49da-84ad-0c6594925051",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "16fdf8da-6d01-47df-9113-8f8efdf5501a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 39,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "b6c90cc2-1653-4e4c-8608-7fef414e2206",
        "cursor": {
          "ref": "d92b4b67-edac-4531-894b-87d87707a699",
          "length": 243,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "46e0f8af-ee50-442f-b15d-4163a6b55e2d"
        },
        "item": {
          "id": "b6c90cc2-1653-4e4c-8608-7fef414e2206",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "1fe8b5f3-abdf-43b4-8a61-d09e6e02935d",
          "status": "OK",
          "code": 200,
          "responseTime": 35,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "9f925369-0ef1-4258-a36b-5b8cb7f06187",
        "cursor": {
          "ref": "e5586611-ac4c-4c37-a8ca-6b415972c495",
          "length": 243,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "463b5a6c-d6d8-40f7-9aa4-085baa429ec4"
        },
        "item": {
          "id": "9f925369-0ef1-4258-a36b-5b8cb7f06187",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "b3fe6bd6-7b50-4fa3-8296-ca6295ed5253",
          "status": "OK",
          "code": 200,
          "responseTime": 35,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "48348c72-d384-4f80-a80a-816a6f477e91",
        "cursor": {
          "ref": "e1d9bf20-f926-4c6d-86d4-57eb9e7da8d5",
          "length": 243,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "d65cde6d-8ec8-42a1-8220-bd017ad33f75"
        },
        "item": {
          "id": "48348c72-d384-4f80-a80a-816a6f477e91",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "18c70441-7e92-46c1-bade-e7b97488b40f",
          "status": "OK",
          "code": 200,
          "responseTime": 36,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "31f0ff30-9711-463b-b393-953a7a34f2be",
        "cursor": {
          "ref": "202019f6-4d26-4224-aed2-61a519ec0cf9",
          "length": 243,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "651fba20-a54f-4121-a660-49f354745bef"
        },
        "item": {
          "id": "31f0ff30-9711-463b-b393-953a7a34f2be",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "7487dd68-e8b4-4898-9c8d-4a22404b2481",
          "status": "OK",
          "code": 200,
          "responseTime": 35,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:210)"
            }
          }
        ]
      },
      {
        "id": "b2d153b8-892e-4bfc-8940-c8d35e30cf18",
        "cursor": {
          "ref": "8d5c24de-d095-4f67-9127-1d0f4fa0081b",
          "length": 243,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "44439c4f-93f5-48fd-bc28-cd61958d0db1"
        },
        "item": {
          "id": "b2d153b8-892e-4bfc-8940-c8d35e30cf18",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "9a6c111e-40aa-41e6-b8a8-106ede7d9251",
          "status": "OK",
          "code": 200,
          "responseTime": 37,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:211)"
            }
          }
        ]
      },
      {
        "id": "072dd3c6-ba50-47fd-98cb-e9a293edf3f0",
        "cursor": {
          "ref": "862e07fa-41d7-473c-af1c-a0992171294b",
          "length": 243,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "70bd6104-5e8a-4b7d-911f-8bb9114ae446"
        },
        "item": {
          "id": "072dd3c6-ba50-47fd-98cb-e9a293edf3f0",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "a8dd786e-c3c3-4ca3-9a18-95ba117079f9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 60,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:212)"
            }
          }
        ]
      },
      {
        "id": "e52f3c1d-967b-4e22-b0e1-e33cdc9a0de0",
        "cursor": {
          "ref": "4971f03c-adf2-40d9-8db4-9a5be5a2a6e7",
          "length": 243,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "be21eeb8-fa4e-437d-9f07-7d5683a9cf83"
        },
        "item": {
          "id": "e52f3c1d-967b-4e22-b0e1-e33cdc9a0de0",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "a27ad64e-8130-4c13-9964-050a459aa42d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 60,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:213)"
            }
          }
        ]
      },
      {
        "id": "9e996c85-0787-4332-ad73-194145d9bc35",
        "cursor": {
          "ref": "759c6a14-a804-4183-ad37-4396595c852c",
          "length": 243,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "5003b1e3-fb1f-4723-ac6b-786890dbb599"
        },
        "item": {
          "id": "9e996c85-0787-4332-ad73-194145d9bc35",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "626fc971-df9b-468d-9821-f93fa8a1f662",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 91,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "d13884af-1406-4ae3-8941-da9a98466d5d",
        "cursor": {
          "ref": "f3c13d55-bf83-4b73-aa8c-c023f87687e9",
          "length": 243,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "4cc963a1-a208-40e5-8c75-ffffa54d6846"
        },
        "item": {
          "id": "d13884af-1406-4ae3-8941-da9a98466d5d",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "26e0523a-68cd-45b2-bd13-3252d5a98279",
          "status": "OK",
          "code": 200,
          "responseTime": 39,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "d895420a-50e5-4df1-80c6-001ce111bbea",
        "cursor": {
          "ref": "5cfc8ff9-7501-436e-ae0a-88312b257d7a",
          "length": 243,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "67aff2a1-af6b-4afe-b2f7-f239ee18fb14"
        },
        "item": {
          "id": "d895420a-50e5-4df1-80c6-001ce111bbea",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "0345bbf7-91ea-46a1-832d-f37b72553468",
          "status": "OK",
          "code": 200,
          "responseTime": 38,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "71114965-f5f2-4cd8-9b0a-6128470ce6b2",
        "cursor": {
          "ref": "f3bd0db2-b650-48bf-b650-69ca72e4fe88",
          "length": 243,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "2ac5b805-77b4-4ee0-9ab1-15fcbd8bba43"
        },
        "item": {
          "id": "71114965-f5f2-4cd8-9b0a-6128470ce6b2",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "bf35c103-5ce4-4587-ad2d-600511e8d603",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 54,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "afa9e1ae-cc23-4571-b043-661d8acf5b80",
        "cursor": {
          "ref": "5d980052-17b6-4572-8e73-59fd57573530",
          "length": 243,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "a1bdfa6f-cfe7-4344-91dc-e9b6f75c0556"
        },
        "item": {
          "id": "afa9e1ae-cc23-4571-b043-661d8acf5b80",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "af8c9220-23b7-4ce6-b431-13857476ec1f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 42,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "0a12203f-e283-4d64-a142-de05924eda32",
        "cursor": {
          "ref": "6744950e-1eba-4d6d-a0ed-48de1bf5f3e8",
          "length": 243,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "f967cfda-8aa4-43b3-9637-274464c118f4"
        },
        "item": {
          "id": "0a12203f-e283-4d64-a142-de05924eda32",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "5c1801b2-3d6d-445d-94be-af3373e0fc50",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 43,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "6350a454-839d-4468-acfc-b5c33532a23f",
        "cursor": {
          "ref": "92f9d80d-9420-483e-a81a-6a41813f98a6",
          "length": 243,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "ef7e2f1d-7d8f-4129-a3d5-b54445290bb7"
        },
        "item": {
          "id": "6350a454-839d-4468-acfc-b5c33532a23f",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "be0fce46-ae43-4911-b530-eba1baffaa1c",
          "status": "OK",
          "code": 200,
          "responseTime": 38,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "62539589-57d3-4f86-9321-959afe9f18d7",
        "cursor": {
          "ref": "f55a8ae3-20d7-494c-a261-88b8ab046352",
          "length": 243,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "b5f3d3d5-f795-49d0-b9c9-40476b551237"
        },
        "item": {
          "id": "62539589-57d3-4f86-9321-959afe9f18d7",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "a7d68762-109e-4bec-acf8-bdc14f5a5830",
          "status": "OK",
          "code": 200,
          "responseTime": 38,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "1a2c69ba-4962-42bd-bd67-c88627a42364",
        "cursor": {
          "ref": "18018e84-bffa-4777-ac24-61a9c6e20912",
          "length": 243,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "fba1ea5b-9928-4b78-a8a2-023027a2a884"
        },
        "item": {
          "id": "1a2c69ba-4962-42bd-bd67-c88627a42364",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "71a4da72-f62a-4453-8d3b-248a12c01415",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 59,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "439c154c-9e1b-4562-bb81-d8e2e257cb40",
        "cursor": {
          "ref": "14eb35e0-97fc-44d3-a68f-38216d6c0e7c",
          "length": 243,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "e60a647b-6a0d-41a0-8aba-21c7ecb05412"
        },
        "item": {
          "id": "439c154c-9e1b-4562-bb81-d8e2e257cb40",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "b848b29c-6109-44b7-9c69-5a9e576c0361",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "1e36edff-6f91-457c-9d81-a420f328a914",
        "cursor": {
          "ref": "7c9a98c5-399f-432b-8fd1-be4e0df7e3c5",
          "length": 243,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "7c1a0696-615c-4da3-bd3e-dd0e91a8c341"
        },
        "item": {
          "id": "1e36edff-6f91-457c-9d81-a420f328a914",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "9ec0651f-8f48-40a3-9f47-5579ffe2e7e7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "78c0b4be-a71d-471a-925b-cc45f7eacde2",
        "cursor": {
          "ref": "f1ad4d78-2eb2-42ae-88e4-e727d676f117",
          "length": 243,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "c866fe45-b788-49dc-8d12-2353dc964f5a"
        },
        "item": {
          "id": "78c0b4be-a71d-471a-925b-cc45f7eacde2",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "bcc21c8d-fe4f-473e-8024-3407d47387ce",
          "status": "OK",
          "code": 200,
          "responseTime": 38,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:225)"
            }
          }
        ]
      },
      {
        "id": "3b58b625-559f-4d27-bd25-6fe54b923782",
        "cursor": {
          "ref": "8be3998b-8b12-4624-add7-e590aafd3a4b",
          "length": 243,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "4bff99da-0cfa-41c1-87e1-c6b8bcdd8cff"
        },
        "item": {
          "id": "3b58b625-559f-4d27-bd25-6fe54b923782",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "21669c04-09d8-4bea-8a5b-6ad2d42506d9",
          "status": "OK",
          "code": 200,
          "responseTime": 38,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:226)"
            }
          }
        ]
      },
      {
        "id": "351fadc3-2d11-4f1f-a4c5-3acdadf8108b",
        "cursor": {
          "ref": "47a14939-2a31-403b-9494-88d7058a82ef",
          "length": 243,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "6edcd738-8e0a-4982-b7d9-de77e3850410"
        },
        "item": {
          "id": "351fadc3-2d11-4f1f-a4c5-3acdadf8108b",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "5d8d5e09-384f-452a-81c6-67b4215bc7ec",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 44,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:227)"
            }
          }
        ]
      },
      {
        "id": "a6b28dcc-0566-42b3-8546-b2291945eba0",
        "cursor": {
          "ref": "3f6fb0e4-82dc-47ac-88f3-b705bdfbbb55",
          "length": 243,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "845e2679-2eb9-4471-b1d2-b907bf2ce993"
        },
        "item": {
          "id": "a6b28dcc-0566-42b3-8546-b2291945eba0",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "1ea88b51-d65a-49b4-aec6-4c2773eefd42",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 40,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:228)"
            }
          }
        ]
      },
      {
        "id": "f0fee5ef-1648-4893-a3f9-b1613583e410",
        "cursor": {
          "ref": "b5a65434-7c8d-4f6f-bce9-264c58235fa8",
          "length": 243,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "41cde56d-9583-48cd-b2b1-6e749c359e9c"
        },
        "item": {
          "id": "f0fee5ef-1648-4893-a3f9-b1613583e410",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "17667d68-5451-45c1-9179-4368956ae027",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 54,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:229)"
            }
          }
        ]
      },
      {
        "id": "ed8d863d-8d39-4906-9517-bfe31d677735",
        "cursor": {
          "ref": "84896826-b16b-426b-b5f1-0b88b83c4480",
          "length": 243,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "81bf022e-6cd6-4914-b839-9b26f907b00f"
        },
        "item": {
          "id": "ed8d863d-8d39-4906-9517-bfe31d677735",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "783a3d47-4599-436b-8864-5597e0eebc0a",
          "status": "OK",
          "code": 200,
          "responseTime": 38,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:230)"
            }
          }
        ]
      },
      {
        "id": "0d7668e3-312c-468c-98d9-1e3a6a841926",
        "cursor": {
          "ref": "f9c2a207-e989-4090-a8be-e9db1cf95252",
          "length": 243,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "bf895a45-1349-4876-b286-a991a3fe943e"
        },
        "item": {
          "id": "0d7668e3-312c-468c-98d9-1e3a6a841926",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "1c3f3041-8454-413b-85b1-94607f0b7516",
          "status": "OK",
          "code": 200,
          "responseTime": 44,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:231)"
            }
          }
        ]
      },
      {
        "id": "df8d1996-d46d-45d8-8359-d6eb18788bc8",
        "cursor": {
          "ref": "2748bc2f-6325-4377-bb45-3a72b8e1b31a",
          "length": 243,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "17638a42-3ade-4e05-947d-3f9ccb2e4c31"
        },
        "item": {
          "id": "df8d1996-d46d-45d8-8359-d6eb18788bc8",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "6ac4fe7e-e929-49dd-89b7-95fed6b7c0db",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 39,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:232)"
            }
          }
        ]
      },
      {
        "id": "70a961ff-3a91-4502-bba9-0b9971f90806",
        "cursor": {
          "ref": "65659f7d-b008-497e-a5d2-8b301afd9cf1",
          "length": 243,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "6943d23a-ac73-4b21-baf4-07dc43b42715"
        },
        "item": {
          "id": "70a961ff-3a91-4502-bba9-0b9971f90806",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "b95ba69b-67ef-4850-b2b9-3d999aa56e07",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:233)"
            }
          }
        ]
      },
      {
        "id": "28f587b9-dbe0-4c8d-9e23-8bd096ce7c6a",
        "cursor": {
          "ref": "0e086acc-dc84-4b12-b042-c4035db0dbbf",
          "length": 243,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "ef621924-6eac-4cb3-bd88-4bcdc45fbfbf"
        },
        "item": {
          "id": "28f587b9-dbe0-4c8d-9e23-8bd096ce7c6a",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "586f292b-7888-4d49-bf9d-b95e183e858a",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 17
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:234)"
            }
          }
        ]
      },
      {
        "id": "37764c7b-a144-4b76-98a2-4c2526e53527",
        "cursor": {
          "ref": "37729056-8555-4dfd-a9f0-0c844dbfe7ee",
          "length": 243,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "33d94c4c-9204-4b91-8356-ee01f10a07ef"
        },
        "item": {
          "id": "37764c7b-a144-4b76-98a2-4c2526e53527",
          "name": "credentials_verify"
        },
        "response": {
          "id": "cbf771cf-e195-44ba-b488-3b89754a20dc",
          "status": "OK",
          "code": 200,
          "responseTime": 72,
          "responseSize": 17
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31c9bc61-4081-409e-8a5d-8a3f41a17873",
        "cursor": {
          "ref": "82b369a7-ce35-46ba-8638-4a7cda30e2ea",
          "length": 243,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "175d8d5e-d2ad-4641-8ae9-bacfd444d9e7"
        },
        "item": {
          "id": "31c9bc61-4081-409e-8a5d-8a3f41a17873",
          "name": "credentials_verify:id"
        },
        "response": {
          "id": "62df3155-0df5-4247-b07e-84c1733fc6d3",
          "status": "OK",
          "code": 200,
          "responseTime": 59,
          "responseSize": 17
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aeb31c74-3365-4d72-9a58-7801b25e21b8",
        "cursor": {
          "ref": "92d70b41-a28b-45a8-ad46-748a8650d1c5",
          "length": 243,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "a9ca2e45-785a-4501-9092-42feecfd8b20"
        },
        "item": {
          "id": "aeb31c74-3365-4d72-9a58-7801b25e21b8",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "7f8ea1c8-7b8e-4596-990d-997219d4023b",
          "status": "OK",
          "code": 200,
          "responseTime": 75,
          "responseSize": 17
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4f22ede-853e-4ff4-b747-5def2d146570",
        "cursor": {
          "ref": "b9e4b7a0-f245-47c6-956d-d8dd82ce2700",
          "length": 243,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "233ae73a-d0c4-4ce2-8661-2e1304f271fd"
        },
        "item": {
          "id": "c4f22ede-853e-4ff4-b747-5def2d146570",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "5c89bb64-1168-49e6-b709-32c64355da1a",
          "status": "Not Found",
          "code": 404,
          "responseTime": 36,
          "responseSize": 2337
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 404",
              "stack": "AssertionError: expected response to have status code 401 but got 404\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "c4f22ede-853e-4ff4-b747-5def2d146570",
        "cursor": {
          "ref": "b9e4b7a0-f245-47c6-956d-d8dd82ce2700",
          "length": 243,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "233ae73a-d0c4-4ce2-8661-2e1304f271fd"
        },
        "item": {
          "id": "c4f22ede-853e-4ff4-b747-5def2d146570",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "5c89bb64-1168-49e6-b709-32c64355da1a",
          "status": "Not Found",
          "code": 404,
          "responseTime": 36,
          "responseSize": 2337
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 404",
              "stack": "AssertionError: expected response to have status code 401 but got 404\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "c4f22ede-853e-4ff4-b747-5def2d146570",
        "cursor": {
          "ref": "b9e4b7a0-f245-47c6-956d-d8dd82ce2700",
          "length": 243,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "233ae73a-d0c4-4ce2-8661-2e1304f271fd"
        },
        "item": {
          "id": "c4f22ede-853e-4ff4-b747-5def2d146570",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "5c89bb64-1168-49e6-b709-32c64355da1a",
          "status": "Not Found",
          "code": 404,
          "responseTime": 36,
          "responseSize": 2337
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 404",
              "stack": "AssertionError: expected response to have status code 401 but got 404\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "03e93540-4fa5-4ef1-8e78-f13fb00d1bc9",
        "cursor": {
          "ref": "3507d889-6b6c-4c95-b598-eff0154d54d4",
          "length": 243,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "dd1a3329-41d1-405b-bf00-3da95a820fdd"
        },
        "item": {
          "id": "03e93540-4fa5-4ef1-8e78-f13fb00d1bc9",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "2c8a3311-bed4-4da7-8b56-362526974d5e",
          "status": "Not Found",
          "code": 404,
          "responseTime": 34,
          "responseSize": 2337
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 404",
              "stack": "AssertionError: expected response to have status code 403 but got 404\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "379f3a2a-c8ac-4631-a5bc-3d81e30b2408",
        "cursor": {
          "ref": "f53312a6-0bf6-4ce3-a2f7-d471d20ff2e0",
          "length": 243,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "cd108928-55b0-42f5-bd19-08ad3a0f8d0c"
        },
        "item": {
          "id": "379f3a2a-c8ac-4631-a5bc-3d81e30b2408",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "97cfeea8-33f4-421a-81e2-d233b675afe7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "379f3a2a-c8ac-4631-a5bc-3d81e30b2408",
        "cursor": {
          "ref": "f53312a6-0bf6-4ce3-a2f7-d471d20ff2e0",
          "length": 243,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "cd108928-55b0-42f5-bd19-08ad3a0f8d0c"
        },
        "item": {
          "id": "379f3a2a-c8ac-4631-a5bc-3d81e30b2408",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "97cfeea8-33f4-421a-81e2-d233b675afe7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "e7fd68af-d3c4-49f3-ab05-e8fd6fc2aaa5",
        "cursor": {
          "ref": "e40fd65f-1a10-4aa2-830e-fbb749f9fc15",
          "length": 243,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "04f24c0a-3660-497b-bed9-b7f9c04fd128"
        },
        "item": {
          "id": "e7fd68af-d3c4-49f3-ab05-e8fd6fc2aaa5",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "92eebcf0-a0f4-4d0f-85a0-21ef109f4f60",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 34,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "83fb979e-17c8-4ac7-a03f-cc2d7762dca0",
        "cursor": {
          "ref": "c06d21ba-75ec-4f03-9b9a-5d39701fd5d8",
          "length": 243,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "4779210e-4a1b-4c91-bd44-64d939f9ac7b"
        },
        "item": {
          "id": "83fb979e-17c8-4ac7-a03f-cc2d7762dca0",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "560f4162-8d1c-4030-86cb-2b2505570121",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 41,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "83fb979e-17c8-4ac7-a03f-cc2d7762dca0",
        "cursor": {
          "ref": "c06d21ba-75ec-4f03-9b9a-5d39701fd5d8",
          "length": 243,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "4779210e-4a1b-4c91-bd44-64d939f9ac7b"
        },
        "item": {
          "id": "83fb979e-17c8-4ac7-a03f-cc2d7762dca0",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "560f4162-8d1c-4030-86cb-2b2505570121",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 41,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "349bb9db-0b0c-44da-9024-baa271239031",
        "cursor": {
          "ref": "6e3df1ab-6a32-4c76-9a9a-f961150a6fa1",
          "length": 243,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "e9136ee4-33e6-4f2d-be7d-ef0f33033657"
        },
        "item": {
          "id": "349bb9db-0b0c-44da-9024-baa271239031",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "4626f357-e77d-4410-9cb5-f1c9d7d1d368",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 34,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:243)"
            }
          }
        ]
      }
    ]
  }
}