{
  "collection": {
    "info": {
      "_postman_id": "f5f17919-82a1-4db5-be95-0f985635313d",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "57427a70-c5d6-4d3a-81e8-1ac7494cb3ab",
        "name": "Clear Cache",
        "item": [
          {
            "id": "8ebd8a5a-24b3-4c31-926e-32f2bc9b95c3",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "6bbc8cd3-d5e8-4f6c-ac45-0fe8b9b3bdba",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "58559315-9be5-4790-be57-4fcd8914a2ca"
                }
              }
            ]
          },
          {
            "id": "19a36771-5f9e-43a8-a0f5-cf36239ebf65",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ad0cf42d-a149-471c-af0d-3c46f05060ba",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "39b43831-77bd-48ca-a5cf-b20301571596"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "d17ebf93-c549-4609-8e74-e8494b5f073b",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "07f14efc-32ba-45d2-9358-aba599e2a802",
            "name": "Positive Testing",
            "item": [
              {
                "id": "a5f55cd6-3ec9-4d4b-8e9f-efcfceebe39c",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7134c72c-65f2-47c1-bdac-ecb04399ec3e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f7480828-edcd-42c8-a280-579a69382221"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e2290960-8184-4f13-b689-088c6b6238a5",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1616f7dd-b516-41f6-a526-dc4a33ca73a3"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "57a169a8-e1ec-4aa0-ba09-1bf2920675e1",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ebd5847b-1263-45d6-bccc-845faf67b0f4"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7c6cd391-b21f-4b61-8c36-22b729e64a5f",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "3baa90c0-967f-42cb-acce-63199f7abf03"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f2c5b823-ba50-4b3a-8058-f045e05b9b9a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "111623c3-f47e-46ce-b230-6ffed65a7f95"
            }
          }
        ]
      },
      {
        "id": "b2a2db2f-3667-4e96-be47-d578e53bf4e3",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "3e12e433-953f-4807-ab8b-a92b671bb1d9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b9f5d9be-d7bd-42ef-99c3-93765c705d9d",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "6bd60c46-e71d-4e78-bcb5-12790017af7e",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a448a03-e143-4b02-aedd-73a6456ec914",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f534d5bd-9044-47c4-ab3f-225b9783dae2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f1b9a57-ea97-46c4-826d-63389f48dbed",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08715ccd-e444-4846-866a-98c7bc7ee099",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2afbde79-7784-4300-958c-cd3e786cd456"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd6de8c4-0ca2-489b-8f0e-9b02b2323524",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c132c20-42e9-4a17-9e37-790eef8a6429",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b1949720-bf5e-4f91-a458-f406af0754b7"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "e7b6ecd3-4a81-4733-bbf3-33e6a7852088",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a1a068a2-d0dc-41ab-8f79-5e1fcb3ce1a8",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d23f7049-3569-423c-9655-64a3650184e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5dc4693d-4dbc-4c51-a91f-9c450e5caaf1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79dddb63-01d6-4812-9f55-483e7f92e18e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14527a83-066e-47b8-ace5-3ae960206f36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9f1175b-e0c2-450b-8706-8986c08564ed",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a7addbf-532e-49d8-b084-3f239d1ba8ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "960e8e5f-ae5a-4d49-978b-d638598bf981"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a2ab70e-a50f-429a-841c-88427434def5",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "291073ac-e7d1-4943-920e-536413e6d3c3"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "5d9103b0-da09-4a29-884b-d68d4912f2a0",
            "name": "Positive Testing",
            "item": [
              {
                "id": "244c9c88-4b65-47f1-92ad-b8ddb18ca99f",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a54ff6f1-0126-41ba-879c-d7868c89b992",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "f4fcdced-68dc-4dcd-9d21-44f8520c7883"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "85f739b8-e17f-4965-85af-0b59114922ad",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "152915f2-0254-45a9-89c7-6dd35f8371a1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2ad1344d-bd45-4632-83de-5c059b9dbfbc",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "06782059-16d4-4185-b169-33170cb61f82"
            }
          }
        ]
      },
      {
        "id": "14cc732d-644c-48b3-8e38-dbb8f205c135",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "3420694a-4c0e-4d9a-9212-c5b3d97971ab",
            "name": "Negative Testing",
            "item": [
              {
                "id": "54091cba-5e7f-4855-80d3-3afd0e2262a5",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "216aa98d-e4e4-4b09-a9c1-40f56d398c7a",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c0fc36e-43af-42ef-858f-6d890d5bd155",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40fd27a1-9708-4e4a-aade-91be7629f423"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10ab6d62-1831-4f11-8ad8-5913a96a0fb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f5680f92-e419-43c4-b7dc-948975078a6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81774f1c-c6f8-4738-aa84-246b90cb5f32",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b644f5bb-058c-433e-804f-b02437768fd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d85ea858-c504-46a3-8f11-6b42b560c0b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6943717-1801-4154-948f-c1bcc9372803",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "326f4a40-6313-4afa-a781-4151e0c97422"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77e554ba-ab1b-4657-a35d-b21526799515",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2155c6f-6983-41d5-bc75-0c51a3c56450",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a298e9c-7287-4217-ba57-94eda856ed2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1e65830-8ea0-4b3f-ba9c-28266a98c81d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fad6956a-856f-43e5-b378-4f83d35e779e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7d62f7f-3755-4ee4-ba4b-9da89de5d9a8",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b957acdf-96e8-4305-a9ed-6d198fbade61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1896982-138c-4217-9964-e93c55f3d431"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72803edd-c5f0-45d7-a1a7-edb2b5a493fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6cccb909-abf2-4b16-a952-e0898eb548ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be85617e-73a3-4342-8106-875889cfcc7a",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42986447-77b4-4b55-9909-9e8e35f9a9e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbc23337-1df7-4aba-b4c5-92df125ff287"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e19c62a1-6cd0-438e-9b12-18b072a6da9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "87233ee1-77de-431a-90a1-3f6d004d315a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72f75fac-cfdc-4edb-95be-22603da48088",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb55d684-e6f4-4876-b15a-6365969a417a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c583d79a-dda7-4f12-bca7-6630b360cf04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "909a73db-7448-4dbd-a6af-e747ae0b0948",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "89049ad1-e56b-4ee0-a2fc-e524680f1e6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d2260ab-e6ad-4d28-8dfb-015f37ddde38",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4561434d-a1a2-47ad-91f8-10020ceb5918",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9dbf7c1-7bfd-4461-8ac8-c0b9af9ae2c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "385ab27c-c3d5-440a-be23-3ce901b5bb08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "182e1312-490e-4670-9223-7980eea571e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5987679-2fc7-480d-bae9-8fa9ea3b7570",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a0530b4-1d93-4561-adfc-0c099b4a9ffc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99b04490-a043-4e94-861a-f0f8e50e6868"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "075fbea0-4d1d-448b-ba6d-10347db9ba68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bfa123e1-838c-4683-9925-fd940821341c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92f8a86d-1ef7-483f-ba75-ef5b5dece696",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6466ab9-2758-42ac-9a00-e0c264daac06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf3cea8c-fb86-4a00-b403-7fed51f8b436"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31721033-0143-4803-84eb-16d69ff79d74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9811a8a2-e839-4cb4-a945-38c8f025ceb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3f6ca88-fef0-4a65-91e9-a8663f1997c9",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75e0bff3-6f7b-483c-91d9-c97c900092ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf5c49e5-f21b-4c59-b8e8-b46d77d35874"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca545e81-279f-41be-abe8-0f40eff875dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3bb6c3b4-642f-4fa3-a3c7-a4d759804af3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ef5ade1-85e2-4a05-8885-541d7d5a9cd5",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a3a5738-bafb-4b7c-b35a-1eff53941728",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dae8d797-4794-4022-9ff2-09db93d6f944"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69bdfe20-1c87-499b-bcff-5f933d4533de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "aa1fc1e1-9bf9-400a-8ead-a4452f0e6c41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a58e462-b1d5-429a-9ad6-d1f71895c4aa",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2690c43-2d21-4299-aaa6-b5b52d7e69bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e2943b8-895b-464d-8dcf-62650abd8d0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6d2b579-8ff1-4f96-aeff-b218d12109e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "07637b4d-0daf-4ed2-87cb-629c9c11fbbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13765b48-7fc7-4f27-874d-820017cad98d",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de7e2619-9441-49f5-afb3-7e881f2d9618",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "479e3609-7f62-460e-a2b6-4192d202def5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4f92644-628a-4074-b648-cd09a02c957e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cd5bc2be-2e3e-45c6-865a-ffcaf791df19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "922a8fa5-ea60-4192-b1f2-987713fa88f2",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cf46d53-e3ac-484b-b108-f731799fbeef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8f35d0e-4a01-4766-96f9-7a3c32f0866b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd1cef75-8967-457a-9f58-42259fe46fd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c4cb5c56-c441-45a4-ae4a-9501583cbd5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc15662a-deef-4cec-b43b-49a5304a1ec0",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "411f5187-87c5-4ff8-8074-f8ee5a37a15b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b09e5d7-305c-4e3f-b28a-c6fc9667c22a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0606eb02-b430-424a-8305-b1fa63ae12bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "49e95bbc-9c30-435f-b2c0-5a4cbdd87a91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9021c258-d834-49ec-8084-9ba692adc536",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d62377e3-10d6-490a-aecd-174635711793",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "830b09e0-7f4b-4309-8c6f-adc3409dea97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f2cddcd-97b1-4d49-ace3-c4b11a3c8bab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a50ac75e-1389-4cfc-a3ff-65063f0b312a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb163e58-c275-4f86-83bc-3a843c0e50e6",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9d45471-2ffd-47bf-a2c6-3654e9cebc80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4c8c307-eaff-4536-a993-a9a81ad41327"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94818c24-e5f0-4e35-9ee0-b2f9a0ac2c6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "859e726f-27d0-45d0-b35a-35d09ef62f64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d96c895-6b9d-4ab2-bc17-27dc58ac47f9",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d8ac0f9-cfc5-4446-ba86-b24b62ad4543",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3bf6a08e-52a0-4c05-85c9-f1879b7aaba4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "367fd634-b52b-427e-bdc8-4c575312cd70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "8bc61321-42a4-4e29-9a44-8e587fd9ec4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e891853-8a9d-4414-b0bd-06c06f74a477",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c74e617-28a8-4c2b-b2e6-b8bd11a2dc7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad752fb5-442e-40a8-8f8b-70eb3ab23c9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2e7d93f-573b-484d-bff7-ddce3bda4636",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e11e9ab9-659b-417d-a40b-3d8f9b5f12c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd8254c3-8182-4728-8d48-73b02ff53c24",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "084189bc-df0f-4ce4-b4ef-031dc2df3178",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f7fbd82-92ce-4656-98e4-ccb03c9d4add"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "794e535b-fec8-436d-b36a-5d56dfbb3861",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f6c8351c-5ad3-49e3-8d70-877062738df0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6bb93b1-442d-4f85-bcb6-725904ddd109",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1c7b15b-f247-47d8-bdfe-d984eb32efdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ceb15a60-f256-493a-ad42-8b695ed1ac26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed458da3-65a8-4149-b462-095e65e48545",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ac323bb0-3f5d-4794-8f40-fe6ea0d858f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0462c6f3-8366-4b11-89a4-ecd54ac90912",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "068887e6-fd82-474a-8e12-dd6f8f390644",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc35d8a8-29ce-45ef-82b7-d9870e8c5cce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5daca24f-8d7e-4373-a42d-f8b2c9445dcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a3a9ce91-081e-4454-847d-da052384560e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59fede35-ac2a-4252-a3c0-51abec55fb19",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64595662-9caf-42a1-b434-742adeebe526",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64060fff-f5ea-4755-ad97-00f24bd9d6d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c866eeb-dc8f-4b06-9cab-f0ff0ed429ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5de96eb4-a923-46c4-b572-ad397296c9cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fc3d257-7cc1-46dc-86e3-5706ae35d04a",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e415237-bb3e-4edf-ab00-31ed07780a8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24d5feac-b5fd-49c8-8175-eb9dcfd621c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc2a60af-2b0a-41f7-8c6e-d98a4bae2332",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "61eb3ac3-8555-40a7-889d-f6f179aac858"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c651f331-cbb3-401c-889b-6501eb0c3273",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc3f5bb1-eca5-40f6-bb02-d407cc9d5cd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fef97319-edc2-4242-b763-db5cf1530710"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96ea2e7a-1e0d-47f0-b417-ca814fae93e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "58212102-4dfb-489a-bd0b-02123222de84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1bf57eb-b597-42c8-9af0-907dc2238a79",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9d8c29c-3502-4357-aa80-2e338278abf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8740c85d-49d1-483c-b563-cc4cea195440"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3eaa7664-62c2-4235-8407-8307f3f90b2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b372d6f6-19a1-4f02-bf5b-45de543d1551"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73a847a6-1129-4437-a265-b1e693e1e76a",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f4dbf15-9684-436a-921e-77276c6efe3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1826e77d-6d76-465e-be48-a85159b9a8ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "002f90c4-7609-4df8-8be1-1814fef59a83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "74eca2ad-53ad-40a0-9aba-f5c725389063"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae13589a-2585-457d-aaf4-39000d27db01",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e81503ab-0fe1-4b6c-944f-4921ce4c006c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "653ccfb9-327a-4b50-8e64-a4907cb7e673"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54b29f2e-dcfb-4b65-a6d2-4d2b742587bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a50b3e97-e58c-43f4-8de4-f4f0faff719d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84316e9c-3b80-4a2f-bc8f-8c0cee20d123",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f536fd9-f163-4c3a-9476-665d7914218c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61056099-efa0-43b5-bc5b-7597450d2b45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ea85653-6fe0-49d4-82b0-79e53ea89d52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "845a222b-1f4f-44e2-8a9a-1f7ae9dee583"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6172338b-b177-49c1-9b8c-b765be3a6873",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee0098c4-289e-4e00-80b0-15eb9985dfbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27535cb5-3f89-42c2-9b38-6e50af2815bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e80a3bb-509e-4e6a-98be-31d318c659d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "07951c99-3aa2-436e-9445-f65bd73882ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63425f73-3a80-4742-8fa7-076d623a664d",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "824febad-42bc-4e95-bf78-76399bc251ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "396ea5c9-995e-464b-9ece-00653c28d6b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4872943-2b5c-4cfe-8392-a6ad47c280d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "822f54e4-ba8e-41ea-9e15-fd6771442a6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cdcf5f6-4d38-471b-b226-664add05cf34",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb5963b9-2d18-436a-a5f4-386b5be1e9ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f5c0751-ccf8-44bf-850b-e84048df1468"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e86a6010-a990-42f8-9809-a1c21f08abf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "788d6a51-e3db-484a-879b-1b8a2db34768"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8ce41c2-c09c-430f-8f57-b5485cd8ea34",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "feec70c1-9451-4fa8-9a57-2407e5d899f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d887eb5d-9d9a-4dac-8d19-4c25aee895b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1efced96-cbad-4118-a430-1e84650c3f08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "92f8351d-7ba9-438b-a4ce-a3341dc15476"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56ea40ab-e94c-4ae0-b5b1-12985aa2c46d",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4e3f3ee-cfef-4178-a8c8-1210d407a7ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7ce3b7c-10f9-49b5-8407-721d48e596fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bfd6180-a12e-4a69-bc92-6dcda89de776",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "95e2b0db-76ea-44fd-9763-4d106dc0c8b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "394383de-c281-4fd6-91dc-a8dc1be9b6cf",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58c109f2-2b79-4c87-a1c3-8a275f824ed0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8828969c-90a4-49e3-b790-d61271089ef4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6122189-9451-40ab-95c7-c313d5a63fc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "a7342520-9051-4d7b-860a-ac9863bf5785"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17dc4d06-2c26-43e4-a373-88d2216d4d2c",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fd2057d-b3e7-48ef-8e7b-6e3d29f5bbd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0dfe54ba-798b-447e-9dd2-905f20986acc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52cb3d76-a7b0-402b-b7a0-39ae178dab89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "50f8b7f0-e62b-49a0-aeaa-2908ea92e4f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1c29e18-da48-4b8b-a17b-5c74cdf8c1b2",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aca5a37a-f4c1-4f6d-8ac1-beba3aab3acf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c143127e-c4fb-4455-b38a-b672291ad51b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8ce7d35-0edb-4e53-8292-b22aedaec082",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a7cfe720-a14f-464b-b742-2278120f51ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f26f63d1-83c1-4228-a782-43f548805f7b",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e68e63c1-ea79-4867-91cd-998c43053b9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36ccb512-e4c0-4bb0-b6be-c619cd01d21a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d40a8ca7-7afe-49fc-a5a3-b2a87aef1b2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "caab5832-976d-498d-be80-56aba8a90c85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97fd8f73-7031-48e5-acc5-e4e29d3045ee",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffdb1c63-e427-42fd-9cf5-0ef2cf7f3bae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04511eef-c1da-4f7e-98d5-efd162a86711"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4208791f-92b8-4abd-ab77-bfedf2bd9b14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "f81b5e8d-dd65-4910-914e-188108f4ce5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15e0b542-0acf-4c5c-a44f-310c00a9023e",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b69715b-be2e-4b0b-ad21-83ed0bb91ef3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "766e8383-5408-4fe6-aaff-fe23a47842a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1795e22c-9733-4043-9801-ac032ffa29fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "50502320-6a0b-4bb0-823c-1c44c6f95ecf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af12eeab-43a4-4ea9-a8c8-cf286bd8c5d0",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b65f5f9d-bac8-432d-aeb1-d6ff528d1180",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ca851ef-5edf-42c9-ba55-765e4ea7a903"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f179b95-2a89-416f-a77b-0313e6874792",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "8d34a8fa-4504-4030-a1f0-7e9ce5cf838f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a78f64d-8fc8-4595-8dcf-7181a55a554f",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bb02abe-4dfd-4385-82ab-67b04638c32e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d518c01-c056-4af9-b2a9-efcc48617a69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f288be96-ba8f-4aa9-adff-d1d458536734",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "cf05000d-6ade-4bef-b49d-460a79abe501"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef34c56b-c081-42c2-b7e1-460a57192805",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b96af16-7b3d-480c-bc0a-d754e5b8bb1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "573b09c9-7d6b-4ae2-9f0f-3bd5e7941e88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fe0db01-86bc-4845-8e08-15cf3ce9aaa1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "dc86e124-458f-4252-b64d-918ff0cf6787"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1e3811f-ac02-41ee-a447-eb846e728c4e",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c01d0dfc-9f19-4b7f-ba76-cda4dd2a629b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59f84072-05f4-4f55-abaf-c47b3da37971"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aaedd4cd-6689-441b-9748-e4f196db7326",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "e3d0a759-d06c-4b2d-a23e-dfca9cca1fd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b4f023e-bb98-4298-b583-1e18f4380293",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7970d050-161a-460c-9b0b-69e17656ada9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a82bf917-272a-464d-b190-7a44ddfc4e59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe6cbda2-07af-4bce-b045-a4b27b9b2f84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "7eae2c11-de70-4ffd-85da-7863159e9877"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6579a556-2f30-4f0e-a11d-a2c9649a89e3",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ce572cd-f2a0-4ccd-aadc-f3de59ede004",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "294a0d59-683f-44a5-885f-7c57a56e7727"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "660dee36-5103-498b-bbec-3afe1b5545a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "39bedfd7-dfcc-4b7b-a54d-ac94a432f0e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18ce1b4e-45d4-4f83-ac58-449451313d36",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "256d71ae-edb5-4d5c-ac33-ec8ed2c6d3fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b27d1a24-88d5-4eff-bc0b-229d16e7d5bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f786e8f5-ed91-43fb-aa23-f8afc106018b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b7e2c4fa-1b2b-4a33-82a9-a7c4125795cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "180f1ea5-d2e9-4ddb-99e1-bdbb0b08099c",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d183b04-21b8-417b-a0ac-aa6934b6d3ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10aa5e70-2565-4439-8890-c644e781dde1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8a943c8-fc3b-48cb-abf2-5051dcb6354d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "37ca4157-d143-445b-8694-ba968da82eba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d468a0c-7bcc-47ca-a76b-83c27d5cff00",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de2f940d-3155-4695-99f7-6003a741594e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a1584d6-7b93-4ba6-b59b-8a8ee105b17b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4a3fa5d-a610-4359-8e72-d66ded512f35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f69f4f6d-8310-4642-a670-0e163445dc8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2aaa2e6e-075a-4c40-abcf-cb6a6813755d",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "212229ee-fa7c-4382-a717-a300433fbc4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61af49c9-2272-4813-b766-19e0d497881c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f900c844-3b2c-4ca5-a40f-bcee68a65400",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "14b2b2fb-e147-484a-8404-7049051d540f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48d3b852-1029-4286-90be-ee4eec7cdbe1",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f056e0f-2627-49e0-b1cb-8e8c4756dc02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "338daa48-7446-4789-8593-bfa941f919c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ec911c7-3d36-4949-99d3-cbdb0809d25a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "a8ce2f98-6df6-48bb-872e-8ed20d139c9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8705649f-3f7b-46b2-9ff1-cc48eae0fc2e",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94571d81-587b-4a84-a70b-be24ab42ed19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74129914-d09d-463c-a919-6c24f75722fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2314204-aaeb-43e9-9295-7fad78147740",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "8175ab37-6349-4928-a010-70fd94f98016"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8a17272-e713-4c5d-a52a-638fcfbbb58d",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "753f8458-1d1a-4224-a193-4183109ac411",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5c6cd49-bb57-47bc-81d7-d3da17bebd53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f58f0ff-52fa-49a2-af7a-5d7dbb9e7566",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bcba37e6-986a-4739-9dde-4ad71b0fb582"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8d08c67-a33b-4aba-8821-776f724b21a4",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9df875e-7928-4845-b398-b5c97de8ff39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8de8322-3bfa-47b3-977b-b1818301a55d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "530136ee-348e-48e9-83a9-9c0132099583",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ef80ee47-82d8-44c2-8b15-8fa24084a14d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6d661e3-4b38-43d4-bf38-255097675f8d",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c246d43c-6410-4a4d-90ba-622d06595bb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7590c9c9-2523-458f-ab57-2eb01b8331d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56152155-d062-4f30-84c1-8b845c6b380b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ce7b24d8-77ee-459b-8c00-0ca3762192d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1beef81c-de51-4f86-b6d8-8f886814c94e",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e12130e-935f-4cfd-927d-f9e0b46caa9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a472c47-0ee6-4529-b0b1-13be48cac6eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb8fa91b-8486-4e32-9063-6a3e1e969100",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "f6014efa-8211-4fd5-beaf-14002ee2fe65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e948101-3e94-49ff-92e7-5ef85aa265d7",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a93fb5f7-a70d-4870-b2c2-033c63abe07f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e85ab4c2-60cb-4148-9e5d-a8b196d640c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1af21140-22d2-4fff-9097-c73837ead7f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "7a8403de-88ab-4616-b340-fc61b51f3fff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f594166-0f03-4339-bf6e-dc374e3cdb2d",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ebfa18b-cc58-4922-b3d8-f3807693995f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14624a55-8398-4a4b-ba2e-95495decbd66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6fd1641-aad5-497d-859c-023d26d207a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "f3b42fec-eed9-4a6f-89b8-b77a9759bc93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70b16296-fd27-498d-83fe-40f59c1cbdd7",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29e8640e-348b-415f-b22b-1876e98ff86c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a737055b-0f2c-487d-9e1c-87c5e8ed8f86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "480355f8-db63-4979-9c4d-4cfe6bc148f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "aaa5d351-4846-43db-9bbf-9de9dfc5efbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52c24fdf-946d-4ff9-9cc2-42af67750665",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e8c2ec9-ffd7-4208-9ac1-4d6e39febf93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68f478f8-dcff-4fad-82f4-07170133ceac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "053998f7-5c58-4540-aa6c-cec4d56522a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "1cead983-241d-4335-9c50-ff28e1f0de85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a96785b-a1e3-4c73-9a5d-ed6d65ffecd6",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2af1776c-8227-4979-b22c-7de67d0446aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5da3249c-5048-47ff-8d44-aa89658f6aee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e21613bc-ffdf-49e8-ba0e-cdbad8ca18b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "96d6971c-4172-42b3-b02c-e46520c2388d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21e67cc7-8e62-40bc-abde-76393bcda4b7",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a542ed62-d33d-4ac3-b2b0-438f134713fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e48a7218-958b-4ac6-8029-a6df9866c1c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a4c925e-b9bf-453e-91fe-211dca128a2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "84adfe19-38b3-46d5-9daf-c8adbdad4a06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ee0f76f-c68d-4aab-8a66-e3f753b25ffb",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27eaf7a5-3fa5-4be2-a086-791e99fe279e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12a9622f-a2e3-4469-a4f3-a4c718e14434"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "686d34b0-04d2-41ca-86d7-5ae0ac44149c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "c4903f0d-c7c8-4b66-a1b3-a4e8b3e1f4b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "931fdb07-1069-4836-b9d0-ca8470a52cf9",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a097d85-803f-43e5-84ae-11ff1c7a954b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb4a93bf-500a-4dad-ba03-88ab70f06c08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57c8b92c-1707-47a6-be6b-79342fb6b210",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "12a48391-57a4-4c53-a971-cd151b4eadbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf834110-deca-48dc-9982-8be9fada9d3c",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f85ddb71-b4fd-41dc-acd4-b8edf2d00a42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3fb89ed-4502-49a3-b682-1a339d9177ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61a19dbb-7606-46a2-935a-1611324efaeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "28f1fc05-fcd1-4d93-9dd5-1c8d1e54bd42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a857d0e3-47b0-4539-be1c-06b4e68d609b",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4758757e-08b0-4d22-b3b7-320e491dedc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "943d26e9-c107-4598-9924-9d5e8bc047d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e79238a-08c2-4ee6-970a-a1819a454ece",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f33d4e47-efd9-4cc3-9b6d-8265c2f38270"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae79e1c8-d17a-479d-8764-ee9350300099",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60c6c7b6-31ed-4a21-b38e-0398b79c8125",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96ae45bd-d734-4936-9468-438d3c9c17a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d320f2e-b8da-4a23-a9f8-4f51f9f1acbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f6439287-a92a-4af7-9f28-0a7da2eed203"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcfebcb1-d863-4475-a86c-91d75ce24123",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c03d7475-88aa-497e-a2fe-69c63cb1f07b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77ce7a2d-959e-45e9-be0e-b4378b8d3f16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "589fe202-fe13-4c47-ba2a-af30e685c51a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "98ad2bdd-ae17-4ae1-aca9-0f3c32106e86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f841972a-4a70-4c5c-a244-24b0f1b29b4d",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e01d2e27-e063-41a9-ac6c-625c7c7d29b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cacebc91-6f78-463a-bbe9-db5ab59781d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00193400-0ed5-4154-a8b3-405b10484c7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "3b6417b4-f3c2-41a1-8b99-a418eab97ea8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92e8aed2-0b7e-4970-b6ea-e090c9b1d6c5",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "209edb82-aeeb-4035-80e1-8245b6ffc09d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cad38964-46b0-4100-ab83-60f434a6c570"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a338ab38-743e-45f5-8a77-53b5dd8640ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6ab70a68-59fc-440c-a5e6-654e07004140"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02b0f328-757a-439b-acb3-0ffa55910f8d",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a62ceb22-122f-4259-a8a3-c268df972f7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00961b08-5bd9-4066-be38-7e0d72834973"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e8bdad9-5c79-400c-9654-315ff74f7c0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c7e22cc2-95a0-46ae-8d36-5be3d1272ccc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8624f777-2b5b-4839-9d57-837ed35a4294",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7f0497c-95ce-4226-8984-9c1d111c3601",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "924a2ea8-42e4-4da8-a2d5-b91874cb0b74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c86ef9a8-38de-4c08-82c0-6ccab7ce909a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5e242d89-9e11-4937-aabe-ce651fac3621"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80a3b033-5bd7-4db5-9464-842ec393563a",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65490c72-8849-40e8-9d6b-35fc082842ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f75c472-0c6f-4705-ad01-f45c8110cb87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e87a2da-4805-4dd5-9aaf-087a0ac877d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "08e65387-3db3-4a39-b45e-3a48c54fc636"
                        }
                      }
                    ]
                  },
                  {
                    "id": "957ecd27-886f-401f-8037-ead2bd9d7bc1",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c631c02a-8eb6-40b2-995c-4969814d1af7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1106a1e6-cf0f-4002-8e50-0bf20ef0f05d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51321186-32d6-4fa1-a758-d812e5549aa0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7f3bfff0-a8a2-42e3-ba20-2c18770342e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08393acc-f1eb-4bbc-a7f1-2838fbe012c0",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "517aaa79-52dd-4970-a8d6-8e33728953ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8e071bb-d8df-44ed-90ea-32aff9aa8b32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80063cb6-29d5-45db-8bf8-570ad74db347",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "75ab50f7-5550-45b2-b8af-1862f860602b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0559f991-05e3-40b8-a513-b296a5de3208",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c186fcb0-2101-4313-8c6a-cc661e66fb1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a23c4fd-07e7-4c32-8280-4330cdabae08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d18a2d4e-66c3-4853-86e8-ff9abbfe898f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6259e21c-d93f-4f74-a415-26991deefb29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b04d9d7-e44c-46d5-ad33-042a737c94f8",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a2f9997-1de1-404c-8f27-0c3b3dbd8036",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56500639-c58e-4754-a32e-6a4a7eef19c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fc217ee-6e87-4f99-ab9f-87f021bf586f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "148380b2-dc42-46f4-b7ca-06a539158155"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6ae2d76-cfa3-45af-b26e-29c914a9b6bf",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57cada45-0abc-4d29-9d79-90d063131c26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "590c6397-1463-46c2-9860-6d97885b62bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a96f17d2-1257-481a-87aa-bb3273bf6eaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5d4a226f-b2b0-43d3-9d8f-ca3d9f57f8a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a93461b-a864-49d0-baf3-c49d1288747b",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a820d01-293f-472b-a433-c6b40e3d5977",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3535fe3e-6442-4125-92c3-af4b6ae21c24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a99f383b-1a51-451c-b638-22ac6e332d31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4b82ee3e-1642-47c9-9fd9-7d4b5a6a8c08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7f068b8-8d6a-451c-b5a1-f1bd6c3c4a6f",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c048f484-f0b3-455c-af57-a127869eb365",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70c842a4-851d-4b13-803a-a47179bc95f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f42fbf7a-b222-4782-8e50-05c890dc8a60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2f4dd36f-9230-409d-96ec-0dc52194eaf1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28d37dc3-b053-4383-8691-97eaabc615e3",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99500da7-2af8-4f6e-ae53-0e0cf92e7954",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8bb6ed74-3ad5-403e-bf59-2269c97d9ed4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14e1de84-3a2f-41d2-89b5-a440dd56aedd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "db28d343-77dc-41d0-bc4b-93872bfb1bfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43c614b3-2eb5-4aa4-ba98-a87d59b815ce",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dbc673a-cb82-4612-8ef1-c7eb642c691d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b61bd206-ffbc-4916-811b-2a9ddb94325d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b2d7e72-370f-4ff4-8b8b-52f5d199eb62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "72512168-1c5f-48d3-a0ce-0df7f12968fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07111b53-eb76-4e93-8b20-09bb69cc68cb",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3a2a7d6-f671-4804-aa06-b4ca1426a69f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3449b1e4-f5f3-4fd8-a740-dc12ddf70531"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0393ab0-3ac5-4963-844a-f4a310a53f9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b1792e95-2113-4fab-9653-48b2e2994187"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2b4af2c-7a41-4755-8f4b-7c5d9e07a52b",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91f9a7a3-4b25-4d40-9eb0-1d63bc459ec2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22a4af7a-9994-471f-aaae-5942a2eb67c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "594c2364-be9c-4a0a-8fb6-b260c15d98df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9df33bc1-00ea-4f4a-9d94-c7a08c0caf1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c84eb734-6648-4434-9b23-37c690c23a34",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "baa182a2-dd27-4f83-8e80-865f6db76b87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "def975a9-eef6-4621-bd62-a1ffeb7ca2ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03e94fad-5a6d-46ec-a00e-66b4a60df141",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "91bc6c89-1965-4c0f-b237-27f96254f940"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbc36cbf-e0bd-4ddf-b44b-ca5c506fdb77",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8db46293-9271-4a52-a5bf-dd9f177e3739",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3fb66ed-09af-4725-ad14-d155d5d9e7e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5e4a9c5-3826-416b-bebc-c6341dedd6a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "cbfda1bb-32a0-4f58-bec4-4b6ae77edb2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90b95e96-f4e4-4dbd-8e92-31a0ffe4d54c",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6803011a-ab95-4f8a-9e4e-e280e35c086f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50ef848a-2527-4cb5-b0a9-3154ce1b2efd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d6684b7-12bd-4f78-a189-bbab00f3268b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "474cf81b-846d-4860-a4c3-a28b01d9c0e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52e8521c-1491-499a-a393-985f7774f15e",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bcb19f0-e3fa-4ec2-ab89-c6005829b111",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6fc6ead7-950f-4aed-9352-41fe5c950734"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1005eb88-9ac6-48b4-8b3a-0ab8117c8603",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "0c021941-0a41-41c0-bf48-c4400bdf1915"
                        }
                      }
                    ]
                  },
                  {
                    "id": "659006ce-09ea-42aa-8fc0-3a2634c20310",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3712853-61b7-4481-b30f-73af3fa2ae57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63908a43-5c5b-4e81-bb6e-0e83a2a1671b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74f158cb-f7be-47e6-bbbf-103036414c57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "4930a05d-952d-4118-bd52-b61b70ecd3f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fc73dc7-502d-43b9-82e1-1c55dfe72016",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a295dbf-0480-4289-951f-fa66a81214d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0ed496f-f284-40da-900a-a06551f5e327"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82ece2ac-14cf-46b4-82fd-24eb290fdde0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "4d4e4b68-37bf-4d4b-9f07-180b9e5140f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "559f3263-d272-4ce9-ace5-ca86eb366a9f",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70299049-3b10-4989-b69f-300ff7d9d1b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68f5026c-9345-4f7b-8440-5155e5011449"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9f107c3-2635-41c8-8936-42f6020034be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "f33af921-51fa-4e7a-8397-996d21732643"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e58a8ad-4f7b-44fa-81cf-2d71b7d61199",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55bb1de8-96ad-4831-a4d7-7efb67f636f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "feddeebd-572f-41dc-a30a-5a2ad92fb34a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fe817c6-d475-4c37-a1a4-06a8624265a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "51a702bf-eabd-446e-98e1-0c1468790046"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d31fdb92-cae4-4e4c-a0cd-93d0538b7df7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f348e45e-4522-4027-bb81-1df7865bccb6",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a4ce3cf-9f2b-4432-b3ac-8187ca2a995e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7217ac1f-05d3-48e7-9825-ec88d7cd9bc2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8839016a-80c9-4f1b-86e3-e3198540c88c",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "886fae54-b8f7-438a-b948-78fa3cf0d04d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edfa2f47-04bc-42d5-a058-2ccc2cb42f29",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8cb15f1-d0db-474c-843d-95b3c3f91d01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6f690760-8636-4529-a370-0d4f2f692e63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cc82c38-ae0f-496f-a956-847ec75152f1",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "6f970d0a-a0e1-47d6-a09d-f3cf179ff24e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "68060fc9-b642-4148-9d82-4e04a2c4a638",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "29a0f669-ad1e-4820-a09b-caf4cf5b8808"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2a93d213-6052-4335-90da-c4cf16fdc1ac",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1b0220e1-d41a-4539-a6f2-b5a9354c338d"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "15047991-b0e2-4576-aa83-e39be78206dd",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c97f3560-4f58-48fc-937a-105533d187cb"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "e87b502c-93fe-409a-b93d-2e3bcc527b36",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2cacae31-f120-44e9-af01-50ffcaf5e713"
                }
              }
            ]
          },
          {
            "id": "ebb3435e-cba9-46ba-b88d-0ea7d76fe2cd",
            "name": "Positive Testing",
            "item": [
              {
                "id": "0b9ae80d-858b-4d84-9d6d-8f5caf689e6b",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0034800b-1e08-44b3-8e4a-4e4080960862",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json();",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json();",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json();",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "37a121ed-62bd-413e-a76e-1afbf69fc53b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "486ae79b-ef6f-4281-8764-35e0099b3895",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "5a1bcd55-7e08-4711-b18d-31e3fcf207da"
                    }
                  }
                ]
              },
              {
                "id": "9c7c2cb1-e51a-4f78-8ff2-ae4a606a4ae3",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1031e2fa-f056-43a5-beef-71feaf86d20a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d5905768-0342-45dd-816d-7e077fb2a42f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "acce2d93-77f0-49ce-84e7-872d69f41794",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "fcfa8c01-48bb-4561-a455-8d7529f6924e"
                    }
                  }
                ]
              },
              {
                "id": "3d25b4e0-685a-4a96-b57b-824891d09950",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "52f40c96-7e96-4802-85f0-318c62aef47c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "940bdeb4-ab2f-413a-8b77-8abb7799f961"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "93df30d8-1072-493e-b6ca-c52d98e537ca",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "16ad78ff-fd06-4fd4-9afc-8680b7c06e3d"
                    }
                  }
                ]
              },
              {
                "id": "5fa5c555-7d7a-47ee-a4d0-c6bb1bf701bb",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c266a106-70a1-47fb-ad32-d87895669677",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "895949be-f18b-476a-8d34-2b02197c49e2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "925fd845-907d-4e2f-9eb9-9c2f591ea3f1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "75334471-d690-4023-a7af-85cfa3fa4666"
                    }
                  }
                ]
              },
              {
                "id": "3c73fd9a-92fc-4d63-9cbd-d7db1d2eef2e",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "62b2e72d-2c46-480a-b96c-d1c5e41d686d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "10139fa4-d5ea-483a-9226-6cc9b1a44054"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "393da198-55b2-4c61-8031-ca4d36315044",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "d260a77c-f8fc-4cf2-8e70-48c7634a778b"
                    }
                  }
                ]
              },
              {
                "id": "a46bd1ee-23a5-4fd0-8fc2-488ea3e5bf14",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "80f8b208-d376-4a90-a673-feebddad0f5a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f9296553-eb08-4ebc-881f-787fc46ae95b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6cbcbd89-1e89-4f59-bc16-7fd9e258fffe",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "521a9d1e-14d0-4070-9821-f24db7f1c7af"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1af2e796-3353-4838-bac3-c7ee7ef0c69a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ff912572-98e2-4b2b-a40f-5ce429149f57"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "0006b549-170e-41a3-aed3-044b34d26413",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b9bd392f-738f-4703-bd94-ee1808f785ae"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bf6571a6-5912-4f12-a252-43929818fde2",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "5a1a2fb0-4a58-4bb1-9ed8-761ea067134c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cebf193b-e8df-40a1-9374-d31cba7942ba",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2b32d2fb-6f33-404f-b589-c89f43185ea7"
            }
          }
        ]
      },
      {
        "id": "2cfa10ce-89ce-446b-bd80-897b7c7db429",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "1b221fc2-960d-4de8-87b2-28a932a5470b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2957e18a-f3a9-4220-ae50-e134ff1894ce",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "a79e9da5-a49b-4b01-8350-de3b0413a037",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88cca8fd-6a59-4d22-8afe-6f88cb9cbc71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da17d560-97e6-4a82-89ea-99cf23062f5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34116b87-771a-4592-90b0-e8579548906c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "8c255180-5dfe-4dec-924e-fc6bac5db472"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5ccefb1-ad19-4dd5-b1c7-5cad381413a9",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b9985a6-24b2-43b5-aa4f-5da047e47b31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a8d6559-0f4a-496e-88d1-12425e326b3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5f74420-904e-4ae9-b3e1-88db280dcd71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d827cf22-4b1c-4918-972a-16315ed00aa2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14adf318-8453-4187-8a38-7304b450e5db",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51d1cfd1-d376-4b29-8afb-9900f3bf7adf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f62cf62-81dd-4d88-8807-83aceb04fba5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed530a83-6e81-4e3c-b5f4-ebd7016f3ad5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6efa380c-bca9-47b2-9ecb-c953bb15cbeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aef38f1f-593f-4be7-9b2e-a5f54ff95dfd",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9f97824-e60f-4804-b002-87c05b09e3fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f05ded98-f849-49c6-9f9d-10c3073f133f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c36370d-53e0-4300-bbb1-8b629e818177",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "62a634e8-db30-454a-a838-a6434fefdda3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "379d3d5a-ef9c-485c-80b0-613acf8c5c90",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0d4cb4c-7e06-4d85-9b46-c0423ab9941e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06f14e64-b618-4058-ba9b-fdf06744a3b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "427d4954-81ec-417e-80f9-660d94a32bf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "918f99cc-f8e8-4f64-858f-7d670bc06d46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3d0c1c7-1895-4e5e-9580-d1beb7f9c998",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4f4e556-c9ab-473f-a62a-926cca4dfe79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4bbdfc1-fe5f-4d83-a8c8-c17fe5d155d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fc2cf44-ecd1-498b-876c-437a0bd740dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1695b54d-a253-4a50-a2c8-b5ca95d87500"
                        }
                      }
                    ]
                  },
                  {
                    "id": "709e1778-e5df-49aa-a781-aa9e80fdf450",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77b0217d-c670-4868-99c3-96130b955af1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "360513f2-0f9d-431f-96f9-480bfaf259c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d37a914-5934-4ae5-a360-9225b8aec542",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "c605159c-86cf-460c-a2b9-b67555f2e164"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d51f7563-4902-492b-9836-d9813ae9f69b",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fae142b-17e0-4fd4-9552-b71cd22972c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e386acde-e394-4843-9b64-b9523c4f3e3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "715eabcd-fc99-49ba-9ae7-a7db9152149d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "98864d08-3eba-4e8c-96a8-be0d5cbbec0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0b31ca7-b3df-4840-b018-80848e1b88c4",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95ac541d-c6af-427d-8440-c8e879b66ff6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b919cc52-d2dd-4033-8c41-b11b903d3f90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96532396-929b-43a7-a753-7a2d8b0ae0e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1738f21e-e3b4-4a88-be33-e84cb4d9e90e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5ca6dc5-907e-4edb-b7ed-fa2447764434",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6eea0253-ce64-4b92-8bb7-d2743a711ed0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25e2b9ec-1196-45a0-99ac-81b1924494fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebc24c1b-7075-413b-9761-4e281383fa0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9dc26ed6-72cc-4d2b-9ebc-e8ce90fd9571"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6a6b307-6ccd-4b34-8ba2-51b335acab27",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ba416c5-dd08-461e-a304-3587cc4d1167",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3812cfdd-b4de-443f-9ea8-9e5207d82c19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63a0a0d7-ae69-4c83-8a19-53ba2d4d917b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "cb07e736-ea34-4143-8de7-44dac8ef0bbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "585fb530-780a-44e9-814e-cf32c0b93cc1",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a046b9f-4334-4b0c-9e9a-96adb28ec21c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85cd8242-cf76-4822-842c-0be0a914f25e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32d0bffd-2e6a-4513-be4a-6f7526071791",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c3b92de7-82c7-4fbf-b496-81e8b04cd032"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a533b9b3-e0d5-4f04-9d75-c3fd32f9f464",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f2cd29a-2fe7-4193-abd7-5360d83ffcb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc4a325e-fc87-489f-878e-ff753e1a34d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e057422d-fbc2-4759-a347-e73435ecbb1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3d8e8877-1715-482d-bc1a-8c3cb889d9ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a822003f-2d63-469d-bb2a-ab414221de57",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bce791d-d69f-4aa6-b216-e02796455571",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bfeffe8e-a1c6-4eee-b6ce-010c803477cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3207be81-2368-4f9c-b406-d0bf0a3a366b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "704709d5-b64b-4791-8c52-a026defe5b36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2805b7b-3ddd-458e-908c-7b836f8cc943",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f226454-8339-48f4-86ea-7d14fe686931",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15c63694-0b33-4dc1-9713-8dbbdb1f6924"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6340b93-cf16-443d-a16a-aad4080369b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "ab221fce-e451-48fc-809e-aa66508da6c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f9ee78f-fab3-4310-8a0f-8c8b955d914c",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88eb858d-6a39-486d-92fb-9d1b3187b37e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3bfcac9-0001-45e7-8481-72250daf8fef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d13c0ef-eada-449f-9b0a-d30e31c7a484",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "1007eb7f-693e-467d-97be-75b2c320b001"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d3c6918-5958-4c70-a23c-c0c208a2d84a",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbf05cc3-9e12-4b6f-b13a-bad78d1db28b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f84b8307-5a9b-44cc-8828-4de5dc491f6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a8e6713-331b-45fe-a299-7039aedcf5eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "11984e3d-0d29-43d0-9d02-5f1d494703a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e8fde2a-0e2f-4341-b337-64bba71b5647",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2753781-4c91-460a-b824-821513b4c0e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0eb4b26-7f8d-4ddd-a7e8-447f436aba12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d18dec11-d75d-4607-886b-8d8d232b0944",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "947fcef9-be61-40f9-859c-5c6fa4eb2e62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd5a752d-d2ed-41cc-b08f-9b5be763dbc9",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "641bd653-3377-4dbc-a9b6-2ba0864b95ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f75edadb-8e9a-497a-93bd-90b11f1ed84e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df16d1c8-7b24-48c7-8293-38a2fe8ad63e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "39057ea7-a10d-4f18-9473-165c0aeecf08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43d9013b-efeb-47ec-8ef5-c4183c2d4b67",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7da555f5-7809-405a-acb7-2350ec6d529c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0993334-e6d8-4d20-a289-ea6c7cbdb2ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b40153ec-abc8-4345-a01d-a9beb7920382",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "00a6ad44-3a8c-4e21-aa5d-04907a61283e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19f5fdaf-8607-48b3-9785-869779a46c83",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92011084-38df-43c9-bbd7-85194aeac269",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a87eb5d2-f6f4-42ae-b6cb-2e7d59845584"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78e38980-c7b0-4b03-a6f5-6eeadc3138a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "019db31c-18a1-4553-a474-563e5b5b655e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c193ba68-c5b4-4ace-90f5-5a6201602406",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8fe2d22-ac75-479d-acc3-5cf1dbda0144",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2bfbd84a-afc1-422f-876f-5763087329af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e22fc889-2fb4-4e2f-9092-1f8e629c0a0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cb349634-56ce-440c-a9ec-4621841f7b37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f4b74a4-9331-42cc-aabd-f4bfc6c1c282",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35d7287f-c262-4415-9166-b91add5e913f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ea6abe3-7f59-4a4a-8ba2-96c9d05cb5ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a0b2e66-b510-4a01-9bcb-31c524e3d815",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6d7a69c3-c6c2-4664-b5eb-2427929b6ba1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7167b21e-0ac5-4817-b257-cee4de68c979",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43bc2094-9a34-4805-804e-a8bc692ab723",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88d22590-6694-48f7-ab3c-8d7251c61ac0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34dd6944-edc1-4ac6-947c-31601103a7c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "afbe4fb2-93cc-45f5-a9c1-3a14eb6d780f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc4f38c8-cca6-45d4-b298-700c73b31fab",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e24225dc-0e82-4f51-b59f-e13dd570f5bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37bbd9dd-d894-4d68-8272-53f9acd84c34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05100234-eea0-46e5-9f94-38e069148565",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "915e0963-1152-4011-8475-68c0dc63eb5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4afea48-4c16-4617-95f7-f3f0faea0f55",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87a5ef8e-f67b-4266-9bd3-6e560eb43a35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c9eb4bf-c679-45b0-a3ad-662b80542e15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "795eaaec-5a26-4c6c-8f78-e35af34e6ed6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e31cd42e-6cd9-48f4-a1f6-5955142e9a29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c91b15a-b497-451e-aa88-fa97dc6dff8e",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a9ee62e-e2c6-4070-9832-bbb8555e1e0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54ecf44c-7ffc-4eac-b74f-4ccfa9f182a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "780aa553-51ab-46d1-82d2-bd534f49d8ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c25d0f2e-a2b7-4304-9755-afbb4e3ee7d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c607637-fa60-40ae-bb93-7379969c60ba",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03efef64-6324-448a-bef3-8fea2b91f6b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c483692b-279a-435e-9689-a9c61a7b6af1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f42ee484-33f9-47c2-a8d9-18ae9ada8c04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c422f0ac-10cb-423e-bb38-682118d7c10e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcaefe2d-ae40-4815-8aee-d294699b7791",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba0f5df5-63ae-44fb-829f-8fc1e1a8a52b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f5f637e-e191-495e-a7fe-1554712bab5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "449f6a38-f14f-483c-bf2b-0a2b903b1d36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c5f0652a-b11e-4743-81a3-ff2acebc69a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aecc8a80-b69f-4930-9530-a23bf8f824d8",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e46b44a-4014-472d-909f-5647656f6755",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5fe9049-abf3-4c70-98bf-53d736f7761c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "585ab6ea-2705-4fd4-8ead-6b04ce44050b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "01069ba0-8bee-4468-bec8-1a219ed7881a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c80526c5-f4e8-483d-8b3b-87f022c924fc",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1154fc06-9f0e-42ed-8626-06deae44c20b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5fa2c0d1-505c-4eaa-89cd-7fc5a425bfcf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51b52c94-cf14-4e75-a48e-757ab8c98a6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "98717c59-811e-41b8-8103-662fa6348fe3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7681ce0-7fdb-4135-a9a6-9c3c7cfa35c3",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d62effe6-b45d-44d2-8b87-812548f01d69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e32473eb-447d-46dd-bd5b-143627061711"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d7a34aa-d70f-41bc-824e-4e7428a21b38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f8d7d234-d1f1-495a-b1b7-84ad6b453f22"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "1a8c4acc-612f-40b9-969e-6759f224449d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ae579864-1786-4e34-9c5b-dbcdb63bc429",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4565709-459d-40eb-a031-14dbee38d79a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0b2b80d-ea93-4ea6-8a0d-127ae247208c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f9b987a-61b7-4fa0-93e6-78c18c2d3c27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0cd946eb-eb42-4aea-98aa-91b15a82f341"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae71862c-950b-4db4-ac22-00789f7321c4",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fe8dff5-37f5-4bbb-a5f3-0c104417b864",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "1b19d6f9-3f9a-413a-9b3d-058c1ab3f0e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb129ce9-2b9c-4eef-b6e2-cffeca755f91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "727a7d41-c376-496c-b5bc-a6b7c86a11d9"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a81604bc-bb64-42ac-bd77-92e665d1ea3f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "25f92049-9d4f-40e6-8999-14ba0b74ae80"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "07603bcf-54fc-4a8c-ade9-4762d2bca9e2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "44efe546-811e-48ec-958d-d364b8abe0da"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3792a650-fc02-47a0-85f5-d66f0c55fe2b",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "ac705213-744e-483a-8066-3cfad46a69ad"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cc73ddfc-9238-4dbc-b509-c5c32f14e093",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7894c1b5-888c-4606-a12d-a403adb3774c"
            }
          }
        ]
      },
      {
        "id": "c42fb461-b1da-4a8e-97dc-4f80870744cb",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "eb325acb-fd7c-42df-825b-636967b4e57f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "795d0f90-32af-41d9-a016-81f05c5015bb",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "cbfa53e7-6f4a-460a-89e4-ff4c69f5dcc4",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5bd8725-1735-4b23-bed4-16bdabbc23c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b2ea584-89f1-49d4-9aff-c022df780428"
                        }
                      }
                    ]
                  },
                  {
                    "id": "288a2be5-d647-4406-afb3-348034568079",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a18eba2c-65fe-4edc-a7d3-7ee4555cf391",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f041ec8-e97a-44ff-8725-858bba31ebf7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcb43a77-8ded-4f4b-a1ce-2eb279959fb1",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "724de169-8333-4d00-b9dd-36e06cb8c980",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4426668d-6593-4b96-a16b-ee607d24ec6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8db43709-1d4f-4bd7-b507-f0bc63516b7f",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32f9fdf4-b708-463a-970e-0766467e170f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a42c0f1-3373-4c95-8dc1-38203455288f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b4e4c00-0401-4cd8-9145-3023c4b0a103",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc497c17-0860-4453-9975-14854733a3b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a725c1f-2d94-41e4-87b3-568f3be644cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9af8c05-071d-4ec6-b7ba-98e2d28786a5",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13037158-4759-4119-8e1d-cd2e7a7177b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d6bdcac-2a1a-4e0a-a11a-db947c3a8ac8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15fec31e-9641-421e-90ae-25889f2ab3da",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "752624c1-4887-4541-a305-4eee55042771",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4927d3c0-70ce-454c-b6f0-7cf6024d69ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d4c30e4-2935-42e5-90be-430ded7a17d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "612b08aa-3ea5-499d-a1e8-17b8cebb2405"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1310f09e-af04-4a95-b7ee-207e6be19d55",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "496a18f1-52e5-4d30-a8bb-bb4919335f5b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0feedd48-d3cc-4756-94d8-c92092850155"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfeec25d-acb1-4161-be42-9cf29d821619",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19386546-09d9-4c6d-9b49-0b3e28a3c5a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c84faf4b-b14d-4093-9087-1edc9c4e5632",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8dcd0f1-8c56-4cbf-8b58-7b8666001863",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2a5f306f-44d3-4052-a5c0-057c5d05432a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccb8311d-973e-4850-990d-9faa6a9e15ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2dd77196-ce9a-496f-8a88-a67982ce660d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2eecee69-3aed-4d01-86a2-0b1923b5d62d",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b476263-dc81-4291-ac33-8d5cdbd83e87",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "600084b9-a999-42ba-9655-209878a8cfe2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2eedc038-0521-44c3-a7b1-deb9e74e0602",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62d3fa4d-8283-4738-a7c6-9ad8e191caad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebf56045-c6d9-43f8-8222-68e673c2bcd9",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..zF1sQbNclnV5pE5MfuXqMaTVBquwie4ctwzSdbC_LJ1Lx5qRK6V-y9wl5oTvN_GpuOvMIvlG3kQdjgqL3GBKDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ee32f72-11ca-4110-a0ae-879988d1109d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "681ced9b-9f62-4e44-8e06-b9f93c107a64"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d54a86d-fd1d-40c6-848e-e714660caff8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca712675-3a2e-42f3-b9b3-3a7b4effab5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "804e6a71-5e38-4e63-abfc-47ed44c55aa3",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "356b8e89-b0d9-4329-b764-6568efba34ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df84a953-79eb-4808-b6a8-9755608c99cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "778b3fa7-0030-4428-a3b8-af3e2d18e2f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb8f2eb6-6a91-4d02-af6f-b3e25b1a439e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52f6b50c-91a7-4a50-b07b-f5539c7175ac",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27e2138d-43f2-4b88-8734-02597a59ea95",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6bbf617f-3649-47a6-9880-d1241493f364"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f7805d4-9ef6-4e8e-97e2-e375f9bea81b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5ae1bc1-bc91-4b5a-a97c-a76f141170ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e7cfa8c-0eb2-4e5d-9c71-0ba6ab130f5b",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22cfacd0-18bf-4304-ad4d-fddd2ffff856",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "49824a52-8522-4042-b3dc-b0caae184f45"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c2372e4-e542-4a0f-b039-a37610b4e4a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98aeaf39-0eb9-444f-8971-e2a1063f82aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1f8b709-4d10-4963-81a0-d5578a4dfcf6",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6a19b27-95e3-4b45-9a67-5dec378e6134",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7226b1c7-a7cf-4f13-bf24-ff47e6a21093"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99b8045d-3ec8-4e04-8c7b-19d6d2e9eac2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16d92c42-ed50-4ff6-8a4f-f80479a11c5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ebcbb8a-9f9b-418e-8a83-fd8f3f2d06e4",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c378819-e4b7-4df2-a5a6-b77d1dea680c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "689a43bc-90ba-42a6-be62-e0080ca89111"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f1ee762-1ba6-4bf9-a9b6-d925df46282e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a5f07f6-65db-4846-938b-ce924b431385"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63ab8c95-9700-430a-81c3-76fb5de094f0",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2da9d30-6b6d-43c6-a651-eab4874ce176",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5c8d14e-4f48-43c8-be44-03b3f9ed9eef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4723338d-edc5-4b81-9c94-2f3c9ccd497e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7427dbde-ff48-4ba9-9429-237d63e53bf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "caf9f655-102d-4fda-a55c-e3dc8bb6e663",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e565475-dc9c-48eb-ad00-257e66e4e654",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5d86153-2845-4e83-9d06-d36b0d008ae4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b39c93ff-2543-41bb-9a21-5215f4d50426",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "168a9207-93a5-43d1-a364-dc86062805ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee49aef9-b927-4f70-98ac-4f753759a11f",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": false,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0087ed35-9ecd-4b00-9adc-36bc9a692ce8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c54e5a4b-fbbd-40b8-ad0a-e43eaaa39a16"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4efc1c1-853d-49c0-a5c9-21447b7f89bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6643df6a-1c09-4d49-bfb5-3df0ececd0c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7f6c2ff-6381-4763-b46c-26ecc987c432",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": 123,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d73a649-7da5-4c4b-a5c8-1d3a9c9f6622",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "264176bd-a015-46a3-8795-8891f41c0b8a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26527777-8d26-49e2-9758-4e9ed88e3c3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27e7e6cd-2924-47cd-8a17-c415f250593f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04f6deef-3cfb-4475-9904-ba81d89e46b0",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": null,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3b7f94e-ff9f-4c33-ba43-3e6578176525",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe1aef3f-b6dd-47e6-b419-86d07cfc8e66"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "060f31bf-e2ec-45dc-8230-6591f555ef5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab180829-af0b-4ccc-8a4d-7030a46c1edc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68848c01-6800-487e-9ccb-331c69b05c0f",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..5J-iTBtI5WNIe9L3kLF22cjjDx6iQuJAgl6yYYoIGMC-X_crKNlSlB5bRJsrb2MV-NDlWMtHe0grtMqRG1N0Bw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0979316-5bf6-47cc-8b65-7320817e2ed5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d2c2102-5c79-4729-99fb-0cf6e888177f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd55fdcf-da01-4920-9359-017af19dc387",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0c5711a-05e6-4fe2-a3fc-2c68958a8caa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68909a19-8b2a-4d7e-8d22-55b33ab90d23",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c60af4e-34aa-4ee6-b3f4-5e8e9408ca3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6a7e6a6-71a0-4fd7-8d4a-6cc25618605b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bae31b9c-c64b-4c1f-822c-b14d1b77cfb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d2fb7ca-0288-4c72-8b58-c47bfc0504c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28073f48-2ab3-42df-8ef1-c786795157cc",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e3ecde9-bbbe-4fec-86e8-76fb0caa5d9e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "702a84ad-1670-42a5-ade4-712565214932"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "adb0fd10-6d8a-4f97-ae62-c7c5da351242",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07d3ac04-70cd-4a42-a43c-9ed8369d3a6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50641cd4-f86e-4f9d-8d4c-86aad5ba8b4f",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5bd2389-0e4c-4538-827d-83d750de7775",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9b0fc52c-4a0b-4c71-8d57-7efc93ab2a37"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fdfc013-2fd9-4e10-8911-6c5b95dcd36a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a59c2d5a-75b4-4b0b-8e22-f1de4b0cb4ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ecdf765-8da8-432a-a8db-d0f5fd46316b",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5229eb6a-6c76-4ff3-ae21-01920814c251",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "89c274dd-f84d-47d6-9c1a-6b4e24ad7c65"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e48fe59-9997-43af-8f4e-d3e41539a4f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9d0604f-a399-4dc4-9041-72d6e411bf43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e85ede52-79cb-4627-a0fd-f5210e996698",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20ecee86-7a4e-44bb-9629-8bf06a7e63e7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "24cd3156-8fba-489a-acca-d0e9fe7f4ed8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbd00c9f-5abf-431d-9abc-f4459d5dd780",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c61332e-8fc5-491f-ae3b-c0e32460678b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cff2f7c9-c024-4c5e-95fa-4362e62b58b2",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66829686-b6fa-4516-8199-813f2f5aa2da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e2de434-0050-4a97-985a-b4e77604a5f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "522abaa8-fbb9-47ad-bb8f-927b819c5553",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3839226-0d5b-4fb2-9490-75559fdcd4c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df4fcbc8-049d-4413-a54e-4545c5e0f371",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "255d0dd2-a64c-48f5-bf70-209a432bbc73",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c65e7914-d5b7-48e4-9485-611f598ab3da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5896b5d-6f9b-4c7d-a93a-93a5f7f7b69f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a387bc80-7f5e-415b-926d-f1e7dd1b118f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64fad048-3d97-4f12-a7d7-46cb42714585",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db2e58ee-fde6-4194-a36a-c20e7cf61725",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fee1565d-9358-4f2d-996d-7d8aaea33a40"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6613ccdf-39e0-48f3-a827-bf9f70b129bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c679f87-b0a5-40f9-a050-687b721b6394"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebf977ab-cbc4-48dd-905b-1a9627300119",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e516c2a-ed7e-4b6f-bd57-ef106144d29e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ba41e4ad-4ef8-4fee-bbc3-d8ce3d2c8ccb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1c7ae9b-8b94-413e-8f05-6d2cf2e351e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c79c22e2-7106-4448-9975-12f96bcd8c32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ead1708-2fb7-47e2-ba03-12343688638e",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62ecb1fa-4d48-44e8-a5d7-68574c5b9b08",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a4173dcc-2891-4d35-a349-cb3b6ff2dad3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfe51c7e-9936-4be0-a31b-61af25fca580",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a8216de-261f-432c-8e0b-ff4fb7e95c78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7475b6b-7626-46c6-b128-c9e73863dffd",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b3a3b32-685c-4f20-ab1f-aadcac1f93fd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7e33fa4e-0450-427a-a178-535235349cc5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b397b3f-23d9-4cca-a9a6-e6e1aada740b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ef0733b-789e-4afd-8d02-1ffa80b45d40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ddc1e85-d4f2-4ea4-b617-655d6fcce41a",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45e9b964-bcb7-4d27-abc4-f3cb3fb980c8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d7624de4-0877-443e-8913-e4743e0deb82"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1830bad6-8f58-4c8f-8be0-b5bbdc9da7ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09eb8f76-25e5-46f8-8bc7-7919b2a9b228"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9ec3447-0055-4cdb-9e90-67d88ca5c8b9",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3be3398b-4c8c-4b95-bb49-bf8946f76507",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5696b31e-5745-4f81-b71d-163c4fb1cfa1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "600b8eac-a6cb-437e-b61c-faf97a7a0f34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5dccc1f3-ec9d-4028-b363-df013bd1621a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e62d731e-a920-4766-a786-bd133f792afe",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x7a3s_8HfmUqGT6SDkktN-jeRmBR2xQ_9tOhJx4kEG3SCsRTySfDxya9yy57LNv__qbY1eMkm9SNrwdYiqlBAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1db987d6-3982-42aa-9370-00cc5ac0bfa8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6fd3eed-cf89-4618-af5b-1c5b310c210f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49863127-2d58-4837-81c9-f1f1f28bf5bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ad022e6-03f5-46fe-9435-3664ca87b0be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2d3c50d-f955-4aad-972f-da180b62afa0",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mMaPSvG48oEf3bv0t-6eLR3zvU3_BKoRIkgzkuZfm8zvjqbI7iy05D8k1mTeoSZEw3xYV-_sH1rChqGmmp7KDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbee749a-1fcf-44af-832d-fd6fca62670d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fff5af59-a1e4-409a-9f7c-3990cc411926"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bf40c9e-78b5-42fa-8a12-5e93ceb76074",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95dc2327-b611-468a-a1cf-316c23a3c6af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34402a38-b4f4-4ca0-bfcf-8f2296b2eeed",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..rAVfo-Gnj0vUX6yDAr7pslI6XAAyF2LHTXpiZEmnH5Hb4RsKcmDZZawaLSCg931y1cBUgZ1PQvGbJEdb094ZDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9dd61c3-3061-44ae-962d-50cea415ca26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed42a47f-ae95-47c7-9e51-3670d1c10470"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55c6f5d0-3e84-4232-9213-bc8e7fceca8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3e394fe-c20c-4db1-a8d5-241e927a6fe8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90f21837-5d82-426e-83e7-dd534dcc25f2",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77432c12-5deb-489d-aaac-0d57855dafbd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da38f5f7-a4bb-403f-ad12-6782178f2981"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21a637cd-877b-4076-b5e2-bce5b195cb49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40fd9b3f-a17d-47c3-82d6-19de74a2ab98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9aabfe36-25a4-4f16-b47f-4d49d587151f",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97291e46-ec8d-4a41-b200-fe480473aa02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4288aa16-bef9-43a9-a898-595579307e12"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c23fce4-4c81-41ab-8966-606ab6b9e684",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9853e2ea-cd04-4413-a8b7-c6e0306fd428"
                        }
                      }
                    ]
                  },
                  {
                    "id": "187f9190-6e72-47ec-8d24-5474d229988b",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..vv4qa5LGRlgeMxW5G5VjEKDfjKKosQnvpx6oapYDlfUSWVagQsDoDcRmkotKzFHDcTh-opjGLp__agL6_d4OCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c8edf6b-441c-4c29-98b1-12de398ddfa1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "442d57d2-95d4-4c57-89b9-a0d53227336d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f484321-5bcc-4106-8351-2fa527fe6d8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "027fa3e6-4d7c-45f0-b74e-1e2c6f192cf8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ba8b7e9-b465-43d0-8113-290de9f44527",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TTwcmWS6_0_t8XPlAGXbzWVSL_dL7OeYojY0FZz1WXCFvDfeAQtMh3dcIxuCeDqON6St3PODGfxluO_q1vWCDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b71f726-35a5-4d27-bffc-a08ee389af62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61f88a13-423a-459c-9e7b-45338bd769a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "001d81fb-b25e-4ea5-ada2-e926ddc98c1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7917f17-2877-4d33-b641-71d7b3d2bc9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8c336eb-f059-42c7-a103-8817a38f0606",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..wpkNYYEOCjKMWm9xTYNn0J7IgXZQbbkEoohMQbloz_Zxb15UVu6DqiqsENotAeHvlRWd7RH2O9v4FwWBeqvPDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6a59fe9-19e0-48c1-9326-012b1ab9bc70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75e32157-6c13-4dad-9062-1c749517c64b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56fe3a81-03f5-40f9-9362-d0d8157936d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5796f6b9-28ea-4aea-bc1c-066a130b8a7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b7002e0-8d6c-4e24-bbf7-d39699f21044",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5cba18d-4be3-4dfe-93ac-f534456c8f5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da4d2e6e-1fc9-4b5c-a28e-9a0d9e4e1b28"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc6a9d9c-c36f-4517-b1c9-8ad4f99d03f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c806fa82-30c2-4acb-a1c6-8ea26b501521"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fbdaf75-7542-41cc-8ac0-ee7c13094f8a",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHJmwuqqXWMdd298m7RCTGyGoAzsCx1y9tewaHukqaJJoPn2-TLDCQuXvlnFeAYAE_Cy3j1UScfoVx5k-eclAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "273997d3-4d64-4681-9197-bb52f82a4c62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "851ded45-24e2-4337-a647-d75543b8245f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5bda6dd-fae2-41c7-9b2f-98622a03f265",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da17767c-7830-4a3f-b08e-f7216b7b163d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f858f35b-952b-4626-b59b-35b93f4ad5c2",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1805f1e-e49d-4d09-bfe2-a744addf5068",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "161f842a-ea4e-4cec-8a75-8ba506b3123b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d0bc311-683f-42fd-a399-e971a808bab5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77bd46e7-e8cb-4e6d-bfcc-72c44c0b2567"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83dbee9a-7e80-4985-998d-a5dd7c055250",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..OzKfWk00QpV3_FJru3xJ3_ktwlU4O68prZWWCmdy3mQTbCz2lPFRl2sB4AkdD3AZUFMAnwxhscd9B0UnqxTZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ada16b02-d615-44f6-ab8f-5630351309a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7d28ee0-4760-4b8e-a2e3-c79846e37172"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a980c5b4-5127-4bc5-98ff-e52c35273e54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "091a7292-bc6d-4f3a-b440-66e0e87e144d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f994e2df-5ec5-469e-b5a6-1480cd5cef0a",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1W7WM5cXb0daWooGxEOYn_zm72mkmpF_tu8Fij39luQwNGDgK7h4nZGBFcS80HTVqiBKxzlhGq1yNnpUlLG-Ag\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "300672cf-d65b-42f0-aeee-3749fe230b31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55afec59-0451-44c0-af1e-4fac4c474975"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4a83c67-f204-4aff-8724-0e1a322353f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c3a61ab-c7fd-4316-b081-943f38e4c91f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a75bb87-ee22-485c-a5b9-91e14d62d16c",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dkiU2sStrvQWiNFK8cKmCbAcRGsC9kbDdKyr-NRlPc9ORQczitwUEymjviemIi1Oot23VohpyMcSFvgFIKIFDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71e91134-77e1-4894-a3fe-a00d9a7c3a4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53773b7a-4730-4629-ba43-b9e48e0c3457"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40dbb28e-8b52-4adb-b449-251058ab7a98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "582687b8-4108-4aa1-88f1-432b1a2d8838"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9067dbb2-267e-4262-a9a3-0f59bf20420b",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b572896f-55da-4d10-9c81-fdc686549292",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d711003b-0882-4fcf-b531-dd2f514263aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf4fd4df-e046-4c7c-b80c-de8560c16b76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18448f06-d95f-4632-9e4e-f1b5160e6184"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44802999-9cd8-4076-b802-14755925006d",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pNIbeUn6DL71QxEWTF1wQTqKfAJET5JB9FlmoLXk4-rv1owG68DqQY6qwcPx6fUbMijsWsXlvaFvzND0jAg1AA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c0c9700-f8cf-40cb-8007-db77382e530b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05614d06-8e0b-4c0d-be11-e4bab15d94b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc3e9283-36b2-4ab7-af67-780fc3a831d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb655fff-c5cb-419a-ad6d-a7b690fb51cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bf29c13-498f-47c1-b3ea-26982b637457",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z0P0ndVABJRB7mCsv4C-EgB-1SxgnfrU2uQBDSwKm2KfB1jBnzsEzY9enxOn7V1lBAPNxELTEaxPCAK7_n3bBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbdd5ff9-0ca9-49fe-8955-1a486baf3d73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e179b056-7857-4ad2-9fed-4c26aec075ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51d7371a-4936-459c-9e74-993f7a63312e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89a1f707-77dd-4732-bfe5-0e6e512b6cf4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cef6f4c-3971-483f-b8ad-d091ba3a70ff",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "624262ab-709c-43c8-ba66-722c8f2e496c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef89da62-08d2-4b82-8067-1580588771da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6ed76d2-6371-4a18-a969-0df89ae204f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08177760-ac5b-48ba-b853-96ee56b81f7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18ad9ef8-afc2-43b3-b92e-57c220db69c2",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d50fb7b5-67b8-4db7-9f11-3d4454bbf5aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64709cc0-e149-4456-88ce-25ea8a597dfc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3265f29-5b01-4aca-8139-c0fee6b89eb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ec6a843-3f8f-491e-8b97-6572807e89a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1a6f6db-0b7a-4b69-a8ca-9d07074b785e",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..IXaPbANtKFiA3Sh28esCkg9kdwpHScJg3bOCF7Phmb5n9RC981EeIobgDnMzWIjP4v0S92FDEcZqA_XbW43GDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca26cae1-5fde-4184-817c-dc4781887e5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de7dc072-1c03-4a51-aace-dc9fd15d90cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93beb2b6-7ba6-4d4b-bf1a-98960b904319",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de91512b-5fb5-4eb8-af7d-e8d51af63b90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80305667-aa0e-4caa-91fa-772e751734be",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iM5Xr2lBqwFIQhq9RI7Dv4K0dzdQ0z7i5YN4ELsstv9vDC9xA-GY2Ft-PsfubsbgVyQsQYjchCv23GULmhauCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9235d83e-c7b1-4d6b-957a-41419764dfc2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4c67f30-5d48-4273-ac11-3e840a60c174"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44615db7-66d9-4a8c-99fd-cd974abfcf91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f4957aa-7a63-4da0-8ce5-f30652f7c4e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f242f93b-3d50-4860-86ef-41e2b43950f0",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb7ce516-2775-4937-b126-0035b80bcbbd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07eaa335-e975-4f25-91cd-ea154c5e1784"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "522cac60-3241-403d-8612-1627042d7a33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "411df87f-7ff2-4909-8d45-e520b2868f09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90103641-c612-40bb-90b1-7a6d11753b02",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dfc8572-cb02-40a1-941c-83d9dc93c24e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "165c2b87-42e3-456d-b1c7-6b4d07b89d45"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0978b6b5-9953-4cfd-bcdf-2560813e1568",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61d1c303-9f54-4064-99c7-6e3745e63eb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1835da8-cf27-4dd7-a5c4-783460b3d49f",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..GBcSurXcOJcVinhthkmqvV40OS1rN2fY57Kad0HMLUuykp14JJCtNw_gmtf6SwZxhB860OVsUmuNbZXsMCi-DQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56acf144-4613-438e-a1b0-f84e27cb36c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26fe427d-74fd-42c7-bcc9-642a5a673d49"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0993f7c5-039a-4852-a651-fe392bb572a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4fb9f04-8afc-40ad-bb8d-7129ecfc8e5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54cee560-fe8b-47b7-b387-31f3b60610b4",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VWowmcXQAjabeJENG3aOcLzQ9HrvmSIs2pOWcaEMLdJtvJfP7oWohIBiqp94-eo1pd4Ocgk3hT0cLvS5qKBYAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a040671-535c-4da9-825b-5e4f6f6e47ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15a35622-b4cd-46a8-a346-3b943ad51f52"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "303dc26b-f0a0-4bcd-87f8-dfeec3bf2033",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66dc0205-7140-4969-900e-03e11838c41e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcdd42bc-6439-46e0-9ec1-43dbe6991589",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..-awe55AAvkjymZEpagD4fdSQk0uCGFfjyFwg7upmg_CISWk12JfezKe-N3hjTwYKCSCjScynLGvlH2x4iSgbDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "961b59c8-436c-4f8c-a5aa-52c477df42a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d420d1f-7e82-4405-8d35-50cc9d40cb0b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2b3bd83-685a-43f5-a043-e4e56985d765",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "290e43f3-8caa-4d51-ae63-046468732409"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0922e71-a502-4776-9068-fc4fce300195",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..NDwZvVUWw-xG0zU8VsWhiXPWrYycgK_zwN8zZts05DTw23rOTd9IOXQxqhEMzo_X0c25jzowIbpDfEFxqfmnAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e7f0639-2d6f-4105-a6d6-325b042f078e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "998c4ec1-969c-4ff0-bf7a-13b41ee1f246"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0ab6447-a808-4977-94a6-08924514f912",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a43d5bdb-028d-4c93-ac8b-42be169a6a55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4765a752-7045-472f-8480-038891bdb618",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..y_7VEjN1ENYoedOrj2jsIqgL7FSYelxGgFZD5ckqKvSDM5BVEWiEctD24BWppCndRR7WR9_1ByBm2F1yBSaoCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "369a58cd-e0e8-4aea-b5e8-b8f098d70fa9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "daf85237-e544-4aa1-9305-b8183f728c81"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99a7503d-421b-4c66-a2b5-ca673375316c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac2ac3d6-c711-4db0-be68-f354e490da99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3c909bc-8c61-406d-92b8-7b3a19a378bd",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dca72410-200f-4290-896e-ac90638802af",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cbf80def-c114-44dc-944c-977794346c9f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a2c7175-bdae-4e32-9a99-51e102d94dd2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e18473a2-be86-4abe-90f1-fca060ff93b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b94b500-9151-477c-adc8-16949017f590",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c0bfd3b-e8e3-44c5-a78d-398e83bb0675",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c93e1319-43f4-43f7-8495-82c61dc19067"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10fd4fc7-e94a-4ae3-91ed-6272e9c39990",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "172d56c4-e042-481a-a7b7-9171f4001bc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7d37ce6-f9e9-494b-8e0d-d5069af362b5",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b418c46-4cce-428f-8b5b-7ff8dfad1358",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b2713b2d-510e-4394-ac75-c80c387a69cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "068b439d-011e-4000-a808-91d829fa5d9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c98123a5-c2f3-403a-b662-3890856dfc44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aaee146a-6dd6-4442-9728-dfb789ce3fb7",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fffb0b5f-916e-4e77-9be2-3a6ed3632a33",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ca954314-2253-4c3c-ac1d-b6fdd3f68219"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6c177e9-24bb-4a38-82d0-c23a2fc33ee6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "523d0c58-3183-435c-a27f-e724d16eefe7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea22c9f3-f564-418b-8591-61f3fb053110",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84a66c61-2e5d-435d-b1d7-b0f8245790a7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "86b492fd-6cc6-427e-9c9b-a5aa97866dcb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb5f312a-a4ed-440f-a71a-8530b4aa233c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f324046-3818-4593-bb7d-36bdda0f184e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6efaacef-dbbe-476e-9bee-d6923ea63d07",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dc057a7-a37b-4470-a0f9-88cf7d119df7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "216fa9cf-ad9a-42f0-85cc-74956b1e4401"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8e49a9d-cc47-4198-92a4-48f001e364b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3672a7dd-859f-48e2-bd09-e5c145b49233"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b93789f-c89b-49a9-aa9f-ac75cb855485",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "932eddac-0822-4828-9020-386252aeb314",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c98ad415-99d5-408a-87da-88968fe70c7f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22acac1c-9901-4573-9df3-b4669d1e3f5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5728b463-a392-423e-a6c6-da387ec8aafd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bddf21e-8675-439f-8ddc-421b0f7f0344",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6912eb45-6030-4c6a-b812-628dbc248eba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bdd0c5a6-ee29-44b9-99d4-f16eb6c082f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6ae4352-61ae-4ed6-b557-2b313023d5d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06680dd8-8f32-497f-8e79-7de67d2a273d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdc87992-d271-4af2-afe2-c4812981a891",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5704834e-a4db-405e-8a4e-afa11286e64e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "11da9053-cf19-4230-91b0-65d19a6d27a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53d8a5dc-43c1-4ada-872c-75fd891bbf51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3643019a-f3ef-4cd8-b1bf-4c63b015de5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b9d84da-0ab5-4157-a16a-d87faceaf845",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0d804d0-4cf8-4f8b-b2b5-8da344f46317",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c6e2fd21-61ec-4032-9eff-47ee6972ccec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b39375d0-3691-40ac-b59f-880bcca22d8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1dfb4e5-a8a3-4d4e-aab1-307918e25ef0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5052935f-5ea8-435d-81aa-650458fb5c77",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcc25698-53af-4d30-9474-cb43c4b38e59",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "95836cc4-a3ee-4182-8485-32c298144892"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f01e68c7-2e46-4fa9-9e1e-8fb721d852ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e337589f-8608-497b-9ee7-bcbbb39ba25d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42ed45bd-16bd-4acb-a8d5-6d99c2017d1d",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4918393-48ce-4031-b398-1eaf03ef3df3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "232bebb1-2562-459b-99a6-bee86934f6c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7f8314f-924f-4696-9542-9b42b00cd142",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3711b166-588a-4682-ac9b-d0d7147516d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "638e9a4a-3835-4c36-a778-927b9c671d89",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91678fac-ab5d-4473-a0fb-47058cf8b7bc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "18c720bc-a7bd-4572-bc4e-9dea9d892d9a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66cf708b-de7a-4467-8b5c-b34f9129f656",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9acee5c8-989d-487e-96ac-2fc5d28ba778"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efd6e969-2804-49c5-8fcd-426e9cbd771c",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c4193ff-133b-44af-941e-44a50b596b06",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "57fc4e53-29f5-4957-8761-0ab9ab04e7cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79447754-6444-43b5-a814-8d823bdc5ae3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80a7bcab-7e39-4bdf-9ca3-b5303c9a4ba0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "837f268f-b77c-4bc9-816d-b807bc08c2bc",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1dc758c-f57d-4b05-9137-6d72f0162907",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "33fab9d6-d652-4e7c-8122-1ee95841b390"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bf1aa13-74a4-49a9-890a-3f8d07d481a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e0f9792-3526-4bd3-91a7-a4aab0abfa28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd0ebe8a-92b8-4cc0-bff1-74b7f7dc1846",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5dbe731-aa56-412b-951e-24a7b241b184",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7eec09b1-6046-4ec4-a58d-6a1f4ac5f882"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c297d34-14b1-471d-bed9-17a7697ab6cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96ab1332-b54d-4b8e-87b2-e9c46fc52edf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dfaf7e7-fbd0-4603-b0ae-324029f745e0",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e1f2bb1-fce7-489d-b10e-508597a45bbb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "21c1b11d-1af4-479b-a5a9-b2f89acdb23e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c10470fc-b2f6-4684-b25f-b3c9f14fdd0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d77b6db-83eb-4144-8ae1-d61f6fc3a3c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b599ff4e-ec60-4c85-9a2b-f6b809154655",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92385884-e0d2-4d6e-a8b9-3a88994a82b7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6742f038-189e-46b0-b2ce-5c7705c16202"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e66c739-2f56-4486-a789-ee7ad6710bba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9effb6f-f11f-4ce4-bd51-842fb0e92699"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54b20934-8824-4a8c-ad33-e1c674f66b67",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed999e30-d93d-4d70-a500-3361fa4c5a37",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "72caecb4-257a-4337-8f27-339ecbf58cb0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09e97459-9fa4-4a8d-b028-fd9bb28304db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9ab3beb-dfc4-4253-b886-a4572fd4332f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "419f135d-175d-4f70-b5b0-1d16eca152c3",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6649579-f80a-430c-b9b9-65dc1caeb759",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2669997b-6388-4109-bf00-b582bc7ae501"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0296453-7998-404b-9947-bccbd59642d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d00e38be-c5cf-463c-a3b1-2a02ee5f3fc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "978160de-e79e-4849-943e-72065a754e17",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1e0ff84-9a3e-49fb-9a70-68eb2c3880dd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c30c2d19-1529-422b-a8b2-be82fb333b71"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f470eeac-63f5-4d3c-9cb4-7b468df1aa7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "836e35bf-d2ec-4797-9b78-e7596733ac78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "720d02d0-5152-47a9-ad52-b2cb1eeda479",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2ff4b26-2d98-4c85-be37-51492a5afa62",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a96175a7-3aa7-4951-b064-3f58927e67d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78d0033c-5f31-47a6-8c03-cbcb921748eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "733254e4-45d0-4f39-b6db-45d5de32dbea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d192940c-ee65-4f5d-bbd7-91ddab572701",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c0a2599-438a-425d-93e2-dc5c8ced812e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8875c6b9-a3bc-4f9c-afb5-aa6693c3e615"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37089191-f136-4680-8e2c-3e5512933676",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6a7be44-2aca-45b3-b5d2-926d854f0295"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccf6837a-b524-4dbb-9a72-863b86301838",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13182ebb-b9e6-4063-ba8f-5391146dd69c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "35b5984d-8876-4a39-8d4c-0d7afea01675"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0b4c40e-2e4e-439c-a99d-fc1adea2427a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7622f356-1e30-4cfe-8bd3-c1de50b277e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e733a68c-f84a-47f9-a019-75492b7feef4",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac4af0cc-1923-4255-ba6a-14c32237412d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "657d4bc6-2c01-4d30-b353-92d0c6397eb7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f8683bb-785f-4887-883e-68a47230e4e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e697aef-237b-4129-a34d-07e1f1c789df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8020a92-2230-4387-a8de-b49cdf0a9cc9",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85da4f50-0cdd-4de9-a9ed-49521eff568a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8ac271c6-1a32-403f-84d5-fe0d747061a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0745c02c-e28b-4708-b545-112850cbe534",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd998967-9510-425e-b12c-e069c51a6f65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5000262a-3493-41c1-afe8-5aefa7f15273",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c52b7f2-ff07-4b6a-917a-d53609c62ab8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3963c7d1-5f8b-4c56-8969-11e983204331"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2203c285-06f6-49c8-8387-a22ad8aa7a41",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40175860-6da3-4c38-9c9f-8488c77b4972"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f396c25d-cb23-41d2-a2cc-d9d27e02b0ca",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bcf9ed7-e441-4972-a8e9-c282616d0ea6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5c38bcfc-0b93-48fd-a0a7-089267ac9285"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8091545-e6be-4bc5-a794-e8363df2b944",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b23b0af8-9fe8-40b8-8615-91b7a9d9907e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c475cd02-75ed-4f20-8fec-d3d1327d0c9e",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d49acc87-fb2c-4461-b38b-910ae988ad97",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "db4d09d8-8475-49ea-b55d-7fa5ff67e0be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "593720b2-054a-466b-8072-9052b2c8cc70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1a94b1b-1600-4fd5-a2f5-3d8bbd00cc49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88f713e3-6553-4d08-87c1-50392bed57e6",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05c41f2d-d086-4ae2-9d90-4678f7df8888",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f57d5766-1f22-4246-9f2f-eb93f081164d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a03ce62-9379-4ac0-9183-14a61ec459d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae5273ec-a046-4787-9ecc-e823cdb63536"
                        }
                      }
                    ]
                  },
                  {
                    "id": "056233f2-bd29-4a39-af15-5ff51d76ba70",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "009122d9-82a5-4ce8-b196-0c96d6089953",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "56e1bcf2-942a-4023-a5f3-bf4c120908f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8eda3d79-322d-4d89-a5c8-1540884273cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ddf9a828-8f42-40b2-8031-892531112829"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82a30749-32b1-46b7-8057-1adc31622ea1",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07df2cb8-92e4-4f44-b5d0-b2dbca7aa1ac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8e564dc8-9a80-4eef-af52-dfe5c2fbd2e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1f99631-00ac-4f8b-9e09-043891688cf3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60717872-fcfd-461c-b2c3-db459700c736"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce74d8ce-ab1c-460b-917f-9c44989d9949",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66b90510-3c14-48a6-90a1-93c5643612e2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9526fef8-b34f-4105-bd4e-7db9a003f945"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "684cbbf2-e09e-4b58-af98-cb16021a4184",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1febe6f-6f22-4cb9-b4e7-0559a01a287a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96d05e72-cce7-4693-a082-d9017e2de806",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e42090cf-616d-4836-8de8-46da2dfcfebd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "95c5bea7-fe3a-453e-869a-91c7e30d08be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42275830-42b1-4a45-b0a9-d9b31bb7d789",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06fd235a-c71d-49a6-be80-31387e4dcdb5"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fa5d81d9-f1de-4cda-a70f-4b7aeab478e0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "151b16c4-02db-4398-915f-4a47f96d8e56"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "46d39d68-52fc-41d8-a548-de46815dfb87",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d495876f-8b3c-493a-82f8-504d1f993b3e"
                    }
                  }
                ]
              },
              {
                "id": "99846a1a-f85f-4652-8c75-3516db308dca",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "108dfe52-cbd7-4bf2-bf65-a258d6e9d40a",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1905a3f1-7a1d-4907-8ac7-2d515a784145",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "15340291-3db9-43cf-8058-766e746940c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c525c90a-547a-450d-a95b-921ea5b405c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2d173a1d-bb97-4d48-8ca7-cd36d5ad398f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a40e1535-b975-4320-bfd2-6b2ab1f3fae3",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "832fb149-38f3-47ba-bed8-882d186caaff",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "5b516491-093b-454f-ab83-d97efeb66bf9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61ed12ed-453f-4168-9e7c-ed1bd34f6f23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a1d73428-2c3c-4e47-a7dc-c3ec3b4144aa"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0f7734e3-2281-4273-8cc4-27577b41d1bc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f8afb5bc-4d62-4d6c-9eb2-6e69144fc59e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "bb314a3e-f3fa-43ed-8566-30ac498276f9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "db1ba9ef-622c-423e-b3c4-e78b59becb0e"
                    }
                  }
                ]
              }
            ],
            "event": []
          },
          {
            "id": "455fa27a-aa9d-438b-acd6-00a308b786d2",
            "name": "Positive Testing",
            "item": [
              {
                "id": "be4cd4d6-873f-4fbf-8603-5a4ea29bc6ad",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9fb33c95-70aa-4926-b354-00f10e8d3c8b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e7d0094d-bebc-4e82-97ca-2a55ec167ee9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "78908ad5-0af6-404d-a9c8-e4e93b19b938",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d4a01017-a912-4321-a525-a015bda73d20"
                    }
                  }
                ]
              },
              {
                "id": "84060352-9780-41e1-badc-8c86c9b9226c",
                "name": "credentials_verify:id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e4426474-1201-4069-aaea-93af1162fc8a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "25c52456-a0c6-4989-935c-af953ea0b369"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5c1cd83e-729e-48be-8426-144916e64108",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5c810451-a589-4583-a84b-3d47cfa6e4b8"
                    }
                  }
                ]
              },
              {
                "id": "5151aa94-e1fd-4214-8f1a-23021e802d28",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a419630a-8ef2-43f9-a702-d9da1331340d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c78df9cd-70ef-4f82-aee5-0c521bddb5db"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2ea55e84-a9a0-405e-af94-902adfe0b155",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b910be24-1d12-42e3-b127-86ee37934a6a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5af15eb4-10ca-43e2-b9ce-c48635cbf3e7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "bd0bff3c-f761-45b6-93b0-ea07bef32ef1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fa927270-4349-4c37-b359-ec3ca7f3093c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1df825e3-7b53-40ea-822b-9c9ba69d3743"
            }
          }
        ]
      },
      {
        "id": "411279ed-0d7b-493c-97c1-73f021c1dcd9",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "f64b1d8d-50c7-466f-b49b-f2b4e736f2e6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "87d55022-eb1e-447b-85be-00f5969bc065",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5bb294e7-b708-47e5-b569-8ef12c6de41f",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae88c80c-00d5-41d9-acc2-e6a3ff4b7815",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "aef7d814-0394-44aa-977b-de41296b0bb2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b103a91c-e249-44d2-ad2d-1fd0690f5143",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f834bea4-b010-42dd-a96f-a0ef75c87de1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28703675-5736-43c9-9043-b8ebda5792ca",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a01f001-e41c-44a3-b11a-b2fdbe5d8794",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "1f7c8ebc-76ba-4201-9b73-70cb7b95386b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef80ffc3-abcc-4377-b61d-0f2a318468d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a0159f9f-86a4-4f17-8d9e-4b0a49c37750"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "47fc13d4-332b-4a25-a5c5-c415e37d0b13",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "94ff1f5d-7647-407e-832f-49d38bf3ba0d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e1071c48-a39a-44c5-b6ae-d3aaa1a1aa54",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "787fb66a-7302-4619-bbd9-ff876d92da59"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ba94fa24-2298-4636-9fe0-b8ac1a5477df",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "76eb94a9-df8c-41fd-978e-6866a2e157ea"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "057deb62-afb1-45c1-a1d8-ede4e54928b2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "24e691ca-9fcd-404c-80ee-59f9c8eb8699"
            }
          }
        ]
      },
      {
        "id": "ce558a79-6ece-4613-90a9-f69ac9077b8f",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "e83b68a9-7e7f-453d-b6da-d18b58a80461",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a119bc82-8523-43fa-9e09-926557caf172",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1d18b9be-21af-40c7-9a5b-4af6bd4e2cd4",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7300e1a-83a7-4db8-8316-f0d1a8b41d5b",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "a7c50d9b-67a9-4b7e-97d2-cee7c561a91a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "434ae598-1919-43ce-a7ec-2f827fab6ab3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6f8cbcf8-844e-42c2-832e-9f62e27aa8df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a75549b0-d774-4f05-aff1-4653a87b8647",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "511db364-67a4-49d3-a4fa-a0ec4d704449",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "7cc3d879-bf60-4730-bb94-ee4c017f306a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76dd8a0b-8e50-4ce9-ac1b-6456985f0197",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "37a6bbe7-456c-462c-9b88-4caa95d08ae3"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fb2a6b86-5c0d-4bc7-a7b4-ff6044be77bf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d364a1fa-9d21-46ec-892e-1a994f693d74"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b5488bfe-a9af-4cbb-b8ff-17c1068f61aa",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "64f2c281-e2c8-4bc0-9ed1-b9e3e928624d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "730b954a-6e41-4d3a-b961-45da0323123b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "a8fb46f0-5d57-4c96-9177-ec741ae48a8d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3ee8689a-06e8-42fc-ac16-8abc40467bc7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4f043da3-8146-4ba3-8169-45ea391a5562"
            }
          }
        ]
      },
      {
        "id": "32584984-cbfa-41f3-ba16-9402f80a8481",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "69106cb6-3c62-48de-916a-4886c89c6b1f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1e422689-c04c-448d-a47c-7329ef11f2d2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ef3e1e6d-4343-4271-be62-8661429c6b94",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aaee7851-4606-4a1e-8058-edecf6800543",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "a8e4dc0c-0f58-4823-943b-8d081d29b7b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "237195b5-4d7a-43c0-a791-021743d8fb94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cbcd8a42-1467-4264-aa93-fe5c0ee13497"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be76d39d-80a9-4584-832c-547d958f0569",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6ab4e34-84d2-4ca1-919e-4e2dd8474575",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "7652022c-b920-45f9-9e2e-7fc390eed462"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94dbcf4e-b71f-4b81-9743-0e2bcc1c7c75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ca00d09d-6975-47e0-9e08-1fb69ebe5214"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "07a1e74a-7f15-4905-9deb-c1f8ea6afa1d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "18b793ed-83c9-44e2-99fa-4e4fcdb55cef"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "444a7a9a-0869-4f4e-9b02-4677f2952518",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e082ff5d-0fbb-4145-9730-db461c1640a8"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "71f1309f-ede8-44c1-9c10-c97cec7d5458",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "27dd49bd-1d30-458d-baea-e413b6bce8b2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6a23782f-af0c-433f-ab7e-13d88ea4d050",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ceecad02-d7d2-4c0b-be2d-2ac446c0b445"
            }
          }
        ]
      },
      {
        "id": "da5d94d1-7ff7-4aa0-a212-5be467289951",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9c7b7734-5bec-44d0-815f-ff85e67c5dc0",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "abe212f1-786d-4491-b3e8-9c5b04fa5516",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "c1a5e41b-4fc6-4193-952a-eff0fcdc7e92",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "14ab1dd9-d91c-4426-8026-ea464bdb7427",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "49b08456-0a8b-4533-b043-74d4477b6701",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1909,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 260,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 505,
        "pending": 0,
        "failed": 86
      },
      "testScripts": {
        "total": 959,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 280.76923076923083,
      "responseMin": 8,
      "responseMax": 2843,
      "responseSd": 409.3785917228044,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1666831934935,
      "completed": 1666832022700
    },
    "executions": [
      {
        "id": "8ebd8a5a-24b3-4c31-926e-32f2bc9b95c3",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 251,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "fa2704bf-392f-4cca-9230-f1213badf095",
          "httpRequestId": "010253f0-662a-4235-8b53-4c7c85b74c9c"
        },
        "item": {
          "id": "8ebd8a5a-24b3-4c31-926e-32f2bc9b95c3",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "66a1b0cc-1713-4993-9f33-0c9167b30fd6",
          "status": "OK",
          "code": 200,
          "responseTime": 67,
          "responseSize": 0
        }
      },
      {
        "id": "19a36771-5f9e-43a8-a0f5-cf36239ebf65",
        "cursor": {
          "ref": "d9e838ab-ea4a-4efe-9094-cf6bd14d450d",
          "length": 251,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "34aa8dc7-bfe5-4ed8-894b-c6abd16a26b7"
        },
        "item": {
          "id": "19a36771-5f9e-43a8-a0f5-cf36239ebf65",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "fc18b800-66b6-40d6-b882-cd9f6c1ca915",
          "status": "OK",
          "code": 200,
          "responseTime": 8,
          "responseSize": 0
        }
      },
      {
        "id": "a5f55cd6-3ec9-4d4b-8e9f-efcfceebe39c",
        "cursor": {
          "ref": "861f758a-9d4e-4bfd-8ccf-0f83fe83fa92",
          "length": 251,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "9e190ff7-1e44-47ab-b319-0c484524b3de"
        },
        "item": {
          "id": "a5f55cd6-3ec9-4d4b-8e9f-efcfceebe39c",
          "name": "did_json"
        },
        "response": {
          "id": "61815eda-cfa9-4635-924d-4554ff2bb2e4",
          "status": "OK",
          "code": 200,
          "responseTime": 1477,
          "responseSize": 1369
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bd60c46-e71d-4e78-bcb5-12790017af7e",
        "cursor": {
          "ref": "efdf7af4-c8a1-48be-a431-a1aaf30437e3",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "bed340b5-0c81-4ad2-8906-f38f9f5955e5"
        },
        "item": {
          "id": "6bd60c46-e71d-4e78-bcb5-12790017af7e",
          "name": "did:invalid"
        },
        "response": {
          "id": "f9c2eb79-c42c-4e3e-96e0-bc69b0ad700d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 111,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bd60c46-e71d-4e78-bcb5-12790017af7e",
        "cursor": {
          "ref": "efdf7af4-c8a1-48be-a431-a1aaf30437e3",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "bed340b5-0c81-4ad2-8906-f38f9f5955e5"
        },
        "item": {
          "id": "6bd60c46-e71d-4e78-bcb5-12790017af7e",
          "name": "did:invalid"
        },
        "response": {
          "id": "f9c2eb79-c42c-4e3e-96e0-bc69b0ad700d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 111,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f1b9a57-ea97-46c4-826d-63389f48dbed",
        "cursor": {
          "ref": "b2e66998-f278-496b-91e3-51b798098e74",
          "length": 251,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "76bbe1cb-0482-4355-a0bd-bf4c3efab37a"
        },
        "item": {
          "id": "0f1b9a57-ea97-46c4-826d-63389f48dbed",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "ea948bac-fdbf-4c38-9e94-cff8d2d40c76",
          "status": "Not Found",
          "code": 404,
          "responseTime": 497,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd6de8c4-0ca2-489b-8f0e-9b02b2323524",
        "cursor": {
          "ref": "58f0188b-aa75-4d5e-8940-3c8815104ff5",
          "length": 251,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "a2953469-eedb-473b-a878-b97f437dc1de"
        },
        "item": {
          "id": "fd6de8c4-0ca2-489b-8f0e-9b02b2323524",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "cba36485-4a9a-4787-8e54-a9667c1738c3",
          "status": "Not Found",
          "code": 404,
          "responseTime": 80,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1a068a2-d0dc-41ab-8f79-5e1fcb3ce1a8",
        "cursor": {
          "ref": "ee790438-ab8e-4ca1-b762-30bd4fede3e5",
          "length": 251,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "ece4d3b2-d044-45cb-be13-5655c0cba9b4"
        },
        "item": {
          "id": "a1a068a2-d0dc-41ab-8f79-5e1fcb3ce1a8",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "9806fcc4-5c38-4014-89ac-3ff53dbe729f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 132,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9f1175b-e0c2-450b-8706-8986c08564ed",
        "cursor": {
          "ref": "4a44b389-0775-4ccb-9e62-6d88ba206646",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a98f3706-2949-4dd8-b525-1e9aaf4bd0b9"
        },
        "item": {
          "id": "c9f1175b-e0c2-450b-8706-8986c08564ed",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "63c6ba7a-3b29-412a-af6b-adeca610a44c",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 499,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9f1175b-e0c2-450b-8706-8986c08564ed",
        "cursor": {
          "ref": "4a44b389-0775-4ccb-9e62-6d88ba206646",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a98f3706-2949-4dd8-b525-1e9aaf4bd0b9"
        },
        "item": {
          "id": "c9f1175b-e0c2-450b-8706-8986c08564ed",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "63c6ba7a-3b29-412a-af6b-adeca610a44c",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 499,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "244c9c88-4b65-47f1-92ad-b8ddb18ca99f",
        "cursor": {
          "ref": "1dc940c0-f3ee-42f2-b947-87aaf9047f34",
          "length": 251,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "77a7954f-45c3-4f87-833d-34c0d86ce378"
        },
        "item": {
          "id": "244c9c88-4b65-47f1-92ad-b8ddb18ca99f",
          "name": "identifiers"
        },
        "response": {
          "id": "c28d1e74-071b-4f5c-8d12-eb5b1b884232",
          "status": "OK",
          "code": 200,
          "responseTime": 498,
          "responseSize": 1385
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "216aa98d-e4e4-4b09-a9c1-40f56d398c7a",
        "cursor": {
          "ref": "c5e5cb00-3dd8-4bcc-8817-6eec1d370119",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "18b4b744-b983-4016-93c2-9c5f9fa9a4b1"
        },
        "item": {
          "id": "216aa98d-e4e4-4b09-a9c1-40f56d398c7a",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "d1a58677-d059-48b5-bdcf-9d9f698350f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 249,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "216aa98d-e4e4-4b09-a9c1-40f56d398c7a",
        "cursor": {
          "ref": "c5e5cb00-3dd8-4bcc-8817-6eec1d370119",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "18b4b744-b983-4016-93c2-9c5f9fa9a4b1"
        },
        "item": {
          "id": "216aa98d-e4e4-4b09-a9c1-40f56d398c7a",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "d1a58677-d059-48b5-bdcf-9d9f698350f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 249,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81774f1c-c6f8-4738-aa84-246b90cb5f32",
        "cursor": {
          "ref": "638e0cba-17a7-4e13-9e0d-3e3521df40a6",
          "length": 251,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "f8431e17-e4c9-4fd2-9228-61e46048373e"
        },
        "item": {
          "id": "81774f1c-c6f8-4738-aa84-246b90cb5f32",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "255b6b3e-d5fd-4af2-8e0e-d932504a8fff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 221,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77e554ba-ab1b-4657-a35d-b21526799515",
        "cursor": {
          "ref": "49826134-0aaf-43cd-9b41-4a4766f04097",
          "length": 251,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "caf20f63-3fde-488b-918c-ea31300138d5"
        },
        "item": {
          "id": "77e554ba-ab1b-4657-a35d-b21526799515",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "13c43939-9d87-4ce9-9bd3-d5c8d3f61292",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7d62f7f-3755-4ee4-ba4b-9da89de5d9a8",
        "cursor": {
          "ref": "916ab79f-f612-4305-b87a-e83da659db0a",
          "length": 251,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "c8592f58-a21a-4798-97f0-f5a0fcd9253e"
        },
        "item": {
          "id": "f7d62f7f-3755-4ee4-ba4b-9da89de5d9a8",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "caa0d11b-9a9a-4731-b32a-8005c127316b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 395,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be85617e-73a3-4342-8106-875889cfcc7a",
        "cursor": {
          "ref": "b57b97e6-8fd0-42e0-8903-f2a0771fd1cf",
          "length": 251,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "57a07a09-d6d7-4300-be46-d4978a3e4b61"
        },
        "item": {
          "id": "be85617e-73a3-4342-8106-875889cfcc7a",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "348aeb66-9f6b-4366-ad0c-fcb03aa95a5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 116,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72f75fac-cfdc-4edb-95be-22603da48088",
        "cursor": {
          "ref": "74d12199-a125-4458-883f-9fb4e0322080",
          "length": 251,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "36fa191b-e058-4335-93d2-2d54dfeb61d5"
        },
        "item": {
          "id": "72f75fac-cfdc-4edb-95be-22603da48088",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "00a41f22-7365-43db-baf5-6ee15247ca85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 582,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d2260ab-e6ad-4d28-8dfb-015f37ddde38",
        "cursor": {
          "ref": "6a7d0f24-bad5-4bf8-9b96-b943f1abf900",
          "length": 251,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "cce0d646-29cf-40be-995f-f62d79da53b0"
        },
        "item": {
          "id": "1d2260ab-e6ad-4d28-8dfb-015f37ddde38",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "e2ca46c5-dcb1-41a1-9e6d-2ef75c904881",
          "status": "Created",
          "code": 201,
          "responseTime": 2284,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "e5987679-2fc7-480d-bae9-8fa9ea3b7570",
        "cursor": {
          "ref": "d78aa5e8-69ab-4585-8ac4-371264006bde",
          "length": 251,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "789cc749-2e1b-49d5-84f1-99cf03bfc2c4"
        },
        "item": {
          "id": "e5987679-2fc7-480d-bae9-8fa9ea3b7570",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "42edb289-612d-4380-bc6e-3eb0c70dced5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 108,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92f8a86d-1ef7-483f-ba75-ef5b5dece696",
        "cursor": {
          "ref": "f71f5776-d1fc-4679-8cec-7f8e460af211",
          "length": 251,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "213c3eb5-6234-4944-8d46-d6690d66ca17"
        },
        "item": {
          "id": "92f8a86d-1ef7-483f-ba75-ef5b5dece696",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "88d29e9c-e761-482d-9a4f-cdc8acede277",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 136,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3f6ca88-fef0-4a65-91e9-a8663f1997c9",
        "cursor": {
          "ref": "3123e515-31a5-482c-a77f-7920d566ea6e",
          "length": 251,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "32b48b4f-188d-417b-ab35-e76e48f25576"
        },
        "item": {
          "id": "e3f6ca88-fef0-4a65-91e9-a8663f1997c9",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "7d14493d-a9f3-47f3-b555-c47873970097",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 275,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ef5ade1-85e2-4a05-8885-541d7d5a9cd5",
        "cursor": {
          "ref": "6917f331-e49c-4ab9-8a9c-9571572428b7",
          "length": 251,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "1b39c7b7-f786-4cd6-9829-ce82eb45e6ed"
        },
        "item": {
          "id": "8ef5ade1-85e2-4a05-8885-541d7d5a9cd5",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "821495b9-6077-4aa3-a7df-1b1985d0096a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 260,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a58e462-b1d5-429a-9ad6-d1f71895c4aa",
        "cursor": {
          "ref": "aed5d1c3-fd1b-46ee-b5e5-10d2454afbc7",
          "length": 251,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "77ac9de0-2b96-42db-b923-d650f83eef2b"
        },
        "item": {
          "id": "0a58e462-b1d5-429a-9ad6-d1f71895c4aa",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "04f208cd-5547-4e09-8fbe-2b1d73ec1ecf",
          "status": "Created",
          "code": 201,
          "responseTime": 1671,
          "responseSize": 584
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "13765b48-7fc7-4f27-874d-820017cad98d",
        "cursor": {
          "ref": "5b774cbe-30b6-4516-bdc9-5b3710969435",
          "length": 251,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "42ec8f4d-5246-476b-ae05-119e71541d4f"
        },
        "item": {
          "id": "13765b48-7fc7-4f27-874d-820017cad98d",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "e7ce3fc7-c830-4381-880c-78e8a1261da5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "922a8fa5-ea60-4192-b1f2-987713fa88f2",
        "cursor": {
          "ref": "c840b5d3-de9a-444f-a94c-226cb30cf9f3",
          "length": 251,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "d2d53260-cc22-4196-952a-2f4dba73522a"
        },
        "item": {
          "id": "922a8fa5-ea60-4192-b1f2-987713fa88f2",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "e86215cf-18a7-46ed-be48-665c1ab1f5a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc15662a-deef-4cec-b43b-49a5304a1ec0",
        "cursor": {
          "ref": "4274ff13-95b6-4898-8bfb-cb61e406fc52",
          "length": 251,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "125539a4-6d15-4b08-b9b9-7cb385660b81"
        },
        "item": {
          "id": "bc15662a-deef-4cec-b43b-49a5304a1ec0",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "3684c29e-f42a-481e-9b82-1011732a9573",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 126,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9021c258-d834-49ec-8084-9ba692adc536",
        "cursor": {
          "ref": "205217ff-da4f-41e0-ad8b-13edd1374de2",
          "length": 251,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "f22cd7cd-bd77-402f-99fd-6618e8826f3d"
        },
        "item": {
          "id": "9021c258-d834-49ec-8084-9ba692adc536",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "f50be714-1e98-4b2e-8ade-a8e50e9f893b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 126,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb163e58-c275-4f86-83bc-3a843c0e50e6",
        "cursor": {
          "ref": "d5cc1c27-9396-419f-a048-a4bb096eff08",
          "length": 251,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "63076767-1df4-4a38-92c0-253a797c93bd"
        },
        "item": {
          "id": "bb163e58-c275-4f86-83bc-3a843c0e50e6",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "7ebee9dd-1c42-4232-bce9-d31fdb396f0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d96c895-6b9d-4ab2-bc17-27dc58ac47f9",
        "cursor": {
          "ref": "5245be37-8eb8-419d-83e2-0774eb01861d",
          "length": 251,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "01c0e1ea-c1d3-4f45-a96d-22fe971805d4"
        },
        "item": {
          "id": "3d96c895-6b9d-4ab2-bc17-27dc58ac47f9",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "d734bac2-8997-4117-89c1-ad4ef2ad33c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 115,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e891853-8a9d-4414-b0bd-06c06f74a477",
        "cursor": {
          "ref": "bfa10dad-e98c-42ac-b5ac-01c01db6433a",
          "length": 251,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "da0d3473-7646-4b9c-80be-2867c202375c"
        },
        "item": {
          "id": "5e891853-8a9d-4414-b0bd-06c06f74a477",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "063a7994-d393-475b-bb4a-7c4bf954b1b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd8254c3-8182-4728-8d48-73b02ff53c24",
        "cursor": {
          "ref": "dc41d861-3514-41b8-a854-bb73e98460c0",
          "length": 251,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "3d1772b5-f937-4ef3-b844-725365c4dda3"
        },
        "item": {
          "id": "fd8254c3-8182-4728-8d48-73b02ff53c24",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "e7ef7975-35bc-467a-bc4e-126cc330ab1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6bb93b1-442d-4f85-bcb6-725904ddd109",
        "cursor": {
          "ref": "5d1580de-df3a-427f-923a-33cca6334d7e",
          "length": 251,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "999ea060-a3dd-4bb1-8c24-b34f6775b7dd"
        },
        "item": {
          "id": "d6bb93b1-442d-4f85-bcb6-725904ddd109",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "13e2b0c7-7bbc-4b4e-9227-bfeef78f0a6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0462c6f3-8366-4b11-89a4-ecd54ac90912",
        "cursor": {
          "ref": "a2a88eef-706b-474d-bfcb-dcc1ea3da81c",
          "length": 251,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "e5d0c6fa-d646-4492-a236-27b828ec6e68"
        },
        "item": {
          "id": "0462c6f3-8366-4b11-89a4-ecd54ac90912",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "c165de6c-9ec5-419a-8857-fd4d3ffc96fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59fede35-ac2a-4252-a3c0-51abec55fb19",
        "cursor": {
          "ref": "ddc4ab5d-b26c-4c8c-b425-97146a1de9aa",
          "length": 251,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "0be3b94f-8345-40e1-91dc-f075104987db"
        },
        "item": {
          "id": "59fede35-ac2a-4252-a3c0-51abec55fb19",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "239725e6-2132-43b3-9682-4d90c0e037e1",
          "status": "Created",
          "code": 201,
          "responseTime": 1363,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "8fc3d257-7cc1-46dc-86e3-5706ae35d04a",
        "cursor": {
          "ref": "8c42d932-a316-4ca6-9dd7-05bfd73bde1b",
          "length": 251,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "3a5debea-ca78-45f4-9fb7-f11d0245f33b"
        },
        "item": {
          "id": "8fc3d257-7cc1-46dc-86e3-5706ae35d04a",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "38378a9d-33e7-4050-9dc1-58e04767e1f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 112,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c651f331-cbb3-401c-889b-6501eb0c3273",
        "cursor": {
          "ref": "a7002c81-9e0c-444e-af94-1c9af8882d26",
          "length": 251,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "2ad85829-b0a0-47fa-aab2-051e01f28a7c"
        },
        "item": {
          "id": "c651f331-cbb3-401c-889b-6501eb0c3273",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "54e433d3-6328-4a1c-b276-b0ed2cc410c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1bf57eb-b597-42c8-9af0-907dc2238a79",
        "cursor": {
          "ref": "924b541a-ecd4-415a-8e0c-2fb250e0bbbf",
          "length": 251,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "a0b47fcf-28f3-4a6a-8fd7-7911ffef2d58"
        },
        "item": {
          "id": "b1bf57eb-b597-42c8-9af0-907dc2238a79",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "f066aa4e-23ca-4974-ad07-894c7b672eb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73a847a6-1129-4437-a265-b1e693e1e76a",
        "cursor": {
          "ref": "c146c321-5d53-4729-8734-49f91cc1ad44",
          "length": 251,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "fd9b0e64-2c0a-4fd3-8955-9507b3fdd077"
        },
        "item": {
          "id": "73a847a6-1129-4437-a265-b1e693e1e76a",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "fde24d40-32c9-4de2-92f1-e2c0ed999ba1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae13589a-2585-457d-aaf4-39000d27db01",
        "cursor": {
          "ref": "b3a273be-abb6-4196-8e91-51477efd38f9",
          "length": 251,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "482f0538-7999-4440-96d9-41f9ac62ec25"
        },
        "item": {
          "id": "ae13589a-2585-457d-aaf4-39000d27db01",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "ef03128a-3f94-48f4-93bb-d8dac9971606",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84316e9c-3b80-4a2f-bc8f-8c0cee20d123",
        "cursor": {
          "ref": "13e37287-5610-4446-b035-b719c3d3cc53",
          "length": 251,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "4538c2d6-6b4c-4655-827f-6967ace6dcbd"
        },
        "item": {
          "id": "84316e9c-3b80-4a2f-bc8f-8c0cee20d123",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "749db2ae-580f-4eea-883e-c5f05cc93c37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6172338b-b177-49c1-9b8c-b765be3a6873",
        "cursor": {
          "ref": "4ee26fc8-a5a0-4d23-b9df-cc1f0e0bb10e",
          "length": 251,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "f63ae357-82f4-4899-b93a-c6142a1e15e7"
        },
        "item": {
          "id": "6172338b-b177-49c1-9b8c-b765be3a6873",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "a8260089-2c45-4840-9677-8c8c03db523c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63425f73-3a80-4742-8fa7-076d623a664d",
        "cursor": {
          "ref": "5d4a72c3-3ad3-4a16-9e8d-b976288d7309",
          "length": 251,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "624fa0ed-9dec-48c3-aa4b-d92f8cd7f308"
        },
        "item": {
          "id": "63425f73-3a80-4742-8fa7-076d623a664d",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "900b2c58-e041-445e-b8fd-a3af9e996b82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cdcf5f6-4d38-471b-b226-664add05cf34",
        "cursor": {
          "ref": "01ad3c7b-864c-4a4a-9f5c-d042c9bc91d0",
          "length": 251,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "a5a27911-d577-4907-94dc-ad3d75b7ca3a"
        },
        "item": {
          "id": "7cdcf5f6-4d38-471b-b226-664add05cf34",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "f8e48b18-b0c7-4745-bc8a-11e8071b3533",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8ce41c2-c09c-430f-8f57-b5485cd8ea34",
        "cursor": {
          "ref": "41cce685-1a01-4e7e-b3d2-af443fb35a4e",
          "length": 251,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "c272a616-968a-4d7c-89c3-886bc174c5ca"
        },
        "item": {
          "id": "e8ce41c2-c09c-430f-8f57-b5485cd8ea34",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "58709867-4522-42dd-9e00-85d7268bcaf4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56ea40ab-e94c-4ae0-b5b1-12985aa2c46d",
        "cursor": {
          "ref": "82fdc6ae-d320-4285-917a-112736296766",
          "length": 251,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "bf5ec4f4-364c-4e63-864d-e6d79fc7b006"
        },
        "item": {
          "id": "56ea40ab-e94c-4ae0-b5b1-12985aa2c46d",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "69d45f2d-0d8c-4d2e-b3a0-7c02a9b515fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 124,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "394383de-c281-4fd6-91dc-a8dc1be9b6cf",
        "cursor": {
          "ref": "ed95b360-c421-4cd6-8f21-2da955457acf",
          "length": 251,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "ee48508d-b29d-4135-aaec-6659b72f6f66"
        },
        "item": {
          "id": "394383de-c281-4fd6-91dc-a8dc1be9b6cf",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "7020f466-31b2-4909-a2de-1baccde038f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17dc4d06-2c26-43e4-a373-88d2216d4d2c",
        "cursor": {
          "ref": "96a50a99-ac09-4598-9f2b-64e4d1d6be4b",
          "length": 251,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "7c74326b-0b5f-490c-810b-cda66a492212"
        },
        "item": {
          "id": "17dc4d06-2c26-43e4-a373-88d2216d4d2c",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "55fc00d1-3efb-446f-ada5-69fd21c5d19e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 602,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "f1c29e18-da48-4b8b-a17b-5c74cdf8c1b2",
        "cursor": {
          "ref": "56bc164e-000a-4d5a-89c2-29f6e52bc825",
          "length": 251,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "6cb17872-bebd-4217-98a6-b09e6d9ab716"
        },
        "item": {
          "id": "f1c29e18-da48-4b8b-a17b-5c74cdf8c1b2",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "b45f7055-ee17-42dc-886a-5b6b98208ce8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f26f63d1-83c1-4228-a782-43f548805f7b",
        "cursor": {
          "ref": "478dd1f8-55b8-4969-b4d4-185ee24a31d7",
          "length": 251,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "32c251ac-a2bb-430c-ba6f-274477160d89"
        },
        "item": {
          "id": "f26f63d1-83c1-4228-a782-43f548805f7b",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "da57f004-6bad-41e4-a4d4-ec5761da3792",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 198,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97fd8f73-7031-48e5-acc5-e4e29d3045ee",
        "cursor": {
          "ref": "045356a5-ba8b-430f-8500-7037fb1ad753",
          "length": 251,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "5d0e8274-c4d0-424e-882b-2ae2d97d1a98"
        },
        "item": {
          "id": "97fd8f73-7031-48e5-acc5-e4e29d3045ee",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "eeae7445-0134-4190-bd67-4b78f2240fc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15e0b542-0acf-4c5c-a44f-310c00a9023e",
        "cursor": {
          "ref": "e8afcd59-7df4-4fcc-b929-0c0863a19f02",
          "length": 251,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "a63d9c28-b3c9-4efa-9b65-81e2fc946a37"
        },
        "item": {
          "id": "15e0b542-0acf-4c5c-a44f-310c00a9023e",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "34880103-7c5c-4f8a-861b-1ad7b087cea9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af12eeab-43a4-4ea9-a8c8-cf286bd8c5d0",
        "cursor": {
          "ref": "d2277c6d-8793-4b00-ac97-3597e10fa426",
          "length": 251,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "d889cf1f-f2c0-443b-b610-a74ceabc07b2"
        },
        "item": {
          "id": "af12eeab-43a4-4ea9-a8c8-cf286bd8c5d0",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "d8535382-18a2-4106-ace3-f98a29daff00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 252,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a78f64d-8fc8-4595-8dcf-7181a55a554f",
        "cursor": {
          "ref": "12519563-6b3e-416e-972e-2d38e12b3696",
          "length": 251,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "ba70744c-c028-465f-8b7b-41c00d835b88"
        },
        "item": {
          "id": "4a78f64d-8fc8-4595-8dcf-7181a55a554f",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "f60a3b96-1fce-4eb2-a176-2573895a697d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef34c56b-c081-42c2-b7e1-460a57192805",
        "cursor": {
          "ref": "0e28f163-00c7-45b0-a06d-50c238441102",
          "length": 251,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "1fbda7db-5431-4a0e-8e64-e2a79497eac1"
        },
        "item": {
          "id": "ef34c56b-c081-42c2-b7e1-460a57192805",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "52340b98-f54c-4ff2-b591-1cdd7ecd4d7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 627,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "f1e3811f-ac02-41ee-a447-eb846e728c4e",
        "cursor": {
          "ref": "c376adc4-3531-46aa-afe8-d8eef0e9c461",
          "length": 251,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "72015229-acc7-41c1-a9d2-b94adac4fb2e"
        },
        "item": {
          "id": "f1e3811f-ac02-41ee-a447-eb846e728c4e",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "54be980b-00f6-43d7-b704-898e9c9dcf4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b4f023e-bb98-4298-b583-1e18f4380293",
        "cursor": {
          "ref": "f562f0dc-a495-4296-afed-e91bc5558b88",
          "length": 251,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "73f74c9d-1c46-4eb9-a731-52fdf3bb2541"
        },
        "item": {
          "id": "7b4f023e-bb98-4298-b583-1e18f4380293",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "a4644e89-05cf-4fb3-a8f4-389fa353cc62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6579a556-2f30-4f0e-a11d-a2c9649a89e3",
        "cursor": {
          "ref": "36e78fc0-46a3-466e-9c32-3b2ed5586b66",
          "length": 251,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "864fb40e-6e53-423b-ace6-399faf305e62"
        },
        "item": {
          "id": "6579a556-2f30-4f0e-a11d-a2c9649a89e3",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "b39310e8-d93e-4a44-ace4-b870952a8c57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18ce1b4e-45d4-4f83-ac58-449451313d36",
        "cursor": {
          "ref": "dd906a50-9dfc-471a-8f3a-d5c82ca308b8",
          "length": 251,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "4943b753-b13c-4d3e-bf63-b0953c90a92c"
        },
        "item": {
          "id": "18ce1b4e-45d4-4f83-ac58-449451313d36",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "67524cf7-2036-4356-bc37-15890e184629",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "180f1ea5-d2e9-4ddb-99e1-bdbb0b08099c",
        "cursor": {
          "ref": "4da334c0-073f-46ed-b2ab-ae1331e2938d",
          "length": 251,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "1496c1a2-985d-4099-a778-cfda17cf076f"
        },
        "item": {
          "id": "180f1ea5-d2e9-4ddb-99e1-bdbb0b08099c",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "d8de242b-e463-49e7-a425-baa8d9930088",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 112,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d468a0c-7bcc-47ca-a76b-83c27d5cff00",
        "cursor": {
          "ref": "20dcb91f-0db0-41fe-8623-b73ca09b3cd7",
          "length": 251,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "30b97f63-d851-4674-b92b-cb92de4c35d6"
        },
        "item": {
          "id": "4d468a0c-7bcc-47ca-a76b-83c27d5cff00",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "3db497df-6805-4b42-bed6-1187d41e8164",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2aaa2e6e-075a-4c40-abcf-cb6a6813755d",
        "cursor": {
          "ref": "aa8ecc86-b90b-45d6-b5e3-9a0f78ada9f5",
          "length": 251,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "46a6cce3-1347-4c0a-a43c-3d370bbf489c"
        },
        "item": {
          "id": "2aaa2e6e-075a-4c40-abcf-cb6a6813755d",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "aee98d0f-e558-4cfa-bfa8-72f32becf3f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48d3b852-1029-4286-90be-ee4eec7cdbe1",
        "cursor": {
          "ref": "75361b27-662b-46c4-91f2-8b49faf95017",
          "length": 251,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "f6c0e2fb-40c5-4052-a939-bc4fc2fcd905"
        },
        "item": {
          "id": "48d3b852-1029-4286-90be-ee4eec7cdbe1",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "71f6b71e-9f30-4118-a23c-5f0319598822",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8705649f-3f7b-46b2-9ff1-cc48eae0fc2e",
        "cursor": {
          "ref": "9f208599-82ed-4e03-8518-dd28b2c58a7f",
          "length": 251,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "9312c742-13c8-480c-9c25-d39d52d06076"
        },
        "item": {
          "id": "8705649f-3f7b-46b2-9ff1-cc48eae0fc2e",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "e0f74ad0-5af0-4a09-854e-d2490adb1066",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 179,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8a17272-e713-4c5d-a52a-638fcfbbb58d",
        "cursor": {
          "ref": "cc6947d8-5403-4d1f-9a2d-b781fa556e8b",
          "length": 251,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "3642e997-cd88-4852-a8c4-9ea67a453808"
        },
        "item": {
          "id": "e8a17272-e713-4c5d-a52a-638fcfbbb58d",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "ed0da5a1-c798-47e2-a08e-fec2d4f3e108",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8d08c67-a33b-4aba-8821-776f724b21a4",
        "cursor": {
          "ref": "fc3569c9-af11-4452-a400-5b1ad530d619",
          "length": 251,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "f3038512-858a-409d-9c2a-d1f30f35b276"
        },
        "item": {
          "id": "b8d08c67-a33b-4aba-8821-776f724b21a4",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "d194d99c-1ebf-4419-b5f0-b141dca395e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6d661e3-4b38-43d4-bf38-255097675f8d",
        "cursor": {
          "ref": "0008eae6-bf84-4ef2-97de-f8580f8d5b0f",
          "length": 251,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "36125992-a8a5-45a5-a8b5-d25dcbbdbfe5"
        },
        "item": {
          "id": "a6d661e3-4b38-43d4-bf38-255097675f8d",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "928c200c-71b7-4f7b-86b8-08c0917cdc0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1beef81c-de51-4f86-b6d8-8f886814c94e",
        "cursor": {
          "ref": "66bdbd05-e589-43c6-8fc4-3b2864d9214c",
          "length": 251,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "b1aff4dc-f437-4568-a2f5-f9e9dc26ae12"
        },
        "item": {
          "id": "1beef81c-de51-4f86-b6d8-8f886814c94e",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "537f7ccc-5251-48aa-b38c-e7b42a29ad25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 115,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e948101-3e94-49ff-92e7-5ef85aa265d7",
        "cursor": {
          "ref": "8d3a8de3-7156-469a-af22-b29368abef58",
          "length": 251,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "91b8af75-bfa7-443a-a3c8-8d20da0c5dd1"
        },
        "item": {
          "id": "5e948101-3e94-49ff-92e7-5ef85aa265d7",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "c762f37c-e662-416b-a557-3c1d2ba982fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f594166-0f03-4339-bf6e-dc374e3cdb2d",
        "cursor": {
          "ref": "93a27ac8-1f33-4ca6-9452-32af9a5aa2f6",
          "length": 251,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "62ce5f26-3690-4cac-bfec-160838f4f60f"
        },
        "item": {
          "id": "0f594166-0f03-4339-bf6e-dc374e3cdb2d",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "57351ad6-a590-4abb-a489-dbcda0b980b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 452,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70b16296-fd27-498d-83fe-40f59c1cbdd7",
        "cursor": {
          "ref": "0f12cf8f-ab6d-43c5-a0d8-03ec89272a58",
          "length": 251,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "635f32da-4340-4bca-bfec-f9dad8701e76"
        },
        "item": {
          "id": "70b16296-fd27-498d-83fe-40f59c1cbdd7",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "a28fcd2f-98e5-4de6-890d-75ec1bc309a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52c24fdf-946d-4ff9-9cc2-42af67750665",
        "cursor": {
          "ref": "56c9c4d2-537b-4db1-8c83-f97d51d1732c",
          "length": 251,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "296da202-77b3-419f-bff5-2f187d0cb348"
        },
        "item": {
          "id": "52c24fdf-946d-4ff9-9cc2-42af67750665",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "9e626c45-cdf7-4680-bea8-813163117783",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 696,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a96785b-a1e3-4c73-9a5d-ed6d65ffecd6",
        "cursor": {
          "ref": "f749a527-a39f-4003-9d42-4c3a666b1ac2",
          "length": 251,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "cde7445c-9fa2-45c3-97e1-17d47002bec1"
        },
        "item": {
          "id": "8a96785b-a1e3-4c73-9a5d-ed6d65ffecd6",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "2792e090-1723-406f-91f0-69651e702042",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21e67cc7-8e62-40bc-abde-76393bcda4b7",
        "cursor": {
          "ref": "cefb42ae-5ccf-4eec-9f4c-ae76f10529ec",
          "length": 251,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "0ebab6db-3dcd-4969-a308-3508bca5c12a"
        },
        "item": {
          "id": "21e67cc7-8e62-40bc-abde-76393bcda4b7",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "25a8fa31-00b4-4c62-a618-f76feb2522e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ee0f76f-c68d-4aab-8a66-e3f753b25ffb",
        "cursor": {
          "ref": "346531fa-c3f2-4df7-b5fb-dfd22a81f328",
          "length": 251,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "0e81678d-0e76-43f3-9968-57c944a525b9"
        },
        "item": {
          "id": "9ee0f76f-c68d-4aab-8a66-e3f753b25ffb",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "96686e7b-4e18-4276-8dd0-beec5f5cfc19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "931fdb07-1069-4836-b9d0-ca8470a52cf9",
        "cursor": {
          "ref": "57750d37-d344-4ba1-9bad-b7e531ef1ae3",
          "length": 251,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "ea2b4ce2-b3f8-4ab6-85e0-c303eb0bda0d"
        },
        "item": {
          "id": "931fdb07-1069-4836-b9d0-ca8470a52cf9",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "41631071-1637-48f8-8336-88dc06df5679",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 557
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf834110-deca-48dc-9982-8be9fada9d3c",
        "cursor": {
          "ref": "79e304a8-b542-4bb2-9811-4907dce12366",
          "length": 251,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "bd072aae-6370-4752-9759-f188a118d385"
        },
        "item": {
          "id": "bf834110-deca-48dc-9982-8be9fada9d3c",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "50c9e73c-c727-4744-8fd8-d2e1fcf9d65f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 267,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a857d0e3-47b0-4539-be1c-06b4e68d609b",
        "cursor": {
          "ref": "7d85a943-1054-40a8-ab5f-25cd6b4ae0d3",
          "length": 251,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "f27431ac-7665-45c2-b9a6-a824b0cad230"
        },
        "item": {
          "id": "a857d0e3-47b0-4539-be1c-06b4e68d609b",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "f3643fe1-1683-411d-a705-313f9c0f4fb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae79e1c8-d17a-479d-8764-ee9350300099",
        "cursor": {
          "ref": "0f11685f-6f32-4012-bf62-9f1fb355024b",
          "length": 251,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "76069507-7f82-4de3-8132-829b817d5ea2"
        },
        "item": {
          "id": "ae79e1c8-d17a-479d-8764-ee9350300099",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "f79c518c-762e-4118-932f-5d3c4c1f7fe3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcfebcb1-d863-4475-a86c-91d75ce24123",
        "cursor": {
          "ref": "2e61c0ba-daff-44b8-812e-a868714afd77",
          "length": 251,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "3988e691-b245-4e12-a604-90c94040d02b"
        },
        "item": {
          "id": "bcfebcb1-d863-4475-a86c-91d75ce24123",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "c09b5e29-5831-4163-bf64-ef4f45cdbcdd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f841972a-4a70-4c5c-a244-24b0f1b29b4d",
        "cursor": {
          "ref": "17d897c8-8246-4129-8602-aed09a1030db",
          "length": 251,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "4bc5396d-2cef-440a-bef0-c247f22acc9e"
        },
        "item": {
          "id": "f841972a-4a70-4c5c-a244-24b0f1b29b4d",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "6f72ec8a-a58b-41e1-8615-05dd5cedfba1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92e8aed2-0b7e-4970-b6ea-e090c9b1d6c5",
        "cursor": {
          "ref": "62933d95-9f9f-4866-9573-6ee0d2b3c6a4",
          "length": 251,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "152444ec-ade7-43a1-9614-17a14f457bdc"
        },
        "item": {
          "id": "92e8aed2-0b7e-4970-b6ea-e090c9b1d6c5",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "91fcbc7e-3a67-48ef-a589-52b47298c479",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02b0f328-757a-439b-acb3-0ffa55910f8d",
        "cursor": {
          "ref": "5893d18b-c3b7-4e6a-be0e-b9584ed94d80",
          "length": 251,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "23a1880c-f0e0-4a24-bfdd-f48afe96806b"
        },
        "item": {
          "id": "02b0f328-757a-439b-acb3-0ffa55910f8d",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "8e37d0a7-0ae4-4bae-99f2-c810629628c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8624f777-2b5b-4839-9d57-837ed35a4294",
        "cursor": {
          "ref": "649a31c0-ffbc-40f6-be50-293b268244f1",
          "length": 251,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "36543472-1432-466e-98d8-182d1bb93487"
        },
        "item": {
          "id": "8624f777-2b5b-4839-9d57-837ed35a4294",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "5a77af13-644d-4740-84b4-8ee7beacc492",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80a3b033-5bd7-4db5-9464-842ec393563a",
        "cursor": {
          "ref": "2f4e3bf4-1cae-486a-b2f3-040c3ab8c04b",
          "length": 251,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "fd3120a0-61fc-4aa9-8514-84648069b1bb"
        },
        "item": {
          "id": "80a3b033-5bd7-4db5-9464-842ec393563a",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "2b885676-c7af-4a4f-88ff-fb3ae06516b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "957ecd27-886f-401f-8037-ead2bd9d7bc1",
        "cursor": {
          "ref": "27006c9d-4afa-4cb8-b4ca-8150b7d965a5",
          "length": 251,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "ee3f115f-6795-43d2-9f1a-30d54e1d8483"
        },
        "item": {
          "id": "957ecd27-886f-401f-8037-ead2bd9d7bc1",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "c23999b9-d3d6-4c33-90ef-e04b5987d64f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 339,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08393acc-f1eb-4bbc-a7f1-2838fbe012c0",
        "cursor": {
          "ref": "536d237a-38a5-42a5-a8d8-1f3701a9df7a",
          "length": 251,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "9e32b300-7551-4032-87fa-eb25f056d28d"
        },
        "item": {
          "id": "08393acc-f1eb-4bbc-a7f1-2838fbe012c0",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "6268d2d4-5414-44a1-a00d-81f9ea04bd09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0559f991-05e3-40b8-a513-b296a5de3208",
        "cursor": {
          "ref": "7aad3e6c-fd40-4569-ba71-665a4bd36800",
          "length": 251,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "4435e98a-f443-4f72-997b-0cf2de310c59"
        },
        "item": {
          "id": "0559f991-05e3-40b8-a513-b296a5de3208",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "4e7ca0bb-f6f4-4b89-9589-513a67e3b610",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b04d9d7-e44c-46d5-ad33-042a737c94f8",
        "cursor": {
          "ref": "564107c8-2b00-43f5-8787-4107155645d5",
          "length": 251,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "2bd50327-87c1-432e-bb99-7afc76c6276d"
        },
        "item": {
          "id": "4b04d9d7-e44c-46d5-ad33-042a737c94f8",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "651d2044-699e-4e7c-9d9c-de1fd0f13c9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 108,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6ae2d76-cfa3-45af-b26e-29c914a9b6bf",
        "cursor": {
          "ref": "efd3178f-39a0-4ae1-aaa3-cf155db9de58",
          "length": 251,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "3bd5aede-1b56-4c5a-900a-055a93970648"
        },
        "item": {
          "id": "b6ae2d76-cfa3-45af-b26e-29c914a9b6bf",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "1dfeecad-70ef-4af5-a14f-d5695e7ca506",
          "status": "Created",
          "code": 201,
          "responseTime": 857,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "4a93461b-a864-49d0-baf3-c49d1288747b",
        "cursor": {
          "ref": "978d0ef7-9b04-47da-be39-fb74f2942638",
          "length": 251,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "886f80e5-ac2e-42ed-aaf8-eb05bf3348ef"
        },
        "item": {
          "id": "4a93461b-a864-49d0-baf3-c49d1288747b",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "8d2ec6fc-bb41-471b-9d72-2be12fc16f30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7f068b8-8d6a-451c-b5a1-f1bd6c3c4a6f",
        "cursor": {
          "ref": "c8673c9e-76db-4847-b547-c3114f755585",
          "length": 251,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "f6f06a24-6285-4fe1-b99d-99010829270e"
        },
        "item": {
          "id": "a7f068b8-8d6a-451c-b5a1-f1bd6c3c4a6f",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "b25deb52-b02c-4711-a9e9-777f3dbc7d44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28d37dc3-b053-4383-8691-97eaabc615e3",
        "cursor": {
          "ref": "e044f63d-75fd-4093-8c1f-ff098297b92f",
          "length": 251,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "f46118fa-6862-447b-9c6b-3966a97e4163"
        },
        "item": {
          "id": "28d37dc3-b053-4383-8691-97eaabc615e3",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "e0f0660c-5fda-4d3a-9956-fa6d41249dc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 389
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43c614b3-2eb5-4aa4-ba98-a87d59b815ce",
        "cursor": {
          "ref": "e0586661-858b-4a84-ae52-51a62d074709",
          "length": 251,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "9d557586-095a-47f3-94c6-d7dd057f115c"
        },
        "item": {
          "id": "43c614b3-2eb5-4aa4-ba98-a87d59b815ce",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "4d41ac1f-fe93-403d-a3b4-2d9d4cef095b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 117,
          "responseSize": 388
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07111b53-eb76-4e93-8b20-09bb69cc68cb",
        "cursor": {
          "ref": "836d7d7f-5e42-4923-903c-34a4012c7e57",
          "length": 251,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "473fc635-6ccb-47cd-bc2a-c3539f40bddb"
        },
        "item": {
          "id": "07111b53-eb76-4e93-8b20-09bb69cc68cb",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "42275700-d7c8-423f-a39d-8b5c064963a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 109,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2b4af2c-7a41-4755-8f4b-7c5d9e07a52b",
        "cursor": {
          "ref": "64ed0bac-8264-4065-8e78-4e48b96ec3e8",
          "length": 251,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "776a6559-417a-4eb8-9df4-ea96016074eb"
        },
        "item": {
          "id": "f2b4af2c-7a41-4755-8f4b-7c5d9e07a52b",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "716971e6-0168-4236-8854-966af2c4e0fc",
          "status": "Created",
          "code": 201,
          "responseTime": 622,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "c84eb734-6648-4434-9b23-37c690c23a34",
        "cursor": {
          "ref": "5f2b3b89-bb6a-41b5-b0eb-057b1055a6f9",
          "length": 251,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "fa64915a-8ff6-438a-95d0-263c37ac1476"
        },
        "item": {
          "id": "c84eb734-6648-4434-9b23-37c690c23a34",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "9cc0ef12-5bdf-4cbb-829d-cf106de4242d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 213,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbc36cbf-e0bd-4ddf-b44b-ca5c506fdb77",
        "cursor": {
          "ref": "564e33ee-4896-49b0-98f7-2afa382339ae",
          "length": 251,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "853853fd-85fa-4b46-a47b-537b1e80e432"
        },
        "item": {
          "id": "dbc36cbf-e0bd-4ddf-b44b-ca5c506fdb77",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "b95ea116-bebe-4378-a8fc-a8d34fde7a0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90b95e96-f4e4-4dbd-8e92-31a0ffe4d54c",
        "cursor": {
          "ref": "0c503042-55ea-40d7-adeb-33c1b14d9a95",
          "length": 251,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "f51d424e-989d-4758-9e14-816aaa2862d1"
        },
        "item": {
          "id": "90b95e96-f4e4-4dbd-8e92-31a0ffe4d54c",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "2983a2c6-cfb9-4450-bba0-2c36a47f8b29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52e8521c-1491-499a-a393-985f7774f15e",
        "cursor": {
          "ref": "0587beba-ac00-4191-b0e7-56721de43731",
          "length": 251,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "84c42a2c-9b7c-48e2-b79f-a24dc2e8db1b"
        },
        "item": {
          "id": "52e8521c-1491-499a-a393-985f7774f15e",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "3ce50239-169a-4c3c-a456-e8e7a4a494b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "659006ce-09ea-42aa-8fc0-3a2634c20310",
        "cursor": {
          "ref": "47918b94-ca65-42b9-b76e-273c1c9f956e",
          "length": 251,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "9f7da373-3485-45f8-8e3c-8ca3e4b50268"
        },
        "item": {
          "id": "659006ce-09ea-42aa-8fc0-3a2634c20310",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "7c6aadd2-a498-4dbd-8e15-0233144d7b6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 299,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fc73dc7-502d-43b9-82e1-1c55dfe72016",
        "cursor": {
          "ref": "a3d85fc2-8f84-42d2-996a-462f909ec019",
          "length": 251,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "d8d72bb5-0ce1-4d12-aaae-2afbd6bb661d"
        },
        "item": {
          "id": "3fc73dc7-502d-43b9-82e1-1c55dfe72016",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "34e06280-204f-458d-a46c-879fd478ac67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "559f3263-d272-4ce9-ace5-ca86eb366a9f",
        "cursor": {
          "ref": "09cc44f8-a25d-415d-a9fc-f831665110df",
          "length": 251,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "a86114e7-66ff-4c0d-9656-8e22d551bda6"
        },
        "item": {
          "id": "559f3263-d272-4ce9-ace5-ca86eb366a9f",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "09e7f102-7533-4d8c-b546-a5d560e3a968",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e58a8ad-4f7b-44fa-81cf-2d71b7d61199",
        "cursor": {
          "ref": "915b2c3b-9f68-4bea-a9bc-794927bee268",
          "length": 251,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "533fbdcd-3fdd-4900-ba42-405668e71bb4"
        },
        "item": {
          "id": "8e58a8ad-4f7b-44fa-81cf-2d71b7d61199",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "c3feb6c4-362d-441d-92b7-95fff38cf82b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 216,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f348e45e-4522-4027-bb81-1df7865bccb6",
        "cursor": {
          "ref": "3fcd0beb-f552-4a39-bb0b-df7c679b818e",
          "length": 251,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "b8766b99-c9c3-4f41-afde-853da4658a4c"
        },
        "item": {
          "id": "f348e45e-4522-4027-bb81-1df7865bccb6",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "d2ceef19-34d8-4a38-8e89-092eb9c25866",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "edfa2f47-04bc-42d5-a058-2ccc2cb42f29",
        "cursor": {
          "ref": "95ed589d-0125-4dc7-a430-5de1bc46c248",
          "length": 251,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "75d4b169-3165-4f78-9e65-887a09f4e521"
        },
        "item": {
          "id": "edfa2f47-04bc-42d5-a058-2ccc2cb42f29",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "60ab18d6-e60d-4cf3-882b-7a33fa089bbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 543,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "0b9ae80d-858b-4d84-9d6d-8f5caf689e6b",
        "cursor": {
          "ref": "e8145959-ac63-4905-b5e1-703dd67e630d",
          "length": 251,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "152a1994-a2e1-4670-b79a-4b4632a48c7f"
        },
        "item": {
          "id": "0b9ae80d-858b-4d84-9d6d-8f5caf689e6b",
          "name": "credentials_issue"
        },
        "response": {
          "id": "a2e886b4-4ac2-4e73-8212-e7036966fa17",
          "status": "Created",
          "code": 201,
          "responseTime": 1671,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c7c2cb1-e51a-4f78-8ff2-ae4a606a4ae3",
        "cursor": {
          "ref": "8f8a3a98-743c-4a5f-a9a8-73df3ed7d2c9",
          "length": 251,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "d2a70b73-36f9-4a97-a653-cfc28530986e"
        },
        "item": {
          "id": "9c7c2cb1-e51a-4f78-8ff2-ae4a606a4ae3",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "1286d33a-900c-4935-bcba-5ad3722b4cef",
          "status": "Created",
          "code": 201,
          "responseTime": 775,
          "responseSize": 590
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d25b4e0-685a-4a96-b57b-824891d09950",
        "cursor": {
          "ref": "f9aadf81-7664-41f0-a35b-c9a9ac771b64",
          "length": 251,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "41ed5df6-ede9-4fb8-b72b-77aaee8d8936"
        },
        "item": {
          "id": "3d25b4e0-685a-4a96-b57b-824891d09950",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "a0a30df5-95da-4e5e-9780-de8fc0224d4e",
          "status": "Created",
          "code": 201,
          "responseTime": 596,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fa5c555-7d7a-47ee-a4d0-c6bb1bf701bb",
        "cursor": {
          "ref": "809ee5c6-61e9-4205-8e05-9fa871305019",
          "length": 251,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "7284ecaf-c5c0-4b64-94f6-c32e5bfc82ab"
        },
        "item": {
          "id": "5fa5c555-7d7a-47ee-a4d0-c6bb1bf701bb",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "1c266c8e-8df3-42e1-b9bd-4551c1950c84",
          "status": "Created",
          "code": 201,
          "responseTime": 569,
          "responseSize": 560
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c73fd9a-92fc-4d63-9cbd-d7db1d2eef2e",
        "cursor": {
          "ref": "23bca198-1356-45c2-95de-22601e1dd1ed",
          "length": 251,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "c7e43703-7952-4305-9f7d-909d5c529a75"
        },
        "item": {
          "id": "3c73fd9a-92fc-4d63-9cbd-d7db1d2eef2e",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "d05d09e0-dff1-471e-92e2-ad46c722dd17",
          "status": "Created",
          "code": 201,
          "responseTime": 801,
          "responseSize": 528
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "a46bd1ee-23a5-4fd0-8fc2-488ea3e5bf14",
        "cursor": {
          "ref": "3d7789c6-516e-4a0f-8bb4-8926f6b99985",
          "length": 251,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "6b0b6fbd-71d7-4676-b637-3e743e2a037b"
        },
        "item": {
          "id": "a46bd1ee-23a5-4fd0-8fc2-488ea3e5bf14",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "462ca28c-d73e-44b2-992d-12de27d11d50",
          "status": "Created",
          "code": 201,
          "responseTime": 695,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a79e9da5-a49b-4b01-8350-de3b0413a037",
        "cursor": {
          "ref": "63ac8118-c4c1-4425-aeac-a1e079f341f1",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "c5a71be7-eb67-4f95-9a15-7a91cf9923af"
        },
        "item": {
          "id": "a79e9da5-a49b-4b01-8350-de3b0413a037",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "36e8b8e4-152f-485d-a73e-0f6db71625d0",
          "status": "OK",
          "code": 200,
          "responseTime": 97,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "a79e9da5-a49b-4b01-8350-de3b0413a037",
        "cursor": {
          "ref": "63ac8118-c4c1-4425-aeac-a1e079f341f1",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "c5a71be7-eb67-4f95-9a15-7a91cf9923af"
        },
        "item": {
          "id": "a79e9da5-a49b-4b01-8350-de3b0413a037",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "36e8b8e4-152f-485d-a73e-0f6db71625d0",
          "status": "OK",
          "code": 200,
          "responseTime": 97,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "e5ccefb1-ad19-4dd5-b1c7-5cad381413a9",
        "cursor": {
          "ref": "15c8e808-e0dd-4e46-afdd-1a93a51b93b3",
          "length": 251,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "551825f6-3869-4210-92de-0a9476b0311a"
        },
        "item": {
          "id": "e5ccefb1-ad19-4dd5-b1c7-5cad381413a9",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "477280e5-b199-40a7-854b-da4d73ec97ec",
          "status": "OK",
          "code": 200,
          "responseTime": 93,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "14adf318-8453-4187-8a38-7304b450e5db",
        "cursor": {
          "ref": "96fd7b2d-abc8-4fbb-9e93-1602abcb0647",
          "length": 251,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "6b20206b-0bd7-4d3a-a873-cc416b8eca80"
        },
        "item": {
          "id": "14adf318-8453-4187-8a38-7304b450e5db",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "94758fd3-c46e-4827-8421-bb38b28c5a81",
          "status": "OK",
          "code": 200,
          "responseTime": 101,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "aef38f1f-593f-4be7-9b2e-a5f54ff95dfd",
        "cursor": {
          "ref": "2d4f4c14-9d6a-4b8b-a418-99e03e3b8fae",
          "length": 251,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "9e813a12-65c8-42e5-8828-71ef3ebe1bbf"
        },
        "item": {
          "id": "aef38f1f-593f-4be7-9b2e-a5f54ff95dfd",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "bae9d68e-6b28-4bdd-8889-c1a681bd0e89",
          "status": "OK",
          "code": 200,
          "responseTime": 88,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "379d3d5a-ef9c-485c-80b0-613acf8c5c90",
        "cursor": {
          "ref": "90cfb181-cfcd-4fb0-b242-e88662e8e4c1",
          "length": 251,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "38005d0e-2c2f-4d35-8d50-48c28b199ce8"
        },
        "item": {
          "id": "379d3d5a-ef9c-485c-80b0-613acf8c5c90",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "0f1989f9-4908-48ef-98d6-dc6342bbf853",
          "status": "OK",
          "code": 200,
          "responseTime": 69,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "a3d0c1c7-1895-4e5e-9580-d1beb7f9c998",
        "cursor": {
          "ref": "a264e8e5-0887-4610-b98c-b3c56e0abfa3",
          "length": 251,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "ca4fdd61-13d5-4ac5-8da4-5693e2f21fdb"
        },
        "item": {
          "id": "a3d0c1c7-1895-4e5e-9580-d1beb7f9c998",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "91cbc9b9-fbe2-4935-abb3-e02931d5c9ae",
          "status": "OK",
          "code": 200,
          "responseTime": 74,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "709e1778-e5df-49aa-a781-aa9e80fdf450",
        "cursor": {
          "ref": "26c5bc92-73aa-4a56-be2e-b8da341f9e35",
          "length": 251,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "ad008f74-e887-4371-9d4e-444ba709f2a7"
        },
        "item": {
          "id": "709e1778-e5df-49aa-a781-aa9e80fdf450",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "8bb92ec9-4e0b-40a6-9246-43f7ef7aa1b3",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "d51f7563-4902-492b-9836-d9813ae9f69b",
        "cursor": {
          "ref": "767cbeac-b048-4b50-837c-027d6e5a0a05",
          "length": 251,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "130bb5e6-96d6-4afc-90be-181086a1f36c"
        },
        "item": {
          "id": "d51f7563-4902-492b-9836-d9813ae9f69b",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "f87e5367-b8b6-4de2-81aa-4bec740f4892",
          "status": "OK",
          "code": 200,
          "responseTime": 116,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "b0b31ca7-b3df-4840-b018-80848e1b88c4",
        "cursor": {
          "ref": "ce0fea3d-597e-400d-93b9-2fdb0eb1bcb8",
          "length": 251,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "0217c5e7-b1a9-40fc-882c-b1a5adeeb86a"
        },
        "item": {
          "id": "b0b31ca7-b3df-4840-b018-80848e1b88c4",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "0ce874a7-4895-480b-ae29-ef57fa7a9648",
          "status": "OK",
          "code": 200,
          "responseTime": 96,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "b5ca6dc5-907e-4edb-b7ed-fa2447764434",
        "cursor": {
          "ref": "f56f70db-1755-4575-8ae9-bb57a0248e4b",
          "length": 251,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "4edf7893-0b6e-484a-96a4-c9e9d33a13a5"
        },
        "item": {
          "id": "b5ca6dc5-907e-4edb-b7ed-fa2447764434",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "0d11313e-ac80-4079-95ca-75b86b070237",
          "status": "OK",
          "code": 200,
          "responseTime": 70,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "d6a6b307-6ccd-4b34-8ba2-51b335acab27",
        "cursor": {
          "ref": "b0c5a54f-1c78-4830-8379-e4db5e2c1e6c",
          "length": 251,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "38afc1b4-8cf6-462b-9f32-2068e6a23952"
        },
        "item": {
          "id": "d6a6b307-6ccd-4b34-8ba2-51b335acab27",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "fb287fab-c8dd-4e8d-8660-2caad02c39ef",
          "status": "OK",
          "code": 200,
          "responseTime": 71,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "585fb530-780a-44e9-814e-cf32c0b93cc1",
        "cursor": {
          "ref": "eb3c0eeb-5d06-40d9-8b2d-ccba8ce51895",
          "length": 251,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "29588263-d1bd-4e86-9164-2acb26430140"
        },
        "item": {
          "id": "585fb530-780a-44e9-814e-cf32c0b93cc1",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "fb2653c8-761e-465f-88f4-9d8d3fb7cf5d",
          "status": "OK",
          "code": 200,
          "responseTime": 89,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "a533b9b3-e0d5-4f04-9d75-c3fd32f9f464",
        "cursor": {
          "ref": "e5c37ee1-e0bd-44b0-a763-2d838517f0b8",
          "length": 251,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "66fb79a4-d51e-4f61-a499-6976ddc84cd3"
        },
        "item": {
          "id": "a533b9b3-e0d5-4f04-9d75-c3fd32f9f464",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "af39c5ba-6e1f-48d0-95cd-a76946cfb642",
          "status": "OK",
          "code": 200,
          "responseTime": 116,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "a822003f-2d63-469d-bb2a-ab414221de57",
        "cursor": {
          "ref": "2c1e6656-ebb8-4875-8e3b-b8b99e35a41c",
          "length": 251,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "fc577bbe-5e71-4309-8c7d-aac8460544e7"
        },
        "item": {
          "id": "a822003f-2d63-469d-bb2a-ab414221de57",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "93945418-0ff3-46fe-a435-d1276387f862",
          "status": "OK",
          "code": 200,
          "responseTime": 128,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "f2805b7b-3ddd-458e-908c-7b836f8cc943",
        "cursor": {
          "ref": "2c7edff8-6671-4203-b0e7-16aeaa4d60cd",
          "length": 251,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "4ab06fb2-b893-4048-8db2-e37b38f148e5"
        },
        "item": {
          "id": "f2805b7b-3ddd-458e-908c-7b836f8cc943",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "9702d7c6-45ba-4394-958d-e6f7c894bf6a",
          "status": "OK",
          "code": 200,
          "responseTime": 76,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "8f9ee78f-fab3-4310-8a0f-8c8b955d914c",
        "cursor": {
          "ref": "cc25341f-05f4-408c-b453-2deeaf721a64",
          "length": 251,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "743b13bb-9fb2-44ef-a521-9ace52ea8b2f"
        },
        "item": {
          "id": "8f9ee78f-fab3-4310-8a0f-8c8b955d914c",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "bfa8210b-d537-4357-b196-ebe61eb5bc73",
          "status": "OK",
          "code": 200,
          "responseTime": 69,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "2d3c6918-5958-4c70-a23c-c0c208a2d84a",
        "cursor": {
          "ref": "9f9903cd-1f93-4fc5-8ec0-07a4e26cd065",
          "length": 251,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "a590572b-cce9-4d4f-8fda-d4f6bfc0500a"
        },
        "item": {
          "id": "2d3c6918-5958-4c70-a23c-c0c208a2d84a",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "eff11f33-7857-4d42-a0e7-40f33a432412",
          "status": "OK",
          "code": 200,
          "responseTime": 74,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "4e8fde2a-0e2f-4341-b337-64bba71b5647",
        "cursor": {
          "ref": "9b98f8e6-6bbb-4dc1-800a-c5de884c02b1",
          "length": 251,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "1d30089c-3289-4e32-8351-d207b8209582"
        },
        "item": {
          "id": "4e8fde2a-0e2f-4341-b337-64bba71b5647",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "51fceaf5-0489-49c2-9df3-b1e4711fa7e4",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "bd5a752d-d2ed-41cc-b08f-9b5be763dbc9",
        "cursor": {
          "ref": "982a2704-9ac5-4166-b9dc-035ffc1252d6",
          "length": 251,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "cfb487b2-cfac-478a-94b6-aa561f1fad02"
        },
        "item": {
          "id": "bd5a752d-d2ed-41cc-b08f-9b5be763dbc9",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "aa825f8d-1c1b-4b65-8d1e-b26f34ac721c",
          "status": "OK",
          "code": 200,
          "responseTime": 75,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "43d9013b-efeb-47ec-8ef5-c4183c2d4b67",
        "cursor": {
          "ref": "33be0ffb-c47a-418a-b628-626ecad89961",
          "length": 251,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "f904ef63-7ef3-4328-b155-db793426c86e"
        },
        "item": {
          "id": "43d9013b-efeb-47ec-8ef5-c4183c2d4b67",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "6d73e555-0526-48bc-afdd-d05999032f0d",
          "status": "OK",
          "code": 200,
          "responseTime": 106,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "19f5fdaf-8607-48b3-9785-869779a46c83",
        "cursor": {
          "ref": "f5843e1c-5dae-4b6d-966e-09b2978bf09f",
          "length": 251,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "356df40c-0b27-4491-835a-98300c0a195b"
        },
        "item": {
          "id": "19f5fdaf-8607-48b3-9785-869779a46c83",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "4dc5fa82-0e47-4c60-8d81-e30f56611ed4",
          "status": "OK",
          "code": 200,
          "responseTime": 78,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "c193ba68-c5b4-4ace-90f5-5a6201602406",
        "cursor": {
          "ref": "356e30ba-7c1b-4208-80d2-5269edb96194",
          "length": 251,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "7af086f4-71f5-4968-808a-95b4bf38721c"
        },
        "item": {
          "id": "c193ba68-c5b4-4ace-90f5-5a6201602406",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "23606a0f-67c1-40a9-93a5-af9d7f3c4e86",
          "status": "OK",
          "code": 200,
          "responseTime": 68,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "2f4b74a4-9331-42cc-aabd-f4bfc6c1c282",
        "cursor": {
          "ref": "1d983922-877c-484c-921d-2446b4a800dc",
          "length": 251,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "4f572d7f-b83e-4024-aa1c-816f1c6beb43"
        },
        "item": {
          "id": "2f4b74a4-9331-42cc-aabd-f4bfc6c1c282",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "8f68aef0-1fe4-4e2f-be8d-95fb2622167b",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "7167b21e-0ac5-4817-b257-cee4de68c979",
        "cursor": {
          "ref": "f91c3e99-1b27-4d75-99fc-ab60462d4e49",
          "length": 251,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "b77374cb-3335-43eb-8743-44720940d1cb"
        },
        "item": {
          "id": "7167b21e-0ac5-4817-b257-cee4de68c979",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "2e68ebfd-3c5b-46b1-aff4-6f2b5f658fed",
          "status": "OK",
          "code": 200,
          "responseTime": 68,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "bc4f38c8-cca6-45d4-b298-700c73b31fab",
        "cursor": {
          "ref": "3f60d0da-7a8a-4adf-9df8-2880825c7fb9",
          "length": 251,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "452b3abf-c457-457b-9c51-8a1074035267"
        },
        "item": {
          "id": "bc4f38c8-cca6-45d4-b298-700c73b31fab",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "b94ba871-deb7-432d-8fd0-7d2dde3c3ab6",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "f4afea48-4c16-4617-95f7-f3f0faea0f55",
        "cursor": {
          "ref": "5d3af4a0-37c6-4fbe-9992-f3b4e416243e",
          "length": 251,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "d82c377b-f96e-45f0-bfae-020e7d110a57"
        },
        "item": {
          "id": "f4afea48-4c16-4617-95f7-f3f0faea0f55",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "8fa095af-e391-47b2-a800-7ac4ec8abba8",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "8c91b15a-b497-451e-aa88-fa97dc6dff8e",
        "cursor": {
          "ref": "f3020e10-9e55-4155-8aa5-738adb69835d",
          "length": 251,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "6c3cc3ab-c0b6-4fbb-ab44-0d4de0eebe42"
        },
        "item": {
          "id": "8c91b15a-b497-451e-aa88-fa97dc6dff8e",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "65d14824-683d-48db-ad94-4645bec74f23",
          "status": "OK",
          "code": 200,
          "responseTime": 75,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "0c607637-fa60-40ae-bb93-7379969c60ba",
        "cursor": {
          "ref": "504d609c-0926-414b-9c4e-d8b85dc37a4d",
          "length": 251,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "59e1e3e2-08e8-43c4-a636-5837e6cc342d"
        },
        "item": {
          "id": "0c607637-fa60-40ae-bb93-7379969c60ba",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "4712ef29-08d3-41f9-a5bf-3e713cdd08ec",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "bcaefe2d-ae40-4815-8aee-d294699b7791",
        "cursor": {
          "ref": "6d29ac46-c984-4a87-bde7-eabe42d4635f",
          "length": 251,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "016889c9-95fa-4e57-9e76-bbbe63767eb0"
        },
        "item": {
          "id": "bcaefe2d-ae40-4815-8aee-d294699b7791",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "b88a41b9-91e6-41dc-9230-335518407a5a",
          "status": "OK",
          "code": 200,
          "responseTime": 88,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "aecc8a80-b69f-4930-9530-a23bf8f824d8",
        "cursor": {
          "ref": "4764bc8c-07ad-4b4c-bd72-077699ebcf28",
          "length": 251,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "88294627-8cd2-4d27-9413-a8d778ae8e9a"
        },
        "item": {
          "id": "aecc8a80-b69f-4930-9530-a23bf8f824d8",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "3e8990e1-2cbd-49c8-a056-04705924268d",
          "status": "OK",
          "code": 200,
          "responseTime": 103,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "c80526c5-f4e8-483d-8b3b-87f022c924fc",
        "cursor": {
          "ref": "23daccbc-b3b9-43cb-9315-3232f55d882f",
          "length": 251,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "2068d091-20b1-42f2-bea8-9ed607b28575"
        },
        "item": {
          "id": "c80526c5-f4e8-483d-8b3b-87f022c924fc",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "85cae784-41d1-4333-a7a4-0489830176c7",
          "status": "OK",
          "code": 200,
          "responseTime": 81,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "b7681ce0-7fdb-4135-a9a6-9c3c7cfa35c3",
        "cursor": {
          "ref": "6a991cd7-f204-4dbc-9304-2b515f1d70e7",
          "length": 251,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "45451b9b-3736-475e-baf8-074ad48aa950"
        },
        "item": {
          "id": "b7681ce0-7fdb-4135-a9a6-9c3c7cfa35c3",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "50164abb-b877-46d5-b744-2dd3457b9333",
          "status": "OK",
          "code": 200,
          "responseTime": 81,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "ae579864-1786-4e34-9c5b-dbcdb63bc429",
        "cursor": {
          "ref": "104f5bb7-5acb-4904-9d2b-d18ff44092db",
          "length": 251,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "f447e6e4-c5b2-4e56-b105-839e84745421"
        },
        "item": {
          "id": "ae579864-1786-4e34-9c5b-dbcdb63bc429",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "cd6a3405-f22e-4e6a-b0bd-3c37f4a40cab",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 69,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae71862c-950b-4db4-ac22-00789f7321c4",
        "cursor": {
          "ref": "adee429d-f708-4597-ba58-767eb638edd2",
          "length": 251,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "e3af1c52-80d8-42ef-b06f-c15b7f67c14d"
        },
        "item": {
          "id": "ae71862c-950b-4db4-ac22-00789f7321c4",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "2260e9da-40ba-4def-a276-6ac8d1db91fa",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 100,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbfa53e7-6f4a-460a-89e4-ff4c69f5dcc4",
        "cursor": {
          "ref": "33015d4e-0aab-4a05-abba-fa71262cc802",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "5f1f35c2-9156-4f48-8ddf-6ed268bafb91"
        },
        "item": {
          "id": "cbfa53e7-6f4a-460a-89e4-ff4c69f5dcc4",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "eb6f0e33-0cfa-423c-8daa-7e125f5b8292",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbfa53e7-6f4a-460a-89e4-ff4c69f5dcc4",
        "cursor": {
          "ref": "33015d4e-0aab-4a05-abba-fa71262cc802",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "5f1f35c2-9156-4f48-8ddf-6ed268bafb91"
        },
        "item": {
          "id": "cbfa53e7-6f4a-460a-89e4-ff4c69f5dcc4",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "eb6f0e33-0cfa-423c-8daa-7e125f5b8292",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "288a2be5-d647-4406-afb3-348034568079",
        "cursor": {
          "ref": "69a7fa9f-ec2a-4319-9a53-60098580015e",
          "length": 251,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "730f1351-e6e2-41fe-b315-7ca04073b28e"
        },
        "item": {
          "id": "288a2be5-d647-4406-afb3-348034568079",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "bc9b4ae5-6696-4bad-a264-438e6ee3d46a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 152,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcb43a77-8ded-4f4b-a1ce-2eb279959fb1",
        "cursor": {
          "ref": "aecf343f-7b5f-46de-9285-052cfda1afaa",
          "length": 251,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "36843e8d-9415-41ac-88d6-bb425b82c497"
        },
        "item": {
          "id": "bcb43a77-8ded-4f4b-a1ce-2eb279959fb1",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "fe5b0131-fbf4-476d-9edd-6279e10c222f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8db43709-1d4f-4bd7-b507-f0bc63516b7f",
        "cursor": {
          "ref": "b4de3edc-dbe2-43e6-9815-add8ebaf433d",
          "length": 251,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "85aca8d5-3a66-4d27-8e46-2987250604bb"
        },
        "item": {
          "id": "8db43709-1d4f-4bd7-b507-f0bc63516b7f",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "c5419610-0f1b-499b-bfab-743c102e598e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b4e4c00-0401-4cd8-9145-3023c4b0a103",
        "cursor": {
          "ref": "08b11b2b-381e-4e45-b8bb-8c61d217c488",
          "length": 251,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "02c58824-ea1a-496a-b6f6-bb13c321c4d2"
        },
        "item": {
          "id": "3b4e4c00-0401-4cd8-9145-3023c4b0a103",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "55929e21-f863-4d7a-82d5-615576348a35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9af8c05-071d-4ec6-b7ba-98e2d28786a5",
        "cursor": {
          "ref": "68fcdde5-9d4c-4048-aa18-c5a26bbde847",
          "length": 251,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "efb6edcf-1358-4416-be81-4703833fda26"
        },
        "item": {
          "id": "a9af8c05-071d-4ec6-b7ba-98e2d28786a5",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "40a706a1-259c-4625-a819-cee242dce27e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 114,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15fec31e-9641-421e-90ae-25889f2ab3da",
        "cursor": {
          "ref": "9c175f12-2da5-4b4b-8437-cb75eeb83847",
          "length": 251,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "ee6ddc5c-ca25-4cc4-807d-32f6b91fa0c3"
        },
        "item": {
          "id": "15fec31e-9641-421e-90ae-25889f2ab3da",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "8676caa4-c78f-4c5f-b517-fba2971bff43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1907,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1310f09e-af04-4a95-b7ee-207e6be19d55",
        "cursor": {
          "ref": "7b83815c-a070-4a59-a96a-05db7af6a66e",
          "length": 251,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "274de53d-3da2-4163-bbad-cb127d3f7adb"
        },
        "item": {
          "id": "1310f09e-af04-4a95-b7ee-207e6be19d55",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "963cb151-136b-44f5-9a87-b1db196e2eb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 169,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c84faf4b-b14d-4093-9087-1edc9c4e5632",
        "cursor": {
          "ref": "0c3a19dd-17a7-4abb-8497-9ca33bf84904",
          "length": 251,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "1becac1b-4e1a-4f8c-8517-b4d42cb1ab9f"
        },
        "item": {
          "id": "c84faf4b-b14d-4093-9087-1edc9c4e5632",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "d94b627b-3603-4468-9d3d-c04eda24f266",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 255,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2eecee69-3aed-4d01-86a2-0b1923b5d62d",
        "cursor": {
          "ref": "8ac077b6-adb7-4321-8c19-d86c7a9d32a2",
          "length": 251,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "8cd9e1f2-de34-43d6-be81-56ff95f1c8e5"
        },
        "item": {
          "id": "2eecee69-3aed-4d01-86a2-0b1923b5d62d",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "a8675fca-cbe7-4783-9186-09249be488eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebf56045-c6d9-43f8-8222-68e673c2bcd9",
        "cursor": {
          "ref": "6d3937b6-dac7-4729-ba14-4b149856a20c",
          "length": 251,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "132f1cd6-c582-4c87-b32b-6b8661312088"
        },
        "item": {
          "id": "ebf56045-c6d9-43f8-8222-68e673c2bcd9",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "cc53b302-617c-4616-a831-2175a8c55463",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "804e6a71-5e38-4e63-abfc-47ed44c55aa3",
        "cursor": {
          "ref": "3049af42-4ecf-4171-86bc-7c62eb587103",
          "length": 251,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "f13c512c-3ea7-4566-8261-97d88226ebce"
        },
        "item": {
          "id": "804e6a71-5e38-4e63-abfc-47ed44c55aa3",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "b60ac8c8-8901-4789-b810-9181680f2e91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52f6b50c-91a7-4a50-b07b-f5539c7175ac",
        "cursor": {
          "ref": "e2b7f0e4-f173-4349-b24c-d44666852462",
          "length": 251,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "48f2853f-6580-4cde-b8fb-77f15df91e37"
        },
        "item": {
          "id": "52f6b50c-91a7-4a50-b07b-f5539c7175ac",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "8df68f2f-f486-4e05-be93-1194fa0537cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e7cfa8c-0eb2-4e5d-9c71-0ba6ab130f5b",
        "cursor": {
          "ref": "80151a7b-8942-4e96-8824-5fcb0e70afe0",
          "length": 251,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "eddf0424-6624-46d1-a365-b6eca781f49b"
        },
        "item": {
          "id": "0e7cfa8c-0eb2-4e5d-9c71-0ba6ab130f5b",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "c251139d-0b8f-45af-ad15-b549bbe7602d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 141,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1f8b709-4d10-4963-81a0-d5578a4dfcf6",
        "cursor": {
          "ref": "9d0dab70-c167-4b4f-90ec-91455581c2fd",
          "length": 251,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "85eeb03c-1075-4c92-bc71-b2494dcd346d"
        },
        "item": {
          "id": "a1f8b709-4d10-4963-81a0-d5578a4dfcf6",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "9b84ef33-daa7-4d8e-8f6f-98fe30c10362",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 233,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ebcbb8a-9f9b-418e-8a83-fd8f3f2d06e4",
        "cursor": {
          "ref": "a3024888-3fac-4e31-9a6a-dd4344019544",
          "length": 251,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "8ea8847c-1b45-4600-8fff-616420705aad"
        },
        "item": {
          "id": "7ebcbb8a-9f9b-418e-8a83-fd8f3f2d06e4",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "92563787-5289-4097-aeda-042b3e7020be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63ab8c95-9700-430a-81c3-76fb5de094f0",
        "cursor": {
          "ref": "2e0c1dc0-d5f8-4681-b06f-a5b52a186e02",
          "length": 251,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "2fd2e5cc-7320-47f8-b50e-e61636a29494"
        },
        "item": {
          "id": "63ab8c95-9700-430a-81c3-76fb5de094f0",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "7b0cac73-5e4c-4f46-abce-60876dae39ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 123,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "caf9f655-102d-4fda-a55c-e3dc8bb6e663",
        "cursor": {
          "ref": "50ada9ba-be89-4879-9f69-fe5eded4d107",
          "length": 251,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "1c33bbea-5642-4738-8874-7f59d6df2957"
        },
        "item": {
          "id": "caf9f655-102d-4fda-a55c-e3dc8bb6e663",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "755dd60b-b01e-424f-a014-6b63682c3cb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 2049,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee49aef9-b927-4f70-98ac-4f753759a11f",
        "cursor": {
          "ref": "e4c45231-5c32-4843-98a3-f2906ea27827",
          "length": 251,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "b8ccd54c-20b6-4ca1-a12b-11480d7c0dfd"
        },
        "item": {
          "id": "ee49aef9-b927-4f70-98ac-4f753759a11f",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "bf97fa50-bbc8-4d5b-be7c-3ef0aacb05f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 445,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7f6c2ff-6381-4763-b46c-26ecc987c432",
        "cursor": {
          "ref": "0243b519-860e-483f-96a9-5869dfcac802",
          "length": 251,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "2b8d4d84-9efd-4223-a332-415c21d2c3dc"
        },
        "item": {
          "id": "f7f6c2ff-6381-4763-b46c-26ecc987c432",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "2be6f600-2b06-4e3c-83c8-d28dca6fb8ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 509,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04f6deef-3cfb-4475-9904-ba81d89e46b0",
        "cursor": {
          "ref": "49b135cd-6450-4043-b9c9-37ab99924fca",
          "length": 251,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "d572e900-8d74-41a5-b77a-912a38af2bd2"
        },
        "item": {
          "id": "04f6deef-3cfb-4475-9904-ba81d89e46b0",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "8845c567-c21b-40bd-a533-b8e74bd7df25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 413,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68848c01-6800-487e-9ccb-331c69b05c0f",
        "cursor": {
          "ref": "e6f72d10-c644-4703-bd95-8fcef8372ae8",
          "length": 251,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "b478608d-02bf-4de3-88e9-6409bd7edf8f"
        },
        "item": {
          "id": "68848c01-6800-487e-9ccb-331c69b05c0f",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "af14262e-36f2-4fb9-8a77-a2708ed61e87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 533,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68909a19-8b2a-4d7e-8d22-55b33ab90d23",
        "cursor": {
          "ref": "b4837e33-010e-433e-b7d4-b87de985f31b",
          "length": 251,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "56c7aff2-36a0-4791-aebf-11bbb923f6e6"
        },
        "item": {
          "id": "68909a19-8b2a-4d7e-8d22-55b33ab90d23",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "46667465-cb56-485d-987c-54df5601169b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 374,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28073f48-2ab3-42df-8ef1-c786795157cc",
        "cursor": {
          "ref": "d22bf20f-875e-4d92-add0-e8a3108dc4e2",
          "length": 251,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "8e7e6884-9157-4e5f-b104-2ae3e1b0a9a6"
        },
        "item": {
          "id": "28073f48-2ab3-42df-8ef1-c786795157cc",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "70fb2306-1554-43bc-98fd-244ce4b71258",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50641cd4-f86e-4f9d-8d4c-86aad5ba8b4f",
        "cursor": {
          "ref": "05d3002b-2cd9-4793-8bcf-20b5e14497d1",
          "length": 251,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "adef95f2-5f95-4609-9f14-5326c5125784"
        },
        "item": {
          "id": "50641cd4-f86e-4f9d-8d4c-86aad5ba8b4f",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "9f88cde9-b5ea-42f1-bb87-41d82b0eac38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ecdf765-8da8-432a-a8db-d0f5fd46316b",
        "cursor": {
          "ref": "60106443-71cd-4b33-83fa-eccbbb1b86de",
          "length": 251,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "54167a04-2e4a-43ad-9de3-1552b6787418"
        },
        "item": {
          "id": "3ecdf765-8da8-432a-a8db-d0f5fd46316b",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "566383c3-0ea7-424d-ab90-55ec4e2f0e69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1463,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e85ede52-79cb-4627-a0fd-f5210e996698",
        "cursor": {
          "ref": "ae7c9059-9fb9-4999-b655-777c3247abbd",
          "length": 251,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "bb5daae2-8e0d-4a27-86a0-8db219ad59d0"
        },
        "item": {
          "id": "e85ede52-79cb-4627-a0fd-f5210e996698",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "b143956f-8101-45db-92a5-7fb1d80f076b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cff2f7c9-c024-4c5e-95fa-4362e62b58b2",
        "cursor": {
          "ref": "d9c9d16b-3e11-4cbf-9ce6-538b2cac07d2",
          "length": 251,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "788de43f-ca67-4ddd-afd3-9c2cb61c3695"
        },
        "item": {
          "id": "cff2f7c9-c024-4c5e-95fa-4362e62b58b2",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "a4a9553c-71dd-42a4-aa40-563230bfa6d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 403,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df4fcbc8-049d-4413-a54e-4545c5e0f371",
        "cursor": {
          "ref": "a940679c-72fb-4bbc-9829-928c0186bf95",
          "length": 251,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "ef193f29-a555-4b2c-9416-1122b9fc97a7"
        },
        "item": {
          "id": "df4fcbc8-049d-4413-a54e-4545c5e0f371",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "ef30cc64-f42b-49c6-8361-1eb9f51ede1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 619,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64fad048-3d97-4f12-a7d7-46cb42714585",
        "cursor": {
          "ref": "a85c53f7-8777-43a7-b830-b7453ac2bdf7",
          "length": 251,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "7a69ed0c-e662-4954-aa61-a479c488d02a"
        },
        "item": {
          "id": "64fad048-3d97-4f12-a7d7-46cb42714585",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "903b6e23-78b5-48a4-ba6b-b986679db126",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebf977ab-cbc4-48dd-905b-1a9627300119",
        "cursor": {
          "ref": "a549ea18-1312-493d-9808-1778ae0c89e5",
          "length": 251,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "01742521-376e-47b6-a268-eeb26bd677e1"
        },
        "item": {
          "id": "ebf977ab-cbc4-48dd-905b-1a9627300119",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "60f80f5a-fc47-48c0-9bd4-546d954b89dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 352,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ead1708-2fb7-47e2-ba03-12343688638e",
        "cursor": {
          "ref": "deff8418-f2ec-4b4f-892b-45410ca9095f",
          "length": 251,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "21d7baf6-4149-40de-bf75-b0c4e6cb8603"
        },
        "item": {
          "id": "5ead1708-2fb7-47e2-ba03-12343688638e",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "7fcf940c-4ce4-4cd1-9470-66b232c5a303",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7475b6b-7626-46c6-b128-c9e73863dffd",
        "cursor": {
          "ref": "5529dd49-9c69-4a3c-9033-e59a2e68418e",
          "length": 251,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "b62dccc8-192b-445d-ab77-f03d6ecb8257"
        },
        "item": {
          "id": "f7475b6b-7626-46c6-b128-c9e73863dffd",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "922cfd85-7793-4dab-9742-37c444f31033",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1575,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ddc1e85-d4f2-4ea4-b617-655d6fcce41a",
        "cursor": {
          "ref": "e79ffed0-fd3d-412b-a66f-1589e2be3dbe",
          "length": 251,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "8bb37a4b-f2d0-47f1-8a95-bf2ce552ef4a"
        },
        "item": {
          "id": "1ddc1e85-d4f2-4ea4-b617-655d6fcce41a",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "c2a27451-d65c-4dba-bf3a-2169c2067b6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9ec3447-0055-4cdb-9e90-67d88ca5c8b9",
        "cursor": {
          "ref": "046bc0e9-774e-4547-8d8f-eaf2fd2ac223",
          "length": 251,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "9a883ed4-0e1d-4977-aaeb-7d634baba0f2"
        },
        "item": {
          "id": "b9ec3447-0055-4cdb-9e90-67d88ca5c8b9",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "bb5d7532-5489-4b9b-979b-098722436274",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 544,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e62d731e-a920-4766-a786-bd133f792afe",
        "cursor": {
          "ref": "9f905239-b3ca-48ef-9608-e830d059f600",
          "length": 251,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "b9f6beb0-aeb7-4df2-94ca-6602bcc82e16"
        },
        "item": {
          "id": "e62d731e-a920-4766-a786-bd133f792afe",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "85847739-a1c2-448a-8bb7-68329797676e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 750,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2d3c50d-f955-4aad-972f-da180b62afa0",
        "cursor": {
          "ref": "467e6004-f909-4c36-8ed7-86ee49b610a4",
          "length": 251,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "7d1ac323-3cfc-4d7c-9524-10f3385486ff"
        },
        "item": {
          "id": "a2d3c50d-f955-4aad-972f-da180b62afa0",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "089f0728-5e2f-4e19-b229-61a11c19aaae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1620,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34402a38-b4f4-4ca0-bfcf-8f2296b2eeed",
        "cursor": {
          "ref": "025a960e-abf7-47c3-8135-b914c0e3a84d",
          "length": 251,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "6bfffa7c-fc77-4433-ba43-8255a090ac6d"
        },
        "item": {
          "id": "34402a38-b4f4-4ca0-bfcf-8f2296b2eeed",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "0818d9f1-a30b-4aef-aa1a-ec365dc0dc75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1077,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90f21837-5d82-426e-83e7-dd534dcc25f2",
        "cursor": {
          "ref": "c1b5d317-ed57-42f7-bbc8-26d9005717b3",
          "length": 251,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "83fc5695-66ea-4836-b7c1-5fbf47ed5bd4"
        },
        "item": {
          "id": "90f21837-5d82-426e-83e7-dd534dcc25f2",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "1238b6f4-a8cc-4cd4-a5cd-188d11361a8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 302,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9aabfe36-25a4-4f16-b47f-4d49d587151f",
        "cursor": {
          "ref": "4318c8ea-ebbb-461b-b19d-4f8acae465c0",
          "length": 251,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "5b58d369-9c3d-4942-834d-59b7702e0c8e"
        },
        "item": {
          "id": "9aabfe36-25a4-4f16-b47f-4d49d587151f",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "16f9b0a7-7ab7-4a92-8d85-2ceda71c7c8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 446,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "187f9190-6e72-47ec-8d24-5474d229988b",
        "cursor": {
          "ref": "291546de-2525-4a56-b92e-e963199318ee",
          "length": 251,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "fc0b7cfb-2a84-4cb0-a69c-25fb5c7e985d"
        },
        "item": {
          "id": "187f9190-6e72-47ec-8d24-5474d229988b",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "f9386c27-7744-45a8-aaee-a54660dc384a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 538,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ba8b7e9-b465-43d0-8113-290de9f44527",
        "cursor": {
          "ref": "8d29cb82-b268-4b51-958c-20a6714bfae0",
          "length": 251,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "655d8817-a4e2-4ee5-be15-e5004367f3cd"
        },
        "item": {
          "id": "3ba8b7e9-b465-43d0-8113-290de9f44527",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "1029d0da-d7e0-4dd4-adbc-48f887856e02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 470,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8c336eb-f059-42c7-a103-8817a38f0606",
        "cursor": {
          "ref": "40417c87-552a-4754-89e9-f55c0d36db51",
          "length": 251,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "645353ae-0406-44a3-a4d0-1329884171b3"
        },
        "item": {
          "id": "d8c336eb-f059-42c7-a103-8817a38f0606",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "a1458739-d9e1-4171-a3b5-8e23ff2f4acf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 728,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b7002e0-8d6c-4e24-bbf7-d39699f21044",
        "cursor": {
          "ref": "f2e103c8-d085-47ed-908d-52e501c906dc",
          "length": 251,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "b6d98c4a-4f7f-4af0-9dc5-2f3e24d2ab85"
        },
        "item": {
          "id": "7b7002e0-8d6c-4e24-bbf7-d39699f21044",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "935d1242-f211-41aa-9caa-13788bbc1c80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 904,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fbdaf75-7542-41cc-8ac0-ee7c13094f8a",
        "cursor": {
          "ref": "e223c520-20ed-41b6-a7f5-250d845c0ec7",
          "length": 251,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "1ff888d0-8926-4b2c-9f1a-062bf62db96a"
        },
        "item": {
          "id": "0fbdaf75-7542-41cc-8ac0-ee7c13094f8a",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "5cb1fea6-e402-45b2-8c07-f7e797a84fd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 504,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f858f35b-952b-4626-b59b-35b93f4ad5c2",
        "cursor": {
          "ref": "c3074676-6e97-4e3e-8692-95ff30e61fd4",
          "length": 251,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "c3075958-fe59-47b6-8a9f-e93c86d2f0cc"
        },
        "item": {
          "id": "f858f35b-952b-4626-b59b-35b93f4ad5c2",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "9d25092a-427f-4b8f-9ccd-4fc03f53bf38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1354,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83dbee9a-7e80-4985-998d-a5dd7c055250",
        "cursor": {
          "ref": "b9a272cb-f10c-440b-b6eb-72d90f58c6fd",
          "length": 251,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "756490e7-377a-4e80-a90c-19e2b32324a5"
        },
        "item": {
          "id": "83dbee9a-7e80-4985-998d-a5dd7c055250",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "097c8c9b-805a-4eca-89dd-4978134133fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 784,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f994e2df-5ec5-469e-b5a6-1480cd5cef0a",
        "cursor": {
          "ref": "25066841-0cab-466b-b02a-f7469b2369c4",
          "length": 251,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "3304cbfb-e9e8-400c-a43a-3b199a338df3"
        },
        "item": {
          "id": "f994e2df-5ec5-469e-b5a6-1480cd5cef0a",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "602ea3c6-53c2-4937-b4a8-6dcaf9532181",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 2843,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a75bb87-ee22-485c-a5b9-91e14d62d16c",
        "cursor": {
          "ref": "f1e2a933-d043-4625-83db-0baf62af02e9",
          "length": 251,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "4519b163-e8c6-411d-aa8e-052470ed0072"
        },
        "item": {
          "id": "1a75bb87-ee22-485c-a5b9-91e14d62d16c",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "c1613f95-f3f9-409c-b449-111663a224c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1418,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9067dbb2-267e-4262-a9a3-0f59bf20420b",
        "cursor": {
          "ref": "c2bb33f6-5a2b-437e-b49e-df492ebfe336",
          "length": 251,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "73268020-68de-4d05-99e5-350a341afc91"
        },
        "item": {
          "id": "9067dbb2-267e-4262-a9a3-0f59bf20420b",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "3441c8cd-ce89-4f9d-ac7c-e660e805280e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 883,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44802999-9cd8-4076-b802-14755925006d",
        "cursor": {
          "ref": "ba2f506f-3a4f-4247-8f5d-ffc1e8e03676",
          "length": 251,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "45114084-e441-431b-b805-588cd3b5b342"
        },
        "item": {
          "id": "44802999-9cd8-4076-b802-14755925006d",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "8be454a4-5bf3-4dad-b69d-07244b2812c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 620,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bf29c13-498f-47c1-b3ea-26982b637457",
        "cursor": {
          "ref": "b03b6404-270a-4a64-aa9f-a9aadadfca7d",
          "length": 251,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "fffb5801-2c07-4113-ab2e-6d7b8ca40aaa"
        },
        "item": {
          "id": "7bf29c13-498f-47c1-b3ea-26982b637457",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "e9a313e6-a525-44ae-a5eb-26edbd644af7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 351,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cef6f4c-3971-483f-b8ad-d091ba3a70ff",
        "cursor": {
          "ref": "344925cd-482a-48b1-90de-0121a592b04d",
          "length": 251,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "dc1169de-8122-46ad-bdae-35e229a648fe"
        },
        "item": {
          "id": "0cef6f4c-3971-483f-b8ad-d091ba3a70ff",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "7c8f6edc-fdea-462c-be72-0bd10c9fef2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 341,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18ad9ef8-afc2-43b3-b92e-57c220db69c2",
        "cursor": {
          "ref": "a45d51c8-e3f0-48d1-b2f5-fe597da94939",
          "length": 251,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "bebda744-605f-4b97-8c99-43116fc711c6"
        },
        "item": {
          "id": "18ad9ef8-afc2-43b3-b92e-57c220db69c2",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "feefd03c-d411-4465-b69e-99327a306e68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1a6f6db-0b7a-4b69-a8ca-9d07074b785e",
        "cursor": {
          "ref": "57bfd24f-0dea-4540-baab-c092338f2b16",
          "length": 251,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "09b6ef6f-fcd2-42ed-8efc-73c07e48285a"
        },
        "item": {
          "id": "a1a6f6db-0b7a-4b69-a8ca-9d07074b785e",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "ec2e031c-3891-413d-9a15-9f56d1f89d03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80305667-aa0e-4caa-91fa-772e751734be",
        "cursor": {
          "ref": "ea06bf00-c34d-4262-8ec1-5daa0cf0a2b9",
          "length": 251,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "ef2f26c1-6699-4da4-a9c5-928defc8d536"
        },
        "item": {
          "id": "80305667-aa0e-4caa-91fa-772e751734be",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "b68a95a0-e90a-4f98-b5d9-bbae696f0f46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 151,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f242f93b-3d50-4860-86ef-41e2b43950f0",
        "cursor": {
          "ref": "8b955db4-767c-44d8-b5d6-f5c105e76099",
          "length": 251,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "5a16e727-7f87-42d6-aad3-c471f0077c78"
        },
        "item": {
          "id": "f242f93b-3d50-4860-86ef-41e2b43950f0",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "43aa6afe-d5ac-42dc-abf4-3edf662503f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 654,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90103641-c612-40bb-90b1-7a6d11753b02",
        "cursor": {
          "ref": "0e755874-7bef-4199-a9d4-db583c8f3273",
          "length": 251,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "fcc3b49b-abbe-431a-aa39-d8e3f01421b5"
        },
        "item": {
          "id": "90103641-c612-40bb-90b1-7a6d11753b02",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "03eda43c-d1ab-47c1-b428-2ab72d651e1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1835da8-cf27-4dd7-a5c4-783460b3d49f",
        "cursor": {
          "ref": "3d9bc5ee-6b8f-4a39-b4db-9b60e6fd7bbc",
          "length": 251,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "cfeb19f1-9a8d-4787-9293-7b0687ef30f9"
        },
        "item": {
          "id": "f1835da8-cf27-4dd7-a5c4-783460b3d49f",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "fec670f1-ac7a-4844-9a61-b7bdff5abf46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54cee560-fe8b-47b7-b387-31f3b60610b4",
        "cursor": {
          "ref": "f34f0c59-3670-4b3c-879b-34417fd0b087",
          "length": 251,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "97b0f9ef-fc3a-4706-a8f3-9cc54bdda128"
        },
        "item": {
          "id": "54cee560-fe8b-47b7-b387-31f3b60610b4",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "855453d4-0460-40bf-9f48-6fb70e0af508",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 244,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcdd42bc-6439-46e0-9ec1-43dbe6991589",
        "cursor": {
          "ref": "0a5f3709-a740-42e2-abaa-78748c05f0d7",
          "length": 251,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "bba6b27e-9c6d-47fa-b7e7-da171bce8d49"
        },
        "item": {
          "id": "fcdd42bc-6439-46e0-9ec1-43dbe6991589",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "f1569fb0-44d1-4672-b651-e7c556b1fa34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 140,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0922e71-a502-4776-9068-fc4fce300195",
        "cursor": {
          "ref": "8046838c-a94a-43fb-968b-2b4e0098702b",
          "length": 251,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "58850c28-eb0f-4590-b7f7-004bc145a8b7"
        },
        "item": {
          "id": "c0922e71-a502-4776-9068-fc4fce300195",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "c8606564-1df8-4c40-abf4-2113562b6ce6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 463,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4765a752-7045-472f-8480-038891bdb618",
        "cursor": {
          "ref": "9899f42c-beca-415a-905c-c5d52f8eaba8",
          "length": 251,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "faffa47c-321a-4106-a762-51c84202a2e0"
        },
        "item": {
          "id": "4765a752-7045-472f-8480-038891bdb618",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "b194fe4a-d7ac-4509-a543-dd91def6584c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3c909bc-8c61-406d-92b8-7b3a19a378bd",
        "cursor": {
          "ref": "36f2756b-d6dc-475b-a1d8-27f0e7640df1",
          "length": 251,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "37dd6de5-e5e9-4b47-9778-d35a8c359738"
        },
        "item": {
          "id": "e3c909bc-8c61-406d-92b8-7b3a19a378bd",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "8e417d32-a64f-4590-b05d-5275987edaad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b94b500-9151-477c-adc8-16949017f590",
        "cursor": {
          "ref": "aec482f5-a7ad-42fe-be19-bce25050bb7c",
          "length": 251,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "dd59a5bf-3b54-4b46-95cf-5497788354f7"
        },
        "item": {
          "id": "9b94b500-9151-477c-adc8-16949017f590",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "5d7cdf9e-2631-4d4d-9c67-418aba915cc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7d37ce6-f9e9-494b-8e0d-d5069af362b5",
        "cursor": {
          "ref": "f923cd31-e29f-4e6e-aaf7-5da6bf9fb037",
          "length": 251,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "58fb0407-690f-4506-ba78-b9c4a0c05809"
        },
        "item": {
          "id": "d7d37ce6-f9e9-494b-8e0d-d5069af362b5",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "373960c0-89c6-4c64-993d-bf98b7e898ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aaee146a-6dd6-4442-9728-dfb789ce3fb7",
        "cursor": {
          "ref": "839417b7-b066-4f1f-b917-04a7b8cc2b52",
          "length": 251,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "b5d44452-35c4-4d3b-9d5d-c6eb4964dd9c"
        },
        "item": {
          "id": "aaee146a-6dd6-4442-9728-dfb789ce3fb7",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "d228227b-15b6-475b-9f3a-7643a552634d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 137,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea22c9f3-f564-418b-8591-61f3fb053110",
        "cursor": {
          "ref": "d2c4edac-618e-4485-a90c-6e2d25093819",
          "length": 251,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "a80a02e4-45c8-4ccc-8793-629759795f05"
        },
        "item": {
          "id": "ea22c9f3-f564-418b-8591-61f3fb053110",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "17118477-ea75-4d4c-b665-08a0b3909b2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 204,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6efaacef-dbbe-476e-9bee-d6923ea63d07",
        "cursor": {
          "ref": "bec40f41-1360-4372-a285-ffb63549b8d1",
          "length": 251,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "b550cb81-8bf2-4af3-bf63-93659feca9a9"
        },
        "item": {
          "id": "6efaacef-dbbe-476e-9bee-d6923ea63d07",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "bc79196e-9d93-4fcf-bfdb-ae5703d666a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b93789f-c89b-49a9-aa9f-ac75cb855485",
        "cursor": {
          "ref": "02fad94a-2eaf-4265-9ede-8b04b6d8c71c",
          "length": 251,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "2f47c47c-78ac-4fbe-9788-23dd5f39ce7d"
        },
        "item": {
          "id": "2b93789f-c89b-49a9-aa9f-ac75cb855485",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "34caa937-5c06-4f38-930a-e0510c69ea2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bddf21e-8675-439f-8ddc-421b0f7f0344",
        "cursor": {
          "ref": "9708ffd8-da8b-46c6-b249-135a1e776fdb",
          "length": 251,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "5f0c9981-6fbc-4f6e-8c13-9a623e8eb27a"
        },
        "item": {
          "id": "6bddf21e-8675-439f-8ddc-421b0f7f0344",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "a1b95dcc-a75c-4f4f-b614-68c99795d542",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdc87992-d271-4af2-afe2-c4812981a891",
        "cursor": {
          "ref": "3a8376d5-5408-41f2-a897-5f6e53fe5a69",
          "length": 251,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "40be6dbc-b88d-4949-91f3-87348bce2caa"
        },
        "item": {
          "id": "fdc87992-d271-4af2-afe2-c4812981a891",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "f7b90790-db91-4dbd-baf5-e397f4975a67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b9d84da-0ab5-4157-a16a-d87faceaf845",
        "cursor": {
          "ref": "8ddbc82b-c368-4435-980e-504506693be9",
          "length": 251,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "15c4f340-ce90-465b-b098-ff415f6fe280"
        },
        "item": {
          "id": "5b9d84da-0ab5-4157-a16a-d87faceaf845",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "88fb55a1-0bb3-4f0a-9fd0-b628ab907c07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 301,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5052935f-5ea8-435d-81aa-650458fb5c77",
        "cursor": {
          "ref": "ae7ed051-3428-4b86-9200-d55b845ea0b3",
          "length": 251,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "679392ba-6f8a-4d68-8b5f-c8d4198ec039"
        },
        "item": {
          "id": "5052935f-5ea8-435d-81aa-650458fb5c77",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "5016f69e-cf0d-4685-9125-7192aee2daa8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 178,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42ed45bd-16bd-4acb-a8d5-6d99c2017d1d",
        "cursor": {
          "ref": "390f0a0d-cff3-47f1-8a5e-429bdbba2c07",
          "length": 251,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "121a6097-f0f1-4f5e-b3f7-c0a1df331981"
        },
        "item": {
          "id": "42ed45bd-16bd-4acb-a8d5-6d99c2017d1d",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "7b803b59-a602-4e27-b79b-a85aaa7a75bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "638e9a4a-3835-4c36-a778-927b9c671d89",
        "cursor": {
          "ref": "9966f14e-62c0-4b24-b128-3d816182d195",
          "length": 251,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "72bc5ee2-7963-4fe2-9c3d-8bd611795acd"
        },
        "item": {
          "id": "638e9a4a-3835-4c36-a778-927b9c671d89",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "98ac746a-5bf1-43e4-80d9-77eb39d8aeaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efd6e969-2804-49c5-8fcd-426e9cbd771c",
        "cursor": {
          "ref": "5f63f5cf-b357-45fd-a7d7-02cb8717e837",
          "length": 251,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "18d547d8-c586-4d17-bdf7-b52103e163d8"
        },
        "item": {
          "id": "efd6e969-2804-49c5-8fcd-426e9cbd771c",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "c94a27d4-ee2d-4b72-92ca-5f2f921c8de3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 523,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "837f268f-b77c-4bc9-816d-b807bc08c2bc",
        "cursor": {
          "ref": "3892967f-6018-48e5-9aca-dca29806cc96",
          "length": 251,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "0e4a9950-03ea-4941-88ae-57d6b7dedb3a"
        },
        "item": {
          "id": "837f268f-b77c-4bc9-816d-b807bc08c2bc",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "fe958c66-6c35-42aa-8f6d-c8bdfb30238f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd0ebe8a-92b8-4cc0-bff1-74b7f7dc1846",
        "cursor": {
          "ref": "88de17d3-94ac-4113-99be-e1ed51b6234c",
          "length": 251,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "aad61c30-c313-404a-9110-52dd8de27b61"
        },
        "item": {
          "id": "fd0ebe8a-92b8-4cc0-bff1-74b7f7dc1846",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "8785cf98-a626-447a-91e8-78fb0e92d0d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4dfaf7e7-fbd0-4603-b0ae-324029f745e0",
        "cursor": {
          "ref": "c3b3a18f-ab88-43b8-aae5-4e68054a5d6a",
          "length": 251,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "442d6183-30aa-4a7b-81eb-8ff2e9592d3a"
        },
        "item": {
          "id": "4dfaf7e7-fbd0-4603-b0ae-324029f745e0",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "bb6a0fc2-a0c8-4140-85e9-d02e4212fe47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b599ff4e-ec60-4c85-9a2b-f6b809154655",
        "cursor": {
          "ref": "5b07a05e-39fc-4037-94ee-9a7271bc5586",
          "length": 251,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "c5401cd8-871f-4ea3-9a8b-4a1bf010b2ee"
        },
        "item": {
          "id": "b599ff4e-ec60-4c85-9a2b-f6b809154655",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "0a1a0933-e570-4e3f-99da-ce6593865586",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54b20934-8824-4a8c-ad33-e1c674f66b67",
        "cursor": {
          "ref": "f703dc58-f151-45e0-b575-c9b41d3b63e3",
          "length": 251,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "47f15e59-3131-41b0-a4c7-b59f3a67ee01"
        },
        "item": {
          "id": "54b20934-8824-4a8c-ad33-e1c674f66b67",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "47a5824f-3961-42b4-a490-487a6e6958fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "419f135d-175d-4f70-b5b0-1d16eca152c3",
        "cursor": {
          "ref": "439a1d72-eadf-4d0b-afef-b336f3b2592c",
          "length": 251,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "42db03cc-3958-4544-835b-e2beaa5022bd"
        },
        "item": {
          "id": "419f135d-175d-4f70-b5b0-1d16eca152c3",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "473372c7-a747-4ded-9922-b0fdb3ac08cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "978160de-e79e-4849-943e-72065a754e17",
        "cursor": {
          "ref": "e1006417-104f-493d-b210-23eeefcec1f2",
          "length": 251,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "fdbdba9d-e7fb-4a03-b456-49ebce650cb1"
        },
        "item": {
          "id": "978160de-e79e-4849-943e-72065a754e17",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "8c9113f4-5d28-4108-9560-fd0e7e7fbd2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "720d02d0-5152-47a9-ad52-b2cb1eeda479",
        "cursor": {
          "ref": "80e2dd47-5a07-4d8c-a689-a1fa3f8d7365",
          "length": 251,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "94f69e0a-8b31-47c6-b27d-d00c81810d40"
        },
        "item": {
          "id": "720d02d0-5152-47a9-ad52-b2cb1eeda479",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "5ec01e13-1580-47b0-b6aa-960f43673ac2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 339,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d192940c-ee65-4f5d-bbd7-91ddab572701",
        "cursor": {
          "ref": "02b5b112-9113-464d-bb40-9ccad9963f4d",
          "length": 251,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "e42d3cc9-0064-4f6a-82ba-dbfa05748f85"
        },
        "item": {
          "id": "d192940c-ee65-4f5d-bbd7-91ddab572701",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "2691cd0b-99d6-4c15-bf67-f0df770b3cf8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccf6837a-b524-4dbb-9a72-863b86301838",
        "cursor": {
          "ref": "cc8990c6-ad99-4a10-94b7-5fa8d3357aa8",
          "length": 251,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "3e02da1f-2463-4581-9411-89eb80a8247c"
        },
        "item": {
          "id": "ccf6837a-b524-4dbb-9a72-863b86301838",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "2c48273a-86b7-4045-a329-49d2520866c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e733a68c-f84a-47f9-a019-75492b7feef4",
        "cursor": {
          "ref": "1a287ebe-2b2a-4e36-9bd3-b5ffb9b21018",
          "length": 251,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "ea9410db-116f-46f9-a07c-fe373822037c"
        },
        "item": {
          "id": "e733a68c-f84a-47f9-a019-75492b7feef4",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "26b15ffc-7e89-4322-bacd-f5a822272080",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 113,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8020a92-2230-4387-a8de-b49cdf0a9cc9",
        "cursor": {
          "ref": "c63b76b0-b176-41ae-aebf-fc2d75a0167b",
          "length": 251,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "09ac121b-f6ef-4fcc-a0aa-0433122ce4ff"
        },
        "item": {
          "id": "e8020a92-2230-4387-a8de-b49cdf0a9cc9",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "63892d75-b4b5-4334-8658-122a5bd63fa9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5000262a-3493-41c1-afe8-5aefa7f15273",
        "cursor": {
          "ref": "5bcbfe8c-5a3d-4318-8c70-c51d8973290c",
          "length": 251,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "a79c8d93-847f-4d10-8510-05d06032b909"
        },
        "item": {
          "id": "5000262a-3493-41c1-afe8-5aefa7f15273",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "5cae0d61-af2e-4a98-a0a4-96b75ad2a7c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 120,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f396c25d-cb23-41d2-a2cc-d9d27e02b0ca",
        "cursor": {
          "ref": "9e94d8ba-c6ad-4f41-8dca-bdf9a1995530",
          "length": 251,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "9093812d-8419-4c6c-8f86-d09ef7c06adc"
        },
        "item": {
          "id": "f396c25d-cb23-41d2-a2cc-d9d27e02b0ca",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "bd2a134b-6abe-4a3d-b448-8da73ed9f646",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c475cd02-75ed-4f20-8fec-d3d1327d0c9e",
        "cursor": {
          "ref": "6b28a00b-336f-460f-81b8-9b3516c03a34",
          "length": 251,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "75d231f4-da85-4ca4-bf61-0d24a600a6ce"
        },
        "item": {
          "id": "c475cd02-75ed-4f20-8fec-d3d1327d0c9e",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "db79b794-b2c5-4f7f-a253-3fdf3e59ab4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88f713e3-6553-4d08-87c1-50392bed57e6",
        "cursor": {
          "ref": "aa187e41-a69a-4c89-ad0c-09ac135a601b",
          "length": 251,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "cde6e4fc-bdf3-41cc-bbad-5ae53b6db40e"
        },
        "item": {
          "id": "88f713e3-6553-4d08-87c1-50392bed57e6",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "1761ef27-3fd3-4971-91c0-08d585d27bed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "056233f2-bd29-4a39-af15-5ff51d76ba70",
        "cursor": {
          "ref": "e592ad82-cac6-476d-a01c-c0b01b68f71e",
          "length": 251,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "81899a27-3df5-431e-a63c-3a3fc63f26a6"
        },
        "item": {
          "id": "056233f2-bd29-4a39-af15-5ff51d76ba70",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "ccf3c959-1193-4649-a370-ff7cd4b3f82a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 132,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82a30749-32b1-46b7-8057-1adc31622ea1",
        "cursor": {
          "ref": "fd0deb4f-bb59-4b25-beda-5914e3de6647",
          "length": 251,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "b3c80bc2-fc03-43fa-9d4b-9e976471b2de"
        },
        "item": {
          "id": "82a30749-32b1-46b7-8057-1adc31622ea1",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "9d255370-412d-41f6-9fa7-c245481c37e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 273,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce74d8ce-ab1c-460b-917f-9c44989d9949",
        "cursor": {
          "ref": "d9620d17-656e-423e-9888-2451512a54ca",
          "length": 251,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "1c8dcd46-4ebc-4e37-813c-7624cf4e99cd"
        },
        "item": {
          "id": "ce74d8ce-ab1c-460b-917f-9c44989d9949",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "30d883c2-5769-4a9a-9e67-6f170ba62845",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 417,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96d05e72-cce7-4693-a082-d9017e2de806",
        "cursor": {
          "ref": "a9ee8a19-7116-454f-be82-0d21b389079a",
          "length": 251,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "8ab5c003-a5b2-4a11-b3e4-801fd3fd07a8"
        },
        "item": {
          "id": "96d05e72-cce7-4693-a082-d9017e2de806",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "81f9b78d-451f-4fca-ba29-6bfb16653ec0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 186,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "108dfe52-cbd7-4bf2-bf65-a258d6e9d40a",
        "cursor": {
          "ref": "df7325d7-3057-47f2-a0c8-aec450f85687",
          "length": 251,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "ae665c5d-612f-450e-84e9-56febbbb99e3"
        },
        "item": {
          "id": "108dfe52-cbd7-4bf2-bf65-a258d6e9d40a",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "ebec3f39-64bd-425d-ae7b-dc1eb9701fc1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 124,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a40e1535-b975-4320-bfd2-6b2ab1f3fae3",
        "cursor": {
          "ref": "54607a7d-0a74-43a7-8c18-3430e94c1615",
          "length": 251,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "8baa1955-7ffd-4426-bf0c-dfa5af518160"
        },
        "item": {
          "id": "a40e1535-b975-4320-bfd2-6b2ab1f3fae3",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "399023a6-0f59-4d1a-b3e9-300563275540",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 67,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be4cd4d6-873f-4fbf-8603-5a4ea29bc6ad",
        "cursor": {
          "ref": "fdfc55a4-2949-4ebb-99aa-920cf6f8982f",
          "length": 251,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "65287a53-9a9f-4eea-b935-60eb90b228fa"
        },
        "item": {
          "id": "be4cd4d6-873f-4fbf-8603-5a4ea29bc6ad",
          "name": "credentials_verify"
        },
        "response": {
          "id": "9c9b315b-f0ef-4ca6-b774-02c3dc32bba6",
          "status": "OK",
          "code": 200,
          "responseTime": 1559,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84060352-9780-41e1-badc-8c86c9b9226c",
        "cursor": {
          "ref": "8d06e578-8233-451f-99c0-1cff380480e8",
          "length": 251,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "48dfaadf-e1fd-4db5-a3f1-2544299c3632"
        },
        "item": {
          "id": "84060352-9780-41e1-badc-8c86c9b9226c",
          "name": "credentials_verify:id"
        },
        "response": {
          "id": "6ed6834c-c812-4b5c-b37d-466b4f49346c",
          "status": "OK",
          "code": 200,
          "responseTime": 506,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5151aa94-e1fd-4214-8f1a-23021e802d28",
        "cursor": {
          "ref": "42c92cf4-9ff7-4459-8414-f199b274fa4b",
          "length": 251,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "01536f68-2e11-4e38-8c38-1c16d1fd4ebc"
        },
        "item": {
          "id": "5151aa94-e1fd-4214-8f1a-23021e802d28",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "1580f11a-50b0-4b5b-bbba-3b3872435a7a",
          "status": "OK",
          "code": 200,
          "responseTime": 793,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bb294e7-b708-47e5-b569-8ef12c6de41f",
        "cursor": {
          "ref": "76ed5cf6-e31f-4dd9-92ce-c09cf656db56",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "a190996b-da9d-42c8-93f0-10621b71610d"
        },
        "item": {
          "id": "5bb294e7-b708-47e5-b569-8ef12c6de41f",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "ba516d3d-e06e-47d7-b2a4-e236eb94de09",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 112,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bb294e7-b708-47e5-b569-8ef12c6de41f",
        "cursor": {
          "ref": "76ed5cf6-e31f-4dd9-92ce-c09cf656db56",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "a190996b-da9d-42c8-93f0-10621b71610d"
        },
        "item": {
          "id": "5bb294e7-b708-47e5-b569-8ef12c6de41f",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "ba516d3d-e06e-47d7-b2a4-e236eb94de09",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 112,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bb294e7-b708-47e5-b569-8ef12c6de41f",
        "cursor": {
          "ref": "76ed5cf6-e31f-4dd9-92ce-c09cf656db56",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "a190996b-da9d-42c8-93f0-10621b71610d"
        },
        "item": {
          "id": "5bb294e7-b708-47e5-b569-8ef12c6de41f",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "ba516d3d-e06e-47d7-b2a4-e236eb94de09",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 112,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28703675-5736-43c9-9043-b8ebda5792ca",
        "cursor": {
          "ref": "f6a9ebf9-ca93-4506-8bbd-d179d89e98ab",
          "length": 251,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "f4046bf3-c8aa-42a0-8ebf-3c9db2305eca"
        },
        "item": {
          "id": "28703675-5736-43c9-9043-b8ebda5792ca",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "fbd53c55-dfab-4fc2-bb66-78862e805860",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 83,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d18b9be-21af-40c7-9a5b-4af6bd4e2cd4",
        "cursor": {
          "ref": "50515010-5abe-4980-a1d3-ac38b38dca5f",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "2e8d0d39-ce80-44b8-a4d6-b0189ce14bec"
        },
        "item": {
          "id": "1d18b9be-21af-40c7-9a5b-4af6bd4e2cd4",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "a3995117-6ea7-409f-9416-9ef39a967f89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "1d18b9be-21af-40c7-9a5b-4af6bd4e2cd4",
        "cursor": {
          "ref": "50515010-5abe-4980-a1d3-ac38b38dca5f",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "2e8d0d39-ce80-44b8-a4d6-b0189ce14bec"
        },
        "item": {
          "id": "1d18b9be-21af-40c7-9a5b-4af6bd4e2cd4",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "a3995117-6ea7-409f-9416-9ef39a967f89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "a75549b0-d774-4f05-aff1-4653a87b8647",
        "cursor": {
          "ref": "a1945ad3-1f08-44b1-b770-791cee5934f2",
          "length": 251,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "092674e5-bdfb-4aa0-bbaf-385e1dd2c471"
        },
        "item": {
          "id": "a75549b0-d774-4f05-aff1-4653a87b8647",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "a54deec4-81bc-4e6b-8648-d8d9b6bc85ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "ef3e1e6d-4343-4271-be62-8661429c6b94",
        "cursor": {
          "ref": "26c55325-1249-40d1-a41d-0e23437d5944",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "c80dd1e5-5442-4b92-b735-8f319f4953ab"
        },
        "item": {
          "id": "ef3e1e6d-4343-4271-be62-8661429c6b94",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "274eb27c-e812-456e-9e4b-1319d75fe83c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 129,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef3e1e6d-4343-4271-be62-8661429c6b94",
        "cursor": {
          "ref": "26c55325-1249-40d1-a41d-0e23437d5944",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "c80dd1e5-5442-4b92-b735-8f319f4953ab"
        },
        "item": {
          "id": "ef3e1e6d-4343-4271-be62-8661429c6b94",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "274eb27c-e812-456e-9e4b-1319d75fe83c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 129,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be76d39d-80a9-4584-832c-547d958f0569",
        "cursor": {
          "ref": "65fcd397-3ba2-455d-bc06-877c5971c0aa",
          "length": 251,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "6c0dca49-013b-4836-9085-7a8f35c7e8f8"
        },
        "item": {
          "id": "be76d39d-80a9-4584-832c-547d958f0569",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "0d132e66-03b6-4a24-af2f-471e8ec92f1b",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 130,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}