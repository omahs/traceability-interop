{
  "collection": {
    "info": {
      "_postman_id": "f5f17919-82a1-4db5-be95-0f985635313d",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "1538a11a-6379-45c0-a793-b9d823a61747",
        "name": "Clear Cache",
        "item": [
          {
            "id": "08d6f80e-8fce-4095-8550-b065cfc4081e",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1a2dbd7c-3067-4e8d-84f8-cd036659b6ce",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "4980e62e-cc49-4c95-b6ca-fc5f0b026d52"
                }
              }
            ]
          },
          {
            "id": "0ddde2ca-d777-4078-b429-90f25cf38a27",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "91daaa49-dc95-4079-8e6d-b8f8a1379d4a",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "866c24d2-6c7d-45ed-aaa9-9d5906ed51d6"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "383fecee-daa3-4e2b-b0f4-2f6b7ec5ef9c",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "6222bd82-2d62-4bc9-8fa9-a23fba8482f3",
            "name": "Positive Testing",
            "item": [
              {
                "id": "5b299cb8-42cf-4e0e-9430-63eb6a5d04a3",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "17945c20-bb00-4e14-917c-52691b4419dc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a9daea95-c011-401d-8538-d7f465843c22"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "13fe556b-fc8a-478d-8c9a-526c8f28ee6d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ada56099-6620-4469-a321-9ed4bf9311af"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "08972591-e018-4453-ae2e-a47c2ceb596e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3626e877-f9a0-4d11-ac22-18fc8435c646"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "971629c8-cea1-45b5-a2c6-963211670c11",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "2f8f9c75-b111-4ca4-8284-2b55a78f91be"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "feaa3928-dc9d-4ea7-868f-cde6f43dd885",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "12605077-5675-4518-8c58-0216725e2a2a"
            }
          }
        ]
      },
      {
        "id": "5a0263be-2ebe-41a2-9400-b809c9b9c5c7",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "9f0059ea-a428-4a86-80b8-3b2c51d98ec7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "872a9edd-f985-4317-8f36-361c5ad722f9",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "25e73c4a-951e-4145-92e1-dfa9a4220e23",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff59b170-bf1f-408b-8039-a016bd240208",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "234744c8-bbc6-4571-b265-72d38acbf5af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0a7b0ae-830c-4361-ae46-7553fb9744a1",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1e8f15c-e474-416b-a530-d779772830f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "29647fb1-a9fc-4d30-a24a-bbf0e40cec54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c51572ed-4264-438a-ae4a-5f10c7c13ce7",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d8b45ed-9e20-4ee3-9020-02a48c9064fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "44b06a05-4da0-4ee6-9073-41413cc91939"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f5e7010b-7b9e-422a-81f5-b81cac22da50",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9fa18ecd-1c6c-4451-b287-6ce6e989239e",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8375d609-00c3-4254-b3e4-e5303f212250",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a5308a8b-e81c-4a06-9a6d-71b4fea5969e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f56553b-3b52-4665-a34c-68e625ebbca5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ce49c04-4435-405c-9ebb-6012f9c547c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2d6a8a0-2827-4563-bd15-5e09ac9587ed",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96284969-0619-4129-bba4-db43f798f4fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2a627e52-035a-43c1-a2ca-fc19e58c2ebf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5efe5885-2d7b-4453-ad0b-51e1467f5a9f",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "009db960-ec23-412d-9322-58b7fed36ad8"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "196a996c-842a-40bc-85e3-f7fa9afaa56c",
            "name": "Positive Testing",
            "item": [
              {
                "id": "7c1cefd3-e91d-4794-8986-181538fbda91",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e455e29e-ab61-4c47-918d-0713ecd2482b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "dd671852-eb71-4cb1-acb9-097a80aa0d9b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "81d4356c-5dd3-4b28-ad27-4113d4787d9c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "501562c9-67c0-4829-b93c-a01afed6670c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fe3bafeb-a3e3-44f7-8b84-6d0e350a5869",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c87e0719-f5d0-46c3-a28d-7741c1934bf7"
            }
          }
        ]
      },
      {
        "id": "d158d3a5-d036-4500-8de4-cc5d524c8a79",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "8ed616f1-81af-4563-9d33-0a5470158c13",
            "name": "Negative Testing",
            "item": [
              {
                "id": "04bbda89-a459-4c51-9521-569d2372f979",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "a32c70b7-46ce-4d30-9e66-6d5c58e6a151",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "522e9d55-8318-4aee-8335-abe6e5dffa36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03e9e4fd-9080-410a-adfa-7c04d5ecb3ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "108dc149-7f16-4fe1-b2e0-f1c2f05cd052",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a28594e1-9beb-4e8a-b684-6d239ef2ee59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ad3d02f-6a2a-41e9-b0ca-d9526c5de9a7",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d38e5aed-aabf-4bed-8242-aebaf0674005",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d287f7c-8e04-4453-9150-956d64e54ef2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ed9c2c2-ec33-4de8-9052-949dc15a38c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "66bd7143-212c-455d-ad37-e5f23c6da7bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90529068-28e3-4d8c-a2cc-e98624a8e032",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70cb55d3-10e1-41b1-b2b6-ff536f018e72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "445182fd-8a72-4ef5-8a97-d4f5e73d3cc1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45d434e5-4f72-4e54-bbc5-afa2a7afcce0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d71fb1be-d22d-426c-b221-d43490ee435a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c8b72c7-8896-4744-b347-717ded463e6d",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9842e86-afd7-46ed-b5d8-5a9a27bfd74e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d26cd2fa-8bce-434c-add9-dfd6b7ac0992"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ddf5395-a41a-4ea7-b923-8e2644e976c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a2330b8b-ac3c-483d-8baa-16354a970232"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e59b4a47-ee95-4099-b7b4-33f1c86457fc",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c4d7ee4-0d60-414a-8ef2-b88fbfb50ff9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db175a2d-cdf8-469b-8498-6924f571a510"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "154d2f16-da80-422e-9119-c50d083e5ae8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2c0106e9-99b2-4c03-bd78-c969566da05b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6be96e57-9c60-4eb7-b939-f68e2b4237f4",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61b60930-c096-4d92-a21c-9f15602bc295",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3facb41a-a6af-45c5-93fd-fe96e1909e19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fa3b93a-f6fc-4ef6-950e-48bec20451a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e5f68245-a71b-4118-a0a0-931b169aeb87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45dbd579-344a-4ff3-830f-f0c6f84c1508",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5735dc0a-269a-448e-b91b-ea00da06bc3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ddb33190-1595-4fa7-9dfd-03f8f38854bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7673bc9b-087e-4939-8966-8dc82a855c2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6f8016d8-eb4f-4981-b29f-962b9c74717f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbabc173-a3b7-4325-a199-ef3ae06dcab8",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58870451-04a0-46d8-9c4a-12b46c691b8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9e03949-4aa5-4c5d-92d0-c0b1e6f30d53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "014455e4-2a8f-471f-a910-69081a856079",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "72ab12fb-89de-4429-a583-9335f8ac531f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c641bdde-01e7-465f-93cf-f821b7e20ab8",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "194f6dcf-9c72-4e06-9ea2-946153be30d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12c8efa5-9e41-4037-99df-67be49cb926a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74a56df4-34a2-4aa2-bede-a52b5a6ef682",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dcd6f363-85de-4f58-bbf9-40b82d211b1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff7df852-adc1-4517-b081-bc8b7b2294c7",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15d0d0c2-59fd-4c62-b25a-5a19c524c8ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "079fa45e-0288-41f5-9807-9bc18f3fe5ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a611082-8ff0-4198-9218-a87dde1dd992",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2475f5d1-109b-42c9-a741-7e972592e311"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42eadd96-77d1-4507-ad05-ad62b9776799",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a328543-04d8-4b72-9f03-18236bc9a69b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f09db1b-abb7-4cd2-838f-95d05b32697c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01349157-20c0-41c8-a00c-b968660f7304",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fce8104c-539b-4af1-9eae-1e66db4a4083"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d25c3447-ba5d-454d-90c0-e0a972905e8c",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0985374e-3a7c-43b6-a4b1-cb1e25c17b88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21a5d068-5f33-4bf4-ad1e-4fb88e593049"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77ad7148-54c3-4a29-a578-f7513f51c9b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f06781b9-65f3-4af5-9558-1180b66208f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cabae571-3666-47e7-b8e1-8f3f7cf082db",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fde17d4-d6de-4c89-88f0-cce4ea2ca2d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d687835-435b-4d7e-aa07-f3c465cb0750"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd930a5d-362f-4688-93c5-210b5bf660b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "be9c630b-c9a0-4757-a4b0-caada7c10a00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22718b5e-2eea-4ac2-ae45-b43d195e4511",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "479930c0-7619-4c64-a4bf-74c507570967",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ae09d65-18e0-44a3-bc35-0bc8e54cf5bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5b65f7e-acf7-4c2e-a509-8a9ec80a9b04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2028fea8-6a9e-4798-8803-de6dcb54dae6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96ed7ee9-07f8-4e45-b97d-68841bf84812",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5aced15a-c5f2-4af7-96cc-0074049309ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ad75b3c-991f-4442-9320-988823ec0992"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf8d170a-6908-4329-a35c-85dc2b813dee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8765d55a-3f0a-470d-95c8-2d6e9c2fc12c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e130b9e-0653-4beb-bb6b-9201ad1e419c",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eef32d18-1e87-4ab7-ac0c-616ae04e6324",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "250710eb-8a3c-4d0e-b35b-e6249e2aaab8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34f48707-b75b-4862-821e-83375b95f6b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "36c63f27-9d43-48c6-b903-2a9ec90863ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbc484da-4727-4430-8d0b-50338214b161",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8121e413-4bd6-4230-98df-9dcfd2bae2c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a184a341-00c1-4967-b829-17646a8ebdb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "128689b6-3369-4b9f-bfd8-587c4ef48f63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9f048cbb-b153-4c16-825a-cb965067e1a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dec63862-ad16-4a9f-bb20-31778a68dd6a",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccc73217-c94c-408d-b11d-8f8259e47e60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b22b335b-8ffe-4726-b959-7303924033f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fff9f6a9-79f5-43eb-8cfc-dee9963578bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "ba300f4d-0094-447a-bf02-2c82475cb2f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5239fe79-f9e1-4183-8f9c-ee9739b41f8c",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48cf92e3-aee7-4b92-b30c-f5c0b401e436",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a3ce697-286d-49d2-bcfe-b601b66d5e97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e39fbaf-0cb9-4e21-86eb-ff6da96c287f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "60a0c0bb-c647-4ed4-9cba-177a70f861ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfc628ff-9dbf-472a-ab5e-4b8cf95c2138",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "480cefbf-43af-409f-8cea-36de0576952e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9949c5ac-7939-4cca-a528-39187f097e41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c4e9837-0df6-4a68-a971-ad8361390f6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "db834ddb-0b2c-4a5e-9962-108d2e1d5a22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a18cb26-18ef-4519-bcb2-80fce7edd31a",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "782439c6-6d06-49eb-9ac6-58b9065b4b3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60aa4711-beff-405e-9d9d-4cbdfb394ba6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bb6cab5-bef0-4fc7-bc7b-290cb76b749b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9f879aa5-5a2f-4d63-92ee-1e8764789b9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2dc05435-cfda-4e11-970b-d1ee8bb33644",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76f61b6c-0159-4ba5-8748-b364aa0e68ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "475ce108-a15b-4a54-b08e-77bad9a6531d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3f760b1-76bf-4681-972b-e7365b2825b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b93fec99-0328-410a-97c4-e6d370626991"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5dab18bb-685f-4aba-ae19-ab2e50f9430b",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28acd0a2-82bd-4cef-84a9-04f4fc547b9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ccfa8db3-91aa-407a-a539-cd6038cfc795"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bba0e80e-a84e-4080-949e-f9a5813829e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a093557f-427e-46a9-8037-4bc540d7b697"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e85e5cba-33d6-4434-a8bf-e0149dd0a015",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a99a1b3f-48ce-4893-ab9f-f8ad2252cb35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6ea03bd-3745-469d-9d61-cde62447d46f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d7d6f73-0d36-44f0-bd5c-c6f9a3f3b1c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "2e3361e2-b09c-4133-a28b-c89ffd453dc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1016d2a-8605-4944-89bc-98e93d9964e7",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3eafba05-b520-4c38-9f43-9e44e28a6923",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3befd570-2251-41ad-9e43-eb302d18a388"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0a9552a-982a-41e2-959b-50619775c43c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1578a04b-aa1f-4a6a-957a-b226e96e8902"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00e51e7d-4ee5-4320-9eeb-c18d9170541f",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1458c7bc-b5f5-4487-8204-8490b2b3ed2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00c4a449-3310-44ea-9548-a8ddd82eb265"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f77b566-1717-48a1-8492-ceacf567e68d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8cc147b4-4fa3-4ed9-84d2-4c613558ea47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e83d017-691b-4819-be2f-641f6deed0db",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84e4633c-1766-41c3-821b-ad09399c68cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3caa4101-98d5-4387-a08c-d2d1fbb1cdc6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7484653-7811-4947-9759-2c079448897c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "bc370474-a676-4f3b-b9eb-9137207f05a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a74702ac-91e0-4fc3-9b6a-158fd74199be",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d6e1729-d52d-463e-992f-a0d484170b08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62b99c56-759b-4bf2-82d4-4fe32b34a05b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a96100a-18bc-43b3-80bc-5fd21960d86f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "11396de7-455c-4f6e-8cca-306a6d142707"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7aaa323e-403e-496f-b7e2-7cd5e7b979e2",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "423ca12e-c475-4554-983e-945ab83d7a7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf9cacf1-f3e0-4c8f-ae1c-601c63da4122"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "843d1074-08c3-4a63-a64d-c34d67d0a8b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "505c4bde-919e-498b-b16e-145376b09c9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58b94caf-41c8-49a4-ad4b-306af9520819",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "304201c1-bca5-4b16-b707-ccb85d40fded",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9e53d39-7235-420c-ba62-febb6cd2ec33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ff821c1-ae6f-49b7-b224-dec009efad2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "06b4940f-a6f7-4f3c-984a-1e43436bced3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb332ff8-08e6-4c31-ab81-797bea2bce43",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "614bce13-8fb7-4300-a268-e4a0970b3af9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48ec2352-60bc-494d-983e-f1f0d0c9c4eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "936f2371-6a54-43a7-961a-d5fe39bd4100",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "310593d0-e21b-432d-b48d-397c3755ed0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c5a75e0-791c-41b1-8e4f-a5df7d2c0908",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "097dced9-ceb0-44c2-94af-016a48325231",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "233a8689-26e0-48d3-ad10-6450cd5ef57f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7180881-26b6-4b0c-8467-98999e2a5894",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ef13505f-47fc-43be-9f3e-f6e6cd1878ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e66bf774-608d-4395-87f0-21f1a35078f7",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b9376e4-18ae-484b-8d1d-d04e60939e32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01fdee98-e8e5-4b23-823a-9847d4cceb21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ddd5e46-3a33-4486-a0d8-da890b4c1c49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2100ee23-1d77-4f99-a6c6-099bd6e3ce53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6c89250-4d5a-4a07-bd24-5428c31ecbc3",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba9fd05b-4139-4fb5-9c66-1ab23a23bd38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d660534d-f917-49fc-a223-5719036f310c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc0012ca-c272-48e5-8c66-f67c48934282",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6cb44e00-9029-4bb4-9cad-9a6c862cfcba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbebd4e3-adc7-4d09-8987-cb3cc236765b",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31e087fe-e09b-483f-a341-79b9ec199ea6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5878aa29-d452-45fb-beb5-15c4280c4bd3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d540e26-ba0d-4424-965c-7869638198da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "1955b5c5-1531-435c-a4a0-7782fce17b79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfc23fae-23ed-42a4-ba3e-a488ecc64048",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b5d5231-57d5-4b3a-ba2d-49b85fa19e0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7b494018-2d85-481c-8967-ca5ea5551884"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ef0ac00-4062-41f3-9afe-c2f65bd25758",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1133b276-a38d-4059-a419-a6387906954d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35c493da-583b-4e1c-b61a-18d27fb7a5ca",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d1152aa-0379-4213-a3a9-858e11674985",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fce69c81-0166-492b-8890-075a384590be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9843508-6f7a-47ad-bf2e-82de094b32d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "831377ae-3500-4555-8faa-d8ee43a799ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3b37bbc-c74a-494b-97dc-11081a90b5e4",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5e5642b-fcff-44ca-9a69-a3d5bd44a847",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbeb34bd-5876-47ac-9f8d-d20d0059780e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b33f350-4222-4a5f-b7f2-1df631d91102",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "b7ceef4c-e456-4e69-bfba-7d13ee846f59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd6bf304-9e96-45d8-9058-53e232642194",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0413535-94f8-425c-8995-57d27fbbbcba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd28f4c8-fa02-4ee7-8e67-597cdbda56a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "445d2a7c-45c5-4662-af8d-6f7785399945",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "d8ae8c05-9345-44ed-a621-dde4f27fc2c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e22c49da-9408-476d-a9df-9315a8190127",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a996a6b4-7857-437f-a684-7e62e0b2360f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfb8991c-237f-4272-b848-129ae9da6b3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd9714ec-ea74-4e99-9a19-d370da3d78e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "02b2ff62-7113-483a-9263-013a2f984bd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a01c10e1-60e8-425e-80fe-3de823bfa81d",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "baf4778f-b614-4dbb-857b-6ff9f7d88143",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd45b96c-9c11-4c6f-918a-f3d56f81b416"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "218331ce-443e-448f-a3d3-5507f1a65b74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "070fbbf2-37d1-4f69-ad7a-101855d1d063"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8726f60-6500-45d1-b466-bc4f6a1d660f",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe392624-cb31-4633-aaca-8a32366e393a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8651acb-85c4-476d-8b0e-30012473c918"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "040e08bd-68b1-416b-8150-ae80211a4338",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "1516a72e-1fcf-46c3-b0d2-534c01a6d7a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44be3b7e-fde3-4b9c-a203-80b7ad7ab6b7",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ed4a568-18c9-45b2-b688-8dc176913d60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c945468-185e-412f-913c-7c57a1e28f86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfa4f058-2bab-47bc-94dd-98a3f2b3fad8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "0b58a97c-51ee-44de-a493-da0cabff554e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9d10b29-eaee-4894-b305-8d9cc9bff1e4",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75439909-140f-4401-8498-db3f0ccf2ce7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d27b3a91-a3a3-4e9c-a20a-34ea13a3161f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "686d4a49-25ba-463f-9e9c-448e5928a869",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "634873e9-2537-4b04-8994-fcdd5a82ed45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "928fa927-8362-4e73-b0e7-ac941ea1f9ee",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50992d67-5389-4e28-8c98-9d5883218bd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6abb57a6-d485-4af3-a30c-24f74782384c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "145fbdba-e200-4085-b4a6-fa914bd6753a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d10c0fae-0a1f-4679-8256-985f277ed336"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea09208a-7806-4951-ae4f-5e9bbb058a8b",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccee2874-0ed3-4353-8cf5-ad69fda46b29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55451f12-5a1f-4c2b-8f16-bfe9a1c6262c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "678e6ef6-b548-498a-b793-c7cc6907c5b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f2c6c8b0-fef7-4be8-ac7b-0b3c5db2f784"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52c14da5-ed96-49e8-ac7e-570fc8a3aca0",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07cf6bbe-d1e9-4420-9bce-4c6fa19a5ab7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4bda6de-b413-4572-8bc5-e6e32bf806f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "237fc05a-e257-4d45-8809-436238175348",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a4054b92-075d-47aa-ad91-06ffd9c9d0d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9374493-607e-47ea-b3b6-4431cba9a2ea",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "878f4719-701b-4031-8aed-bac27672dff7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1079d424-5623-4783-88ae-3c89ab5212aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e54576a-2cfc-4478-bb59-1d9ace266509",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5844c703-cf9d-4755-b28c-84caeaa351ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d33cfaf2-7d5c-4c6f-afff-f891414edeba",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc0549a2-358f-410f-93f7-8988626c215d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7adaacd8-6a25-4dd9-8ac9-788291b2708d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "031c9139-a874-4cf3-93ff-200ae32dc07f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e9b9a9a1-6758-4cc1-9a4e-cf58365823b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e0510d5-313f-40f6-83c4-825933559adc",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a573b22-38cb-4f56-a549-60c2b2e8231b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b183e51-adf7-4eb7-aa2a-5be2629c7eb1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afbda57b-7e76-482b-9bc0-dc4d038788be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fb5ee0bc-7687-41ad-807c-b52049489185"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1124b8a1-56da-48da-b925-9d9c845326a3",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f29edf0-9bbe-455c-99ab-9f1068d91a8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9bf34e88-826b-40e8-9dec-4054f48d4c07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e1b055b-21ee-45cf-9d2f-ec059582dc7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "1c2a6c22-6dd8-4d7e-b499-727dfdcac05b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca381e54-69e4-4f1f-8b3b-b5adc6dd3a09",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fb45d4e-87f6-470d-84de-64285d37d379",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e21d1df1-f44f-43f7-aaca-c3366ba85104"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e53f1fb6-3241-4214-97e6-80e4343b3608",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "4707657e-f92b-4150-ab4a-2d0d16769d9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d86491a6-61a3-4116-afcc-e7434df5baf9",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83041fcd-a0c9-4845-aa4c-f69332dd7611",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a08fc265-6fee-4e91-afcd-96edff2400b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d48eb927-b036-4b5a-955d-7c14100eec81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4a714244-ed6c-4ae8-964c-7f106541978a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef4c544e-7a0e-4c02-b4b0-5cb6723734d4",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4846ed5c-7871-4e3f-b448-72f4b56fa4b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5dc3880e-d89e-4bc5-b75c-14f11ea95a65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b03923e-ab18-4d20-8680-1a084c56a2ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "912f04e7-3e6f-4f1c-a1b9-ecb58c51f2de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28ac241f-8968-440b-9abf-b9158b344d43",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5350d7be-1843-4349-a38f-6a814d93701c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ae16341-eabe-4436-882b-d52f4b35009d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efe7be96-2c61-49c1-9302-dfaaf244adee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cd34353c-cdc9-492f-b431-d3c70d5cbe4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22d0e250-a7e9-4822-a62a-426fc37855c3",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87e82af0-d174-402d-9b28-288ac6cd581c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e58bd3d-71ad-4b46-b216-17b529a1d4b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20bdbefe-5056-44c6-8b46-923898991de1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "875598fa-9c0c-4962-8b14-9e42125cd323"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b386e91-102d-4587-84c4-280d732bb90d",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a35a6f2-c3a8-49cb-bfb5-93c9d71e8a28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33cfb43a-fb30-488c-af3a-f1912e8e175a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0a5ce20-951a-4f2f-8ddf-9bcebcf74bac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "a2a2e575-ace6-41ed-bfc0-34054c49adf7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "667feea6-a4c0-4bb6-9f5a-98069d53689e",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6402ac22-ea2e-4e1f-9a8a-19314b2ae5b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15ae54f0-c795-46a6-9a44-8bf4ff93c969"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "940f0efc-8b41-4316-8df4-55db1aebc161",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "010e7b7a-bc18-4f86-8e8a-eb96efcc7a22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ba31c77-2691-4d2e-badf-a1a739b75d41",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bc719d3-15ba-4b15-80ef-87c1a9f97a32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2bc79c03-330c-4e3e-81b1-18bcb7f9da42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f46d7c7-5cf8-49d5-af53-ce1591e48f67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "31044b57-429b-481c-abc9-88aae411f683"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f03d7fd4-2262-43a0-88b6-a17fed597ad4",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70655538-eb3d-41f5-a078-3cb069b6601d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31d7fdfc-3677-46c1-8a29-11ec1a950b08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92d88b93-4e1e-4524-8cf2-8683438dfa5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "bf8db726-317d-49b5-a5d0-537f1ee8f996"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff348e21-950c-4e76-b5e1-2ee4907930c1",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba7c7812-f32e-46a1-be5c-ad0afddb463b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d97ef8b1-fcee-44cd-a2f8-1563de0e08b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d93b3696-6fc5-4ac8-a705-47977fab0884",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "845cf112-da2b-4c80-95a8-458c2190af81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bd42d73-0023-418a-894a-89b43a5433c7",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a59eb768-205b-4c25-b8ec-106666fec5b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ececa59-fb97-4f4a-ab5e-511c632322cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b6963b5-15c3-45da-9564-837c28fd59ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "302511c7-a546-4f4e-b61d-54474beaf19e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff25e505-03e6-4ba6-9c2f-fbb3bb340a35",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8d448c6-2a23-4030-9717-04c7c85e284b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e71ab82-61b4-450b-9b78-1ce933531bcc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c73d15b8-4f12-491c-a487-bb49fdd6351b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "f925b099-dc80-4d58-8be5-3e9a917e9fcf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0dd90ac-5472-46d5-b005-ac5d295ed549",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa8279a4-6846-4178-af56-cc6797ac95e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e508b42-f4cc-410e-9a55-856cd2a86f03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "479a00ab-7721-4567-b044-d493eaef02b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9d704c51-8c16-4b61-bd45-471e0baa8717"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea673474-f7e5-44b4-9c3e-415b95521c1b",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0063de7-5654-48b3-8069-645c16d96994",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6d85595-b9a3-412a-af44-10b0fb3161cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1475e015-b3b1-4e62-a289-ed6f2da542f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b3842635-b6aa-47b7-b75d-bd8ab6bed25d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39170264-df65-4323-9cf8-ea6a67cc584d",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ff5c587-a417-4b61-b5bb-753a47ed6747",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db8de69e-fef2-418c-bbe4-96efaa50771e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3668484b-a660-40c7-ba46-a619de221095",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e7d32da6-fea0-4df8-b870-3eca88053d50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04c88dcc-0239-48f2-ac8d-85017de2a13f",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bd99594-be9a-431d-a64a-199b391198de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9721d5c3-5e47-4b7b-b935-0a3770db7fc9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a295cc1-99b9-4601-87f7-01200ac79552",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c890577d-bb04-47fb-8fa3-9cd4f6065a49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "050e50dc-e1c4-4a1d-afbb-49035bd82485",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23dee9e5-5392-4371-8704-aa6644f4b27e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02a96ed1-3e9a-448b-86d0-ed3d81fb037a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3068302-31cc-4cd0-9722-b9f2ec426879",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "324e81b3-5ceb-4e99-8950-ee3e8163323e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e97000b-db31-4c99-92bd-8846743f5595",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "312c2a05-bbd0-4ad7-83b4-b518864787e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5145db35-6be3-4174-9075-f46b6192b52c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31e2bfa8-b0e2-4829-987b-eb20fd1980bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "c0e5873a-c647-4fb4-b991-5f572df65a24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4442cb6-fd1e-4618-929c-7c80c0787254",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bad234ba-ac8d-4d09-ae0e-a0d9c99e16be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e73170a9-5ae9-4bea-ac0d-74c1e93a0634"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b7b06a9-6c8a-4f9a-b232-52d31f15b90a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "19d0483b-305a-4cea-97f9-8d33c22e1e65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7dd71a6-1ef1-400a-a3de-7d9610bc6236",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a14209d-7d7a-46f5-8b37-c433a7ff6f96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eee1240d-c23c-4eab-9385-056b700756d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eca0230b-9a8b-4138-a536-8cf376df92c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a6ef77e3-1678-4473-b641-63417b47674f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a959d636-e26c-4fc2-8192-b9c15359f8d5",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cdfb9e4-584a-4696-a6d3-e6e1acd2a8a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2ac520e-9a27-4b5e-acbd-5837690025c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c66eb094-7a29-43b8-a02e-96123a1e9a69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c3800499-a145-4fa6-b288-15ad97a2c77a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccb56d94-6cad-4b44-b5f6-7c67b246115d",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f1bbaaa-527f-480e-ba8a-4c2afc151b99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59c9927c-3105-4a3d-8465-46ef8f6781aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1e564ea-461e-424c-b3fa-3dd4e7cb3e90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "07f76150-080f-47cd-a590-0a9fa507a53e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d178058c-5e5f-424b-9b3a-9d8618cdfa9c",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2741bac0-ec82-4516-a00a-b60cf13a5e6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4f05139-b913-4bb7-b852-d8aa7f5a0bba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dbe344f-eca2-40af-ab17-e400ece88a4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "829f0a93-e8c5-44ba-bef2-0375655fb2dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10021b11-b6a3-45b5-a170-dda9975ea2fc",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f2396fe-5bdb-4b2a-8d4a-230a23c9dc98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7afd29e0-6907-4b9b-9a1b-6e7906da9496"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14910fab-b4a3-4454-bde0-6ad530dfa843",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f2a7f8d4-8bc6-48db-a1ea-42884061965d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45b4826b-a432-4827-a6b8-75c603ce209e",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dca07d8c-3491-472a-8ddf-7f60fc1eaa41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9c0a1d0-e614-48fe-8a61-60319ef15ad6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7512a07-73b4-4504-bdd8-80bc2d20ba3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1196f479-50b0-4105-86c3-2811d763e0f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9946e0a4-baf1-4089-8609-c70392781daa",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dc24ac0-de12-4184-9f88-fe59fbb980e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8aff911e-11a9-4666-b8d9-2c224555b22d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19b9c069-fb83-405c-8741-2b2b2c69cbed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "55d5758b-0534-4b92-8506-44ffd47fe01b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba9c5979-4bfd-4fe2-9f9e-1b9e0f543616",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df070886-7cb5-4822-a4ff-2e16317435bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17da61e0-3c5f-4e19-9875-bb53f65194ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "846bf55c-cd62-447e-a8ae-c8b951658500",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f480abb1-61fc-4ba2-b763-91c205e83464"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a967237a-0cc6-4c4b-8584-bbc222930256",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0c3ead3-e3f9-42c9-9eae-b7a2fde4d7cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4421653-f5d3-48f7-a6eb-7391fd5c558a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48adf337-97cc-46f0-bc8d-842d194d8bed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "cc956f4e-9c98-4e3c-ab12-71ab847b7057"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f72f84e-09b0-437c-ba2c-9971e45f2340",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f18901c8-01b8-4eac-b234-5c86d1676595",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9bc915d-db1f-48c6-a4ce-14910a18e5b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "147a53cc-c22f-4c20-b08a-ec932038c784",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4fcef6db-e789-40a1-8080-330bb6895214"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3030db7-efb4-43d3-bc35-150321dfd90e",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69eb9051-1fbe-4859-acfa-5abc0dba37b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16045404-6b4e-4197-99fa-57ce19ec3d58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2997deb-bf48-48a3-9bbe-6a3bc8f5aec6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "7de1c86c-edd0-4291-9509-12bf74613ea8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af715a7c-25b9-43e8-b901-99427d1423a5",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dda6c2b7-ae84-4a66-8556-db224276cc47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f84c45f-0b65-46ca-97e0-c9a7a76f4d0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e9e0614-06e3-48a5-bb1d-0bbab702f44f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6375b35e-4a81-4a68-b756-66158881c52b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2b5185c-dff7-44ab-afc0-c7575d94b430",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c1899dd-36dc-4a4d-9f2f-b5a927ba8169",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1123bcfe-6e39-4e1f-922d-51a4c15ecba7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9004333-f69c-42b9-9108-cae27e0053a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ea2ebcab-1aec-4af8-811e-ed6af08c4685"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd9764c9-d1dc-49b0-a778-6a01fa1dbacc",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edf0ce09-f223-4766-a7b3-3925d9ccd2fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ee11856-09e2-4b22-870b-3d4e5fb3ebe3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f50d7a7-416d-4109-9dec-d4be9f21a481",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "970898c0-0631-4d12-adf4-8a02bfa51001"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60befa29-8dda-4a4f-9ced-e8702cd3068a",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcea2c9e-0841-449b-b2f3-f672522a9b00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4937bdf1-2e57-47a1-b493-aba18c6e4067"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16561105-820c-46fa-bf19-e9ea4a9fd2f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b52a6b0c-9bce-4f56-8d32-f66a88bfa571"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbcdf6df-c461-4fd6-a7a9-1202cf18bbe2",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f265f39-a90f-43f7-9db6-ad16b3735f87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d14f7311-f30d-4e02-83a0-728d89118682"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60d501c4-d618-4cd5-84bb-8285121ed7e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "75cd1bcf-92f2-4301-93c8-093f1cdb1d9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d92d8d1e-045a-43c4-857e-51df3209e5fe",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ec6d79f-7b15-4567-aca0-da6a9101b6ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3438e20b-036c-4bc3-867f-7ae9141fb2d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9eb7aa4-def6-4e76-83e3-f507fe0874ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "1580082c-fdc7-43c0-b058-0b260a0238d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca2aeddd-991c-4562-8971-0696baad422e",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe61795f-9441-47b6-a372-8783cde3fb38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9fed911-5ac8-4584-ae1a-8dcf445411c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ada6ded-dbe7-40f8-a44d-52b9c88bcf76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "a086c541-b984-4078-a346-ff6bc6dc240d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0a8a5a2-0498-4103-82cb-85523b1b4e26",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53839923-9613-4809-8ade-5db57b1e8645",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "311902a5-c462-4544-8ff7-e4fda09a0188"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8ce55cd-aee2-4d4e-bffd-c9c9ea3a3d9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "868dede3-6aa8-4255-93b1-0956fb39700a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d092832-1470-4309-8cd4-70f44e71a87e",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80fa26f4-398d-4e6c-bcae-23c3586759fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29cf00c7-77e1-41ea-96bb-52f1d310ac1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7b685b7-f9a3-48a9-bff4-5717741b0bd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "6a202135-64f3-494e-93e3-2192e063a2af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ce7f2b2-b8ff-4735-a283-c12ad0f589a2",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93373f61-f82d-4892-b535-591f8a74c56e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a70f8af-0e99-4010-8eff-3430e54edb8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6d2fcd3-6e7b-4dcc-bc37-8058da12be17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "f3b3620d-1b73-472c-b3f5-a224743715d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a5418da-11c8-48a3-808e-26cb1bcc5931",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "786eb965-0a30-4540-a719-097049452280",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "c5da7b6a-a5ac-402a-b0f4-bda569437190"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdafbe72-1bf0-456a-83fa-1c739924f897",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "d00c3eec-4180-4dc9-8ea5-27d742e86508"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d41d0d8a-e71f-4281-894b-380f92329e9e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d059ade6-864a-4d1d-8d34-10472d9bb5a4",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ced6db44-b1b6-4d29-b041-49b478da91d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6644cf67-216a-47ea-a11b-e15171ca3bab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f718ec4-7ab3-4b1a-b493-c4b03183c7a9",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "fd09d578-e818-4b58-ba12-7d2557ca12f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c2c4c8a-fd1b-4fa4-a5c8-850834b0fecb",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7522bf51-b2e6-4580-9030-97d7cfaaf6df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cce5543c-35dd-4ac6-96b7-29ecdb6ca084"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1859c235-9601-43e9-9d43-bb565f1e996f",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "30c03e1b-c8ef-42b5-8539-9c858185f251"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5e51f5d5-cf2f-4f20-85bd-6225607aa523",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ed8e6b77-461d-4860-a486-32b9d26e7845"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8b8ccd4f-3945-4ce0-97ee-2b6d100f1077",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b63aab69-336a-4131-8bde-976695132915"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "57b14383-2c40-440d-a5cc-b976c7ba26c8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "aa499c3d-9a3b-4899-95ea-3c00fbbd09a9"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "e12249b1-b493-46c8-811e-7c3c0faec54d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "247e77d9-ee7e-445f-ab45-2a5a2d80687e"
                }
              }
            ]
          },
          {
            "id": "17cc4fac-9503-454b-a0c0-45221801c93b",
            "name": "Positive Testing",
            "item": [
              {
                "id": "8e40b97c-c31d-4ef8-8caf-25467471694a",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "dc400a7d-3b94-4d8d-a8a2-814f051bacbc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json();",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json();",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json();",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9201524d-cf3c-46a1-bdd2-0a36a99d6e2a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0563ed5f-b21b-4122-932b-fb434f26e22c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "f5ae6a45-d870-4a0e-b7ed-0e67e383dcb0"
                    }
                  }
                ]
              },
              {
                "id": "dd649df9-85eb-46a9-b897-6973f9ec2b0d",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7f1d81a6-ed9e-478c-bc37-ee8f41a5c6b8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "28a813f8-c07a-4a9f-b2e2-2a49488b2348"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c2836db4-5bb7-4e3a-a3f9-dafb5039e080",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "23e694c7-1752-421d-8078-c738ec829893"
                    }
                  }
                ]
              },
              {
                "id": "919ef9e5-a9f4-4c6a-80e2-c21a28391d3a",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9e2588e5-247b-4aee-993c-423a17f54287",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e33abe42-b2e7-4147-9633-2bd6124f3a02"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5096bebe-206c-457d-b837-9ced8bfbed93",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "1465bd62-168a-4cda-834a-50fa05afbe0d"
                    }
                  }
                ]
              },
              {
                "id": "4113881a-7dac-4998-bf61-8bfe985f5439",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "57a3bfd6-b4f3-4e01-8865-d7d8f34042ba",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "cf1490e9-973f-4daa-ac08-44b1b3a4b9b4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0633156d-d4c7-4555-b4e4-ae9b266e787c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "e774296f-3591-4c67-a545-94faabd39586"
                    }
                  }
                ]
              },
              {
                "id": "840aa7fb-1c9c-4a90-93aa-9c5153ac20fa",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6ade9533-e8e8-463f-92e2-767e97c32696",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "695f1039-400c-4242-8294-9425aca06955"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0cada7b8-d0d0-425c-b5d5-b1bef5d35a7e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "644f4598-6d8f-471c-ae3e-27558f0486d0"
                    }
                  }
                ]
              },
              {
                "id": "84a98c28-4661-4333-8396-5e9dd6be36da",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8f79068c-f08f-4a3f-a77f-a9310a4e836c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "482c6bd7-3a02-43ca-ae05-07d080faf503"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d4972cb2-adb0-4904-a18d-01782997863e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "8c5c9007-9647-4efc-9c96-35a7ade1e4fe"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8723d071-c79d-4b19-9c45-236d25681e52",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "89cc3008-9caa-4ede-9ef7-cdc1ba9ddfba"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "4ded3caf-2eb9-43b3-9c7b-a02a454b4ae5",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e7a3c074-d243-4337-b652-9df326175a04"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e0816127-6c56-4fd1-9c99-21811c1b5047",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "2a168fd7-e741-4ab4-a795-9adb0951fa69"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "45a3eb32-5647-48e5-8d49-6b995dba5112",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3cb43b97-ce73-45f5-8db2-532f8270ca76"
            }
          }
        ]
      },
      {
        "id": "913b0294-b5c7-425f-b9e7-526e4a0a062d",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "81de01a2-d9c3-4f74-b173-eb47bc48c760",
            "name": "Negative Testing",
            "item": [
              {
                "id": "40e7ba8a-1546-452d-92f6-1c6042ec59b1",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "950c860e-b9fb-4d59-8ef7-070bcb8ea5b9",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1acce684-7b78-47b0-9016-b266413602e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5e348cd-e558-4bb7-ba62-bab75c6f4c65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ceb13fa-37f8-4785-ba23-7ee9a88b67e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "4f3a5a52-de5b-4041-bbca-54d134bc143b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a91b7e9c-946e-40bd-8927-c9817e89494d",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57864a54-5238-4a3e-b4b9-cd49aca41874",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6601266c-c2fd-494c-a8ef-8ed24a5fea8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02efb527-2b2a-4ae0-91cd-5fe43b3e8543",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "11dc1cb3-28b1-4f6c-a781-62b57a7f0c60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "498d3568-f9ec-42d3-9655-fd2a6e278a54",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a108e279-4199-4982-96b6-c8e3c58720db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f6dfb20-02db-4d97-9ff3-35999e1d1ddf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02a460e0-49b5-4b0f-929f-5cced7ecdd13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5192cad8-fce2-41ac-ad3f-dbad25f6e38c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24f25676-8d1b-4bc6-abb6-9cf5b3a4c14a",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23c7e65d-fb7c-4a12-9d70-e3acc93e3071",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4cbdef0-3cdf-4ec0-88f7-f6ce296d6bd0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3a6fd30-8d4c-437c-9d45-d19682091750",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "714334f3-bf4a-4a0e-991e-2370f7ca0e47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ee33570-ee6c-4c73-8827-f6325b131934",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7d5d755-bcac-4bf4-881a-be79a42296d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0028bb4d-1358-451c-8f51-e41a1262f49e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66bedb88-b3d5-4f20-a390-b6c6dd99dc16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2ad832d8-4fa1-4ac0-bcf9-0adba432198c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "314f9d0d-e3be-4391-ab12-a9d98b8d3564",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6748c306-ccce-451a-90af-cb6657ce6a64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44a0c96e-6e36-49f1-bb4b-c7183749be94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15e85e5b-55ff-4271-8529-304dae682029",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "70caffc5-f5e2-495f-ad6a-463b1fa9595d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f0b956a-c582-4427-b505-9725e9bdc046",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d4e560f-6cb3-455f-bd45-3aef83e8b0a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "091b7f31-57f6-4e5a-9a8e-94190df15977"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e24965e1-ed05-43fa-8569-fb7ac5671cf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "cbfc8eda-a83c-4b2f-b09c-64cb1d51eb07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f05afea6-b477-4463-8fc2-3262caa43593",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbb0da92-cf90-44ec-9c6b-c8bad31da3e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6fbc5d80-b059-4df0-bf4a-08713e423bc7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f99d2215-be84-43bb-9d01-5d59f57596c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "11e83ae8-384b-420f-aa2f-539d46c9c914"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71cb7316-379e-4b37-a8dc-693c9174147e",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62830c1e-06fa-4861-9458-712ef4fe9a27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3d20530-2ab7-4c74-9de0-44bf42fde248"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "489ef570-7330-4d1b-a05f-0393e3c7fb0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3a59cc46-bfe2-4713-93fb-801dfc8111bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d23b82d6-188f-490f-a57d-742617ae4fd5",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bc6ba48-582f-4193-8966-a7f23c346af3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec65bd5c-a3b1-468d-843f-c1eed18368c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b8d2872-3bba-4bee-810a-b56141fc4d47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "17f40589-158d-4bb2-9bab-00fe6cc7e5b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02ea1810-9262-451f-bc43-a1cb5bf55321",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "acf74ca5-df8c-45a1-8a67-3e46c966154d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a223566c-5c31-4462-b967-abdeae09fa19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e6fae0d-5783-42b9-9f67-d2aaf305c459",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "d6a62eb5-edac-45ab-a433-0b7658a1a7e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dee97b98-5ace-46e0-837e-11763fdb5291",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aaccc2a7-2f8f-406e-9370-f1c172c5f65c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8448c6f-ef7d-4f30-8687-ed0859834345"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77ec91b9-8658-407e-a1e1-0b8c8516f0b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "816fc384-5547-4e17-8d73-c117e75b6562"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b826d3d4-fd66-4c93-baeb-4435f39918e6",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c9aa5bc-3c82-4f84-b34a-15a25319580d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7eac9f2-b6d7-4c47-8865-22acecc6d642"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dde94e2-b2d0-4373-ba6b-8030cf26fd0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2eba6f62-d0dc-4a5e-9d70-2622685e0785"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f457e47d-0a51-44b2-a34c-2b5f4d8193c2",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58ba1f28-edfb-4e26-9727-1427daa8b8b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be5df1d0-3deb-437b-854b-f703b4c3ce57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3087117b-7f30-41b7-bc13-d82f9d371618",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "14eb4b86-c7ca-4e46-91d1-b915977bbeea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8f107f1-8cce-481e-be75-710c176f59b4",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14ffe30e-6ca4-48bb-8b2b-a227ae30e5e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "439052f6-18bb-4e74-bcdb-2d35dc928df3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e46370d7-f140-41b6-b4d9-29824a48ade6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "afaa9e95-2304-4aaa-aec7-ec0516ed149a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67b7e1a1-3991-47e5-920a-69bc959fa7e4",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ee0879d-ffe4-497a-8611-6977166dcdfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58115d08-60b7-4279-8820-f2d079a6a4f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24d8fe7f-3d81-4cc3-a2a7-ef07d1892f4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "38a24beb-cca8-4f01-a5fe-dfff3ede5355"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e80f85cb-a02c-4932-a045-946d9ce60260",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db2b616e-88dc-4ed3-bd92-27961e45f18b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6605a179-73b9-4cf0-86dc-0dd6b6d9c71d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a360122c-f876-4487-8363-1eac5c06e7b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "39cacbe9-169a-4abe-be4d-66c0661f1f4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fcec090-52e0-4f68-b9c6-a440856620df",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21f5e2ab-c8b8-442c-8087-0778e089114b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8edeb699-bdb7-4dd5-8dad-b70e479b19cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ff7c2b0-dc23-44e0-a42f-74e224f4359d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "88ac4038-0d3d-4d6e-83e2-8dd6fa20a5d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5e8a6d6-e602-40d7-b770-0f6774f9d879",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "399b1129-3dc3-4027-8f8c-0f166924769c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21c0f78f-8281-4d76-bc05-368c625d2e5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc20dcbc-8989-481e-a81e-40df3295f939",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b803b5ab-1dc6-450a-873e-24a4da94692c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "956d6572-5fa6-4472-bbb5-6d61533abab3",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fce00913-08f8-400f-8374-fad2213a8040",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7c0720a-9b74-4227-a3ac-55cbd57a5d66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45391ef3-9417-4fcd-b087-16787b389118",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "48e7a667-c235-446f-aa15-a7e34c550c41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6909ddeb-83b3-4bb2-8cc5-5a01afd8bebc",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3edd2387-ada9-4e43-abf0-09537e761195",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44d467ea-e914-4c80-bf72-29c31cb17c6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04b08a75-a2f1-4162-be38-4ae6b9579039",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0e8ec36a-afd2-4d55-8cc7-7b12a8dd8417"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f3ea885-d1fc-436b-89aa-560da0efe45d",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1ece73e-2429-4ba2-a837-a10a74dd5bf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f973918-f966-4125-8939-9da705ffa477"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7a837cc-3979-498c-a727-ca53fe754cab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9dd66203-e432-4b37-8815-0e1c5551289c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aeec7449-03d2-4c60-a7b7-958a9f600402",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3401e539-b521-4aa1-b9c3-54ed9004ee9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c1bb4df-2999-4fcb-9f86-3c121851f0b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a36f811f-89d2-4bd8-9de9-10f65b7c5f59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0ab50cb0-2f04-4f53-8635-2c0760e090b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "494ad8dc-0a2d-4bd7-b58f-5899e34e10fd",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cae36ad-4040-44f5-b5a8-5f19c6fdf111",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8166fab-6cb5-4404-ad28-30cd99429105"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdcd8ea4-330f-49d6-921a-195e1fc558cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9f27dafd-aa68-422d-a44c-6e58778abf15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d4f215b-bb20-4bef-a8c9-1fcee3ad2085",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f95530ec-c10d-4467-8576-685b48105b09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3f50c34-c977-4a77-b06f-b8e81590dcf1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dc5c352-295b-4596-b3d2-7f24a834daf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8a8b1ffc-a037-4088-b94b-4d9f565b665e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9e18697-017f-4993-a79f-bc1ddb04945d",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d124a875-3589-43f9-954e-9d2d184cac9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f776eff9-240c-40bb-9fca-67218646e843"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36959f10-0b9d-413d-9446-8b43656fa79e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "52b04dd5-8062-4d5c-ad56-d17b39c1c7e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d370d715-1bca-40bf-ac89-8ec88f7bd44e",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5d7199a-030b-4bd4-9ca9-0f3fd3174851",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "834ed09e-c987-4cdb-9895-c4d08ed7becc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b260eb4-5fc6-4d6c-9b39-2ae828716d5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "06a1632a-471a-4cc7-883d-94dd0b950377"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee77aa61-b91c-43e8-b0f1-e00a481207f6",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbf9aa5b-2f83-4cad-bb58-36d7bca2705b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48926757-8f23-4fa6-badf-48c089840aeb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7a609b3-5341-4aed-ad15-47f32cc5af88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "86cdb680-074c-47a6-a44a-0dd453923a33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5e9c86c-41b9-461c-b627-9ccb99e7c560",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e77eec4-fe0d-4bdf-b075-a86ad6a5a145",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "199a7cca-e3de-4a6e-8cfb-525f677ac225"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bca4fee-d412-4395-b017-0fd5552632d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4a952d2b-26d8-4469-aa17-977e7f43eede"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fba99696-1523-4ced-a8b3-2e4477f4b3fd",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd3364f5-fd7f-4a01-8a3d-e1a9c712d40d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5fc1dfcf-d7c0-4791-b6a9-30a84a5df163"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b39bf070-b0db-4d40-9bd5-288dedd5a37e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0148b13d-12a2-49ff-8629-02a629f0f616"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dccbb0fb-8c79-4c98-8e09-1c198cd472cc",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55983d5a-d8c6-4a87-899e-5d270861ccfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41b40787-7e70-41c6-b6ca-083ea3b3afac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81791f95-5b0f-4a20-a4e8-35801400781b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "56bf28f4-8d09-4e7e-ae3e-32c494390fdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13082590-bc72-4666-a699-dcefb000b8a8",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f6fe3cb-e36b-47a3-9bb9-486aa91e31bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39cf01be-e56f-46f5-ba26-077244f78270"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c10f5721-7a77-4c10-b3ac-588e5da68f4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ac114e82-e808-436c-b48c-2f078a7e9095"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "feeae6a5-557d-4e8e-9e41-caa1ff7c1765",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f99a42a8-4123-49de-9167-0216bd73b2c8",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d513ea8a-1f29-42bb-bf75-1930a0aa9b1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a98615c-8ee1-4903-9443-e7b6a96fb0ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73ba5188-c153-49bc-9aa0-fb3541d0f048",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ce7c8276-0611-4942-905d-31e429260ffb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2022b76d-b0d5-4b1f-8c78-ccdb4da23fc7",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "161cad1a-2a8e-4fd0-a8d6-b7bd605d20ec",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "8891bb79-1992-476a-ac11-39a70f13e651"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "526a859e-efe7-4f4b-848d-cd71b01bbc60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ef62bbc5-eea5-44d8-87e4-10b4a74e7c52"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b1b6f473-503f-47b4-8cb6-6237634d30b2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "358c26ff-79a5-4b0b-8ad6-1eac39b70c44"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "79e3856a-de5a-4996-bf65-058fa511c59d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4b24e4a4-fde3-47da-bb24-a394fec1f2e7"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "64e39050-cef4-4003-8d0c-697de4cc0f6a",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "81d47c06-6c35-40c1-91c1-e624b2d2b105"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "17fc9c0e-241c-4c41-a4af-92fbc63b4680",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2e1d1e8c-24cd-4f60-bb3c-0e73d109b811"
            }
          }
        ]
      },
      {
        "id": "4852326f-e941-443c-97ef-a1ebd713b592",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "16b2ca6e-c3d6-4e28-97b5-90e0dd4c0910",
            "name": "Negative Testing",
            "item": [
              {
                "id": "df07a8ca-3722-43be-a0e6-4643dcf1a76e",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "5b7cfdeb-65c7-48fd-ba64-94df4836f304",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6439689c-0e96-4eac-824c-8ad67775989b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a977c64b-f112-413f-a9c6-c2b156878ca4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbbc8694-59a5-4828-bd7e-c51d2666df6a",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bdfb571-ee66-43b1-b5e6-9a4b8d1683dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2979d870-b32f-4ed6-b86f-fa7e8f01c9fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a12243b1-298a-4432-97dc-d7f41d93a2b8",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f9f2206-99c3-4fbb-a073-c3f8a8b34357",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78d3305c-4ce8-4645-8ab7-65ea3ec5d8fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cf72440-5a88-4363-b048-8bee8fe05b28",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "646ee45f-60e6-42c4-b4cc-b55d11ec929d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d236464e-7ed7-43f6-90d8-4b7d5b5837d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a932241c-4da4-446f-b90c-4dfaf8a867ed",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c073a164-9f11-4fb5-86dd-d1da04032fd2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91e5f134-823e-4e1d-b511-dfa8555e2525"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e87a5ad-2957-4cc7-ba8d-ee049a1738ad",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dce03e31-4c78-433d-8b4a-706a1f774f07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c0e50de-aa72-487a-9994-7f521cc3b995"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d2fa842-6562-4209-84d6-59d9532dd869",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ece1746f-ee1b-49a4-9f56-89420a7ea390",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31055873-f088-46ee-b7cb-45898069638f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "727e2bd2-1d57-4a47-9ac7-561f2312d59f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a150fdd-576e-41c5-becf-065060a2c4d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65bc9582-7c52-4dd1-bce3-171a18e287c3",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96086329-eff7-4d27-b975-7e6104229ea3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "15cdb7e9-12b3-4b54-9c82-bb1bb9d27049"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f04eab2a-ae6f-4b78-b008-16e8d61fec06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51d35f35-a699-44a1-8f66-6e4d21b5ff42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82bd4cc8-18c5-49b4-8b22-096a598a7a36",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef7b607d-a2eb-4320-808d-776f3d3db512",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "df0b5570-790c-4b0f-98f1-ae13a048d689"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8ddfeab-9078-409d-9e9e-54764c125e30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5431fd6-4292-4f43-a864-d8e1c389a886"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e15be8e-3687-4b96-80be-e9f18e793be7",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a49e22c-6d28-4470-ba65-1ca18c6571ea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a6ec27d6-b2db-4381-8567-883e134d9f23"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "baee692d-2d4c-4a6f-b9dd-42a9e792d88f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70521bdf-0a4a-41d8-9de1-20f0d74e2e79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b436f46b-a28e-45db-8170-f9bf56f8efed",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..zF1sQbNclnV5pE5MfuXqMaTVBquwie4ctwzSdbC_LJ1Lx5qRK6V-y9wl5oTvN_GpuOvMIvlG3kQdjgqL3GBKDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35571e22-107e-4d27-bc50-9e36795f01e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a229cc89-bd01-4613-8208-41a550790f6d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3705f8a-0cbf-41d2-8648-1056f522d420",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57d355ee-b573-40ff-a995-c56689ab7bd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0cdb091-1909-4f68-a6c8-b286164efea1",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4d555d6-37ff-4d1c-a0cf-67fad6cf944d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0fcfe62-5098-4c25-8ccf-560ec79c6cbc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "393d5faf-b893-40ce-a2b9-797125f5eae1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c85972d-2598-4a8f-8748-74d32c3904d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e13a6b43-60df-452d-8e52-92bc685e9225",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "225e5575-0501-4a3d-8ea5-1ea1adefa974",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aca2eae6-cac6-4408-8802-85fc29f18043"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "394a890d-b71a-4fa8-95e2-ec83c880ab72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1be88409-7c56-45db-8d68-832eb6d811ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6110611-8990-4204-a010-7a327e8158fe",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7a01a40-7172-4b0f-bab8-2bb4decbabe2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3f3f8d7d-076d-4517-9274-9c55c20612cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f891cb5-b408-4607-8804-6d9fda6f372e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0350838-8c8f-4177-9ac9-a61f3cb17931"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9d862cb-b5f4-4e3c-bfbf-0f62a3fec1a1",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e8987ee-1309-4306-be7f-e4960d0c05b2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e3858522-f533-4970-b2a4-92f9551aab8a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e36ba0e5-633a-4e11-8ed5-6c1d08975b1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "236060a7-1fa3-4826-b0ec-04dd89d42c7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af75fd71-4815-409a-bc74-991b800feb8f",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "056512c2-ffc2-4326-b6ce-e97e3b47a789",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7de316c6-938d-4296-9d10-c9805fa37995"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e719d605-db86-4a51-8dd9-ca48381163d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c34be218-17a8-4cac-b539-a9d7503a94ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49057c6c-8d94-495c-9bdb-aa3723c22adf",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bb5fdfb-0406-43c9-a26e-f75523ae4a71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0add13df-5a46-4d9b-9dc5-46c8485fabf0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88e47855-c124-4541-96cf-ac0843bb3b98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18e63714-d134-4e1a-b6a9-94bb825d5a47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11bc8d12-0f4e-4844-95cc-6a9b09e2960d",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36873943-883f-4787-b5ab-62698ed0cc47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2556cde2-a92e-40af-aebc-e21c863eb9d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f4783e3-4825-429e-b293-74199d872628",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "137a0d04-d30f-4884-8039-c554af95767e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b8a80e2-45bc-4616-90d5-0c366ca939d7",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": false,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ef543b1-1f82-49e3-84f6-01b48b10d2d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ece85aac-a6c3-4837-8f11-e3b58e3f392e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fce7ebe5-8eb6-44d9-918e-e870941905bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "661c1648-0d82-495e-81e1-4b6e2b8234de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "132c5229-6882-4317-a882-5367bcb71aeb",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": 123,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cb15a9a-50b5-4109-93b5-d8c9c0c47e59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67a7eab8-ef8b-4ea0-b6e5-086ed46295d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cbe67a8-3082-409f-bd56-74a6ca8c99fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e969420-c537-43cd-9a1e-1384ccb06015"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f9b8185-2460-47a8-95e1-33dbc6edd811",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": null,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "243e6d24-878e-45c9-af2c-898bebc79979",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51069ad4-9a85-459e-b8b6-dd512857507f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96c2847b-fe93-4713-ba7c-e0df773b1513",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad28d459-01df-4d1d-a912-57f4a061d975"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea3de897-a157-4481-9670-829273d806e9",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..5J-iTBtI5WNIe9L3kLF22cjjDx6iQuJAgl6yYYoIGMC-X_crKNlSlB5bRJsrb2MV-NDlWMtHe0grtMqRG1N0Bw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa2b33c6-9797-4fe2-bd0d-567d89ad3eca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eeff443e-fa5a-4768-aa4d-775ad197aab7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d12c3a9d-a8a4-4994-a57c-9d9f3632ac5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0987c1ad-0421-4346-959e-8ef6ef5c0d73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2688cc6-0bb9-4b89-8807-705054777aeb",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e314d0c9-afa5-4778-bc49-9e60a1d839b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0eaeb12e-f1ca-4f5f-905a-f02f6ac92733"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f41c3daf-5dcb-46df-a6ba-95ec74fffd0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b384c601-c9ec-422e-befd-e845cd6e3af4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "979f1cb3-bf38-4a51-a2bf-ef5c4ab752ba",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37628e4c-9e93-43a0-937a-1304889eb9de",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ffe9875e-2fb2-4007-bd2d-81455b317493"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b59319d-ae05-4665-a775-b8d0d232f48e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70991bdc-8a2f-4154-89be-a9bf7c88fc31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b250ee5-3999-497d-a1cf-906b2903cdc4",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2291ec49-3cda-4662-ba87-1d4c63270617",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "90b4c902-a5c1-4d57-b75b-50a565589830"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e67fc8c-1391-40b2-9ce7-f7ea3753c887",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bee10a03-878f-4396-9048-14abbeb130a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cee1fe56-0f20-4271-920e-82f41f8bebf0",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80e1f9b5-4e05-429c-b247-8abf8efca426",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b3af13ca-e99e-435d-bf66-b6bebf700634"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a27cd30-bf21-4f04-9385-84e48643e22a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f40b8a58-38a0-4618-a805-e92a7c3b8516"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b529c26-461b-49a2-a0b5-de05abf1585d",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c741d60d-a0aa-499a-8c43-486d9f6a5f8f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "82748975-0030-4f64-877d-c3303893d8fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fac2cf3e-c274-4567-a30c-730ee9d500f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b5c62f9-011c-4658-a665-a94ace0fc2ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "065dbf17-1843-47d5-8f8d-e1c4b670eafc",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71c9820f-c5d8-4938-9214-07e2b471db27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6ff03da-af56-4114-9a85-871532ae5ce2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cd660c8-4e1e-4640-a03b-7a3ab4dfc910",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed877b69-6a3c-472d-bdbf-79bd198be3b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c073b603-69a0-43b1-b6d6-5e731867429a",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd5c22a3-32a8-4590-9576-91f4ec6d52de",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9ec4d38a-f446-4379-ad00-b5dd065eae02"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb04b938-5613-49cd-9d5a-551a0e7a14cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3189cc28-6249-4d14-aaae-7e6ea28ce47f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6adc82a-5a2b-4b4f-9fa4-c06717e0a3eb",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05452cac-1c2b-4cb6-a956-3ee277ee4182",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6e7bb473-b8b6-4299-ae91-7f66da188e95"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ceb0f86-3d9f-4fda-9cd6-b62e237b932b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "621e4a40-bc2c-4b4f-8689-41a417910881"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2b73387-5027-483a-94dd-309e79a0cc1a",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eac27d74-4cc1-446b-a1d1-4068ba4920b9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f07e2386-071e-49ac-acd3-858cdb47ae8b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "910c1ef5-9e3c-422a-b3ae-a3eb578e9101",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47305865-92b1-4802-abc5-ca64336c2a7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27e388f0-c2e5-4f5f-b3da-56c00ad5a1cd",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "709a1b58-55df-4fc3-97da-da3edbb09cac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "96960119-6873-436a-8f44-5505b0937faa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0f1f8a2-bfcf-4115-937a-d594c2df8722",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e96a66ba-3b14-43a6-8a4a-5bb8b360c887"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4e00f3d-e44b-47ac-bc69-d5bcc6819cab",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e883e2c-8971-4cd6-abff-4b39195a18aa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d73a81ae-250a-4c64-be44-c1ceeafa813c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2791f110-0049-4743-a92a-8362c92c595a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2328bc57-9973-4813-8617-663af983cc8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6001feb3-5492-4d9a-b43f-df73e9347b22",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98766b1b-6408-4eef-a43f-616ed20a8088",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f6991732-674e-42e2-aef0-25ea53b50a0e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "118d1c2f-4c29-445d-bfdf-196926a87db3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07ab845a-f5aa-4f31-b241-92beb18e44b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "411cfa2f-b779-4bbc-b50a-5577ebec0a94",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8160f853-f5b0-40e7-a106-8c21737af7d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01ef157d-1987-4284-b07a-20201dae34fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24beb511-1243-4f9a-be6e-30a103b142c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c437a55e-726d-4e08-8e10-63eb8e89c35b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5e117b5-dc6b-4b4a-ba86-5b4ea3b90213",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x7a3s_8HfmUqGT6SDkktN-jeRmBR2xQ_9tOhJx4kEG3SCsRTySfDxya9yy57LNv__qbY1eMkm9SNrwdYiqlBAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be989ee9-093f-4ef4-bc59-94dc2c37f603",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9c735fd-0716-410e-99f4-6433eca0e131"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9381540e-1831-4f62-88a1-efee85dbbb90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3837d245-243d-4d03-98ee-1b6c5f204731"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55a83d1a-2b75-4548-a486-5c416f2d6a51",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mMaPSvG48oEf3bv0t-6eLR3zvU3_BKoRIkgzkuZfm8zvjqbI7iy05D8k1mTeoSZEw3xYV-_sH1rChqGmmp7KDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a349d40-5c5c-4922-8ccc-78b020f72629",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "edd46481-fe28-4ca9-8157-719339eb51ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f3f65da-6c4c-4103-aa52-74cb675a33f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04fc497f-f3ba-4573-970e-f7763ed5f33e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e85b0dc-9703-4634-b845-bbf318e5b290",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..rAVfo-Gnj0vUX6yDAr7pslI6XAAyF2LHTXpiZEmnH5Hb4RsKcmDZZawaLSCg931y1cBUgZ1PQvGbJEdb094ZDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db884c87-665c-4f2d-ab21-79dddca5d1b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8423f88e-15f2-4ade-bc6a-b3608f3aaaba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebbc6184-5d1c-4c08-985e-0401d53acbb1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c05c10d-c04a-4ea1-9a97-a80a175c5418"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d439028-30d9-4b8a-9f1d-7efbccff2c73",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69887b3b-2a68-4288-83ed-48bdfecf340c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "172e33f8-b027-4eff-aa47-cad07f0c7ab8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22928186-93dc-4516-8750-6e06ec41b1ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37c74d2f-40ee-4837-8796-4048fc2fb056"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98395380-b0b1-4545-b443-68ae30cd7679",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e089ca9-bfb1-49b2-bd4c-91e638d734f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "186df543-908b-45c1-8c5a-2dc17fd231f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6998524d-358a-4522-852e-b21a3125b0e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2c3ad92-1be6-4383-8a20-5d1edf8cae69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4922d7b9-53d0-4a28-932c-d3f1a372ddfe",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..vv4qa5LGRlgeMxW5G5VjEKDfjKKosQnvpx6oapYDlfUSWVagQsDoDcRmkotKzFHDcTh-opjGLp__agL6_d4OCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c30ff79-9ef4-4c86-a954-76abe8385184",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb1178da-eb68-4baf-8046-36d946d05334"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec6eb4f2-3cc8-4bb5-a4d4-492e12c5dbab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "546e39c9-bdf7-4910-980c-b60cc5912d33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ae17a6b-e192-4626-85d8-ecbeff245000",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TTwcmWS6_0_t8XPlAGXbzWVSL_dL7OeYojY0FZz1WXCFvDfeAQtMh3dcIxuCeDqON6St3PODGfxluO_q1vWCDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47836f1f-83e0-4eda-bb68-f2d41cbb7b5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99721589-841c-4a1b-850a-33765985cbec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c5ff786-4154-4fa8-9666-8ed9f7b8b661",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f01c925-9491-43dd-8bee-667a5f5c0d90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6ccf06d-7806-42e0-b4e4-7a3cf5ce5e18",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..wpkNYYEOCjKMWm9xTYNn0J7IgXZQbbkEoohMQbloz_Zxb15UVu6DqiqsENotAeHvlRWd7RH2O9v4FwWBeqvPDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "629a5564-12b3-4d63-839b-9919b4dcd116",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f9752e4-bcde-4c5d-b3aa-f5d04f9bf0e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dd7f5a2-657c-4a5d-9c38-3cc14fd478c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1934064-b0cf-4a3c-8f43-15252803061c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e2336b6-e6df-45d6-ad49-095d69881393",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cbfe7cd-e2a0-4dab-a576-8ea0cb07f49e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4fdfbc4a-6db3-48bf-b840-c06169e4ac26"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17398cb6-2aab-40c2-b79e-80e216c16be1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2644f887-edc5-4992-b144-e6a9be34c33e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3630da65-76f0-4833-b95c-db816365e2f6",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHJmwuqqXWMdd298m7RCTGyGoAzsCx1y9tewaHukqaJJoPn2-TLDCQuXvlnFeAYAE_Cy3j1UScfoVx5k-eclAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "658ea8d6-11a4-4ead-bdef-294feb3e34f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82a7d124-f9e8-4339-802d-d2bfb3db90a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87f9c64b-f677-4901-bee8-60380fb1a9da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e56ca1f5-98d4-4d2f-b8db-f276ae39c613"
                        }
                      }
                    ]
                  },
                  {
                    "id": "613964fc-6fc8-4d8e-b432-06564aea6a4c",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3da1c32c-242c-40f4-acbd-baae340a3591",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eea415c2-df40-4a22-b9bf-0b1069e0af12"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a536edf-caa6-4564-a818-db36f0ad1e7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62133066-37d4-41e7-b062-ba683d606015"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07538679-0f09-4ffe-95c9-d7e9c0a7b428",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..OzKfWk00QpV3_FJru3xJ3_ktwlU4O68prZWWCmdy3mQTbCz2lPFRl2sB4AkdD3AZUFMAnwxhscd9B0UnqxTZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78fc1e3b-c779-4014-b90b-b1e21d3b7b5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97e6f49c-16b0-4070-b2cb-60cb136b99b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1a3fd3d-4bbd-48ef-afbe-d6838423640b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b95ba0f-569c-4609-96de-407a1f6cbfc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "438232f2-ae35-4d71-a2d6-ee83acfaa40d",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1W7WM5cXb0daWooGxEOYn_zm72mkmpF_tu8Fij39luQwNGDgK7h4nZGBFcS80HTVqiBKxzlhGq1yNnpUlLG-Ag\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd7e0570-36ff-41ac-b35f-55abd4ed6426",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42ae7fa4-fb71-4417-9511-b773480aa652"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ded83dd-2c5e-495d-8086-1b8009854f4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de578d66-dcab-4ad9-8b83-531a833ac1dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5185cefa-ce7b-4748-b4e0-9292b159b2c7",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dkiU2sStrvQWiNFK8cKmCbAcRGsC9kbDdKyr-NRlPc9ORQczitwUEymjviemIi1Oot23VohpyMcSFvgFIKIFDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e04fc54a-5b72-479c-aa79-1f451bf72714",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da5cfff2-bd39-4497-8235-79407c7f7b90"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7e7791a-4e0d-40bf-93fe-c30b94372475",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b09ae73-65e1-46ef-9e81-8afd8a6d72a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f23d0e31-a735-4155-a306-a5f92b2762ea",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a5f543e-4219-42cd-95bf-c8ab05e629e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4849572c-344f-40cd-bf11-56ef6ebdb950"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8865ea42-dc79-4658-add6-f6a6a1922aa7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8c79133-f012-4553-a96b-20acc0ebee72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "007a0ac7-a69f-40b8-8ef0-edbfc3f99245",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pNIbeUn6DL71QxEWTF1wQTqKfAJET5JB9FlmoLXk4-rv1owG68DqQY6qwcPx6fUbMijsWsXlvaFvzND0jAg1AA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0786b0a3-1a0c-4dfb-8973-873b683347e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62af30ec-4873-469a-8bdf-b6478ab9b860"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c4a968f-563c-4cd0-abf6-28e2266ead98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6017e477-a403-40a6-b29c-f26ee1cad4b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20335640-6547-4d90-a938-8861d705c8c6",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z0P0ndVABJRB7mCsv4C-EgB-1SxgnfrU2uQBDSwKm2KfB1jBnzsEzY9enxOn7V1lBAPNxELTEaxPCAK7_n3bBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fa8cb26-fcf5-4216-95c5-7f8571d036ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f80b7cba-abf5-40cd-a516-4d910a92cfc6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb4da8cd-8bd5-40b8-b88d-2055b776e0df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "acb18314-d0aa-4021-b49a-d87fde9a5719"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c8e4d83-37d8-4416-ad81-56e946221726",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5681892d-f1bc-4eaa-9bb3-ce0ab8ad9a07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bf33077-acd9-4af2-a5ea-0444b5059a26"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ed46ad3-7e3f-48b0-be57-ae3257b60021",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "471c4d1f-9789-47b8-88a0-d92c322c70b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac66523f-6039-49b6-88cb-15e26b84fb5b",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5989330-74d6-4e23-b4b3-de708b23bb7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e684880d-562d-4ee8-b45f-69abf237d666"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72801a79-699f-4cec-b12f-12521d879ea6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f05693d-2944-4204-a699-00dbca9d893b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17cd653d-d51d-4c00-8ea6-fe161013a0aa",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..IXaPbANtKFiA3Sh28esCkg9kdwpHScJg3bOCF7Phmb5n9RC981EeIobgDnMzWIjP4v0S92FDEcZqA_XbW43GDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bbf5d25-2cb1-4852-9d26-0f978ccd95c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6c9be99-9af3-4ff8-9003-434bf0b83d74"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "420e00d8-00a2-4d64-b51f-e39118704d10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "793cae65-00fc-4432-b1b1-ef23316e9d3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecb3f9cd-b50d-4de9-ba59-0c3fbf5f376f",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iM5Xr2lBqwFIQhq9RI7Dv4K0dzdQ0z7i5YN4ELsstv9vDC9xA-GY2Ft-PsfubsbgVyQsQYjchCv23GULmhauCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0673abf3-f1de-4586-b2e4-b35feb44d1cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42a3127a-6d2e-4a98-94a8-f6045f36ec41"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bff8740-89cf-4336-a6eb-3089e8876a15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "665286b2-da07-49e4-8530-658d8096e075"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fca51ad-d668-41f5-aa6c-22cc739e3f11",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d495a585-178b-4d0a-b170-868e7382ea8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd3c6864-057c-4613-a4c6-212746516f91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "120a75ae-d601-4de5-bf02-51b6077eb540",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ca7f663-b798-41a9-a5e4-72ee56d260b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "151aa346-099e-43b7-a493-9028da26de11",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33c1d636-e3b5-4151-8913-480cad93ddcb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52475a85-c707-4b7e-b7f2-60940c6ac306"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00e20390-06bc-4dfa-89c4-10152794b27b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4caa6e27-b011-4c18-b60d-73ff4bbc5ef0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d0b1d3b-8b6f-463e-abca-bdf893e91aaf",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..GBcSurXcOJcVinhthkmqvV40OS1rN2fY57Kad0HMLUuykp14JJCtNw_gmtf6SwZxhB860OVsUmuNbZXsMCi-DQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce00c931-47fd-48d6-8104-547dc37aedab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47324f41-182f-4668-a6f3-3d27b2ab5cba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31f9e533-ffee-48c5-b80a-93a4ba36b5c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8860fe60-f676-4213-844e-a5ae2846d6ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17f54c49-483b-44cc-8d9e-0d22f5ae529a",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VWowmcXQAjabeJENG3aOcLzQ9HrvmSIs2pOWcaEMLdJtvJfP7oWohIBiqp94-eo1pd4Ocgk3hT0cLvS5qKBYAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcb4ca72-4c6d-405d-98c4-500127303791",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c982e26a-ccec-450e-a4b0-ad2a8aeae58c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed33bcc2-9ad6-4e49-bbc6-f0c761dc6784",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72fafc34-757f-40ec-9e4a-18bf0e9f2ee1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2adda1f-7f89-4065-aaac-5343c8c40d4b",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..-awe55AAvkjymZEpagD4fdSQk0uCGFfjyFwg7upmg_CISWk12JfezKe-N3hjTwYKCSCjScynLGvlH2x4iSgbDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "baaf6405-08dd-4eb8-8491-22550977e5da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9441c3ce-1fcf-454e-832d-659e046769a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fef8ca9-2ea9-4892-ae8c-cc7809891456",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63ebf1c3-f0c7-43e6-b195-985dc849b6dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb5d8c94-dfdf-49c0-973f-a60b6fd66652",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..NDwZvVUWw-xG0zU8VsWhiXPWrYycgK_zwN8zZts05DTw23rOTd9IOXQxqhEMzo_X0c25jzowIbpDfEFxqfmnAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0238cea-301a-40ea-b82b-bc68f55e8119",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e218049-1493-4f4a-8f51-41cd98de1072"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ada1b502-3783-4a28-97d2-c13c2c6d0d85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0949ecc6-2112-45cc-b1bb-8214fcbcd346"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9900073-a360-495a-b2e0-e2a929da7e4b",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..y_7VEjN1ENYoedOrj2jsIqgL7FSYelxGgFZD5ckqKvSDM5BVEWiEctD24BWppCndRR7WR9_1ByBm2F1yBSaoCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a002dbf1-40da-4829-92fe-2ea9935f56ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c70c7789-d87b-4255-9b34-a267d19d8d9e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55e02305-80a8-4ca6-90db-c7a5f6bd7915",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a9020c0-6dfe-4262-b1ba-8309673471fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37e2970d-8eed-404a-a54e-576c7fc4952e",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a017747-c7ae-4de0-a918-f546a0865479",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "68c84c3c-5eb2-46d6-b8ed-938123f376fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "afc9dfc0-b535-44ab-b00a-22c1b8e987a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87147f30-bb88-4bee-9f4c-90d8fe30a195"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e79d4440-ac73-4cff-bc00-ee0ff3ac8d7e",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63e703fc-c037-451a-aaf6-46691e71777d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2312ccb0-9e4c-48dc-b787-6d23abba7b5f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d68c88ba-e7e6-4574-bc58-3fe1c689cd7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12adc299-b983-459c-a43d-43ab7b5132c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e05d58e-6ef3-4abf-b434-0e087ab0a324",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f51e106-af37-4f30-af0a-0caf9742e2f9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4e76ab3d-59ec-4384-bd4d-9c232966a58f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee7b70be-4070-4c8b-ba62-a9f662491834",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0c3eabb-b25f-4600-b8e5-8bcc2322c651"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6f99a0b-d5c3-49dc-9877-11d284c2c61c",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c1bc1b1-a20f-4554-a1cf-cd7687506685",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "84b4f8f2-30c3-4b2a-8673-fd6bac488336"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3a4e13c-8a60-4235-b2ab-5b4a56afa086",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6fe5ff4f-b1a0-4c8c-baee-4ba5eeddf1d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89eb140d-e46c-4616-9383-a8f832aa2e39",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf971f58-339f-4e6c-8f20-2284c741fca6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2c0e248d-e48d-4d2c-83ca-459660ae0ea2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34c7261e-06e0-462c-9ca6-6154e7f2c5d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f601b840-1081-4ddb-b064-23ed7ec99ea9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9c8ead2-ab22-47bf-889c-7b89d6652280",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "527425a8-8c10-4828-81ea-b969c2f40184",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "496c35a2-24df-4073-9bb9-7472c190edde"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6ed3af6-ba49-4939-ac39-a18642557ab6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2416dc28-a72d-460f-aba0-87cd022be30f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "248c8b6e-3847-4d49-8e38-28d1bd682e0b",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53af262d-e81e-4bff-9af4-f5012924cfeb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6a2ed993-644e-4378-822a-2203e8cdc07b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd4143f7-b1d0-4881-8d0d-8b19c05ff2c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4012617-a23b-4170-8179-7090e88a821b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "feb23fe6-20a7-42b5-ae2b-3e61a81cdfae",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "877a9c31-9a24-46bb-adf3-10c67bf44cfe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f25ce526-7940-47d6-8554-e3a03050b27b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8753821e-f275-406f-a667-2e52b4c44427",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e49057f5-295c-45c3-9966-307461a845c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f27b8b2d-94e7-41d1-968d-68fa2d46ee24",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "573ba54d-5110-4fce-b372-c897c9933280",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "556e33cf-6d1a-43d8-bb12-13eda7e1f80f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcaa183c-c8c9-40af-b4b4-01eeebf54ca5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3f6709b-dbec-4611-9c43-d595e5cb8eb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "968b6643-aa5e-42df-9c70-1b3407741661",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33062b70-32a7-4dee-8e2d-2e5d4ef4048a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9176005e-813a-40e6-89cb-6605974f578f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0914d521-3e2a-460c-b4a2-0229a854c47d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f4580e4-95e2-40c1-abca-6b8bbfa037fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93cdbb3b-5c28-423c-8c38-bc6993de9e3d",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c804974-e458-4ce4-b1ce-f7dd2be01ea1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4c2b8e9b-28e1-4c19-a584-561ea44f8423"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c020fe99-9daf-460c-a616-d786f3ef4d9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b0ca196-fc91-44df-8817-6d60a325f416"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d757c51-4cee-4d85-95d0-9cf21dc25a3d",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f7f899c-9115-4245-a4ec-53d76433359b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c2583d44-b612-4d6b-b22b-b0e06281a0a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd80895e-4b62-4c5d-bf56-61619e8bbcfc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a820ec3-9bd5-4e1a-9487-ece3f4a609a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "398e75f2-fdcc-4e8e-8559-7e67a4b2f1b1",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f485cd82-5a46-433b-977c-2dfa64e0ce73",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eaef61a4-2f4e-46de-bf21-0157b47c08c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06224006-362b-4e87-bb68-adf6a52b256b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85432021-3424-4fa2-bf70-0722b65753c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47f59701-5dd5-47ae-8854-3cd953bdad67",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3409074-420c-4fab-9b49-e5f7ec0195a4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "040ab5cd-b0a0-4ca2-b684-ffbee1199108"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac64f1a9-534d-4ecb-a9cc-16f6a6a7b56c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31a71063-73f5-43b5-a5f4-9b5cb2cf6056"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2ffb204-b7a3-43bb-a8cb-f6ae4f47a989",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68f9037b-6dbe-4b86-bf94-6d14acd6de70",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "81a10149-d05e-4faf-bdf8-76ddb04119fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3332d908-2865-4d5f-9917-1151286faa01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e746097-ddb2-4afe-9016-c8a996c3b927"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17980424-a497-47d2-b9a3-65262a137b13",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3e958e9-daed-4f62-899e-8b81c318ae78",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "79cba852-9c3f-4590-a858-3573448da8a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7485e5d-6e37-4166-840d-c8e3b75c52f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c092c9ee-b294-47ba-a9f1-a6e89257e660"
                        }
                      }
                    ]
                  },
                  {
                    "id": "461e3559-140f-4910-a420-c0e1a40bc3e4",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6870bd85-2c1e-4a01-8741-6c30c99a5c3c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c1f33029-71b9-4236-9a27-acc62146a0a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26f02511-209d-4aba-9389-cadc173d88bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a65b6f3-1dbc-4833-985f-eee88f436fb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6de45efc-d728-4673-92cc-350d9db29150",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2458553e-f600-4257-b187-66c8de6d5c6f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "39b82133-7bc1-4476-a2c1-ebc6c49e6462"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d753c397-4381-4055-a8c0-ad4f4bddb49f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d969604-5690-47b4-be85-97569820da3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be4a323c-5580-437f-a90c-cd0ec6f18fd7",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e66d23a-5f9b-451a-b9bd-e125ae92b050",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3e5b4c5c-1943-4ab3-a4ae-205f66e4c2e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d321f75-7bb0-40da-ad60-f7b22cf104cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22dab706-98db-451b-a5f0-15ca8b4ba71a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88d561b3-fa16-46e4-9dd3-981cfe13986d",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e812b0f8-6f7e-4db9-9116-b369f6fe98df",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "364155b7-bdb8-4687-8571-017fae1e7a72"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "717d683a-70ea-4204-bb0f-3929ef837d3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f89c244-af4b-4a6a-b8dc-7c4e6640753d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95cbd9b5-6466-4a50-9082-0ddb5973997b",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bdb4e39-0d90-4046-b68a-11bc8a445127",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7f81635c-cc3f-4118-8fcb-2091fc1cc798"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fe3988d-7a75-484e-9a43-76894bdfd0b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e491010-4fb4-4d7b-b3e2-761344700074"
                        }
                      }
                    ]
                  },
                  {
                    "id": "926872f0-1a52-44cf-81d8-8e08bf1b581b",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc4eaa74-7a50-4a1f-aaab-91b2d02e1bfb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c8b27412-c15b-4fa1-919a-a5dce6c4b592"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e595407-db0c-45f5-8439-4528ec1fd3cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59c75382-484b-463c-a29f-623ec4b8da15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7902900-9ee8-4d9e-88d3-44826458b87a",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff58da04-07c8-4b9c-bd3f-3288e11a2121",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5f579418-35dc-4090-96bd-a8a2e7f95b60"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86eee003-f6e8-479f-9ac2-51f65fd50cd4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8159ff82-ef67-4743-96ef-15f5d64058cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69b6dbae-4c96-48b8-b85f-81ec1053803c",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8467c01d-e568-48de-91fe-b160433cece2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5accfed1-6ed6-4d84-869e-20b51d10b0c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b288e4b9-e576-4185-aaa2-74b4faa2fc48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aca6e9bf-6853-43fb-bd40-417cc3bb961e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ff02b1e-1e58-4151-9390-7d5db0ea6063",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "199326b2-6328-4eea-bd30-bc6633af795a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "058d7384-94a8-4787-8a60-3d9f48fb280e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04839343-7d63-4bda-aa15-379d52389b9c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d009fc76-a960-42be-ac12-1e20d9266470"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72ae4153-0527-4628-b5d6-eec17c93b523",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb117e64-ee17-416c-9bd2-6b85a47e0ce9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "79804b04-5eb5-44ce-9bb7-b4ef30345085"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "858d5a5a-888c-42da-bf6d-9f6047e9c177",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37c752ae-358d-4f39-9289-c73ad4113ece"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36077c51-4076-47df-a077-89c3f3fb06f7",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12f6f7f6-9585-406d-a40f-5549f207399c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "963ec8cc-9969-4c52-83c8-0bcb286d1d13"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f7be0df-1a78-427e-89b1-e396d1e5288f",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69ac8c40-567c-415c-a4c2-46f1ccae86f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9819abf-57cb-4d4d-be95-0b45efd86959",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7175434e-8665-4b20-9241-db23c2804573",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bd968e16-fb6a-4f30-8e7d-273138b4ccfc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd11e17c-1a3f-4a25-94b4-4759dada4aaf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2716c631-23f6-4a49-9f97-e8aec6cf4b81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4966f42b-687c-4297-8ecf-7d96b3396bb6",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c82811c1-fe1e-4589-855f-cb2eb1c57ce8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eafb6f2c-244a-4820-a44c-d1abead285bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48485672-2971-4f75-8018-7f7b0ea8fbdc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73cdcdb7-8552-4373-be2b-66c8e885f1ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d326bf6-be6c-4d2c-9327-0d6899fbb376",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01fedd1a-44ed-4a2e-b645-b49471001897",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "63d94e98-71f2-414a-8e98-f9f7ec8d9e96"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8736d59d-ea1c-4500-b085-b96e45e57863",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53c1504f-f255-4e01-8c81-18b7c7d80237"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4c1e1f3-b584-45f5-9b38-64367128eb4b",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ad3224d-aef0-4167-a8db-d76b7129d017",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d41bcc20-0775-42f8-bcc6-7bb2d8954153"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29152c2c-e0e7-4ef6-a040-0429c3ba6cb4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1026cba9-13e5-491f-b0da-4028f9156713"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40cc125d-3c03-4a7e-953e-c4426bb4e5a5",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f28929a9-7701-4e6e-a451-7ad7385a6975",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "88250ce1-4a11-48e4-94ef-f39285f69de5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b94b981-dfc5-46d4-898c-901c54c15397",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8dc439e9-8b0b-4adb-a144-467e5d11b9fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67ce224f-6f93-47c2-9931-53d233f2051d",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f36c6505-5f30-4fb0-ab60-52ab7308ffc5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b5492578-a9f5-4e38-8a03-cb7ddc0c33f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f23f3736-1d63-4581-977f-0b09855deaea",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48284622-fda7-42df-b032-6e0440b4e34f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a045ee5f-82fe-48e7-bdc5-0dc0d0e93ecd",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9af8ce7d-5eac-470d-bf9e-54610824927e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f396e607-af06-45ce-b371-ceda7f9ba014"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89cdbf05-af2b-4fb3-b7a4-2e993c2851de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35dce001-a54b-4391-9627-96c08c399c88"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9e676ea3-3922-4ea9-81bc-cfc980b03a6e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ca09f8cb-454d-4079-94cc-6264b6d5e96e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "cf1d6af4-42ac-477b-be2c-ab644a43c630",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "32591087-d10d-4b62-a9a9-41929efd6dd1"
                    }
                  }
                ]
              },
              {
                "id": "5d91eb55-de68-497e-b4b6-f3724bdf87d6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1ecf5e7b-c68b-4339-8230-1f6606ec0d90",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "829050b6-d15a-4b2b-a6c2-53c73de6e556",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "f3effb32-f4d1-430b-b9af-f7be3d6f0b16"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5db4bfb0-731b-4782-818f-24035ab9fdc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7bfc0412-1729-47ed-8bc5-82865e317378"
                        }
                      }
                    ]
                  },
                  {
                    "id": "929c5a17-1e0e-411c-a452-ff99d00f6891",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86b77d82-416f-4229-afa1-08fefe1300f4",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "a47a3d64-8108-4b8b-abb7-3fdd573f3ab5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d5f3fe6-e408-4da1-ab64-9346efa178d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "61f0acdc-7022-4564-ae59-cd7220fa552e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "671079b4-12a7-4cbe-a99b-168c67f3483e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e08299f4-c846-40d1-a0e3-30025fdb1e38"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "18a766f9-2716-4e24-8167-40b8a7a63c31",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e51b3145-7cf2-4ceb-ac21-bfc92c387dee"
                    }
                  }
                ]
              }
            ],
            "event": []
          },
          {
            "id": "504cb7e9-79b5-40c2-82cb-6de494848221",
            "name": "Positive Testing",
            "item": [
              {
                "id": "2aaa358d-e294-4749-942b-d64f06edb6a8",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "41408b61-8ab6-4f45-80e9-dff6aeefb166",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6786236c-711a-4771-b2f7-dcf0b1c92cbf"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "acd349cb-e336-4016-954a-03eca487a57a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9fb8e07b-72c9-4fdf-841f-ce74bc4783d9"
                    }
                  }
                ]
              },
              {
                "id": "7a21cf10-c7ba-4262-8c8f-a9e0ee41412d",
                "name": "credentials_verify:id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bc0f2004-86b0-4138-8ca1-dc2a3fd333da",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ad0ea2bc-af24-4423-aaf4-8567c8827569"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2117fb7b-a853-46f9-9b8f-bbd121147b90",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fa30f245-6393-4b40-adc0-20e31a7fbd1f"
                    }
                  }
                ]
              },
              {
                "id": "3bceec27-726e-4358-83d2-e55e9b19aeff",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "350282f6-9fc5-48e0-a050-9f51b2a78c58",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f10fc1b6-3d56-4775-81aa-4991f966085a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c4775fd2-e6eb-4793-a42d-ae2c45cc30f0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "96d3fc90-83f3-4e84-9674-9394afa13d49"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2a1945b5-c09a-401a-b2a7-d7dcf59f2b18",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "bd3eff32-7c91-4cd1-ac6f-4ef8f76509c4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cdadf19e-d36a-4c91-8890-2eceb696e52b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2f450994-1417-4a72-a87d-c905dc691bde"
            }
          }
        ]
      },
      {
        "id": "f23999b2-b039-4d2f-9d7f-177050095062",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "c04abd40-b6c0-4b9a-855e-83e3a560b94e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5f2a8382-e5f8-48f0-84d1-516e45b57253",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "972e0f24-850d-4296-b74b-bd1c7606167d",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85f78ef3-7ce6-4d1d-8551-7a4421e48285",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "1dbdf622-1536-41a6-a2b4-7c039537c3e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dd9f7e7-094b-4101-9cba-e8ff0e42f522",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7371c454-00a9-4602-9f42-45e5df7b8aa0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbae0333-c999-4820-966a-398c0ba52087",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb723cb1-537d-4eb5-a460-5619b6c7e9b9",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "76b4198e-67ba-4fdb-ad96-2e3371952b64"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e1c4e19-3e1c-49e3-bf10-3d3f43e06acf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ef7f1557-f85e-40ba-bbfb-c668b5de0004"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b03fa955-8684-4a71-9255-97c2735c2259",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e7e8b53f-e291-42b9-8deb-c9b8e52c7e9d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "bd87f1bf-9e03-433c-9345-19484cdcbd31",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "82974092-0408-4ba2-9802-a04c0f12d28f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9331bcac-0edd-48a7-a51a-82936a4aa7a8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "74fff354-36a7-4b7e-a60f-aacf44fa8715"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "93477c49-f7df-49ae-8b39-38bde0f4556d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6e778803-69d3-48c8-8769-b2f18c93bd01"
            }
          }
        ]
      },
      {
        "id": "2a4216be-3eba-4ac4-adb0-27eb8ab51824",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "e72427bc-b9d4-45e0-a722-a06d62ac0112",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f99836e2-08a9-45e9-9fe4-45c249c1ab1a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d793974f-ff04-43aa-a0f9-0372d137eead",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5d2a0b6-eff7-4e2f-ab73-32b9fd0ef8f4",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "f7dc9c73-e8f1-48d6-a5ca-85d4fdbc05c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb4f5987-b607-4e0b-81a0-27792e5ef0e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "875aaad8-0cc4-477d-87c9-a5f52f1449ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ae7a2da-6374-468b-8dd7-6e58f9288ef3",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f4ca64b-836f-40e3-800c-ad4452e8a5e4",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "2dff16e6-d16f-4e89-bd73-6a0d4dc3a312"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29d4b941-2256-4229-b304-fb0c604fba01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a485ee66-a651-43ee-b210-019add94f73e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d174b44e-4cdd-4a5e-8482-01501434a2c9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c8663a47-f6c1-4ab3-8982-1f27c52a725b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "47bc03a1-9ba3-4271-9cab-6ffd37493769",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b8517a47-d3b7-434c-b887-0d61cb4981a6"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "75d3ea68-d723-44da-aaa6-e0465b811c18",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "cdd032dd-76ba-4192-8327-3150e1316a28"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "33448248-30eb-4fdc-8fa0-8bbb8554e28b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "47ef59dd-712f-41bb-8951-9b26dcd90139"
            }
          }
        ]
      },
      {
        "id": "ec1818eb-0699-4c51-b479-c361f6447e5f",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "96da6b78-ebae-4444-abdb-13e6c7625673",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2defb559-d146-45e8-b040-24934a8367c3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "90014708-ee3e-4007-8b7d-0b77d2f20087",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6e343c9-bb71-453d-a789-296c0e925072",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "3520c8a7-3eee-40c2-bc17-8cbbcb369e7e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd5e92ac-2548-4ddd-a4ff-9101edb680c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3fcd32fe-21d0-423d-acb3-4d51bea4f12c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "479e9fbf-7cde-40b7-a4b7-ddd681095894",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ba87070-96b3-489b-ac72-cebbbb4d5571",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "57959910-be26-4b5f-87b6-ecc7bead4b4e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c714e200-edf4-4b2a-8a72-da28a0a7610f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a54da241-ca37-4f8b-b2d9-1a54ae93c856"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f1c13b33-048b-42a1-b83d-255767c9cd9a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1b50931c-0d47-4137-9cdf-1d026ed5e747"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3548e22a-c4da-482a-9489-10752ce9a635",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d3a383e7-3d64-4b0d-86d5-70882c6cc5f4"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c60fafbe-c4cb-48ec-9a54-8d89d945f387",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "95fdf321-37af-47d0-a997-6793b64b0f4a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ad49fc94-e80d-4c19-8086-317fdec67dc9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "469cde87-ef26-4147-ad82-ab82f575dcf6"
            }
          }
        ]
      },
      {
        "id": "745315c8-a4f9-4b9f-888a-cbb3175d2f41",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "423b7ec7-c629-40dc-b8b0-45f6b1892dd9",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "79192e4c-1f02-4aba-bcf3-a2c54968d120",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "6a589c37-8ab2-484b-bcb2-3130787db116",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "40036355-08c6-4453-90e3-fef9a14ef92a",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2031a617-1dd9-4434-9fae-97313df8fede",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1909,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 260,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 505,
        "pending": 0,
        "failed": 86
      },
      "testScripts": {
        "total": 959,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 202.03461538461542,
      "responseMin": 7,
      "responseMax": 3145,
      "responseSd": 384.7003163725755,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1665882058725,
      "completed": 1665882121753
    },
    "executions": [
      {
        "id": "08d6f80e-8fce-4095-8550-b065cfc4081e",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 251,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "dfb901ac-2424-4b79-bff5-59d2c5d80a19",
          "httpRequestId": "912ad729-7374-4365-9471-06e3c384b212"
        },
        "item": {
          "id": "08d6f80e-8fce-4095-8550-b065cfc4081e",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "0d226e48-99a2-4e2b-9a77-d43be7a7d995",
          "status": "OK",
          "code": 200,
          "responseTime": 53,
          "responseSize": 0
        }
      },
      {
        "id": "0ddde2ca-d777-4078-b429-90f25cf38a27",
        "cursor": {
          "ref": "ab9aa0a1-b8cc-4c04-9c1c-bf46f198d087",
          "length": 251,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "6c92e1fd-ec2f-4bed-9ee0-41eb831c65ee"
        },
        "item": {
          "id": "0ddde2ca-d777-4078-b429-90f25cf38a27",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "9b80a820-e7b2-4a3c-b69a-7d29f699093e",
          "status": "OK",
          "code": 200,
          "responseTime": 7,
          "responseSize": 0
        }
      },
      {
        "id": "5b299cb8-42cf-4e0e-9430-63eb6a5d04a3",
        "cursor": {
          "ref": "7fecfc5a-31c6-4f9a-99b6-7eaf306b5152",
          "length": 251,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "3eec1040-951e-4e15-936e-5cbd0b11a6ad"
        },
        "item": {
          "id": "5b299cb8-42cf-4e0e-9430-63eb6a5d04a3",
          "name": "did_json"
        },
        "response": {
          "id": "c3803693-ea4d-42e5-89a7-1c74d7b30c01",
          "status": "OK",
          "code": 200,
          "responseTime": 1128,
          "responseSize": 1369
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25e73c4a-951e-4145-92e1-dfa9a4220e23",
        "cursor": {
          "ref": "c1dd28d7-43a5-4ef2-9434-c101454cebdd",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "9bf64262-e1f7-4bad-aa7c-eb213e23274b"
        },
        "item": {
          "id": "25e73c4a-951e-4145-92e1-dfa9a4220e23",
          "name": "did:invalid"
        },
        "response": {
          "id": "3db99acc-c710-4525-b529-2c1476084faa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25e73c4a-951e-4145-92e1-dfa9a4220e23",
        "cursor": {
          "ref": "c1dd28d7-43a5-4ef2-9434-c101454cebdd",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "9bf64262-e1f7-4bad-aa7c-eb213e23274b"
        },
        "item": {
          "id": "25e73c4a-951e-4145-92e1-dfa9a4220e23",
          "name": "did:invalid"
        },
        "response": {
          "id": "3db99acc-c710-4525-b529-2c1476084faa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0a7b0ae-830c-4361-ae46-7553fb9744a1",
        "cursor": {
          "ref": "d7f45c48-c441-467b-8fa9-0357be05aefb",
          "length": 251,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "b48af2e7-7998-4910-b0b6-583691acf434"
        },
        "item": {
          "id": "c0a7b0ae-830c-4361-ae46-7553fb9744a1",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "62f8c066-82f1-4dc2-97f7-1d02c8a21c5a",
          "status": "Not Found",
          "code": 404,
          "responseTime": 265,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c51572ed-4264-438a-ae4a-5f10c7c13ce7",
        "cursor": {
          "ref": "d5862393-bf59-4ca2-a98c-5fd1b6fafa8b",
          "length": 251,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "5fcd8341-330b-4bc1-b52d-7ca9a5892aa5"
        },
        "item": {
          "id": "c51572ed-4264-438a-ae4a-5f10c7c13ce7",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "90c6b104-cbbc-4d03-babc-962bb4df13ab",
          "status": "Not Found",
          "code": 404,
          "responseTime": 34,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fa18ecd-1c6c-4451-b287-6ce6e989239e",
        "cursor": {
          "ref": "57abae38-75f0-4ffb-9d60-68b7a6d0db95",
          "length": 251,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "47c0ad2c-d0f7-41d6-90a1-79fd4f8f1f44"
        },
        "item": {
          "id": "9fa18ecd-1c6c-4451-b287-6ce6e989239e",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "c6f5e831-f2b6-4788-bced-cf94adf1a2bf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 112,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2d6a8a0-2827-4563-bd15-5e09ac9587ed",
        "cursor": {
          "ref": "795f6229-1362-4409-9e4d-0ba82a4d9978",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "0044c463-4358-451b-abad-269ea21a0ee8"
        },
        "item": {
          "id": "c2d6a8a0-2827-4563-bd15-5e09ac9587ed",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "7859fd48-7d23-4089-ab4c-a947625f8d20",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 22,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2d6a8a0-2827-4563-bd15-5e09ac9587ed",
        "cursor": {
          "ref": "795f6229-1362-4409-9e4d-0ba82a4d9978",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "0044c463-4358-451b-abad-269ea21a0ee8"
        },
        "item": {
          "id": "c2d6a8a0-2827-4563-bd15-5e09ac9587ed",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "7859fd48-7d23-4089-ab4c-a947625f8d20",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 22,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c1cefd3-e91d-4794-8986-181538fbda91",
        "cursor": {
          "ref": "d7060751-8727-4d1e-81ee-c066a44e26f2",
          "length": 251,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "98f07367-944f-4bf7-b7ff-3407ed1ccff0"
        },
        "item": {
          "id": "7c1cefd3-e91d-4794-8986-181538fbda91",
          "name": "identifiers"
        },
        "response": {
          "id": "3b951bb2-f995-4f54-bcf3-deebdcf8349a",
          "status": "OK",
          "code": 200,
          "responseTime": 222,
          "responseSize": 1385
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a32c70b7-46ce-4d30-9e66-6d5c58e6a151",
        "cursor": {
          "ref": "68dc3fa8-3174-4d1f-a2f1-eb63266702de",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "7a776001-f8aa-4aed-a2fb-a74311e76e83"
        },
        "item": {
          "id": "a32c70b7-46ce-4d30-9e66-6d5c58e6a151",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "d93b199a-4374-4221-86bf-e5f5e570008c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a32c70b7-46ce-4d30-9e66-6d5c58e6a151",
        "cursor": {
          "ref": "68dc3fa8-3174-4d1f-a2f1-eb63266702de",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "7a776001-f8aa-4aed-a2fb-a74311e76e83"
        },
        "item": {
          "id": "a32c70b7-46ce-4d30-9e66-6d5c58e6a151",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "d93b199a-4374-4221-86bf-e5f5e570008c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ad3d02f-6a2a-41e9-b0ca-d9526c5de9a7",
        "cursor": {
          "ref": "ac19b42f-7fc2-4d2f-bb1a-a3cb9473a76f",
          "length": 251,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "dcd999fa-ddad-4341-a5b6-871906062ae7"
        },
        "item": {
          "id": "4ad3d02f-6a2a-41e9-b0ca-d9526c5de9a7",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "53215081-0ac2-48fc-8203-733c25d61e24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90529068-28e3-4d8c-a2cc-e98624a8e032",
        "cursor": {
          "ref": "5163cfd1-6a46-4dbc-b097-736cdeb63354",
          "length": 251,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "33fca209-acb3-49ff-938e-cb88c27155ac"
        },
        "item": {
          "id": "90529068-28e3-4d8c-a2cc-e98624a8e032",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "f12aa224-6729-457d-9b00-1db83795edff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c8b72c7-8896-4744-b347-717ded463e6d",
        "cursor": {
          "ref": "80cb497f-3f88-4c77-a700-8a54f7d6610e",
          "length": 251,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "6d019e6a-d512-4cd4-9791-27add2dac47d"
        },
        "item": {
          "id": "9c8b72c7-8896-4744-b347-717ded463e6d",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "1b80ee28-56d9-4aee-a99f-ed5e068ecb9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e59b4a47-ee95-4099-b7b4-33f1c86457fc",
        "cursor": {
          "ref": "abe5b14f-31c3-472d-b6af-259262845feb",
          "length": 251,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "73e373d5-5248-4fd6-9bb3-f5cec17970c2"
        },
        "item": {
          "id": "e59b4a47-ee95-4099-b7b4-33f1c86457fc",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "6d1f57e1-b977-491f-952b-e1945f86670a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6be96e57-9c60-4eb7-b939-f68e2b4237f4",
        "cursor": {
          "ref": "33953224-bc45-42b6-9116-b967d1c8766e",
          "length": 251,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "55f7e2a4-06da-47f2-a779-061f62361ccd"
        },
        "item": {
          "id": "6be96e57-9c60-4eb7-b939-f68e2b4237f4",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "4886cb5e-0785-4f16-b0c7-c26d7c3431e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45dbd579-344a-4ff3-830f-f0c6f84c1508",
        "cursor": {
          "ref": "275960d4-6312-4374-af07-53b13a3a988f",
          "length": 251,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "dfbf592e-b686-4ef7-9108-b5ae856c778a"
        },
        "item": {
          "id": "45dbd579-344a-4ff3-830f-f0c6f84c1508",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "ff2cddc1-a3fa-47e9-9ecf-6ccb7be6f89d",
          "status": "Created",
          "code": 201,
          "responseTime": 969,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "fbabc173-a3b7-4325-a199-ef3ae06dcab8",
        "cursor": {
          "ref": "43d320df-5268-4725-9aa3-9a4edaf379f6",
          "length": 251,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "66882a67-be1a-43b8-b5d5-62eaf1dc406c"
        },
        "item": {
          "id": "fbabc173-a3b7-4325-a199-ef3ae06dcab8",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "5d0bef3c-9680-4790-b64a-a5dbc9c0b68a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c641bdde-01e7-465f-93cf-f821b7e20ab8",
        "cursor": {
          "ref": "30b6a27f-c506-41a3-b4c8-554ce8007258",
          "length": 251,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "e89fbb57-9ee0-42bd-965b-d83983c7eb0b"
        },
        "item": {
          "id": "c641bdde-01e7-465f-93cf-f821b7e20ab8",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "3171f3fa-5b74-49fe-9364-189d1fee75ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff7df852-adc1-4517-b081-bc8b7b2294c7",
        "cursor": {
          "ref": "160c8a02-4cfc-41e2-8f24-908f534268bb",
          "length": 251,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "ef9b9456-0ed7-43f6-be85-13056395a859"
        },
        "item": {
          "id": "ff7df852-adc1-4517-b081-bc8b7b2294c7",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "b90cb41e-64e4-4d9f-b8b7-1f8bd6cb2ea7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42eadd96-77d1-4507-ad05-ad62b9776799",
        "cursor": {
          "ref": "74b5eb13-bb7d-4b14-b671-22c0c55a624c",
          "length": 251,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "f34d1e20-e3da-4f50-8ff5-202add79a31e"
        },
        "item": {
          "id": "42eadd96-77d1-4507-ad05-ad62b9776799",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "50cd7324-294a-4617-8f1f-c20d1333c635",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d25c3447-ba5d-454d-90c0-e0a972905e8c",
        "cursor": {
          "ref": "f33878f1-85ec-49e1-89de-58a92203a2f3",
          "length": 251,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "9d988871-cc4b-4273-90dd-8627fcfb91f2"
        },
        "item": {
          "id": "d25c3447-ba5d-454d-90c0-e0a972905e8c",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "2fe7b021-5323-4135-b796-c84b6ef8e665",
          "status": "Created",
          "code": 201,
          "responseTime": 804,
          "responseSize": 584
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "cabae571-3666-47e7-b8e1-8f3f7cf082db",
        "cursor": {
          "ref": "77537d02-7400-4335-8149-7939e66c389f",
          "length": 251,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "52d1fb7a-9d8b-4519-a997-6230b3c93d98"
        },
        "item": {
          "id": "cabae571-3666-47e7-b8e1-8f3f7cf082db",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "d06c95af-abd0-45b2-a0a5-79a452c7fdb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22718b5e-2eea-4ac2-ae45-b43d195e4511",
        "cursor": {
          "ref": "a9ea83f6-7c44-41bb-9d66-70e9031d454d",
          "length": 251,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "a6c3105c-bef6-4b95-b78f-ed8ff07bfd8b"
        },
        "item": {
          "id": "22718b5e-2eea-4ac2-ae45-b43d195e4511",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "91d4d3a1-e899-4724-928b-40d87afd5724",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96ed7ee9-07f8-4e45-b97d-68841bf84812",
        "cursor": {
          "ref": "1422c466-1258-4472-8ba1-a630ed48f964",
          "length": 251,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "91310244-d975-4efb-abce-b1d03304e300"
        },
        "item": {
          "id": "96ed7ee9-07f8-4e45-b97d-68841bf84812",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "0a3fea41-a2a9-482b-b4b9-35801d5e5214",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e130b9e-0653-4beb-bb6b-9201ad1e419c",
        "cursor": {
          "ref": "fae49711-96e4-4717-9c5e-d5605056e0af",
          "length": 251,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "eb33271c-f6aa-4716-be71-c96e19801753"
        },
        "item": {
          "id": "2e130b9e-0653-4beb-bb6b-9201ad1e419c",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "07199a8d-f458-4e23-be62-b9077748d3c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 286,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbc484da-4727-4430-8d0b-50338214b161",
        "cursor": {
          "ref": "0f2275bf-2d0f-437f-99b5-89b6141c4f50",
          "length": 251,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "779101ba-097b-4145-823e-9d8910ee55ba"
        },
        "item": {
          "id": "fbc484da-4727-4430-8d0b-50338214b161",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "2eccefe2-c351-4fe5-9cab-f9ac20eda05a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 113,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dec63862-ad16-4a9f-bb20-31778a68dd6a",
        "cursor": {
          "ref": "b831f85f-210c-4942-a5a7-c44a1deb7e49",
          "length": 251,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "5ce14fb3-7fc4-4b34-a01a-a7420c5c4f3a"
        },
        "item": {
          "id": "dec63862-ad16-4a9f-bb20-31778a68dd6a",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "efcbbf32-8304-4f51-aed0-3fe1bb535775",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5239fe79-f9e1-4183-8f9c-ee9739b41f8c",
        "cursor": {
          "ref": "11903779-9425-4e69-9f90-9269169e4f72",
          "length": 251,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "d5d2d4bd-fa84-413c-8650-85a32350f15f"
        },
        "item": {
          "id": "5239fe79-f9e1-4183-8f9c-ee9739b41f8c",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "369b1f6d-7402-44d5-a027-6b1a0eb97ab4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 112,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfc628ff-9dbf-472a-ab5e-4b8cf95c2138",
        "cursor": {
          "ref": "6e4e1297-df4e-407b-afea-458bc6f28351",
          "length": 251,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "cbfe5c0b-b553-4063-b618-dbe471eb908b"
        },
        "item": {
          "id": "dfc628ff-9dbf-472a-ab5e-4b8cf95c2138",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "2a61733d-8b5d-467f-a41b-7a8e8bb16767",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 203,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a18cb26-18ef-4519-bcb2-80fce7edd31a",
        "cursor": {
          "ref": "6f439cbf-26be-46a6-a51a-54840ca885ae",
          "length": 251,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "80edfe7b-ef5e-4c41-a9c8-863675ae4167"
        },
        "item": {
          "id": "3a18cb26-18ef-4519-bcb2-80fce7edd31a",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "63187d87-f777-40cf-8553-e6765b9f989d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2dc05435-cfda-4e11-970b-d1ee8bb33644",
        "cursor": {
          "ref": "ee3c520c-deee-4e8d-ba12-4637629dbbdc",
          "length": 251,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "03c70a51-69c6-407f-b486-d969d3740639"
        },
        "item": {
          "id": "2dc05435-cfda-4e11-970b-d1ee8bb33644",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "ff35ccb8-df3f-4244-b565-aee7cb9e480b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5dab18bb-685f-4aba-ae19-ab2e50f9430b",
        "cursor": {
          "ref": "7158cc77-d7e4-46ee-a5ca-5d6f73ef5f43",
          "length": 251,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "11e2a06f-371f-48c9-9f39-a8429c1512ce"
        },
        "item": {
          "id": "5dab18bb-685f-4aba-ae19-ab2e50f9430b",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "4083f53e-6bde-4825-bae5-b6331d70140b",
          "status": "Created",
          "code": 201,
          "responseTime": 1438,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "e85e5cba-33d6-4434-a8bf-e0149dd0a015",
        "cursor": {
          "ref": "d2e4b537-2b66-4e5a-b2b6-994ccfd3a6d1",
          "length": 251,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "44a467a3-e752-4974-a94c-e88dc8360b3c"
        },
        "item": {
          "id": "e85e5cba-33d6-4434-a8bf-e0149dd0a015",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "deba0910-9793-4fb9-9bd8-7d215a684cf5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1016d2a-8605-4944-89bc-98e93d9964e7",
        "cursor": {
          "ref": "19d4cd95-5760-40d4-bd57-09f530a0a6b6",
          "length": 251,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "1460827f-446f-46b0-a340-5883b561ea82"
        },
        "item": {
          "id": "a1016d2a-8605-4944-89bc-98e93d9964e7",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "59db092d-00eb-41ff-b17e-2df481f0c32e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00e51e7d-4ee5-4320-9eeb-c18d9170541f",
        "cursor": {
          "ref": "f8eab880-8dcc-4520-9cc9-b92c21ffb388",
          "length": 251,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "502b12c5-6b64-495f-92d1-cb456846fd01"
        },
        "item": {
          "id": "00e51e7d-4ee5-4320-9eeb-c18d9170541f",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "71ba52c7-89e6-44ed-85f0-e6f443b233d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e83d017-691b-4819-be2f-641f6deed0db",
        "cursor": {
          "ref": "407468b3-605f-4de9-8c09-502abc6c7e08",
          "length": 251,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "14a909d3-e219-4fae-9193-9a622b3f4c95"
        },
        "item": {
          "id": "2e83d017-691b-4819-be2f-641f6deed0db",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "f5259d30-7b66-4fdb-8f73-6115400783f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 698,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a74702ac-91e0-4fc3-9b6a-158fd74199be",
        "cursor": {
          "ref": "4cc34806-9692-43ab-ad63-2871305aaf4b",
          "length": 251,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "4cfa89ab-1877-4421-9788-c7ab4348aca1"
        },
        "item": {
          "id": "a74702ac-91e0-4fc3-9b6a-158fd74199be",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "acf6eaf2-3277-4db6-a388-5232a292110d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 151,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7aaa323e-403e-496f-b7e2-7cd5e7b979e2",
        "cursor": {
          "ref": "63283e7f-2052-42d9-9735-272ed37fa71b",
          "length": 251,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "398c50ba-082e-427b-a452-de468c44364b"
        },
        "item": {
          "id": "7aaa323e-403e-496f-b7e2-7cd5e7b979e2",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "41687b0f-6c21-4480-8487-b7f0cccc4a63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58b94caf-41c8-49a4-ad4b-306af9520819",
        "cursor": {
          "ref": "22bc911f-6009-4a46-aaf4-4a7df76efef2",
          "length": 251,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "e1310f9b-eb57-4f90-90c8-e7f3293daebe"
        },
        "item": {
          "id": "58b94caf-41c8-49a4-ad4b-306af9520819",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "8fa75773-faaf-4063-849d-6ce34386f095",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb332ff8-08e6-4c31-ab81-797bea2bce43",
        "cursor": {
          "ref": "22ecf6a9-caf8-4010-ae2e-5fbcdde916c0",
          "length": 251,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "3b1dd006-7174-4241-83e0-be28ce80bfdd"
        },
        "item": {
          "id": "eb332ff8-08e6-4c31-ab81-797bea2bce43",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "22a4b4f7-470a-45e5-b9ea-59c0ffa48257",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c5a75e0-791c-41b1-8e4f-a5df7d2c0908",
        "cursor": {
          "ref": "7f9deaa8-1028-4f34-874c-21fea4a0fd4a",
          "length": 251,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "196ae0d4-034c-42d4-bd83-d10bab4c1370"
        },
        "item": {
          "id": "5c5a75e0-791c-41b1-8e4f-a5df7d2c0908",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "6e7cdd87-2ea9-4f14-9bfc-25f9719f2e85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 478,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e66bf774-608d-4395-87f0-21f1a35078f7",
        "cursor": {
          "ref": "cccdb141-6bc6-41fb-8fc5-ce0dced78b6e",
          "length": 251,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "badc9884-fa5e-4fac-ada5-27c2e8f6d1a0"
        },
        "item": {
          "id": "e66bf774-608d-4395-87f0-21f1a35078f7",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "2728311b-e760-4319-855e-b34456498253",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6c89250-4d5a-4a07-bd24-5428c31ecbc3",
        "cursor": {
          "ref": "268f8084-2bae-4710-b507-6e8a416986d6",
          "length": 251,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "cd5853a5-7107-4ddb-b7a4-6a149bca284e"
        },
        "item": {
          "id": "c6c89250-4d5a-4a07-bd24-5428c31ecbc3",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "4462497c-1f24-4164-8813-26d6d4503485",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbebd4e3-adc7-4d09-8987-cb3cc236765b",
        "cursor": {
          "ref": "0beb016e-a627-4426-b5db-9b6c3650113e",
          "length": 251,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "1e115220-3752-4977-9415-dffdde9c96b0"
        },
        "item": {
          "id": "cbebd4e3-adc7-4d09-8987-cb3cc236765b",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "8ff08da3-643d-4624-a3ef-f602c7bd5f13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 244,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfc23fae-23ed-42a4-ba3e-a488ecc64048",
        "cursor": {
          "ref": "f700e0cd-51a6-4b08-9e25-4ee52b963860",
          "length": 251,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "b5f3f4a4-141d-47c4-99ec-86df6254834f"
        },
        "item": {
          "id": "cfc23fae-23ed-42a4-ba3e-a488ecc64048",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "30128a91-7947-4e3a-8b1a-4e58f545a406",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1218,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "35c493da-583b-4e1c-b61a-18d27fb7a5ca",
        "cursor": {
          "ref": "5edd811b-78de-4b2f-b782-4a84d17ed51e",
          "length": 251,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "e3ad98b0-c576-4815-b1f8-4a4288ccef50"
        },
        "item": {
          "id": "35c493da-583b-4e1c-b61a-18d27fb7a5ca",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "d9723a7e-6bc7-4590-b1c4-848da4163bcb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3b37bbc-c74a-494b-97dc-11081a90b5e4",
        "cursor": {
          "ref": "58803b5d-e1a4-4858-a61c-390947cba254",
          "length": 251,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "dab864c8-976d-404d-871a-12cc98912611"
        },
        "item": {
          "id": "f3b37bbc-c74a-494b-97dc-11081a90b5e4",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "7ecdf707-3853-4ff9-bd7d-f12ea095135f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 475,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd6bf304-9e96-45d8-9058-53e232642194",
        "cursor": {
          "ref": "cf88747b-15d2-49c8-b7c2-0469c0c2cbf8",
          "length": 251,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "bbfb2aa1-34c8-43fb-af61-a21a40834807"
        },
        "item": {
          "id": "cd6bf304-9e96-45d8-9058-53e232642194",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "90ef252c-2e4b-492f-8e07-5ae31f28cae1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e22c49da-9408-476d-a9df-9315a8190127",
        "cursor": {
          "ref": "39f664ae-a0c2-4b80-81ec-48822c2453b4",
          "length": 251,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "78341ed6-c052-4b33-aeb8-d5ef7224a4d8"
        },
        "item": {
          "id": "e22c49da-9408-476d-a9df-9315a8190127",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "db15c392-85b8-4270-ba0d-07bb6b575b26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a01c10e1-60e8-425e-80fe-3de823bfa81d",
        "cursor": {
          "ref": "6246f731-58ee-43f7-a0b8-e9412f4a7305",
          "length": 251,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "91a3d902-e794-4584-8f3a-e4c5badfa6a4"
        },
        "item": {
          "id": "a01c10e1-60e8-425e-80fe-3de823bfa81d",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "78b692e7-90d5-4a7a-a7eb-2b20535c3313",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8726f60-6500-45d1-b466-bc4f6a1d660f",
        "cursor": {
          "ref": "3b48539f-e92b-43b8-9d6a-9f14401d4c55",
          "length": 251,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "04ab582e-7247-4c13-8ed3-50ff5ee39ad7"
        },
        "item": {
          "id": "c8726f60-6500-45d1-b466-bc4f6a1d660f",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "87dc77a4-1210-4b19-983c-ffdff8c0c64e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44be3b7e-fde3-4b9c-a203-80b7ad7ab6b7",
        "cursor": {
          "ref": "a0dcb8f7-49bb-47c1-90b9-41adbb90a444",
          "length": 251,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "322d65b1-aa02-457e-8565-6fea25ade99b"
        },
        "item": {
          "id": "44be3b7e-fde3-4b9c-a203-80b7ad7ab6b7",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "a6df59b1-81a5-4b2e-95c0-6959604d6dc7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1106,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "a9d10b29-eaee-4894-b305-8d9cc9bff1e4",
        "cursor": {
          "ref": "f5a139a6-bba7-4293-aa99-711c43aa785b",
          "length": 251,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "e87225a3-1cef-4856-8f4f-97caf425a8c0"
        },
        "item": {
          "id": "a9d10b29-eaee-4894-b305-8d9cc9bff1e4",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "38d7b98f-dffa-4e06-8cee-729a385ca16e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "928fa927-8362-4e73-b0e7-ac941ea1f9ee",
        "cursor": {
          "ref": "ed85de5e-8474-4ae8-b353-4be0fe3c6336",
          "length": 251,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "077d9925-93c5-46fc-bd32-25fd06e5f8ce"
        },
        "item": {
          "id": "928fa927-8362-4e73-b0e7-ac941ea1f9ee",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "c44c98cc-25ac-470d-91ab-ecf2baac3cee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea09208a-7806-4951-ae4f-5e9bbb058a8b",
        "cursor": {
          "ref": "92a1a262-585f-44a0-b0b7-2c3e546392ac",
          "length": 251,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "83d60fa3-cda9-49ef-a0cd-8e63f2c78d4e"
        },
        "item": {
          "id": "ea09208a-7806-4951-ae4f-5e9bbb058a8b",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "d3bc26c1-b20c-4ddc-8d8e-8308cb920089",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52c14da5-ed96-49e8-ac7e-570fc8a3aca0",
        "cursor": {
          "ref": "e31724e1-e035-44d0-b1af-98d9358b2c3c",
          "length": 251,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "df745692-5e8f-45c5-8d3a-c8c081396ca0"
        },
        "item": {
          "id": "52c14da5-ed96-49e8-ac7e-570fc8a3aca0",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "2d1df1c1-c2e7-4686-9586-8253aedc5681",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9374493-607e-47ea-b3b6-4431cba9a2ea",
        "cursor": {
          "ref": "0f336857-3313-4bee-aab2-5e4fee1d1a75",
          "length": 251,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "6b081e66-b527-44c7-bfe2-b11c82d56236"
        },
        "item": {
          "id": "c9374493-607e-47ea-b3b6-4431cba9a2ea",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "f998e3ba-debb-4495-98bd-26058beba199",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d33cfaf2-7d5c-4c6f-afff-f891414edeba",
        "cursor": {
          "ref": "6da871c5-8598-4d05-8d27-7c7c5baab953",
          "length": 251,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "77b95ef7-b4dd-48ad-b6f8-3cb7a1d78d63"
        },
        "item": {
          "id": "d33cfaf2-7d5c-4c6f-afff-f891414edeba",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "73a00d31-a9ef-4779-b410-481406a47228",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e0510d5-313f-40f6-83c4-825933559adc",
        "cursor": {
          "ref": "8081a2a2-aa78-482c-8974-1000d5ac4395",
          "length": 251,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "fa406224-1821-4f21-a0be-0d472f9f067d"
        },
        "item": {
          "id": "2e0510d5-313f-40f6-83c4-825933559adc",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "036172e0-d7f2-427d-b446-796a42c5ee70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1124b8a1-56da-48da-b925-9d9c845326a3",
        "cursor": {
          "ref": "c48eff26-ed15-4557-b9c5-a8c5d8e71d1a",
          "length": 251,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "9a90690b-5a4e-4a2b-a297-f19ea8626693"
        },
        "item": {
          "id": "1124b8a1-56da-48da-b925-9d9c845326a3",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "26ac87bb-08b2-45f0-9fe9-0b755f370e62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca381e54-69e4-4f1f-8b3b-b5adc6dd3a09",
        "cursor": {
          "ref": "bf338bff-32ee-4669-b1c0-bb8e3a585d41",
          "length": 251,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "42fd282f-c94f-4829-93fb-c784eb481341"
        },
        "item": {
          "id": "ca381e54-69e4-4f1f-8b3b-b5adc6dd3a09",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "25427b77-5549-48fd-82a4-3d71a8f4e1ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d86491a6-61a3-4116-afcc-e7434df5baf9",
        "cursor": {
          "ref": "849181fd-8eb2-4647-8617-65b67f488c6a",
          "length": 251,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "77a39b68-8e78-46d1-beb9-bfec8f0c8c1f"
        },
        "item": {
          "id": "d86491a6-61a3-4116-afcc-e7434df5baf9",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "135036a5-e0ec-4c43-8de6-e4321e6f2b4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef4c544e-7a0e-4c02-b4b0-5cb6723734d4",
        "cursor": {
          "ref": "106bab8b-2145-40ab-964f-9f961f95ab7f",
          "length": 251,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "d7d374d4-47b4-4a56-9227-40e548b998b3"
        },
        "item": {
          "id": "ef4c544e-7a0e-4c02-b4b0-5cb6723734d4",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "17a98a63-7b66-48b1-918e-2330575ed7c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28ac241f-8968-440b-9abf-b9158b344d43",
        "cursor": {
          "ref": "c40853a5-0521-4b23-ba01-6fe0fc3f68ab",
          "length": 251,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "6ac97271-f461-474a-97c3-8eedb57ed0b3"
        },
        "item": {
          "id": "28ac241f-8968-440b-9abf-b9158b344d43",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "9fcef72f-38c3-4444-be1f-f006258119ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22d0e250-a7e9-4822-a62a-426fc37855c3",
        "cursor": {
          "ref": "4863317d-f9ab-4819-95fe-312f1a579692",
          "length": 251,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "9d7f67e0-ede2-4c15-878f-ba25d6830109"
        },
        "item": {
          "id": "22d0e250-a7e9-4822-a62a-426fc37855c3",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "689253d3-1aea-42b8-9638-c8c66b027e59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 233,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b386e91-102d-4587-84c4-280d732bb90d",
        "cursor": {
          "ref": "7f89c554-f534-414b-a5bb-d6cde5f89c8c",
          "length": 251,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "08d922ec-0b05-4a8b-8f8d-17c8689d7147"
        },
        "item": {
          "id": "1b386e91-102d-4587-84c4-280d732bb90d",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "2dfb7571-ac63-4b45-a1c0-dc13c94aa240",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "667feea6-a4c0-4bb6-9f5a-98069d53689e",
        "cursor": {
          "ref": "224f5611-73eb-4249-bef8-6d075c0c3092",
          "length": 251,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "21ad6a06-ec29-41f5-9fb8-ce2b36711b0c"
        },
        "item": {
          "id": "667feea6-a4c0-4bb6-9f5a-98069d53689e",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "6901b025-9b90-4d00-9d91-39c10c6e8436",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ba31c77-2691-4d2e-badf-a1a739b75d41",
        "cursor": {
          "ref": "3cc64f19-8e45-4d87-8b15-a6e3d85bd394",
          "length": 251,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "059141c2-db4c-4999-b6ed-edc0f3c2acd3"
        },
        "item": {
          "id": "1ba31c77-2691-4d2e-badf-a1a739b75d41",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "33fefb47-43d6-4359-a48e-dcb39d8b8781",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f03d7fd4-2262-43a0-88b6-a17fed597ad4",
        "cursor": {
          "ref": "39c0e8de-0bd4-478f-b085-2d53e4ad795e",
          "length": 251,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "c6f49e24-ef03-45fe-b322-98c3e00168d8"
        },
        "item": {
          "id": "f03d7fd4-2262-43a0-88b6-a17fed597ad4",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "eade9d6d-158e-42ce-9b9f-0969c129fed6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 319,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff348e21-950c-4e76-b5e1-2ee4907930c1",
        "cursor": {
          "ref": "9b948206-6606-4aef-9cee-0a63178e973d",
          "length": 251,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "a26dc3d2-a870-455f-ada4-05ac6e7c03e2"
        },
        "item": {
          "id": "ff348e21-950c-4e76-b5e1-2ee4907930c1",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "559797ce-995a-47f0-8291-adb619cffde8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bd42d73-0023-418a-894a-89b43a5433c7",
        "cursor": {
          "ref": "f88f3803-178c-4b35-b282-4a181ef4de5e",
          "length": 251,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "371a43a7-1ce2-40d4-9172-37714fe68451"
        },
        "item": {
          "id": "9bd42d73-0023-418a-894a-89b43a5433c7",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "46b94e79-71d9-4506-a14d-8c9a5529d330",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff25e505-03e6-4ba6-9c2f-fbb3bb340a35",
        "cursor": {
          "ref": "ef6ffc23-106c-4304-9298-ade31c2d0dab",
          "length": 251,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "94128539-1029-4599-9c41-336636c70120"
        },
        "item": {
          "id": "ff25e505-03e6-4ba6-9c2f-fbb3bb340a35",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "888ddb25-7c54-4dc5-8620-f70c8fb3d88f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0dd90ac-5472-46d5-b005-ac5d295ed549",
        "cursor": {
          "ref": "90be9c83-103e-44bb-9577-d1b40f4efab7",
          "length": 251,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "33d7327c-7679-4c0b-9f9b-f9d5c98d1fe3"
        },
        "item": {
          "id": "d0dd90ac-5472-46d5-b005-ac5d295ed549",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "458f47f4-5851-44dc-8326-d108f4f0a464",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 557
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea673474-f7e5-44b4-9c3e-415b95521c1b",
        "cursor": {
          "ref": "1a3f7058-24f3-4b73-89cf-bcd05994842c",
          "length": 251,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "b25fe32d-08d1-46fb-80a9-00e40ed96ceb"
        },
        "item": {
          "id": "ea673474-f7e5-44b4-9c3e-415b95521c1b",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "6001ab0c-c757-4082-a2c2-51d4bc84ff74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39170264-df65-4323-9cf8-ea6a67cc584d",
        "cursor": {
          "ref": "db6e7490-a8ad-4149-93a7-d01281d5d1da",
          "length": 251,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "26835e86-086c-4761-b01d-fff96f7c16e2"
        },
        "item": {
          "id": "39170264-df65-4323-9cf8-ea6a67cc584d",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "dc889ae5-6605-46e5-9a81-56a3dcb5a798",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04c88dcc-0239-48f2-ac8d-85017de2a13f",
        "cursor": {
          "ref": "16bc42d9-86e4-44e3-8419-0ac1154e273b",
          "length": 251,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "dc833775-47a1-4b7c-b3d0-557b59b8abde"
        },
        "item": {
          "id": "04c88dcc-0239-48f2-ac8d-85017de2a13f",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "cb2d7ed2-608f-4b33-903a-dae3f5d0e96a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "050e50dc-e1c4-4a1d-afbb-49035bd82485",
        "cursor": {
          "ref": "20877a56-d4da-4791-9fe9-3c9d42445df1",
          "length": 251,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "1d3e4de7-b558-4a4f-a24a-b454f570a878"
        },
        "item": {
          "id": "050e50dc-e1c4-4a1d-afbb-49035bd82485",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "468dde0c-7b29-4470-8363-6f6b045482ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e97000b-db31-4c99-92bd-8846743f5595",
        "cursor": {
          "ref": "e1ee40aa-4d55-4c5b-8546-9923b9926194",
          "length": 251,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "0fb50ebe-a3b7-41eb-a3d7-72918e91e411"
        },
        "item": {
          "id": "5e97000b-db31-4c99-92bd-8846743f5595",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "1b25d1d8-a123-4d41-b380-e5942fc16619",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4442cb6-fd1e-4618-929c-7c80c0787254",
        "cursor": {
          "ref": "c1109f7c-d7d3-4303-a119-acce598db60f",
          "length": 251,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "f361eddb-5b01-44a4-a620-a53760b0fe96"
        },
        "item": {
          "id": "a4442cb6-fd1e-4618-929c-7c80c0787254",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "ad922a21-b583-4df4-bd9d-0c6193355d09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7dd71a6-1ef1-400a-a3de-7d9610bc6236",
        "cursor": {
          "ref": "2d908296-df1c-4be0-8a20-61fb04504791",
          "length": 251,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "67a96639-3bd0-49ed-bfe5-1d0cd796b744"
        },
        "item": {
          "id": "c7dd71a6-1ef1-400a-a3de-7d9610bc6236",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "650977b5-7164-42ca-9dc6-6852b44a6207",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a959d636-e26c-4fc2-8192-b9c15359f8d5",
        "cursor": {
          "ref": "61efd571-2e55-4089-835e-7e352c228294",
          "length": 251,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "55a139c5-6991-4f2f-bcd1-7e85f467a0c0"
        },
        "item": {
          "id": "a959d636-e26c-4fc2-8192-b9c15359f8d5",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "73ccce44-fe4f-466d-a38a-150be67f25d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccb56d94-6cad-4b44-b5f6-7c67b246115d",
        "cursor": {
          "ref": "a3c31a2a-1438-4707-9fd9-7b19e0562690",
          "length": 251,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "30273c02-0b3a-4cd6-97d6-097b3fb25817"
        },
        "item": {
          "id": "ccb56d94-6cad-4b44-b5f6-7c67b246115d",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "6274c1ab-657b-4ff6-8674-7d8bd6c163c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d178058c-5e5f-424b-9b3a-9d8618cdfa9c",
        "cursor": {
          "ref": "8f1add6f-2297-4abd-ba29-fd2ba85a654e",
          "length": 251,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "5676ce54-1393-47c5-a46f-08ee2269b6a5"
        },
        "item": {
          "id": "d178058c-5e5f-424b-9b3a-9d8618cdfa9c",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "8a8f938d-bf2b-4e06-9bbe-0e46cb082dde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 319,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10021b11-b6a3-45b5-a170-dda9975ea2fc",
        "cursor": {
          "ref": "6ab51c26-a323-4ad3-aa3a-a7ac1b431f25",
          "length": 251,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "5213e27e-45fe-4af2-95ac-38691a77f326"
        },
        "item": {
          "id": "10021b11-b6a3-45b5-a170-dda9975ea2fc",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "bc97728f-a19b-4a2c-8c0c-5057fdf34402",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45b4826b-a432-4827-a6b8-75c603ce209e",
        "cursor": {
          "ref": "d59cdeed-d452-44cd-88e2-618a652f71d5",
          "length": 251,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "cb41b2c6-02b4-4956-8932-72f088bbacf3"
        },
        "item": {
          "id": "45b4826b-a432-4827-a6b8-75c603ce209e",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "789fa979-efc3-416a-af28-53aeeecde14a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9946e0a4-baf1-4089-8609-c70392781daa",
        "cursor": {
          "ref": "33e43053-f914-4f30-83b5-51614101b5c4",
          "length": 251,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "80475747-112a-4d3b-a252-be38fcb63080"
        },
        "item": {
          "id": "9946e0a4-baf1-4089-8609-c70392781daa",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "f06bb116-ae53-425c-a734-158a17445ee8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba9c5979-4bfd-4fe2-9f9e-1b9e0f543616",
        "cursor": {
          "ref": "2e80ed50-dd12-489e-bd60-f51bb8f1f6eb",
          "length": 251,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "9a5d5e8f-498d-4fd7-aa23-87d44ace70a7"
        },
        "item": {
          "id": "ba9c5979-4bfd-4fe2-9f9e-1b9e0f543616",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "f8f7b79d-acd8-45a6-bcf4-2781a38caaee",
          "status": "Created",
          "code": 201,
          "responseTime": 624,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "a967237a-0cc6-4c4b-8584-bbc222930256",
        "cursor": {
          "ref": "9f06d78b-5941-4e1e-a4da-4fd831904da5",
          "length": 251,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "8a723985-2563-47de-a71a-2258ce8c66f3"
        },
        "item": {
          "id": "a967237a-0cc6-4c4b-8584-bbc222930256",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "9ebae4a1-5819-4ca8-a21b-78b719a95fe2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f72f84e-09b0-437c-ba2c-9971e45f2340",
        "cursor": {
          "ref": "7a6fb11e-5673-4f60-a36f-5cffa919c361",
          "length": 251,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "b2e4592e-ef9c-4fd9-8c50-fd3a12360b0e"
        },
        "item": {
          "id": "5f72f84e-09b0-437c-ba2c-9971e45f2340",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "9fa14210-be14-4c3d-b61e-8117b3fa819a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3030db7-efb4-43d3-bc35-150321dfd90e",
        "cursor": {
          "ref": "554583e4-3fc2-49a7-9ce5-79ad5a81f7fc",
          "length": 251,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "368af014-0b2b-458b-8874-cf22357c6956"
        },
        "item": {
          "id": "d3030db7-efb4-43d3-bc35-150321dfd90e",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "4487d64e-8aaf-44ef-abfa-5f8d300471f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 389
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af715a7c-25b9-43e8-b901-99427d1423a5",
        "cursor": {
          "ref": "0c6e71cc-ab61-40bc-8529-2c292c5521c5",
          "length": 251,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "fe248248-f4c3-4d27-ba7b-35fbe0dee190"
        },
        "item": {
          "id": "af715a7c-25b9-43e8-b901-99427d1423a5",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "309e37b0-c4b6-4f65-a5a3-229a93fc1dd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 388
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2b5185c-dff7-44ab-afc0-c7575d94b430",
        "cursor": {
          "ref": "146350bf-b0c9-45a4-88f7-12681cd3ad7b",
          "length": 251,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "017f9dad-19cc-4e0b-b1a4-67d016e8d05a"
        },
        "item": {
          "id": "e2b5185c-dff7-44ab-afc0-c7575d94b430",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "e4101a6a-2ef3-447b-9e76-ee5d150c4d7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd9764c9-d1dc-49b0-a778-6a01fa1dbacc",
        "cursor": {
          "ref": "7ff70e1f-ff34-4edc-bd31-1663718e86bf",
          "length": 251,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "59dcb3e9-0dee-4f13-a8c8-8d66e50060f9"
        },
        "item": {
          "id": "fd9764c9-d1dc-49b0-a778-6a01fa1dbacc",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "536f6919-1c01-46a5-a2e2-e79ac58de917",
          "status": "Created",
          "code": 201,
          "responseTime": 807,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "60befa29-8dda-4a4f-9ced-e8702cd3068a",
        "cursor": {
          "ref": "e9e11eb4-6697-4236-83eb-ae00045c9ca8",
          "length": 251,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "c31551ce-20d2-4d7e-90f0-43d1f419d084"
        },
        "item": {
          "id": "60befa29-8dda-4a4f-9ced-e8702cd3068a",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "b1ee648a-08cb-49dd-b129-227f0d10ff7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbcdf6df-c461-4fd6-a7a9-1202cf18bbe2",
        "cursor": {
          "ref": "93bac510-31c0-4205-985f-6c4e16c71a23",
          "length": 251,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "6b004011-8a7d-4f15-96c5-b8166fc27536"
        },
        "item": {
          "id": "dbcdf6df-c461-4fd6-a7a9-1202cf18bbe2",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "8e07408c-3aa6-4bf4-8266-b6041f92e60d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d92d8d1e-045a-43c4-857e-51df3209e5fe",
        "cursor": {
          "ref": "b0499c6b-6102-4c52-a39b-32c43ce28ab6",
          "length": 251,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "16fee29d-79c4-4906-b02e-c4719608fb3f"
        },
        "item": {
          "id": "d92d8d1e-045a-43c4-857e-51df3209e5fe",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "a4df38bf-7268-4b67-885d-f93c43880762",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca2aeddd-991c-4562-8971-0696baad422e",
        "cursor": {
          "ref": "88380e77-8f38-405b-9c8d-c3728fc0f5a0",
          "length": 251,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "c269cb4c-2602-45b1-84f6-a10d0c68c070"
        },
        "item": {
          "id": "ca2aeddd-991c-4562-8971-0696baad422e",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "639b1519-5e96-4218-b69a-65720ab8f592",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0a8a5a2-0498-4103-82cb-85523b1b4e26",
        "cursor": {
          "ref": "3ac677fa-8962-4e6c-bb3a-bc0f09823a0b",
          "length": 251,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "09338db6-c4cc-4869-b7b4-0f9a6f702e4e"
        },
        "item": {
          "id": "d0a8a5a2-0498-4103-82cb-85523b1b4e26",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "90317f30-f02b-48bf-bce2-a7a5b325ec3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d092832-1470-4309-8cd4-70f44e71a87e",
        "cursor": {
          "ref": "63b7031f-54dd-4319-a095-28cdaef2e533",
          "length": 251,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "fee6e35d-d2e6-4c85-bcdb-ab45591021be"
        },
        "item": {
          "id": "8d092832-1470-4309-8cd4-70f44e71a87e",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "91f36390-4eea-4438-acbf-9b3d09302a16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ce7f2b2-b8ff-4735-a283-c12ad0f589a2",
        "cursor": {
          "ref": "b23465ae-0792-4dc8-b1bc-ed63c95e5c90",
          "length": 251,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "82b077f8-1c6a-4bee-bfcc-0e33da43ec2d"
        },
        "item": {
          "id": "4ce7f2b2-b8ff-4735-a283-c12ad0f589a2",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "abc9c7f5-a472-4239-afb6-46b620ed0407",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a5418da-11c8-48a3-808e-26cb1bcc5931",
        "cursor": {
          "ref": "a47d20a1-d062-4dd4-a0cb-f655d7d17251",
          "length": 251,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "f963da75-30d7-4925-8563-5baaede18652"
        },
        "item": {
          "id": "4a5418da-11c8-48a3-808e-26cb1bcc5931",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "046daa2c-b19f-48e7-bfb5-5dd616aee93f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 160,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d059ade6-864a-4d1d-8d34-10472d9bb5a4",
        "cursor": {
          "ref": "51b82a7c-c56a-4790-8cd3-eddcec3ee2e4",
          "length": 251,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "083b5215-fb5d-40aa-be5b-4bd5a8ecfdaa"
        },
        "item": {
          "id": "d059ade6-864a-4d1d-8d34-10472d9bb5a4",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "96e78612-b346-47b8-b1b0-90519688dbfe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "3c2c4c8a-fd1b-4fa4-a5c8-850834b0fecb",
        "cursor": {
          "ref": "7729c118-0f0d-4e4d-9a77-b5bdf07421dc",
          "length": 251,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "a37e5d3c-8a14-4dc8-8b06-019951026489"
        },
        "item": {
          "id": "3c2c4c8a-fd1b-4fa4-a5c8-850834b0fecb",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "abb4d760-0273-4162-bbf9-b773a62d13c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 135,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "8e40b97c-c31d-4ef8-8caf-25467471694a",
        "cursor": {
          "ref": "ad06ab8a-3367-49a2-8b75-743c5c4ae353",
          "length": 251,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "93945738-e2bc-48b4-9270-ec9b466f8394"
        },
        "item": {
          "id": "8e40b97c-c31d-4ef8-8caf-25467471694a",
          "name": "credentials_issue"
        },
        "response": {
          "id": "ae08fa30-c67d-439f-96e9-c268d05e5f0e",
          "status": "Created",
          "code": 201,
          "responseTime": 1403,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd649df9-85eb-46a9-b897-6973f9ec2b0d",
        "cursor": {
          "ref": "44470f8f-35d0-493b-b325-abd3b7d2a8bd",
          "length": 251,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "f2fae6eb-ef63-46a3-8de5-c3841928f8f2"
        },
        "item": {
          "id": "dd649df9-85eb-46a9-b897-6973f9ec2b0d",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "676dbf1e-13d1-485f-9124-32c7e7850e16",
          "status": "Created",
          "code": 201,
          "responseTime": 1131,
          "responseSize": 591
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "919ef9e5-a9f4-4c6a-80e2-c21a28391d3a",
        "cursor": {
          "ref": "1ade751c-76e8-4c86-8961-c71d66a15912",
          "length": 251,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "bf865094-8d7b-4777-80c8-414b6130f3fb"
        },
        "item": {
          "id": "919ef9e5-a9f4-4c6a-80e2-c21a28391d3a",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "a833c9aa-8c3b-472b-9a33-032495f4b138",
          "status": "Created",
          "code": 201,
          "responseTime": 1273,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "4113881a-7dac-4998-bf61-8bfe985f5439",
        "cursor": {
          "ref": "edbce8a7-4fb9-4ed3-b2b6-5584fb986858",
          "length": 251,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "f42ed2a3-3446-4f9d-9963-8ca8a6642d73"
        },
        "item": {
          "id": "4113881a-7dac-4998-bf61-8bfe985f5439",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "f5dcf68d-464a-44bd-9fa1-51274c7db3df",
          "status": "Created",
          "code": 201,
          "responseTime": 1160,
          "responseSize": 560
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "840aa7fb-1c9c-4a90-93aa-9c5153ac20fa",
        "cursor": {
          "ref": "ccb1e8fa-b3a0-4951-a7f9-6a5d30722ca8",
          "length": 251,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "036dca07-4029-45d9-beec-1bd2f3c21568"
        },
        "item": {
          "id": "840aa7fb-1c9c-4a90-93aa-9c5153ac20fa",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "8b552d77-c9e0-40b9-abae-70b066aa2a49",
          "status": "Created",
          "code": 201,
          "responseTime": 506,
          "responseSize": 528
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "84a98c28-4661-4333-8396-5e9dd6be36da",
        "cursor": {
          "ref": "cf816885-5381-448d-a835-53facf9673d6",
          "length": 251,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "ba756a18-5a46-4508-a741-4e84c222910c"
        },
        "item": {
          "id": "84a98c28-4661-4333-8396-5e9dd6be36da",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "0c2d7c61-6db4-4a9e-8ab5-620af278fd1b",
          "status": "Created",
          "code": 201,
          "responseTime": 471,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "950c860e-b9fb-4d59-8ef7-070bcb8ea5b9",
        "cursor": {
          "ref": "35c56b8e-e6b0-49c5-a604-5b215d6b9349",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "5d6699a7-d54d-4d07-992d-babe3b3d8bc1"
        },
        "item": {
          "id": "950c860e-b9fb-4d59-8ef7-070bcb8ea5b9",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "a36b9336-f53c-4255-89c5-928f752fb4a4",
          "status": "OK",
          "code": 200,
          "responseTime": 14,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "950c860e-b9fb-4d59-8ef7-070bcb8ea5b9",
        "cursor": {
          "ref": "35c56b8e-e6b0-49c5-a604-5b215d6b9349",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "5d6699a7-d54d-4d07-992d-babe3b3d8bc1"
        },
        "item": {
          "id": "950c860e-b9fb-4d59-8ef7-070bcb8ea5b9",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "a36b9336-f53c-4255-89c5-928f752fb4a4",
          "status": "OK",
          "code": 200,
          "responseTime": 14,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "a91b7e9c-946e-40bd-8927-c9817e89494d",
        "cursor": {
          "ref": "942adda3-56b6-49dd-9579-373c674672dd",
          "length": 251,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "0afe2c83-12c9-4536-91bc-b1a58e8c809f"
        },
        "item": {
          "id": "a91b7e9c-946e-40bd-8927-c9817e89494d",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "0b67f8b7-60ee-42f9-8b2b-88b33a5eb094",
          "status": "OK",
          "code": 200,
          "responseTime": 19,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "498d3568-f9ec-42d3-9655-fd2a6e278a54",
        "cursor": {
          "ref": "5a4b1c29-3de0-40b3-aa22-0229ca01eb7b",
          "length": 251,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "a6765dd8-45d2-479c-ba70-5b53f5899901"
        },
        "item": {
          "id": "498d3568-f9ec-42d3-9655-fd2a6e278a54",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "e9fccc47-3041-4072-bce1-ceeff9fbce92",
          "status": "OK",
          "code": 200,
          "responseTime": 104,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "24f25676-8d1b-4bc6-abb6-9cf5b3a4c14a",
        "cursor": {
          "ref": "dd327ce4-86c5-4fe1-afdd-6cec6bd069a7",
          "length": 251,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "f73a3d54-efbd-443e-894b-5ced0eeab23e"
        },
        "item": {
          "id": "24f25676-8d1b-4bc6-abb6-9cf5b3a4c14a",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "e62f7a5b-99b9-4847-8632-12b3d6a310ea",
          "status": "OK",
          "code": 200,
          "responseTime": 19,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "3ee33570-ee6c-4c73-8827-f6325b131934",
        "cursor": {
          "ref": "bb45fa28-46ca-46c5-9aeb-df94cc247f67",
          "length": 251,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "6000ddd7-160b-4526-a135-e63f48242f7e"
        },
        "item": {
          "id": "3ee33570-ee6c-4c73-8827-f6325b131934",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "1eab89d6-57cc-490d-82e3-9c55eae2e360",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "314f9d0d-e3be-4391-ab12-a9d98b8d3564",
        "cursor": {
          "ref": "075c47f0-1d98-4874-8791-2124b23617e8",
          "length": 251,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "d96ca6fd-82dd-40d1-b743-c2f3d4dd2fa5"
        },
        "item": {
          "id": "314f9d0d-e3be-4391-ab12-a9d98b8d3564",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "fb45f025-a592-494a-8203-da6f24474b75",
          "status": "OK",
          "code": 200,
          "responseTime": 25,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "4f0b956a-c582-4427-b505-9725e9bdc046",
        "cursor": {
          "ref": "5a7a134a-e505-49e5-8356-8bd0b4406e5e",
          "length": 251,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "02681a15-ce12-4ac2-a68d-70b914e8ceeb"
        },
        "item": {
          "id": "4f0b956a-c582-4427-b505-9725e9bdc046",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "f26852da-daac-408d-a0bb-75c9ec7680f9",
          "status": "OK",
          "code": 200,
          "responseTime": 23,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "f05afea6-b477-4463-8fc2-3262caa43593",
        "cursor": {
          "ref": "cea5236b-2928-402f-a8b1-cb725e5b040c",
          "length": 251,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "a8ec454a-f830-4675-908d-de0284a97380"
        },
        "item": {
          "id": "f05afea6-b477-4463-8fc2-3262caa43593",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "e4e6e08d-c4b8-4952-bff3-1ae1e997c8ef",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "71cb7316-379e-4b37-a8dc-693c9174147e",
        "cursor": {
          "ref": "70b2c842-9d87-42f9-991b-38457e68fd3d",
          "length": 251,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "5e3c9d6d-fa80-459c-bdff-c1cd2232e7d1"
        },
        "item": {
          "id": "71cb7316-379e-4b37-a8dc-693c9174147e",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "7bb19a03-3a90-4bc1-9138-c44a148a7b0a",
          "status": "OK",
          "code": 200,
          "responseTime": 45,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "d23b82d6-188f-490f-a57d-742617ae4fd5",
        "cursor": {
          "ref": "9e1cdc73-0be5-47d3-a9dc-d25ff1f0f56f",
          "length": 251,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "b6820fe7-98c5-4667-999d-7df350bdc749"
        },
        "item": {
          "id": "d23b82d6-188f-490f-a57d-742617ae4fd5",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "01060183-74c1-461c-a139-cdf5828c835e",
          "status": "OK",
          "code": 200,
          "responseTime": 19,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "02ea1810-9262-451f-bc43-a1cb5bf55321",
        "cursor": {
          "ref": "efcb863c-c0c0-443f-b550-1713f68fb3af",
          "length": 251,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "b1592457-0e94-4d12-b388-9d1f3e7c60f5"
        },
        "item": {
          "id": "02ea1810-9262-451f-bc43-a1cb5bf55321",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "e2899572-23a2-4690-892c-78d711f0a093",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "dee97b98-5ace-46e0-837e-11763fdb5291",
        "cursor": {
          "ref": "e3c77283-df64-4342-8352-5bb1748793e8",
          "length": 251,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "f120dace-5141-4269-904d-d90b21258925"
        },
        "item": {
          "id": "dee97b98-5ace-46e0-837e-11763fdb5291",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "a3201084-ccad-4a97-bae7-72309dd7f3ff",
          "status": "OK",
          "code": 200,
          "responseTime": 19,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "b826d3d4-fd66-4c93-baeb-4435f39918e6",
        "cursor": {
          "ref": "5e4a1bf9-471c-44f9-8fc3-f39e991f2264",
          "length": 251,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "594d0230-4be2-4861-ab52-f3b1afc56896"
        },
        "item": {
          "id": "b826d3d4-fd66-4c93-baeb-4435f39918e6",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "68ecbf2b-87d3-44e6-a72b-b6aff6c3a85b",
          "status": "OK",
          "code": 200,
          "responseTime": 24,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "f457e47d-0a51-44b2-a34c-2b5f4d8193c2",
        "cursor": {
          "ref": "a00437a3-5803-4268-90eb-c0075073b26c",
          "length": 251,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "79ac43f1-83a1-4834-ac27-644b41addf43"
        },
        "item": {
          "id": "f457e47d-0a51-44b2-a34c-2b5f4d8193c2",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "9b4ba0a1-b10b-4374-90fa-2cdea2417b3c",
          "status": "OK",
          "code": 200,
          "responseTime": 14,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "e8f107f1-8cce-481e-be75-710c176f59b4",
        "cursor": {
          "ref": "98ea1deb-d3c8-46e2-ac84-6fff0ac1724c",
          "length": 251,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "5c40d3e8-2a62-4868-b02b-effcb549b032"
        },
        "item": {
          "id": "e8f107f1-8cce-481e-be75-710c176f59b4",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "4e91678c-7158-4be2-9942-a80c62bcde68",
          "status": "OK",
          "code": 200,
          "responseTime": 37,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "67b7e1a1-3991-47e5-920a-69bc959fa7e4",
        "cursor": {
          "ref": "d8fd7ce6-d762-4080-a78b-573531bbd5bc",
          "length": 251,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "35db683e-3a56-4460-908a-023fe038945c"
        },
        "item": {
          "id": "67b7e1a1-3991-47e5-920a-69bc959fa7e4",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "002b8047-9991-4f99-bbed-e7523f158145",
          "status": "OK",
          "code": 200,
          "responseTime": 22,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "e80f85cb-a02c-4932-a045-946d9ce60260",
        "cursor": {
          "ref": "154296da-0c6f-4ebc-b296-0d20a07bc23b",
          "length": 251,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "b6563dbd-236c-48c6-a1c0-5c3c9ecebb0a"
        },
        "item": {
          "id": "e80f85cb-a02c-4932-a045-946d9ce60260",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "5627da2e-c3bd-40d0-98a4-050966e2c2e9",
          "status": "OK",
          "code": 200,
          "responseTime": 26,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "4fcec090-52e0-4f68-b9c6-a440856620df",
        "cursor": {
          "ref": "d7261e07-585e-4c48-97fb-538fd575ad99",
          "length": 251,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "24afb0d2-ce24-4ddd-a31c-f72c036d0094"
        },
        "item": {
          "id": "4fcec090-52e0-4f68-b9c6-a440856620df",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "ce3964ea-b8c0-47a7-9ba8-e20f8991c54c",
          "status": "OK",
          "code": 200,
          "responseTime": 14,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "b5e8a6d6-e602-40d7-b770-0f6774f9d879",
        "cursor": {
          "ref": "e2e3a673-021c-4cbd-be7d-4cf5f1d23944",
          "length": 251,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "a597ddef-46f6-4df5-8aea-06a4874462b0"
        },
        "item": {
          "id": "b5e8a6d6-e602-40d7-b770-0f6774f9d879",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "925228a2-e681-4c87-b5ef-29874b812697",
          "status": "OK",
          "code": 200,
          "responseTime": 45,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "956d6572-5fa6-4472-bbb5-6d61533abab3",
        "cursor": {
          "ref": "121c6951-adbf-4b60-ae25-c36829659a45",
          "length": 251,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "9c7b121f-edfb-4281-989e-7307d762e7c1"
        },
        "item": {
          "id": "956d6572-5fa6-4472-bbb5-6d61533abab3",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "6d8b08e7-e2ef-4af8-945d-14876d4d849e",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "6909ddeb-83b3-4bb2-8cc5-5a01afd8bebc",
        "cursor": {
          "ref": "f69cdd45-4cef-4ef4-80ed-d830623dce69",
          "length": 251,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "3066cef1-4011-4c27-b608-0dd67b52d986"
        },
        "item": {
          "id": "6909ddeb-83b3-4bb2-8cc5-5a01afd8bebc",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "a9328aea-6342-4b17-8fb0-212d77df556e",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "1f3ea885-d1fc-436b-89aa-560da0efe45d",
        "cursor": {
          "ref": "2aaee29b-3c4a-4050-9ad3-58dbb92566b4",
          "length": 251,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "1de3c164-fef4-45a4-8707-facf34dc52df"
        },
        "item": {
          "id": "1f3ea885-d1fc-436b-89aa-560da0efe45d",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "f01393b1-b841-4f5b-8666-a2e9136decc6",
          "status": "OK",
          "code": 200,
          "responseTime": 93,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "aeec7449-03d2-4c60-a7b7-958a9f600402",
        "cursor": {
          "ref": "d00cec08-a407-440c-9532-3f66c21665c2",
          "length": 251,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "f3e7f7ff-2880-4fa6-86c3-55ee0c1c8fec"
        },
        "item": {
          "id": "aeec7449-03d2-4c60-a7b7-958a9f600402",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "2ab599c6-cf68-4409-896a-8ede28e01eee",
          "status": "OK",
          "code": 200,
          "responseTime": 43,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "494ad8dc-0a2d-4bd7-b58f-5899e34e10fd",
        "cursor": {
          "ref": "d8c534ea-3a4e-4e55-81a0-0dd090aea3dc",
          "length": 251,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "d3ef52e4-9037-46f9-91d6-9d4db719047f"
        },
        "item": {
          "id": "494ad8dc-0a2d-4bd7-b58f-5899e34e10fd",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "c2fcff57-2c83-4510-9c65-1d0a1e3924c3",
          "status": "OK",
          "code": 200,
          "responseTime": 197,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "1d4f215b-bb20-4bef-a8c9-1fcee3ad2085",
        "cursor": {
          "ref": "efef0242-e37d-4058-867a-2fe9aaf22abf",
          "length": 251,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "1542b870-93cc-43ef-b32d-9527f839d732"
        },
        "item": {
          "id": "1d4f215b-bb20-4bef-a8c9-1fcee3ad2085",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "77a71a5c-0a0a-45ba-a826-562a2adb0ce8",
          "status": "OK",
          "code": 200,
          "responseTime": 22,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "a9e18697-017f-4993-a79f-bc1ddb04945d",
        "cursor": {
          "ref": "3fe3b85d-f097-4205-b986-b972f1e5344b",
          "length": 251,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "ec3330f1-5e27-45a9-8979-a692b310abe9"
        },
        "item": {
          "id": "a9e18697-017f-4993-a79f-bc1ddb04945d",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "e50c3668-7c05-4c5e-b88c-a97edf10e63f",
          "status": "OK",
          "code": 200,
          "responseTime": 24,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "d370d715-1bca-40bf-ac89-8ec88f7bd44e",
        "cursor": {
          "ref": "87ffd37b-9a42-41ce-a46e-f34dfd437b6e",
          "length": 251,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "19ee30fd-8123-4593-a8b6-d55ff18b991b"
        },
        "item": {
          "id": "d370d715-1bca-40bf-ac89-8ec88f7bd44e",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "cbd62394-23ea-4156-bf36-c3d537924031",
          "status": "OK",
          "code": 200,
          "responseTime": 25,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "ee77aa61-b91c-43e8-b0f1-e00a481207f6",
        "cursor": {
          "ref": "d4af5760-72ed-4536-9528-0244b99132d3",
          "length": 251,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "7d386f28-8fa4-4eff-a7e3-0d652dee6f9a"
        },
        "item": {
          "id": "ee77aa61-b91c-43e8-b0f1-e00a481207f6",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "7a90abea-ff63-4f0b-b7e3-9d0614b39ffa",
          "status": "OK",
          "code": 200,
          "responseTime": 44,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "b5e9c86c-41b9-461c-b627-9ccb99e7c560",
        "cursor": {
          "ref": "887129e5-2cfe-4e30-ac1b-56f193bc9e3b",
          "length": 251,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "4fbd7424-88c1-472b-8158-48c29ddf75d8"
        },
        "item": {
          "id": "b5e9c86c-41b9-461c-b627-9ccb99e7c560",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "e331fd4b-a72d-44cc-acff-ed1bb33f1116",
          "status": "OK",
          "code": 200,
          "responseTime": 23,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "fba99696-1523-4ced-a8b3-2e4477f4b3fd",
        "cursor": {
          "ref": "fed95886-21fb-4621-8991-80025a173b1f",
          "length": 251,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "6128e405-cc6a-4498-896c-ee2b0f271e5b"
        },
        "item": {
          "id": "fba99696-1523-4ced-a8b3-2e4477f4b3fd",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "d6713f83-7875-42b0-8438-fbf0b9134c66",
          "status": "OK",
          "code": 200,
          "responseTime": 18,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "dccbb0fb-8c79-4c98-8e09-1c198cd472cc",
        "cursor": {
          "ref": "aac37177-437b-42e7-8b4d-d3f0ae09e821",
          "length": 251,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "7a920109-b3c0-4715-92fc-12aa7680c4fe"
        },
        "item": {
          "id": "dccbb0fb-8c79-4c98-8e09-1c198cd472cc",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "b7155003-d43b-4767-8bd4-823788964afe",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "13082590-bc72-4666-a699-dcefb000b8a8",
        "cursor": {
          "ref": "3faf09a8-a321-45f4-8499-8429306e084e",
          "length": 251,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "7b6622c8-fce4-4662-bf18-95d5cd009a75"
        },
        "item": {
          "id": "13082590-bc72-4666-a699-dcefb000b8a8",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "2a8de230-1045-4747-a6be-543d8fa41105",
          "status": "OK",
          "code": 200,
          "responseTime": 25,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "f99a42a8-4123-49de-9167-0216bd73b2c8",
        "cursor": {
          "ref": "3d60f752-da45-4287-9cb9-d970cb0a904f",
          "length": 251,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "27bdf657-43da-4809-96eb-db800cf0b170"
        },
        "item": {
          "id": "f99a42a8-4123-49de-9167-0216bd73b2c8",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "4cfb0f4b-09a5-422f-8e1c-cbe451d85513",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 15,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2022b76d-b0d5-4b1f-8c78-ccdb4da23fc7",
        "cursor": {
          "ref": "9ff2b8a2-bbdc-4cb2-b113-63f5d06fc712",
          "length": 251,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "a172bf91-a9a1-4062-ab42-4edfb09a9e45"
        },
        "item": {
          "id": "2022b76d-b0d5-4b1f-8c78-ccdb4da23fc7",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "270169c0-be86-4233-97bd-64240c2cfd5b",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 11,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b7cfdeb-65c7-48fd-ba64-94df4836f304",
        "cursor": {
          "ref": "4db9dd32-2a9c-4428-8dc9-ccb5e5bc27ad",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "61b4977e-974c-4fd6-a83e-f2123d7624c9"
        },
        "item": {
          "id": "5b7cfdeb-65c7-48fd-ba64-94df4836f304",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "b358ff48-521a-4f78-aa7c-4f94cd8e5bce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b7cfdeb-65c7-48fd-ba64-94df4836f304",
        "cursor": {
          "ref": "4db9dd32-2a9c-4428-8dc9-ccb5e5bc27ad",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "61b4977e-974c-4fd6-a83e-f2123d7624c9"
        },
        "item": {
          "id": "5b7cfdeb-65c7-48fd-ba64-94df4836f304",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "b358ff48-521a-4f78-aa7c-4f94cd8e5bce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbbc8694-59a5-4828-bd7e-c51d2666df6a",
        "cursor": {
          "ref": "aada9ba5-1c78-4c60-9802-31fef2b7a701",
          "length": 251,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "34af5b95-187c-4cce-a0e0-4820e95aefc1"
        },
        "item": {
          "id": "fbbc8694-59a5-4828-bd7e-c51d2666df6a",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "1a3fc6cf-dd35-45da-83ad-583a8a47357c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a12243b1-298a-4432-97dc-d7f41d93a2b8",
        "cursor": {
          "ref": "770a5a7f-eae7-4cae-82f9-049c206b0bf4",
          "length": 251,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "12363c63-91ce-4b06-83d0-1e0bef1cb502"
        },
        "item": {
          "id": "a12243b1-298a-4432-97dc-d7f41d93a2b8",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "f3a7b289-8aef-4bb5-954f-fc857727925a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cf72440-5a88-4363-b048-8bee8fe05b28",
        "cursor": {
          "ref": "57cedde5-7ffd-495b-8d92-18fc7d26db92",
          "length": 251,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "cc5b40f3-0e71-4649-bb7c-5077061d8aa3"
        },
        "item": {
          "id": "1cf72440-5a88-4363-b048-8bee8fe05b28",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "61c9bbc7-fe5a-48f8-83f8-afba61a1a51b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a932241c-4da4-446f-b90c-4dfaf8a867ed",
        "cursor": {
          "ref": "4a0c79e4-09fb-4e62-af89-5788e8f31dc6",
          "length": 251,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "59f378ae-c887-4b4c-b25a-8508064a9073"
        },
        "item": {
          "id": "a932241c-4da4-446f-b90c-4dfaf8a867ed",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "988a9f34-e340-422c-ba30-c4ea58b88f1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e87a5ad-2957-4cc7-ba8d-ee049a1738ad",
        "cursor": {
          "ref": "9d9fb629-de96-470c-9907-353eb67e26fd",
          "length": 251,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "1a8ee1cf-5967-4c4b-8bda-10a445eff046"
        },
        "item": {
          "id": "6e87a5ad-2957-4cc7-ba8d-ee049a1738ad",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "6bed9531-ac3e-4bcc-ae91-2948275a6fbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d2fa842-6562-4209-84d6-59d9532dd869",
        "cursor": {
          "ref": "6f1306a1-5772-48f7-8ac9-c03e5ee6104d",
          "length": 251,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "48b2efa7-787a-49e0-b96a-6db68c99d7c2"
        },
        "item": {
          "id": "5d2fa842-6562-4209-84d6-59d9532dd869",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "4aa8408e-e2ae-471a-af57-44969a71604b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1495,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65bc9582-7c52-4dd1-bce3-171a18e287c3",
        "cursor": {
          "ref": "1075f688-769f-40cd-ae63-85c86ade0cf1",
          "length": 251,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "bf7ed3a2-83db-4ea6-b26b-09ca966c9d6c"
        },
        "item": {
          "id": "65bc9582-7c52-4dd1-bce3-171a18e287c3",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "4eed15f4-a4bc-4cd7-af12-7c988b1573d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82bd4cc8-18c5-49b4-8b22-096a598a7a36",
        "cursor": {
          "ref": "ef14cb5d-bc77-4b34-b220-1c39be822c98",
          "length": 251,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "b87ff0ad-00c3-4c2a-8aea-55780e097172"
        },
        "item": {
          "id": "82bd4cc8-18c5-49b4-8b22-096a598a7a36",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "e27f300a-ee23-4f3c-91b6-ee2814a0a9f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e15be8e-3687-4b96-80be-e9f18e793be7",
        "cursor": {
          "ref": "5485bfce-6ac7-4a9b-914e-de97c8bd7a42",
          "length": 251,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "e9508e41-cd66-46c6-b648-5f1a79fcc5e7"
        },
        "item": {
          "id": "5e15be8e-3687-4b96-80be-e9f18e793be7",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "026ab4c5-be01-426d-a07b-f2ca03cd5b61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b436f46b-a28e-45db-8170-f9bf56f8efed",
        "cursor": {
          "ref": "2cc7a421-92ae-4f6a-801f-f7f948cbc8bc",
          "length": 251,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "a6403527-cf6a-4c1d-aa1f-814da26d55e7"
        },
        "item": {
          "id": "b436f46b-a28e-45db-8170-f9bf56f8efed",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "7f49248f-1e2c-442c-9ac9-3e65d759cc8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0cdb091-1909-4f68-a6c8-b286164efea1",
        "cursor": {
          "ref": "bbcadf45-6483-4817-9ee7-30d09964b6d7",
          "length": 251,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "6c923d50-0cc9-4244-896e-58850f523584"
        },
        "item": {
          "id": "c0cdb091-1909-4f68-a6c8-b286164efea1",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "039cfe52-e741-4570-95e9-11f657709862",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e13a6b43-60df-452d-8e52-92bc685e9225",
        "cursor": {
          "ref": "66978788-fb04-4189-90db-9ca5acbf35b2",
          "length": 251,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "b5e87b7a-3f99-45b5-948c-20894d374c6d"
        },
        "item": {
          "id": "e13a6b43-60df-452d-8e52-92bc685e9225",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "1610bfa4-2dbe-4f34-b97d-a0e06723c106",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6110611-8990-4204-a010-7a327e8158fe",
        "cursor": {
          "ref": "c06062fc-77db-4ec0-8074-eff7c9d03423",
          "length": 251,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "5c078cb5-318f-46da-8507-d8c997014be6"
        },
        "item": {
          "id": "b6110611-8990-4204-a010-7a327e8158fe",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "55b435e0-300d-485c-82c2-64ef26d424f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9d862cb-b5f4-4e3c-bfbf-0f62a3fec1a1",
        "cursor": {
          "ref": "4a552fed-8be5-483f-aeb6-d31e65a98e7d",
          "length": 251,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "34c5704f-2b5b-4708-8bd1-ce97115d5338"
        },
        "item": {
          "id": "c9d862cb-b5f4-4e3c-bfbf-0f62a3fec1a1",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "4fd00c5f-166c-424d-a6ec-9bcad7123144",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af75fd71-4815-409a-bc74-991b800feb8f",
        "cursor": {
          "ref": "201734f1-d1cf-474b-9ef4-79e699d7573d",
          "length": 251,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "6da06420-5209-432a-af3a-05bec7d2d1d7"
        },
        "item": {
          "id": "af75fd71-4815-409a-bc74-991b800feb8f",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "ab90031c-f07a-4f10-81e6-b825bd90dd09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 279,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49057c6c-8d94-495c-9bdb-aa3723c22adf",
        "cursor": {
          "ref": "b2a04c33-02d3-4876-8724-7bd4e3e9085e",
          "length": 251,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "6c16672a-2817-4654-87cc-4d8f367d9b66"
        },
        "item": {
          "id": "49057c6c-8d94-495c-9bdb-aa3723c22adf",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "e44326e1-9255-4646-b1a8-a3a27981cc93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11bc8d12-0f4e-4844-95cc-6a9b09e2960d",
        "cursor": {
          "ref": "0d71e042-212f-48b4-9068-c40d68208f7d",
          "length": 251,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "bdfb7876-3bdc-4bd3-8133-8ef47da9c7cc"
        },
        "item": {
          "id": "11bc8d12-0f4e-4844-95cc-6a9b09e2960d",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "613f04ed-5203-4f85-ad2c-3d30a7616cc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 747,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b8a80e2-45bc-4616-90d5-0c366ca939d7",
        "cursor": {
          "ref": "edee0ae8-d176-4ddd-9c59-dfac317eaf63",
          "length": 251,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "59c1ef28-a41e-4e6c-874f-8cd4f9d9636f"
        },
        "item": {
          "id": "2b8a80e2-45bc-4616-90d5-0c366ca939d7",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "48887976-d1d2-4d0a-bc17-7fbe52881947",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 428,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "132c5229-6882-4317-a882-5367bcb71aeb",
        "cursor": {
          "ref": "6b9e4b52-c0e4-457d-9492-189957717305",
          "length": 251,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "e34332e1-1c52-429e-8f55-f1f46b158721"
        },
        "item": {
          "id": "132c5229-6882-4317-a882-5367bcb71aeb",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "7f40500e-f208-4dc5-b185-539c2a2404d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1758,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f9b8185-2460-47a8-95e1-33dbc6edd811",
        "cursor": {
          "ref": "af39005c-9cb1-4841-8983-8036f80fe5a0",
          "length": 251,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "ef6601c9-bdad-4fb9-8348-715f12f2e792"
        },
        "item": {
          "id": "0f9b8185-2460-47a8-95e1-33dbc6edd811",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "85495a8e-e364-4363-b6d0-97d645579702",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 604,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea3de897-a157-4481-9670-829273d806e9",
        "cursor": {
          "ref": "6b3b1138-ca24-4817-ba1f-680daf895ce8",
          "length": 251,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "69827707-64ef-4938-9110-ba110de53a7f"
        },
        "item": {
          "id": "ea3de897-a157-4481-9670-829273d806e9",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "cec93490-5353-4cae-bc9d-4527277142a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 430,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2688cc6-0bb9-4b89-8807-705054777aeb",
        "cursor": {
          "ref": "40d57d05-8333-4db6-9774-dbc372061c8f",
          "length": 251,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "0e386de7-bc69-4c7a-bcd6-2cc848c36c8c"
        },
        "item": {
          "id": "d2688cc6-0bb9-4b89-8807-705054777aeb",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "8c5b92fd-91e6-490c-b4a1-0bed126d7ec0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 472,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "979f1cb3-bf38-4a51-a2bf-ef5c4ab752ba",
        "cursor": {
          "ref": "abe337af-e603-40c0-84fe-69ef877418e4",
          "length": 251,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "7066dbde-af16-4ad7-8ec8-11c36e78ef93"
        },
        "item": {
          "id": "979f1cb3-bf38-4a51-a2bf-ef5c4ab752ba",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "a7382379-31a4-495f-9071-59bf7d374d49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 261,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b250ee5-3999-497d-a1cf-906b2903cdc4",
        "cursor": {
          "ref": "af842e94-b3c7-4358-83ab-f40dedf3c48a",
          "length": 251,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "7fcea2b9-5a01-4ca5-a5fd-476dc76f698c"
        },
        "item": {
          "id": "0b250ee5-3999-497d-a1cf-906b2903cdc4",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "20b6e667-38a6-454a-9398-0a98d216fc04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cee1fe56-0f20-4271-920e-82f41f8bebf0",
        "cursor": {
          "ref": "2b85dfa5-2e67-4169-9e35-6a39cd374b30",
          "length": 251,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "d37b6faf-2fa6-43aa-bb0f-a86d975097b7"
        },
        "item": {
          "id": "cee1fe56-0f20-4271-920e-82f41f8bebf0",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "a14599d3-e154-4650-9ee6-314fe583ebaf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 606,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b529c26-461b-49a2-a0b5-de05abf1585d",
        "cursor": {
          "ref": "fcad50f8-8666-4b17-94ec-0f27bf7281e4",
          "length": 251,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "d1345369-a947-4fe2-a001-19bb5ec2a92a"
        },
        "item": {
          "id": "5b529c26-461b-49a2-a0b5-de05abf1585d",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "8528c259-2e88-4734-acde-5db352fe80f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 149,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "065dbf17-1843-47d5-8f8d-e1c4b670eafc",
        "cursor": {
          "ref": "17d76f5a-5bea-433b-869c-8da0ff9dec63",
          "length": 251,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "6fd338a3-aaf4-432e-85be-e08a7e7d2c53"
        },
        "item": {
          "id": "065dbf17-1843-47d5-8f8d-e1c4b670eafc",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "5921032b-d061-422a-b0aa-b933969ff2e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c073b603-69a0-43b1-b6d6-5e731867429a",
        "cursor": {
          "ref": "ca5c138a-66e4-468c-8bc7-6f3feb330c67",
          "length": 251,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "e1504ff7-98be-4570-b4b3-c7269ba32e86"
        },
        "item": {
          "id": "c073b603-69a0-43b1-b6d6-5e731867429a",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "3cbe61f8-6c2b-45bd-b273-a9cbda5d0a7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 355,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6adc82a-5a2b-4b4f-9fa4-c06717e0a3eb",
        "cursor": {
          "ref": "471ddd05-86f5-4c88-a49e-5c6ec564add6",
          "length": 251,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "f53bfd4f-fa26-4ff9-a327-6b94656a6ff4"
        },
        "item": {
          "id": "d6adc82a-5a2b-4b4f-9fa4-c06717e0a3eb",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "f94d49f6-eabc-4604-a48c-fd0a125be818",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2b73387-5027-483a-94dd-309e79a0cc1a",
        "cursor": {
          "ref": "4b593f1c-e97e-4b21-8a94-838662a10427",
          "length": 251,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "72412c4d-0347-4103-93df-1fbbdb6b6b5c"
        },
        "item": {
          "id": "b2b73387-5027-483a-94dd-309e79a0cc1a",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "0b081cc8-603b-4440-9839-138ca01c1e62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27e388f0-c2e5-4f5f-b3da-56c00ad5a1cd",
        "cursor": {
          "ref": "898ebd6e-f5fe-4257-88f7-ca0ac0f5b65e",
          "length": 251,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "9210ea3b-61cf-47e6-be2e-38f41ad495b7"
        },
        "item": {
          "id": "27e388f0-c2e5-4f5f-b3da-56c00ad5a1cd",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "5d3cf999-fbd3-4040-a5f6-41dd614bab79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 168,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4e00f3d-e44b-47ac-bc69-d5bcc6819cab",
        "cursor": {
          "ref": "7528f911-c5e4-4006-83d9-bfbe83ed2bf0",
          "length": 251,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "49bd75d6-d2a1-4b2d-9dd7-f6f99457732c"
        },
        "item": {
          "id": "e4e00f3d-e44b-47ac-bc69-d5bcc6819cab",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "dec2e103-abac-4473-b563-de3b51815057",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 231,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6001feb3-5492-4d9a-b43f-df73e9347b22",
        "cursor": {
          "ref": "7fe598d3-c7af-408b-a9e5-e8432e9880da",
          "length": 251,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "fe71fca3-4ec1-41ca-bc54-4307ac4f6acf"
        },
        "item": {
          "id": "6001feb3-5492-4d9a-b43f-df73e9347b22",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "7b7842de-f62f-4ddd-a444-c42e48c52311",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "411cfa2f-b779-4bbc-b50a-5577ebec0a94",
        "cursor": {
          "ref": "874632e2-c2ac-43cf-86d6-6cf2904399ab",
          "length": 251,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "106c59cd-164f-4ecc-9e26-afe0ce27a00c"
        },
        "item": {
          "id": "411cfa2f-b779-4bbc-b50a-5577ebec0a94",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "328cbc99-2681-44c7-b53e-c5f20bb07338",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 381,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5e117b5-dc6b-4b4a-ba86-5b4ea3b90213",
        "cursor": {
          "ref": "8827c676-f5ef-4fad-bcad-7f9557f817dd",
          "length": 251,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "fa717fc2-84d2-4bf8-800e-8388ded0947e"
        },
        "item": {
          "id": "e5e117b5-dc6b-4b4a-ba86-5b4ea3b90213",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "4f4db97c-9dd6-4443-80ac-a522ba619525",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 294,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55a83d1a-2b75-4548-a486-5c416f2d6a51",
        "cursor": {
          "ref": "adf7c082-79dd-4c57-8980-2984dd26e56c",
          "length": 251,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "32033509-c15f-430c-bf40-5ddcd4b2df22"
        },
        "item": {
          "id": "55a83d1a-2b75-4548-a486-5c416f2d6a51",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "8775cef6-02aa-4540-b448-53b73bef8705",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 340,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e85b0dc-9703-4634-b845-bbf318e5b290",
        "cursor": {
          "ref": "943d7627-bdda-4860-8410-7cedcca46b93",
          "length": 251,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "89211c43-7aae-4a5c-b1da-6aaf350d34a3"
        },
        "item": {
          "id": "7e85b0dc-9703-4634-b845-bbf318e5b290",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "79c2a46c-954f-4743-839b-21a8f19e5393",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 302,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d439028-30d9-4b8a-9f1d-7efbccff2c73",
        "cursor": {
          "ref": "13354a02-efdc-41d1-8a88-bfe3443ae9fa",
          "length": 251,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "76d0c0f6-6edd-426b-ac63-a687e0200496"
        },
        "item": {
          "id": "6d439028-30d9-4b8a-9f1d-7efbccff2c73",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "ce0bf45e-7e8c-4807-b490-dbc8f832b6ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 270,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98395380-b0b1-4545-b443-68ae30cd7679",
        "cursor": {
          "ref": "a32d8dad-bcf9-44e1-84fb-8afbc9d23e98",
          "length": 251,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "2f79e503-9a4e-4be9-9d66-80a438ac3a61"
        },
        "item": {
          "id": "98395380-b0b1-4545-b443-68ae30cd7679",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "94840268-0278-44ad-ab6e-389569c9d4ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 224,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4922d7b9-53d0-4a28-932c-d3f1a372ddfe",
        "cursor": {
          "ref": "4414b4e3-3d0e-4d79-bea9-08d2b240279f",
          "length": 251,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "6d06c4f1-f2e6-41c2-88ab-fc6622b7211a"
        },
        "item": {
          "id": "4922d7b9-53d0-4a28-932c-d3f1a372ddfe",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "5c139696-c621-4f1b-91c9-f46b8100a57a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 470,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ae17a6b-e192-4626-85d8-ecbeff245000",
        "cursor": {
          "ref": "56f728e8-7b72-4b45-be54-d05200b61a08",
          "length": 251,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "9e6a770f-80e2-4ad7-9297-d1abc7f32145"
        },
        "item": {
          "id": "2ae17a6b-e192-4626-85d8-ecbeff245000",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "77805351-20cd-45b4-92f8-44a90175a4e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 242,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6ccf06d-7806-42e0-b4e4-7a3cf5ce5e18",
        "cursor": {
          "ref": "d2020d33-4212-48de-8939-6b2e2e3a9c74",
          "length": 251,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "e958dea2-7eba-428b-994f-986db84947cc"
        },
        "item": {
          "id": "d6ccf06d-7806-42e0-b4e4-7a3cf5ce5e18",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "2717977c-bf9b-4b8f-85fa-0f4f6627099a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 234,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e2336b6-e6df-45d6-ad49-095d69881393",
        "cursor": {
          "ref": "e01a5284-531b-4b09-9a6f-3676005c1fb8",
          "length": 251,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "e978c474-35a2-4527-ba63-dead3f232d98"
        },
        "item": {
          "id": "6e2336b6-e6df-45d6-ad49-095d69881393",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "42dacf4e-1d66-47db-bcd6-08149fc9c0d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 585,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3630da65-76f0-4833-b95c-db816365e2f6",
        "cursor": {
          "ref": "6fbf9f55-dca9-48f1-b984-0a87b6edbfbd",
          "length": 251,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "1bc1d36b-c1a0-49b7-be0a-e50653b3dea2"
        },
        "item": {
          "id": "3630da65-76f0-4833-b95c-db816365e2f6",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "fc8c69ee-688e-44c8-8132-0d3ef3b77b09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1312,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "613964fc-6fc8-4d8e-b432-06564aea6a4c",
        "cursor": {
          "ref": "536a2769-8e46-4824-8a03-914a5c2186f1",
          "length": 251,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "ca2fcf77-1838-4e32-8534-c4d006aac926"
        },
        "item": {
          "id": "613964fc-6fc8-4d8e-b432-06564aea6a4c",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "8a71748e-0b85-4422-89a5-cd05c1aa7886",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 898,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07538679-0f09-4ffe-95c9-d7e9c0a7b428",
        "cursor": {
          "ref": "aebd5b63-2643-4dd5-a3a1-47b4ee09fa8a",
          "length": 251,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "ee101c2a-f658-4462-a84a-309a372cdf96"
        },
        "item": {
          "id": "07538679-0f09-4ffe-95c9-d7e9c0a7b428",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "8d608a11-7fea-4e42-8c8b-35a6577bef9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 447,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "438232f2-ae35-4d71-a2d6-ee83acfaa40d",
        "cursor": {
          "ref": "89c422af-3c68-41f4-84d4-b60e627196db",
          "length": 251,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "59e950cd-6556-41dd-847f-a2ce644bd375"
        },
        "item": {
          "id": "438232f2-ae35-4d71-a2d6-ee83acfaa40d",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "8686cb27-d7b8-40a2-9de0-eb38734247a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3145,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5185cefa-ce7b-4748-b4e0-9292b159b2c7",
        "cursor": {
          "ref": "ef3b16c1-3755-4c24-ad0a-7dc6010cf798",
          "length": 251,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "567e6853-23ed-4673-8e86-1ed969306c5e"
        },
        "item": {
          "id": "5185cefa-ce7b-4748-b4e0-9292b159b2c7",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "5181939f-1aa1-466e-be5b-7f81572514ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 277,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f23d0e31-a735-4155-a306-a5f92b2762ea",
        "cursor": {
          "ref": "5cb583c1-49ec-46b8-9344-689f44efda80",
          "length": 251,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "8800c368-ea5c-4a1e-bc1b-46b32c7853c6"
        },
        "item": {
          "id": "f23d0e31-a735-4155-a306-a5f92b2762ea",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "8becb370-6724-413f-bcf1-bfa0b0ca7412",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 369,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "007a0ac7-a69f-40b8-8ef0-edbfc3f99245",
        "cursor": {
          "ref": "74fc35a4-81ab-46e1-abf9-67c1baa95d6a",
          "length": 251,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "187cb540-6566-4e76-8a45-1210186ea641"
        },
        "item": {
          "id": "007a0ac7-a69f-40b8-8ef0-edbfc3f99245",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "2b3866ca-37b1-44ec-a8d0-21cadab66f15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1210,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20335640-6547-4d90-a938-8861d705c8c6",
        "cursor": {
          "ref": "ebde7017-9fbd-4598-8933-cce074625149",
          "length": 251,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "44616261-2065-458e-98c8-185d787d1945"
        },
        "item": {
          "id": "20335640-6547-4d90-a938-8861d705c8c6",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "28ea76fa-b712-4f2f-9a30-880eebfd91df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 285,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c8e4d83-37d8-4416-ad81-56e946221726",
        "cursor": {
          "ref": "3f140eba-dba7-4262-9c8c-4fc0946be388",
          "length": 251,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "00c8e78e-2d97-493e-abd8-ccb45c32b0e6"
        },
        "item": {
          "id": "4c8e4d83-37d8-4416-ad81-56e946221726",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "4ea55f03-27a7-44f0-a7f8-07c9390fd12c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 262,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac66523f-6039-49b6-88cb-15e26b84fb5b",
        "cursor": {
          "ref": "30a359bf-e1e9-40a6-829c-0eb17bbc17e9",
          "length": 251,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "1552d8f6-f276-4bf3-9369-8f98a1716521"
        },
        "item": {
          "id": "ac66523f-6039-49b6-88cb-15e26b84fb5b",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "1cd8a015-5e97-434e-9305-72e3fc1eb9d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17cd653d-d51d-4c00-8ea6-fe161013a0aa",
        "cursor": {
          "ref": "1c9a1e68-bbc2-445f-a4e7-3e383e50fe32",
          "length": 251,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "90c76d56-8e1e-46f9-ab0d-833d48bc3252"
        },
        "item": {
          "id": "17cd653d-d51d-4c00-8ea6-fe161013a0aa",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "f8e8eab1-8a0f-4bfa-80b7-b57097b49b31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecb3f9cd-b50d-4de9-ba59-0c3fbf5f376f",
        "cursor": {
          "ref": "c8b0283e-ec2d-4853-8546-6ff11e838035",
          "length": 251,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "d441a0f5-bf50-4a66-921e-6a5592b26154"
        },
        "item": {
          "id": "ecb3f9cd-b50d-4de9-ba59-0c3fbf5f376f",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "c081171b-0459-434c-9a95-d094dd0f874b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fca51ad-d668-41f5-aa6c-22cc739e3f11",
        "cursor": {
          "ref": "e9468030-f764-4d98-b24d-c2acbf5ebc81",
          "length": 251,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "e84b0014-c002-4167-bb27-719f2d3dd5c6"
        },
        "item": {
          "id": "4fca51ad-d668-41f5-aa6c-22cc739e3f11",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "9b325d08-5708-45c9-b834-694d2c3014a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 392,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "151aa346-099e-43b7-a493-9028da26de11",
        "cursor": {
          "ref": "fe05634a-51a4-4f9c-a1f4-e03bdfb70848",
          "length": 251,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "deef1f23-7647-4982-8442-f8fcbb586d65"
        },
        "item": {
          "id": "151aa346-099e-43b7-a493-9028da26de11",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "b1f648f0-a763-4951-a5eb-8bfc0f59b99e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d0b1d3b-8b6f-463e-abca-bdf893e91aaf",
        "cursor": {
          "ref": "fff99969-5243-464c-a97a-a518e7831aca",
          "length": 251,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "c0709847-6c81-43b1-b0c6-7812f5aecf7f"
        },
        "item": {
          "id": "6d0b1d3b-8b6f-463e-abca-bdf893e91aaf",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "69c9caec-a3af-47ea-bfcd-a6ab0b5ebb24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17f54c49-483b-44cc-8d9e-0d22f5ae529a",
        "cursor": {
          "ref": "f88f0cf6-5056-4077-a850-2d4771d33065",
          "length": 251,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "6f837775-a8d1-4667-abf0-de75c6e38eca"
        },
        "item": {
          "id": "17f54c49-483b-44cc-8d9e-0d22f5ae529a",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "54e6ac20-e07f-4100-9f4b-570306686bc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2adda1f-7f89-4065-aaac-5343c8c40d4b",
        "cursor": {
          "ref": "f3a019d2-5445-4518-b473-3f0f1edc0fde",
          "length": 251,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "4ec3efb6-aae3-47d4-b51c-63b00b93ca52"
        },
        "item": {
          "id": "b2adda1f-7f89-4065-aaac-5343c8c40d4b",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "fa412fc9-20cf-448b-aa63-9ba191de79d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb5d8c94-dfdf-49c0-973f-a60b6fd66652",
        "cursor": {
          "ref": "4f29e03f-cdaa-4ddd-a0ef-652b439128ee",
          "length": 251,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "e0680d71-5a96-4f83-ae80-9e9cc19f3c83"
        },
        "item": {
          "id": "eb5d8c94-dfdf-49c0-973f-a60b6fd66652",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "a43e8f57-6c3b-4a45-87d1-9160958a30f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 931,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9900073-a360-495a-b2e0-e2a929da7e4b",
        "cursor": {
          "ref": "4a3e1286-e4b8-48ed-858a-d53348f52a6e",
          "length": 251,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "3369cc88-62c0-4d43-9c83-557b1d3bc95e"
        },
        "item": {
          "id": "c9900073-a360-495a-b2e0-e2a929da7e4b",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "6a42e5de-c08d-4ac8-9ea6-ce51933293a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37e2970d-8eed-404a-a54e-576c7fc4952e",
        "cursor": {
          "ref": "f361a47a-8772-4bcb-8024-5b6a5a01c474",
          "length": 251,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "7240b7c8-cfac-471a-8749-c7bed0d84d0a"
        },
        "item": {
          "id": "37e2970d-8eed-404a-a54e-576c7fc4952e",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "e406a571-bd39-4a5f-bdc8-bc3e096289f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e79d4440-ac73-4cff-bc00-ee0ff3ac8d7e",
        "cursor": {
          "ref": "133238f9-c61b-4cb9-90f6-fdba9eb62692",
          "length": 251,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "0cc6bb0d-4cb9-4e9a-a45e-893beb07cb0f"
        },
        "item": {
          "id": "e79d4440-ac73-4cff-bc00-ee0ff3ac8d7e",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "504953b9-e47e-476a-981d-4e15a2d869c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e05d58e-6ef3-4abf-b434-0e087ab0a324",
        "cursor": {
          "ref": "05bd12f9-0c37-46c9-b146-ab196347ab7f",
          "length": 251,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "be18d300-efd1-48d3-ad01-ed2ca622a550"
        },
        "item": {
          "id": "3e05d58e-6ef3-4abf-b434-0e087ab0a324",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "e97ab596-d54f-42a4-bf42-e695fb4ad2d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6f99a0b-d5c3-49dc-9877-11d284c2c61c",
        "cursor": {
          "ref": "6ff584c8-aed8-4ddc-bf4a-8784455b90ea",
          "length": 251,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "dfcddec8-495b-44c2-8c57-f5598541c74b"
        },
        "item": {
          "id": "a6f99a0b-d5c3-49dc-9877-11d284c2c61c",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "79a294f0-1251-499d-bfd0-d64d8de476f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89eb140d-e46c-4616-9383-a8f832aa2e39",
        "cursor": {
          "ref": "51153d08-d7a3-401f-b7ae-91c55554d756",
          "length": 251,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "3c5de87c-c5ef-483f-b280-7621dd7db945"
        },
        "item": {
          "id": "89eb140d-e46c-4616-9383-a8f832aa2e39",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "3a5c7b81-b511-46d9-9801-191ece80873c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9c8ead2-ab22-47bf-889c-7b89d6652280",
        "cursor": {
          "ref": "efdd4fee-8297-4c77-b69c-46ad7a412563",
          "length": 251,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "7486c3de-9304-4330-86b4-ec305bdd55c8"
        },
        "item": {
          "id": "f9c8ead2-ab22-47bf-889c-7b89d6652280",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "3b4f2aab-ded3-4ef6-948b-aea2aec5e1fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "248c8b6e-3847-4d49-8e38-28d1bd682e0b",
        "cursor": {
          "ref": "90ade34b-294c-4e92-a3c8-94641883265c",
          "length": 251,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "37d07f74-9cc8-4010-bb60-ed1f7cb7b889"
        },
        "item": {
          "id": "248c8b6e-3847-4d49-8e38-28d1bd682e0b",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "28fdadbd-5420-4097-8ded-51eedc66cd6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "feb23fe6-20a7-42b5-ae2b-3e61a81cdfae",
        "cursor": {
          "ref": "b4dec36d-85a4-4320-8934-472130a2f066",
          "length": 251,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "3c65c3a4-af96-47bd-9af6-f59ffd67646d"
        },
        "item": {
          "id": "feb23fe6-20a7-42b5-ae2b-3e61a81cdfae",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "3304dd13-63ee-4f6e-9cae-d94f6f2c7027",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f27b8b2d-94e7-41d1-968d-68fa2d46ee24",
        "cursor": {
          "ref": "b4e7d5a3-15a6-4177-8285-d5925739f4f3",
          "length": 251,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "79e59b84-003e-423d-aaf4-b81e566e6588"
        },
        "item": {
          "id": "f27b8b2d-94e7-41d1-968d-68fa2d46ee24",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "6366970f-36ca-4333-861f-589a8733af20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "968b6643-aa5e-42df-9c70-1b3407741661",
        "cursor": {
          "ref": "9eef940e-a6a4-4bb5-842c-2df0531730a2",
          "length": 251,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "d4ef8877-94d7-48f1-98ff-bce88f07bc4a"
        },
        "item": {
          "id": "968b6643-aa5e-42df-9c70-1b3407741661",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "2955bd33-af08-4adc-8492-d3118e4b8e43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93cdbb3b-5c28-423c-8c38-bc6993de9e3d",
        "cursor": {
          "ref": "88144854-17d9-4c04-9c1e-9a8e155da172",
          "length": 251,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "502297ef-d43e-47db-a9cc-f4b94e5e850e"
        },
        "item": {
          "id": "93cdbb3b-5c28-423c-8c38-bc6993de9e3d",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "7b5dd18f-9252-457e-b15e-13d5ba9bb7ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d757c51-4cee-4d85-95d0-9cf21dc25a3d",
        "cursor": {
          "ref": "e64b352d-4377-41dd-a5b8-0aedffb2b53e",
          "length": 251,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "9c41cd60-fb69-482f-a0c5-8161a4652984"
        },
        "item": {
          "id": "6d757c51-4cee-4d85-95d0-9cf21dc25a3d",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "a1692483-eb7b-44ba-a136-dd996531d7e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "398e75f2-fdcc-4e8e-8559-7e67a4b2f1b1",
        "cursor": {
          "ref": "98ad186f-e73d-4299-a94a-ef46b6d61527",
          "length": 251,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "5251a632-51d6-476b-85ac-77df601f123a"
        },
        "item": {
          "id": "398e75f2-fdcc-4e8e-8559-7e67a4b2f1b1",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "a09b83b3-7940-4ade-af5e-07a438c49042",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47f59701-5dd5-47ae-8854-3cd953bdad67",
        "cursor": {
          "ref": "ec33a060-fec6-4f51-88c8-47f3b854defd",
          "length": 251,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "fa853763-a80b-4d9b-810b-76777aeec419"
        },
        "item": {
          "id": "47f59701-5dd5-47ae-8854-3cd953bdad67",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "c60c96d2-395b-40f5-a29f-d0cc020c28a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2ffb204-b7a3-43bb-a8cb-f6ae4f47a989",
        "cursor": {
          "ref": "f05e3497-a7e7-4674-b1c2-7646cc205e6b",
          "length": 251,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "8a90b8aa-2576-427f-afce-c08daecb70e0"
        },
        "item": {
          "id": "d2ffb204-b7a3-43bb-a8cb-f6ae4f47a989",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "b3f32ea1-778d-44ae-afb0-7473d5321e56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17980424-a497-47d2-b9a3-65262a137b13",
        "cursor": {
          "ref": "3a4f27b6-1007-438d-8d96-8ec073d1b90d",
          "length": 251,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "390c8e2a-3136-4380-b754-9844d32be7fb"
        },
        "item": {
          "id": "17980424-a497-47d2-b9a3-65262a137b13",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "c9ad7e4e-4402-4231-a170-0b4fab1536d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "461e3559-140f-4910-a420-c0e1a40bc3e4",
        "cursor": {
          "ref": "bbe080e1-d330-44e9-9d11-b01c3ab61162",
          "length": 251,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "1debcdcd-ce50-4c49-a4c0-57f40c0a8c1b"
        },
        "item": {
          "id": "461e3559-140f-4910-a420-c0e1a40bc3e4",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "f59ed5d9-176e-4564-aa69-e083085f042e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6de45efc-d728-4673-92cc-350d9db29150",
        "cursor": {
          "ref": "686a9036-6393-46c6-b48d-3c35040e79bb",
          "length": 251,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "a391b0fb-281f-4170-b607-2c30ad55f75f"
        },
        "item": {
          "id": "6de45efc-d728-4673-92cc-350d9db29150",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "0a69429d-fe7a-4f13-848b-ca73c431826d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be4a323c-5580-437f-a90c-cd0ec6f18fd7",
        "cursor": {
          "ref": "f7537ea3-0f0f-4f2e-abb5-b1c5ca71bd1b",
          "length": 251,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "88911e2e-f644-4a0a-86d2-93bb9d31c64c"
        },
        "item": {
          "id": "be4a323c-5580-437f-a90c-cd0ec6f18fd7",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "fb85a5d9-0e04-4979-ab42-bc544fcf1919",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88d561b3-fa16-46e4-9dd3-981cfe13986d",
        "cursor": {
          "ref": "3a3dd8bf-d01a-473e-a2cf-414a17ceff6c",
          "length": 251,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "90bcb880-d05a-42b3-8da7-bd447cf2bed5"
        },
        "item": {
          "id": "88d561b3-fa16-46e4-9dd3-981cfe13986d",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "f9e214f3-ad66-4b41-a070-fba9212ccf7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95cbd9b5-6466-4a50-9082-0ddb5973997b",
        "cursor": {
          "ref": "ebdf87ae-b64e-495e-a6d5-b06766045758",
          "length": 251,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "7c7b0df1-4847-49f5-872c-fe9199bb85d2"
        },
        "item": {
          "id": "95cbd9b5-6466-4a50-9082-0ddb5973997b",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "fc7a8df1-a00c-47ce-914c-35e1d664a802",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "926872f0-1a52-44cf-81d8-8e08bf1b581b",
        "cursor": {
          "ref": "65e88ccb-bb98-4c9e-9653-08b658798885",
          "length": 251,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "5814139f-3d20-4fb7-a1e0-f95996edfde8"
        },
        "item": {
          "id": "926872f0-1a52-44cf-81d8-8e08bf1b581b",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "af77685f-5e5c-4d66-8d43-353ae2c6e22f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 145,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7902900-9ee8-4d9e-88d3-44826458b87a",
        "cursor": {
          "ref": "8748c5c0-c19b-4df8-b57d-5ac1829ef2be",
          "length": 251,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "fd2675ba-3c55-47a3-b89e-ff56da1495f8"
        },
        "item": {
          "id": "f7902900-9ee8-4d9e-88d3-44826458b87a",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "7605f5c7-ef23-41ed-8b87-3d3ba2546413",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69b6dbae-4c96-48b8-b85f-81ec1053803c",
        "cursor": {
          "ref": "a4d0def7-509a-45bd-b021-521f89183524",
          "length": 251,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "f0b76de7-5d78-405f-a3c8-922c0b69955a"
        },
        "item": {
          "id": "69b6dbae-4c96-48b8-b85f-81ec1053803c",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "822ed834-6903-4059-ab3a-c4ba475fed89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ff02b1e-1e58-4151-9390-7d5db0ea6063",
        "cursor": {
          "ref": "fd2fab14-5ccf-4aad-ac69-e6526636167f",
          "length": 251,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "5380468f-9f38-49e1-8343-3816145f7ace"
        },
        "item": {
          "id": "9ff02b1e-1e58-4151-9390-7d5db0ea6063",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "57b10615-f06e-43a6-bb7a-ead72bef68ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72ae4153-0527-4628-b5d6-eec17c93b523",
        "cursor": {
          "ref": "53606cdc-4fe3-4515-b479-30d29767a9fd",
          "length": 251,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "98b62759-0b4e-4f3f-bd22-80dab91bb885"
        },
        "item": {
          "id": "72ae4153-0527-4628-b5d6-eec17c93b523",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "904600aa-bd46-4703-874a-d84cd3aedd45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36077c51-4076-47df-a077-89c3f3fb06f7",
        "cursor": {
          "ref": "855a6b32-749a-4a5b-9f0d-995f36b6d66a",
          "length": 251,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "a0132849-1b66-4ee2-ac0d-32a5ee1293ab"
        },
        "item": {
          "id": "36077c51-4076-47df-a077-89c3f3fb06f7",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "d3b4774c-adde-4945-95ec-9dad2793ba76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9819abf-57cb-4d4d-be95-0b45efd86959",
        "cursor": {
          "ref": "4835a316-6997-49c5-a0ce-f4259fb1c9e3",
          "length": 251,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "8578c930-d37e-4ad3-bbd5-f4aaac36eb3a"
        },
        "item": {
          "id": "b9819abf-57cb-4d4d-be95-0b45efd86959",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "16264029-4d0c-45df-bf2d-0c365494fa85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4966f42b-687c-4297-8ecf-7d96b3396bb6",
        "cursor": {
          "ref": "7575d6be-a90f-40e4-bbb3-52b9762f13fc",
          "length": 251,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "f9357af5-2571-4d53-8d09-c072e7f77196"
        },
        "item": {
          "id": "4966f42b-687c-4297-8ecf-7d96b3396bb6",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "b5922829-487a-4e46-abb5-bddf26366f06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d326bf6-be6c-4d2c-9327-0d6899fbb376",
        "cursor": {
          "ref": "3b66b770-36b5-4994-8656-2d2198e8cc94",
          "length": 251,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "1992c454-8941-428a-8d05-9d07f9bb20ab"
        },
        "item": {
          "id": "8d326bf6-be6c-4d2c-9327-0d6899fbb376",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "971fc565-7e57-4e79-a7d0-e2235f1f8ccf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4c1e1f3-b584-45f5-9b38-64367128eb4b",
        "cursor": {
          "ref": "cad21a24-1d9a-4c5d-bab1-52d6b8b2ab4a",
          "length": 251,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "89a4085a-34d9-4d94-9a62-f74eb621fa03"
        },
        "item": {
          "id": "c4c1e1f3-b584-45f5-9b38-64367128eb4b",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "e825f88b-bc48-42cc-b142-225acc60ef0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40cc125d-3c03-4a7e-953e-c4426bb4e5a5",
        "cursor": {
          "ref": "c49ab57b-8cc7-4b3f-8c93-e9c3fa332672",
          "length": 251,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "2b21512d-017c-4b7c-a97b-f3d09d38b565"
        },
        "item": {
          "id": "40cc125d-3c03-4a7e-953e-c4426bb4e5a5",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "3998b6e3-9a0c-432b-b9f3-08efb748887d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67ce224f-6f93-47c2-9931-53d233f2051d",
        "cursor": {
          "ref": "782ec350-fc6d-4943-9d2b-b63822fe2753",
          "length": 251,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "4d9e1199-f6db-449e-a4d0-f4e759e0c99e"
        },
        "item": {
          "id": "67ce224f-6f93-47c2-9931-53d233f2051d",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "ea2b2c0e-714c-410a-9e29-67c5ae34462d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a045ee5f-82fe-48e7-bdc5-0dc0d0e93ecd",
        "cursor": {
          "ref": "39d69de3-2c18-4223-a27d-745d19eeaf8d",
          "length": 251,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "32fd6a78-c541-4eda-8174-35665f4fd91e"
        },
        "item": {
          "id": "a045ee5f-82fe-48e7-bdc5-0dc0d0e93ecd",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "fa3bc549-3c20-44a6-87d2-240140de7c70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ecf5e7b-c68b-4339-8230-1f6606ec0d90",
        "cursor": {
          "ref": "8b55d117-df45-4cf1-83c2-598044713e88",
          "length": 251,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "118a8c43-4a5b-4ce7-a318-10599d296ecc"
        },
        "item": {
          "id": "1ecf5e7b-c68b-4339-8230-1f6606ec0d90",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "16a83311-66dd-4940-b701-de76e8d24e77",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 120,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "929c5a17-1e0e-411c-a452-ff99d00f6891",
        "cursor": {
          "ref": "02e592b2-0ab5-4c64-b156-1f48711408ec",
          "length": 251,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "c2cc3761-3828-4704-8cfb-178658e6d670"
        },
        "item": {
          "id": "929c5a17-1e0e-411c-a452-ff99d00f6891",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "55d8059c-dad5-408b-9f13-375ee36316f1",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 22,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2aaa358d-e294-4749-942b-d64f06edb6a8",
        "cursor": {
          "ref": "d4784712-2dc2-494b-83a3-6ad73d20b16c",
          "length": 251,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "3a3a3c85-c474-4c36-8f2f-1e691178c868"
        },
        "item": {
          "id": "2aaa358d-e294-4749-942b-d64f06edb6a8",
          "name": "credentials_verify"
        },
        "response": {
          "id": "c6a6994d-0225-40a3-971e-c130780fe3d1",
          "status": "OK",
          "code": 200,
          "responseTime": 1157,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a21cf10-c7ba-4262-8c8f-a9e0ee41412d",
        "cursor": {
          "ref": "eee689a9-9add-4acf-95e6-e3caf00ed03f",
          "length": 251,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "0658fc72-8916-43e3-a140-a154b363b30f"
        },
        "item": {
          "id": "7a21cf10-c7ba-4262-8c8f-a9e0ee41412d",
          "name": "credentials_verify:id"
        },
        "response": {
          "id": "9b956231-2f12-44ec-bb64-382d170d99d9",
          "status": "OK",
          "code": 200,
          "responseTime": 957,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bceec27-726e-4358-83d2-e55e9b19aeff",
        "cursor": {
          "ref": "be9bca30-7d1e-4445-87eb-1cf0b8a39e1e",
          "length": 251,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "b31575d6-32c9-4775-9900-559a11c66cc8"
        },
        "item": {
          "id": "3bceec27-726e-4358-83d2-e55e9b19aeff",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "fb66fd0b-e039-4479-ac01-2ffdf7fbeebf",
          "status": "OK",
          "code": 200,
          "responseTime": 2122,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "972e0f24-850d-4296-b74b-bd1c7606167d",
        "cursor": {
          "ref": "3e6a5f2d-fe4a-4fbd-9b56-3a041d8960f4",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "68e110a1-2c65-42c1-979f-553cf30109cf"
        },
        "item": {
          "id": "972e0f24-850d-4296-b74b-bd1c7606167d",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "1cc98c0e-d334-4d1d-8186-00e8c907bd62",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 140,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "972e0f24-850d-4296-b74b-bd1c7606167d",
        "cursor": {
          "ref": "3e6a5f2d-fe4a-4fbd-9b56-3a041d8960f4",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "68e110a1-2c65-42c1-979f-553cf30109cf"
        },
        "item": {
          "id": "972e0f24-850d-4296-b74b-bd1c7606167d",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "1cc98c0e-d334-4d1d-8186-00e8c907bd62",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 140,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "972e0f24-850d-4296-b74b-bd1c7606167d",
        "cursor": {
          "ref": "3e6a5f2d-fe4a-4fbd-9b56-3a041d8960f4",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "68e110a1-2c65-42c1-979f-553cf30109cf"
        },
        "item": {
          "id": "972e0f24-850d-4296-b74b-bd1c7606167d",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "1cc98c0e-d334-4d1d-8186-00e8c907bd62",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 140,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbae0333-c999-4820-966a-398c0ba52087",
        "cursor": {
          "ref": "b6eaabbb-c090-47fd-bc6a-c95f7e6de893",
          "length": 251,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "4d7eed42-8d7f-4d9f-900e-2fb8902b0ca1"
        },
        "item": {
          "id": "bbae0333-c999-4820-966a-398c0ba52087",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "020d521e-fafe-4746-899d-ee3bacf151b8",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 184,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d793974f-ff04-43aa-a0f9-0372d137eead",
        "cursor": {
          "ref": "eb4d12c2-167c-4f91-813e-84a2e05cc6f9",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "a1c85611-85ce-48bb-b556-e98c5038e973"
        },
        "item": {
          "id": "d793974f-ff04-43aa-a0f9-0372d137eead",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "c0354d00-ff36-4fbb-9c18-bb836277aad2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "d793974f-ff04-43aa-a0f9-0372d137eead",
        "cursor": {
          "ref": "eb4d12c2-167c-4f91-813e-84a2e05cc6f9",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "a1c85611-85ce-48bb-b556-e98c5038e973"
        },
        "item": {
          "id": "d793974f-ff04-43aa-a0f9-0372d137eead",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "c0354d00-ff36-4fbb-9c18-bb836277aad2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "9ae7a2da-6374-468b-8dd7-6e58f9288ef3",
        "cursor": {
          "ref": "f6f8579f-05ba-4d8b-b2eb-d8075f820889",
          "length": 251,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "3ffca2a0-5316-4550-9f1d-1856c6a3bfa0"
        },
        "item": {
          "id": "9ae7a2da-6374-468b-8dd7-6e58f9288ef3",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "8cc9891f-a06a-4ae3-af9e-113f03590c64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "90014708-ee3e-4007-8b7d-0b77d2f20087",
        "cursor": {
          "ref": "4454834c-efc3-4a2b-97b5-d92187c27f85",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "4e3f6d09-0882-4d8e-82e7-e841cb46564e"
        },
        "item": {
          "id": "90014708-ee3e-4007-8b7d-0b77d2f20087",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "d186245b-b7f8-4ae5-a8fd-10206a7a747a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 29,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90014708-ee3e-4007-8b7d-0b77d2f20087",
        "cursor": {
          "ref": "4454834c-efc3-4a2b-97b5-d92187c27f85",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "4e3f6d09-0882-4d8e-82e7-e841cb46564e"
        },
        "item": {
          "id": "90014708-ee3e-4007-8b7d-0b77d2f20087",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "d186245b-b7f8-4ae5-a8fd-10206a7a747a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 29,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "479e9fbf-7cde-40b7-a4b7-ddd681095894",
        "cursor": {
          "ref": "d12f1e22-1137-4092-af26-d9347ffd10ff",
          "length": 251,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "0bc867a0-8df7-417a-ab7d-3ec2ce8af4f3"
        },
        "item": {
          "id": "479e9fbf-7cde-40b7-a4b7-ddd681095894",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "965dc94c-1be0-41a0-a105-0e8fbc7e630d",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 26,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}