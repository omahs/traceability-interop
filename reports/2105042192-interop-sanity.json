{
  "collection": {
    "info": {
      "_postman_id": "5f758c01-00c0-41e7-acb7-d2e6a9b36116",
      "name": "Test Report Demo",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "4298fc25-8038-4661-a2f5-81b9303d4e12",
        "name": "Discover API Configuration",
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "identifiers",
              "did:web:api.did.actor:api"
            ],
            "host": [
              "api",
              "did",
              "actor"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            }
          ],
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "4cc0aee3-a19f-469f-84a6-830a1b151e0c",
              "type": "text/javascript",
              "exec": [
                "const jsonResponse = pm.response.json();",
                "",
                "pm.test(\"The DID Document MUST contain 'alsoKnownAs'\", function () {",
                "    pm.expect(jsonResponse.didDocument.alsoKnownAs).to.be.an(\"array\");",
                "});",
                "",
                "pm.test(\"The DID Document MUST contain 'assertionMethod' DID URL\", function () {",
                "    pm.expect(jsonResponse.didDocument.assertionMethod).to.be.an(\"array\");",
                "    pm.expect(jsonResponse.didDocument.assertionMethod[0]).to.be.a(\"string\");",
                "    pm.environment.set(\"issuer_did_url\", jsonResponse.didDocument.assertionMethod[0]);",
                "});",
                "",
                "pm.test(\"The DID Document MUST contain 'authentication' DID URL\", function () {",
                "    pm.expect(jsonResponse.didDocument.authentication).to.be.an(\"array\");",
                "    pm.expect(jsonResponse.didDocument.authentication[0]).to.be.a(\"string\");",
                "    pm.environment.set(\"holder_did_url\", jsonResponse.didDocument.authentication[0]);",
                "});",
                "",
                "// TODO: fix bug where did documents contain 'services' instead of 'service'.",
                "pm.test(\"The DID Document MUST contain 'service'\", function () {",
                "    pm.expect(jsonResponse.didDocument.services).to.be.an(\"array\");",
                "    pm.environment.set(\"traceability_api_root\", jsonResponse.didDocument.services[0].serviceEndpoint);",
                "});"
              ],
              "_lastExecutionId": "91a1eb76-7ae1-4ee4-9a7f-b8a3bdf1dfa8"
            }
          }
        ]
      },
      {
        "id": "6ec7350e-6971-486b-84e4-2ee05428a2c1",
        "name": "Issue Credential",
        "request": {
          "url": {
            "path": [
              "credentials",
              "issue"
            ],
            "host": [
              "{{traceability_api_root}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"credential\": {\n    \"@context\": [\n      \"https://www.w3.org/2018/credentials/v1\"\n    ],\n    \"id\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\",\n    \"type\": [\n      \"VerifiableCredential\"\n    ],\n    \"issuer\": \"did:key:z6MktiSzqF9kqwdU8VkdBKx56EYzXfpgnNPUAGznpicNiWfn\",\n    \"issuanceDate\": \"2010-01-01T19:23:24Z\",\n    \"credentialSubject\": \"did:key:z6MktiSzqF9kqwdU8VkdBKx56EYzXfpgnNPUAGznpicNiWfn\"\n  },\n  \"options\": {\n    \"type\": \"Ed25519Signature2018\"\n  }\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f72f781c-99e0-453e-9282-170d408c132e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "10e9144c-4b3e-45f2-a884-56d433891125"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6b45b4c9-74aa-4b90-aa43-519f3200c842",
              "type": "text/javascript",
              "exec": [
                "const verifiableCredential = pm.response.json()",
                "",
                "pm.test(\"The Verifiable Credential MUST have a 'proof'\", function () {",
                "    pm.expect(verifiableCredential.proof).to.be.an(\"object\");",
                "    pm.environment.set(\"verifiable_credential\", JSON.stringify(verifiableCredential));",
                "});",
                ""
              ],
              "_lastExecutionId": "cc968691-b436-41de-b33e-d896b610592e"
            }
          }
        ]
      },
      {
        "id": "23e9b737-ee8b-4b27-8612-a0d648964a14",
        "name": "Verify Credential",
        "request": {
          "url": {
            "path": [
              "credentials",
              "verify"
            ],
            "host": [
              "{{traceability_api_root}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"verifiableCredential\": {{verifiable_credential}}\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "45a6fe82-99d4-4881-bf3a-92a0c5e64105",
              "type": "text/javascript",
              "exec": [
                "const verification = pm.response.json()",
                "",
                "pm.test(\"The Verifiable Credential MUST have been verified\", function () {",
                "    pm.expect(verification.verified).to.eql(true);",
                "});",
                ""
              ],
              "_lastExecutionId": "c2ecb9c0-213b-4550-837c-69af0a68da7b"
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 3,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 4,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 3,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 3,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 3,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 6,
        "pending": 0,
        "failed": 0
      },
      "testScripts": {
        "total": 3,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 1523,
      "responseMin": 316,
      "responseMax": 2941,
      "responseSd": 1081.987985145861,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1649278504436,
      "completed": 1649278509107
    },
    "executions": [
      {
        "id": "4298fc25-8038-4661-a2f5-81b9303d4e12",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 3,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "def874d1-e133-4281-ae89-9a3693aa6629",
          "httpRequestId": "b10ae6bc-7d14-41db-a39b-286bb479e659"
        },
        "item": {
          "id": "4298fc25-8038-4661-a2f5-81b9303d4e12",
          "name": "Discover API Configuration"
        },
        "response": {
          "id": "91b20d7f-6187-4f62-80b9-d29a6b09aad0",
          "status": "OK",
          "code": 200,
          "responseTime": 2941,
          "responseSize": 779
        },
        "assertions": [
          {
            "assertion": "The DID Document MUST contain 'alsoKnownAs'",
            "skipped": false
          },
          {
            "assertion": "The DID Document MUST contain 'assertionMethod' DID URL",
            "skipped": false
          },
          {
            "assertion": "The DID Document MUST contain 'authentication' DID URL",
            "skipped": false
          },
          {
            "assertion": "The DID Document MUST contain 'service'",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ec7350e-6971-486b-84e4-2ee05428a2c1",
        "cursor": {
          "ref": "0b53b983-32eb-4c1c-9313-3731dd852b0d",
          "length": 3,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "063bbd5a-32ff-4b8c-97ee-4027443e0254"
        },
        "item": {
          "id": "6ec7350e-6971-486b-84e4-2ee05428a2c1",
          "name": "Issue Credential"
        },
        "response": {
          "id": "6bd1bd7b-8e6a-4743-b9e3-c297d0f4f30f",
          "status": "OK",
          "code": 200,
          "responseTime": 1312,
          "responseSize": 713
        },
        "assertions": [
          {
            "assertion": "The Verifiable Credential MUST have a 'proof'",
            "skipped": false
          }
        ]
      },
      {
        "id": "23e9b737-ee8b-4b27-8612-a0d648964a14",
        "cursor": {
          "ref": "a4eb9cd5-35b0-44cc-a00e-448878da446e",
          "length": 3,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "db9cdbc6-9646-434e-81e7-454035ab7306"
        },
        "item": {
          "id": "23e9b737-ee8b-4b27-8612-a0d648964a14",
          "name": "Verify Credential"
        },
        "response": {
          "id": "b841b3d9-df02-41ff-9b35-d90ad94b3bbf",
          "status": "OK",
          "code": 200,
          "responseTime": 316,
          "responseSize": 17
        },
        "assertions": [
          {
            "assertion": "The Verifiable Credential MUST have been verified",
            "skipped": false
          }
        ]
      }
    ]
  }
}