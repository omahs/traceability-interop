{
  "collection": {
    "info": {
      "_postman_id": "f5f17919-82a1-4db5-be95-0f985635313d",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "7d953ca2-286e-4a55-89b0-7909fd8d3583",
        "name": "Clear Cache",
        "item": [
          {
            "id": "00776744-ae52-433f-9808-fb5a5663b4bf",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d23c5652-d50d-4eac-8a19-5dcd20240c93",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "54d09320-64d8-427c-b9fe-a9e41433b69e"
                }
              }
            ]
          },
          {
            "id": "27f709ab-4222-44fb-87a4-719bd24cd9e3",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1dec0207-b3d8-4656-a373-71c3613d9f75",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "2b09cd15-44cb-4a85-9ba6-d32805d9ebc1"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "2c2d1fed-a2df-47bb-864e-5eec612a8db3",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "ae7926d8-9cc1-45f7-8c8c-afb77e19b5bc",
            "name": "Positive Testing",
            "item": [
              {
                "id": "23b98e55-8e16-417d-96f7-806d999c719c",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fd755487-82fb-48d6-8325-a1ba610aca02",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "40aea4a3-a105-4456-ae50-ff3922d2e17c"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "5c9f2735-2a47-4e34-8ccd-1d5c2ed5be77",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "42c0b4ad-003b-4ff3-855f-20e3d19da45e"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "fb12b908-77f2-4c20-91a1-438cebb0f51e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f3179efc-a0b2-4ace-8214-027b4f5312f8"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b9ef03ad-f724-4193-a138-8ed89899f41d",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "98bc8621-cae8-4fd9-9a20-bed89cb52102"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1dd59647-443c-4dc2-b8a4-819df8f0a229",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9af6f892-0dc5-4459-83fa-6b47e68b51fe"
            }
          }
        ]
      },
      {
        "id": "bde8a43d-8b6b-4b71-bf90-e63fa19956f4",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "36d8371c-74da-467c-90bf-c85d24eb3cca",
            "name": "Negative Testing",
            "item": [
              {
                "id": "042fe702-bc1a-43ba-ab87-cbeee09fee00",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "37e36444-69bc-4ec1-b72f-b8733ab0b4d6",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4562c63-75dc-400f-8021-466503f5f49c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d0ce8fde-b742-450c-a736-2506f86427f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43ffdd6b-8d07-4e1f-a4e1-d4744fb3b755",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13674398-5a4a-48c4-a8ca-aa523b241960",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "58eda457-0523-4bfa-b8dd-1bcd61bdedf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6ecc288-5535-4a24-8fda-b9f883ef76dd",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75cc7c89-6fa1-4121-b05e-862278f0f68c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3557e096-e710-4de7-bf2d-bad0855a45f7"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "ee174cd3-962d-4628-9d2c-cc424adddc7d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "17278cbb-ff3e-499d-8648-d2eac16e9173",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14f1c3e1-7990-416e-b14b-9b264fab5ceb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "186b6bd0-46cd-4325-9b80-a132a378d46e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f98d510-3823-4c17-affe-c542f91baf32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f564a6b7-746b-4611-991c-29ad3a2b7d57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb1014e9-1f12-4b1b-8f6e-e5b8a2f18232",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "feeb66ff-4dc3-4f56-8ba0-87a76cadd34c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e38a18b0-8926-49f7-9072-2aa65ddbef84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afde64ea-c57b-450b-8dd6-8583da7c5948",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "2b954d30-b58b-41f6-a978-60ca9510d449"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "61e8d4d5-5b9f-4729-959f-b8000c38bb44",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e8016c1c-4990-4256-941f-e0252f31c57d",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "86e70ddf-5438-4960-acec-593291621764",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "f0283869-9bcc-4469-aa6d-3fb2cf7efa42"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "94e0cd13-951b-44cc-ac5a-c82f91b9d642",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "c9dc8532-988f-4ae7-ba70-0b18914ff8c4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2524ef3c-fe03-413e-9e09-15bdc6ea7b1e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d9fb4c5c-24eb-4037-bf0b-d697192c021d"
            }
          }
        ]
      },
      {
        "id": "9dcd938e-ab9e-4272-bbe6-8157406000fd",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "f3bf3a01-3af8-4dd3-bff0-ccbca1fce196",
            "name": "Negative Testing",
            "item": [
              {
                "id": "15dd97ae-ddec-40b2-9f6e-b5a94b4204bf",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "dfd03dfe-d598-452a-b0e6-c2dc433981f8",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76cf235e-48e6-4f52-b969-a06e3a30a29b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7790bc7-e4c0-4a75-bf5a-99748adc7eb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcfd1676-dc77-4335-9c09-1c3b73c50f3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0aab815f-0ff4-426f-bcd7-a19d723518c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5aa358cb-3260-4188-9076-50c4dea2c739",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6822b2fa-973d-4069-8f71-d9ada110fbce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "653c83b1-f5c0-4da1-b169-e943fb2d265b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1f8730c-0510-4954-837d-e540040d4f7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6b30238b-b01c-41b3-94f2-121612bdb763"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47ad9860-dc9a-4c10-8a60-aa0dfa402cdf",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03928001-2e37-4bef-9ef9-f279f1dc802d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1317e46-8572-4148-b5f6-adc199590888"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72b04843-4ce1-444e-8382-b782a92be10d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bd288690-d2dc-4298-bd62-799249e1dabe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09583493-429b-4649-9175-dc5572c0f9cc",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d470372-393d-4c37-8754-71e7e85e01fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c7b2e1d-a860-4000-9968-f6730d3d8afe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42be817b-4f9f-475e-983b-0828c518f567",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b6b06556-92a5-48b9-b727-5707c7446549"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a77ecd4-cc76-4d1f-8bfd-c4dba00a6e33",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee582698-d11d-4b37-b445-d9b72bd8db08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1feb0918-7546-4402-8e34-efb8ceed688c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9e4d14d-8d9f-4bb0-a27d-c6c88c736276",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4aeeb368-0ead-4026-b49e-90502113d1a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d046690a-c1da-452e-8e10-30c8092bc874",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fd6a627-aed6-468e-8d3c-4a9bf0044ee6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f387300-e2e4-4d07-ba35-21ea3abbe9f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d09f9eb-33a6-4f5c-b9a8-4bc270ede471",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "32f932cf-384e-4012-959f-e67264531f1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5caba27e-bd03-4a5f-969d-c969e04ac308",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37a910a8-34a3-4f85-a4ad-d6523cde543c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bec02a0a-fa09-4be7-a17e-a7981a1aa1b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1bc6ca3-fac9-43a1-9ad2-0de1de5fdafe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "db25a6e8-c813-4c77-97f9-973ea43b33dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b76ffb0e-1352-4d63-a75a-0ba5cdf33d11",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbc66f3b-1b15-41bf-9921-c320e7a3bfb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8e3c89d-fecd-41ac-9820-5e6bf668c3e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d433b85-8a15-4435-8c53-3be4c022144e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2cde70cf-96e8-43d1-a336-d42b40d68eb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbc6b047-575c-4075-9bad-68885af6a886",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fad62a7d-b34c-483d-bbdb-87bca9b0042f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "598d0737-ad85-4df3-9366-5150919c467a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d24f49a1-4dfd-42e9-8401-8346814327d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1240243f-0bf8-422a-947b-bb2be7432cae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d512def-c50d-4aef-acbe-c83d95553a72",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f31cf0fc-da38-418c-bdc8-2efd53ed3571",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ff5f83e-59aa-4640-8c45-8844b98ecd95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16901a03-82d0-4a15-83cc-09bbff8f4808",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2616afc6-a7ed-4a5b-9b54-4382818cdac1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1220bd5-8bc6-4553-9f97-baec2ee10fbf",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb49e685-eb72-4ae4-aa49-3d68694d7eb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eab45557-8b45-48e6-bdd5-f4e36ffdc1eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16ab9d5b-98f6-4fa8-9d68-b937987b71c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "857d6071-828e-4a72-a827-3d4689e7a561"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1dd199c5-353c-4f8b-b33b-79bcd183cee0",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b4d7249-4f42-4663-81df-c5f4361450fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9ba9c6f-2635-4a29-89ca-2e497ac0b759"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e79163a2-dd45-4a72-abe9-a46d14ea1048",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bfdcf481-6391-4953-aa4c-731e4537c76a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "437acec7-aa44-46f2-a824-cdbc5116bdc6",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dc3e235-e9e5-4228-b307-9f4a5b619791",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a68a6333-4957-47ed-b001-8dae511f5499"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "243462be-3fb8-4001-9cb8-6cb5fe306a16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6cc0e984-611f-4d7f-af02-69ce46fc0e80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5d06e52-b4ef-4e1c-bf97-c9a38b069e10",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "141104db-f62b-413f-9ee2-f0c540f0d87a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a16154c6-ae07-4b7e-b893-9a20b703f43c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7f3170c-2d62-4953-8e9a-940650945c0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3a23aa30-41fb-40db-b0ea-449ed46ca8a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4be917ce-6df7-4b1f-974f-5be460f2a2d4",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cca2031c-ea46-42fc-a761-dde1a279a0c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db367089-5d07-4a57-8c4b-d5c562df01ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8855c9cd-f2b4-4a5f-98d4-6164ffed4387",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "78667253-7d10-4809-b57e-1d775eba2dd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b315d89-c6ae-412b-8b34-6fae55fb91c7",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fcab5b6-892a-4912-8316-909b74098d1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b829d3f7-2a23-4d77-b7ee-d27c73b0d459"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bafddbb6-e231-4bed-b9e2-375d2fe3ab20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8a588be5-c84f-4593-bd52-5cde7097f4e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ece379e5-a157-46d9-9bc8-e41b3671de88",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70717fe6-a808-4286-94ca-668fe9551f78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8000cd9a-3f44-420a-bd6d-7f44193f2fa5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4411ca23-2192-447a-bb87-4a25df17f40d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5fb8a717-3b3b-415e-85d8-728dda7a88ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3c02a98-1019-49ab-ae85-24e1d329786e",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "859565fb-1e4c-409d-82f2-b1394f846b20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "527b2348-2ea1-4de2-904c-9fed127f5653"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6898580-e7e2-4abd-b5e1-042158745543",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "600a9ec2-626e-4b0b-a268-7e7d9baead38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9030eae-1f4a-4491-ac58-34eb1c192efc",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffeaae80-c2b4-4a41-8720-8e1b4434678d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9426333a-7924-43e6-abb4-2fb920cadb9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b525c3ec-96e8-4553-8146-5a9e4e72cb4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fcd42055-87b9-4976-acec-3a2bcff16ac3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb7ebb0b-49c2-47ba-8e9f-e5cb2ff2cf59",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47787d0b-e719-4174-b4e1-37c89bd29a6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8794d716-82d1-49c4-9674-d31d95dddb18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3af8d5b-68f9-40a0-930e-ce31057c7bf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5172e592-3651-472e-86bc-72d270d19139"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46347b9a-65b0-46cb-b6a3-c081531d505c",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c9b1372-27fb-43f7-b9da-5bc0b042b7ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90aa2027-ac95-4834-b93f-f0c1f18a0db4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac6c4c94-e6ab-41b9-804e-a180679d5a85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d631ecc9-cf67-43a6-a66d-c75be3ba2efe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "353bad5d-b65f-4b51-9206-2549dbfebd11",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbc4c9fe-e834-433a-a652-3f16fe0e925a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa7b7b47-8071-4233-a276-2a8c09aeb7b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37a43a0b-260f-4689-b578-8b2ab4879265",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4eedd4dd-7ffc-4f5d-802e-b63a50f00323"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8124d1f-d404-48c4-9fc6-0e89d523636d",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90822214-f5fe-4c28-8d28-1c57fbdda7ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8f37bfc-a9bc-46f9-bd26-7c0dc5052cba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5772d402-a88d-432b-b0c2-4f5959886d43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ede7644d-cba8-4a37-b0cb-eca836bf48f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52d4448a-bd21-4b03-98dd-3772499b2e7e",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ee49a17-9d11-4107-8223-ab3f6e7b37ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82ff2c48-21aa-475e-b815-5ee4da0d629b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "849256b7-2fe5-4326-b59a-b03748863056",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "ad9cd1c7-3d9a-4c4a-b1e8-330a87c9bb16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcc6c709-6a16-4cd1-acca-31e39dc16a87",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "437036d8-a31c-435d-b4cd-41d3c6c8cfa0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0597aa1a-2f28-4bd7-93a3-12cb79e896eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "574534f3-32b5-4439-8170-f84bb7b1a3cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e4790fad-ee7d-41aa-a897-80570fb03468"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f2f7aa2-603a-432f-a1e3-5c1a3ae1f9df",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a94b2f1a-1845-41b7-973c-e961fbaeb2e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2fa82c9d-854b-40cc-ab49-850c153254ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58c533ef-00f6-4d4a-b964-3e9fbf2464c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f8ec22a1-9c12-4c29-ab50-66e593156940"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4ce3e4d-44ef-40cd-b707-dbdfd6e6a8df",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5472924f-5701-442f-853f-6697c98e68e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d99375b-0194-467e-a98d-f4fa7e58471e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d16d6dc5-426a-4700-9506-bbf87b213008",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1706bc8b-6621-4ecb-99e1-cd1728707113"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56ddfb88-0010-4e33-9d16-6f7a41363d23",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bfeb905-dd1f-427d-99cc-c27b246dd638",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89a7ae06-3015-44ca-8b36-93c63723ca4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16bc39dd-d3df-48f1-a4f8-b6c7c8c9bf77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1ad95f26-9df9-41f3-86e5-bac1cf213b14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d7faae8-f981-45b7-b87f-2054d1ad02f8",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "229f1e7c-8ba1-41f8-befc-cf3f41cdc4b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64aa1434-0c6b-44b1-ba22-9cda3cfaf288"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96cc1dd3-ed0e-46da-9787-a9780dc8473e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "61e0a263-9d82-4ea5-98cf-ecefc0088c16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33052087-d2a2-4e75-a355-0f04c3e6e1f9",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e895421-2c79-4326-917f-d461468e25fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05682ce1-386b-4a41-824f-ee2cf2cf26c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8a7da1c-8933-4f6f-9ef5-81bf47504700",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "5062feb6-dd1d-40a7-808b-5197602a4421"
                        }
                      }
                    ]
                  },
                  {
                    "id": "780d2380-a428-4f4c-b8da-8b5f6d9e728f",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc9dc12c-2f87-498d-bac9-bb3afce711b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "daec19ec-ece5-4c9f-9bb2-8809a6d36c98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea4d8fc7-bc43-4692-9db5-4abd8d6af370",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e3ebd806-e4fb-47cf-9554-f26d31f89b15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b798d3f3-6b01-449b-8d17-4b51c56fa52f",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e992ce6c-a46d-40c4-9973-5a9355711b80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7eda4285-762b-4ae4-a158-8ef469da5bae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9051f0d9-815a-40be-8d01-c0362dd946f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "34af4365-d92c-49b6-9b12-cf4a997014ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "379f4c36-4b2a-48f6-a2f7-5deb8de50f5e",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6edf4bec-0870-4bf0-8fc0-6f37cdb643f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "448a5303-3a4d-48ee-90d2-49a0b5d0a23d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80c375a3-a817-4d81-bdc7-0b823dc4b415",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8cf72d95-6eaf-4b96-84bd-72ac19176523"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52852b86-9109-4d2b-92b8-33ed97aa796f",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee1bb6c5-af48-4ad1-abbe-599bc29774a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa342973-2b1c-4f8d-8b01-7df6d14414b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69d5c0c6-7148-400b-9bae-9861798808e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2b924b41-e44c-4cfd-942f-004fbca6bbcb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47dcc5b5-9f11-4c27-9398-97b45898ca98",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "171e7df2-5003-45ec-80cb-07ebbe5b81e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09427fc3-9b94-42d4-a99c-26e42dbdbb1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27ee6878-0c16-44e3-a443-54ca0e11d0f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "64172a17-87c8-4a34-9a07-3c563a567f4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae43f737-eb00-4d89-b5bb-f5a97fd0f6ea",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65c85abb-509d-438b-9508-ae1ed7d09ec2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "81332a11-3d09-4efc-9dd0-60aeb8f2e816"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6356976-6d85-42da-9bc9-98df360d5ddb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6fb8e56f-5386-4336-862f-adc6a65d8902"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab243cd5-e445-4d8a-97f0-0bd5de685070",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51774dc0-3dd8-4884-9a48-0e73093bb91a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f43f2a16-0603-4cff-a474-67c3d5a299b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09b98865-6874-4dc5-86af-b8794ee68008",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "293f1ba7-f345-45c4-b156-90f28b5e8224"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa02e8cf-b4b7-4efa-b771-f55aea881887",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aed98394-bdcd-44e0-874c-4623a3f1d24d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "328105ec-e586-4b59-bb2c-221326b497f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65bed735-ea61-44f0-a0ab-e19d97244eab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "9dc9970f-1172-46d9-9375-e056b36c603f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b9a41db-ddbb-4ff8-8c6b-988b1147588d",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1eaad781-ab1f-4f46-93f3-f802da4dae0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7245989d-e333-46e3-adfa-84e49e1356ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "719e3d16-c71e-4608-8e19-80aeb2aec0a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "ef0714cb-e32c-403e-8f2e-7b63a1254860"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e169dac8-12d0-42ad-8670-0dd001690008",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9da6d0c-bb6b-465d-a118-9c8070adcd47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "678ed11b-976f-4cef-b317-67d09ebb4c6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0047cfa-c967-44e1-b55e-e58333109864",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "94d4e8c1-1063-4d56-832d-6d1fdfad1de7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04a68fa5-fbfe-414d-a5ad-bd50049e7df9",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "361ac94a-1c43-46c9-97a4-e4f0159aa609",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c791e41-43b6-407e-af6d-22b9b569ff23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6a2aa74-b775-4bce-b02a-2cbbf9fa118d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "738c85e5-2671-44f5-8507-4f5b741dd36e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70ef38bb-0c00-47d5-acf0-e9145fa28243",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed7eadeb-4794-4b8f-bf91-e0d4abec7776",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb2dd548-1644-434b-bb41-3684d5a0a505"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e70f9f5-568a-4d4f-8642-ebeae645a32c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "1168943e-86a3-4d99-addc-f391278af7b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "333fb37d-8e6c-4db6-8248-d356f4f7bbc4",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2262bde-2663-405d-99e3-be780b4467f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0509f9b-d731-482c-8ebb-2e5eaa3d99eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50c4c714-688d-43bb-82a0-1066016a3aad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "8621d704-be8b-4427-85b2-9033ff4eb926"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d37ce06-ee01-47a9-8763-bdf7e5fcbf37",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22d4e672-adf0-4eef-8860-645ca56a2d0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1a5f092-735a-46f2-8cc3-701a3391c30d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a90db99-1b73-44df-a2f9-11de79b97146",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "a1fa0161-899f-4289-acb0-0e7b9bfb2331"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3450244f-4459-43f6-a47d-7357de78b77f",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "396d1a72-6492-42be-98f1-334392ce644b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5059dc71-c69a-48e0-82ce-fdf9deee78fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a46ac864-f59f-4a8d-9e95-bacaa21c19f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "871ee2a1-4678-488c-b13b-ee8a97af174e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "882b3c9a-8415-43b8-adf3-39e535101cc6",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a1ae3d1-89ef-4c93-adc5-fb5657fca6df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57f51763-c59f-4413-8cd2-9c6a6986ef9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8132eca9-3a6b-4466-9c95-5fccf4f5df2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4e437c5b-e424-4d73-b369-6f1d4a2f2447"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fe17d35-d8d0-482a-bdf1-94a95df191ce",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45b3b5c9-cb03-42db-8451-b7d4101a188c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f234ad9f-db80-41e3-b1bc-190629296cde"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76c198ef-99c4-4cb0-baec-c91842a77d1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7f80d29e-d09d-42e1-a232-337033470fb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd218b25-3faf-46a0-98a7-4cfa9311e7fb",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1c5e5d9-253f-4657-b518-0d58d9d325a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa4dd250-756e-4bf3-ad38-8a72e9f9bf9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdf2799b-bd0f-48e0-bb02-fd5a1f3edbc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "68779a96-78e7-4be6-b503-b993dcc5023b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "582f0b4d-bfb2-4f83-9004-c89ae0a1d008",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e70aa7d9-f6e9-42d5-8bcb-ec610b637406",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2db3b66d-e8b7-4ec7-9924-d22532fe91d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9945279e-1167-429f-93b9-6a9526279692",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "070c9e7c-5411-4cb7-a7bd-d8218a5df0e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "899a8697-016c-44a9-baf3-b740b5da9321",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccbf0c7b-afb1-497a-9be2-2330a61a4d07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c042ad5-7e68-4fd1-9c72-b9fffc607de8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bf1c286-cd9e-403f-8394-9f3da1a1fca6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "83c2253c-ad66-4142-90d6-b181eca1be93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5f292f3-a9a5-4789-9271-61d30ba9538d",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "063dddd3-b319-480a-b532-c46ffac18b89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb901043-3f8b-415f-9c27-42e6ef1ef12f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83fd987a-ec1c-4d38-91fb-166e582915ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "efba9875-6e81-484e-a078-e75540f19378"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4447a914-229c-4e41-bf2e-efadebed23c8",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8810dbb-c74c-495a-acf7-f644356dd468",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "deaea8d5-1d1d-445d-aede-56a33731ca58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fdf47d8-6f57-4bf2-bef4-5cb5edb5f307",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6cb1d40f-d693-408a-a871-c0d4e76477da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1cac0e8-102f-4965-8569-730163ff8bd1",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dc9b5be-7c0a-43f1-b880-039a43a68e8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b6c710d-c42a-4178-a38a-d6b30bcb793f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "453706ee-0cd5-44ea-ae26-e9442f8b08cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4acfccc5-9de1-49e3-a377-e0d1a7a784c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf359a8f-20c2-4937-9d2c-2b4a7fc16aac",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df305c80-c260-49e4-ba94-5e521bb85a04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff630b0b-183b-4e0d-a78b-4e4498219853"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "376e23f8-5957-4e89-8e9e-be9adc924cc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4c24aea6-2a2b-4d18-aa82-39f0800a93e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8291d625-ec3e-46ab-9de7-f36b21533a1c",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ba8d152-493b-4d5a-a3cb-b7f35874f20a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ec310bd-c632-4c47-9a92-95f30e00bbf6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb2fb181-8189-4a89-a6d5-437ab83ebf79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "451bab5d-6415-49e3-9058-372d369a035f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd1a2d7e-e1b5-4b21-8e88-7122122e381a",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c378f2e-897d-4fec-8474-36d853b114aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ea0b5db-0965-480a-9fab-0fbc68cca7e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "073d9860-1061-4f6a-8f9b-a9c336d889ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "eb7363b9-f03e-4d1c-8958-d1747cbf44cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1e02d20-84f0-49d5-aa8c-4f0f4397f4b5",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b532d26-0db4-4261-aef7-4e66a1116f11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7901d3d7-f8e4-4bef-b4bb-88042592c986"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f566021-1bb8-4757-9592-46cecb928d95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "eeb4bd88-98d8-440a-a647-4ad4953e3d60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "843e7684-cf3e-4ccc-87a4-766e65c956bd",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "acc8e483-eb22-4d29-95f2-10f12e05bb01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41937c65-cf93-4c98-b818-645d41dc9e46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bc4adf0-e123-40ff-8281-0b8638454f18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "ded87375-30ba-46a4-8400-3f203024143f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da01255c-2a4c-4af1-9fe8-33fde8982977",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44abf9d5-ff21-4e79-b3fc-c8215e48afc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27e66223-b051-4ac6-b56a-cc75cfb4481e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ec366f3-38c5-4fb3-b27f-2b2d62d27735",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "ccbcce03-39da-4c5c-8627-ba95eb75aeee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c4d4054-75cd-410f-ada0-8fc7eb547e53",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc7f7eaa-4ac9-4b25-885f-c659cddd6d14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "989e50b1-cc2b-45e4-bb22-1eeb95d37725"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1011ed5a-c3b4-4812-aa27-93a8b882ba44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "06018951-7c05-4c57-8bb4-9a3a7e6ded98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e419bd6-c4b0-4ef6-aee9-89968789ed83",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9bf8745-6115-4f22-80ee-0d0d292e3ba7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "270c892d-c88e-403c-a9dc-65ad5b42a09f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c528b500-c825-4e21-8017-58be05827fb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "b7673ed7-3bec-455c-96e1-1c5b63c4f45b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fa0a2cb-078f-4bf2-a0f7-df45d4034b04",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0ef0101-4d0f-4301-a0df-97a4cf080cad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f10328c8-795f-4c4d-8125-1e8778d76bda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34cc46b5-3c7a-4b2d-8a65-27d7fe0fded2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "1a345f5f-eba6-4757-a252-fe15904d3dd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "338ffb98-f392-4670-ae21-bdf325f17229",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8f400c4-31eb-4713-8877-bf656a1a968e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3114faf-d2ee-4d87-b537-aacdb6d2514b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4e1d3d3-a235-4d4a-99de-1908924498df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "17a9860a-af2d-4abf-9e44-b72a00d7394b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87dbb2a3-b197-44b7-84e6-f437780c52c9",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2b2cc90-593e-4cf0-b6cd-4b6f74996c88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d3869b6-8cfe-49ec-ae55-3e10c1891ed4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93c8ac6b-8b53-409a-8dda-35f994d52c38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6e4b29e9-bc1f-4b1d-84c6-bdca7eef2a61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a461111-d798-49b1-a4ea-a201358ba946",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "353ac914-45c5-441b-9349-9df532ce005e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e171add-b9af-4782-baf7-11b965e3f3d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "696fd42f-498e-46a1-a71d-751ef49d33c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2ab6324a-dc99-429a-a2a7-3181733a5bcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc9d109d-c923-49b5-a7bd-70126850fe04",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21c1953c-d3c6-4841-9fb7-04b863ba70c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1115a43-44cd-4db8-bc90-f81316448cf0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "947cbc54-578d-43d8-9297-3f4682610e8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0a95d7d8-22a9-4215-b0da-eb6e6228c3db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0033c07-a461-4776-a9d6-a7128b0be0d1",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d73b235-cd85-4c0d-b597-cea751e72319",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7cdbbfc3-2f6f-4314-bc71-3ff179f5c9f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4eba8b25-a607-433e-a169-80fa87e36f4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1aa040e3-eba8-4c90-b047-a216591272be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70b8b9a8-0152-475f-8827-12c6c3b83410",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32da0f57-4a3a-4b51-a9ba-3b676cfa12a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4dceda9-9bfe-437b-a398-ccec7458e95b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a222f0e2-5eef-458e-8f35-a49940050289",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "3b0bf51a-1ef9-4b62-8740-27a3c07bc580"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ce34c5a-b819-4121-be22-45f485716225",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad0182d4-260e-431f-9c15-d809c5d3b3e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "965e0725-4a09-4a57-a776-8c3eafbac49b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f15019b9-faf6-45ea-a341-23288c8d63e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "f8f225c0-920b-4f9c-880e-06bba825240c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c19f2120-97b5-4609-b254-9362a4fc51a2",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f565ef4d-f3bb-4d5b-a8ba-2fea4b05282e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a7c95ae-d7e1-4c08-a6c7-040b022c3522"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d92ed09-78a9-4b61-84cb-ee8602269a5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "05559938-76da-4fe0-ad7a-93d8638d96f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2d8a576-5d45-4e53-9a79-2821eaa417e8",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c43d181-ca34-466b-9854-37ab22181a23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f803d79f-5462-453f-bbaf-2dd708b21425"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f18a474-f654-49a5-8595-36c43a9d9265",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2f84c768-4c48-489d-b3f6-6dc9efc012af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e753dcf-6fdf-47a6-8a77-5727f4d475fd",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "226cff15-4569-4f29-9bfc-4bb3fbb41a27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "883d7778-70a7-4008-90f8-9016be22f2db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6eed79e7-36c0-431f-ab41-75db5a22e30e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bdecc28f-8fcd-4f1b-985b-65a381a6dae4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "029f1ffc-4863-4e1f-821f-01cb7549ce58",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b09b4d45-a53e-420e-b87b-cd60059781e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4cecbb2f-673d-4559-b2b3-fb1777e21dd1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72bf8b5c-b02b-4828-85bc-8e0bd91026a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "91a5d8b7-c212-4140-b022-5ab1ed9a5c2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20b7b678-2ef2-414c-8d84-68591e586813",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fed5c46-2403-4e2d-8743-32118ce26e00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad3ddc23-03b3-4e06-82e8-be53065916f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06fabda5-33f0-46d0-84b3-b94f252d054e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1884d5f4-8759-4634-869f-0a1eaf0ee5da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce62595e-3ca8-4d97-956a-fb8fc1c2e5fc",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a149bb3-9190-453e-8d12-843c6b5eb896",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e91d471-a39f-4311-88bc-ba324dcd14b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "241e95d8-2291-4c85-91cc-d2326b183b60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "5bbe41c2-2a48-466f-9425-d360511b55e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb881716-61e0-43ae-a133-b1d736ccfccb",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c32e5489-bcf4-46b8-8843-2a054b4fc851",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82c5365b-af79-425d-bae6-005c3268156e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48932083-2470-42f4-8cba-dc120badb7c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d919fe59-4dcd-4e2a-bbbb-7ecb1c7ae900"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45f11a51-cab5-428b-aa75-267aa5b1aefa",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfe82264-aad5-42cf-a919-edd749fa1efe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebbc459d-b155-4667-ac8a-f2c9b60e39ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9aca06e7-f73b-4225-ab2c-6cd49227ea7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a0dbb93d-64f2-460f-8119-d0672a22a9ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07941b34-c215-4413-ba71-8267e5552b53",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f60b2ff9-70fe-485a-8a94-30b733986448",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf3eb058-c6b5-45ad-b8af-9c1b9a2f8ff9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b3e48af-dc84-4139-86e5-7577dffdaf0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "eecb42f9-c48a-453b-8744-d342e9959af2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3775e14e-0632-4b7c-9a81-222778f32655",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73d9b3d1-7a47-4ae0-93df-52e1974fb60f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47ceb053-4a30-4dbb-a3a7-fb52c2f5e0b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7abf7a32-3842-4384-b4a3-92113eb20263",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c6901167-3512-4322-b133-a50402781661"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b7e23eb-ebd0-4454-b834-58832d7da82c",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15ad9b8a-d379-465a-ba7f-9224459a11e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5043f39a-114a-4616-a10e-d12f27812517"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "153fa5c7-a565-4747-8d3d-7937873f6cf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ce6c24ae-54a3-4eda-82f7-e367add0d482"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0e5e754-c2f7-4562-94ae-d2c3624b691f",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8608cb2-724f-4365-b9ae-245c3c87bbfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e4cfb30-903e-4500-bc23-5cf6ad5f8f7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef2d6fcc-7bb2-4dec-b2f3-68702a80b827",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "6c2eabeb-4d1a-41f8-8f94-e4f7853bf5da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82b502a2-5123-4ee8-b786-67a859f39148",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e8ef905-691f-4938-bd8b-b898cf6df344",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2cfc9a4e-0368-4bb8-bf38-76fb400d6880"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b6448a3-7343-4de2-b787-0b922949eba6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "eae290f2-5d8d-4a67-bfb7-785254170a90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f67979e-aab4-4566-a135-9304406a4322",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afd4cc8e-585f-4142-a8fe-b728c85ad435",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c523618e-21e2-4d7e-9f3d-71230aebb0ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69708fbc-5bfc-484a-926d-74152328b013",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "15000519-1207-42b8-91cf-9d5fe5326d8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59f500a3-8776-4057-a6c1-954130aee758",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96ce769f-203d-494f-8805-a5aec343e413",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1976b8cf-506b-4fc7-9b51-e460399507fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43c87fc9-785b-4f5d-ad92-73a9c63a2749",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "741b1634-42fc-4863-82f8-3ad00133c9d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d283636-ed3a-466a-9799-fd327b9dc04d",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c413dc4-1a8a-4556-8b51-97b1e6c9148e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "839e4afa-0aeb-4ca0-af68-c7b0f07c5755"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90c2e606-a3de-478c-9c09-8841867162ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1d79a171-aa1e-4022-ac7a-f4eaef966612"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68994af0-c6b9-43da-9909-398acb7f5eb5",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4d26d55-9ae5-42ab-9138-08ea864a5ff7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c76dc62a-0f0c-4f4f-915c-3c1112a88f9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8c34f27-9461-479c-ac84-48fd082e93f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0965986e-22fd-4879-b8c3-96c449204e3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2131f462-76c1-478e-b8d7-9206aeb98f23",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "751256ba-8dae-4206-a1f9-070d37745fd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b874775-8292-4c5c-888c-02ae28e0c5de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03857d70-ddd4-4418-8a9d-afa41c163d78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "53b01210-e1f8-406c-ac43-41448b004cf0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b47504b3-bdf2-41e9-b3cc-42995c5c5d25",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "419c6357-67d7-4cfa-a417-9b697033c665",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "815b5cda-8482-42e2-a407-10010ad81ec8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c758d43-d167-4797-92fd-99dadb00ccef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "df49be69-57b3-4acb-85ef-5be150a7cdd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e8cd2ef-6658-4390-950c-24358804564e",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb3465fe-171b-4e16-a400-3960219080d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bfeb5b97-0f5d-44bc-987c-1644a438aa19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f3f18eb-1186-43fa-a28b-398c2e9a97dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "83c9f912-6d61-4f53-8e8a-c1cbe0b51be0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d404791d-a532-404f-8d69-af00f8292a8a",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a7e047e-12f3-42d3-ba7f-22759b7618c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "317ba62b-1cc2-4bdb-9de1-d5a27d89e0f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b57c3190-dae9-4614-a342-8ca6b50b6659",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "0eb7cdde-7625-43b0-81e8-ac668d6fea84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "969aab4c-688f-43ed-9f2a-e99cab9d5e28",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "481fca0a-638f-4451-a967-9c6af1a20843",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "863e2683-7acd-46bc-8857-46b9a7448102"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cfe8fb1-2912-46f2-a03c-004a17cdfdc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "619bbd85-253f-451b-88c9-5a5d20b881bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8dd1e015-78db-40c8-bf8b-83c0bbb217ec",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b648223-9323-4fa6-9acd-94d7ff24338d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "08f330fe-826e-47a4-a069-9d24c698161c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1fab44c-9d30-4023-9682-33beb4f1e8db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "546578d4-f776-4b96-af1c-43f6f0217b91"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "99116f1a-4def-44e4-aa80-c73627a46458",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "699e2722-18ca-421a-97be-2d7813fdd6f8",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7ec02dd-1da7-48be-970c-8bec0ece5d42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "df4ba3c0-feaa-4090-933a-5df22cf4dddf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d803661-23a2-4c14-9990-983df0abb644",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "cc60e6a7-7153-4891-8e0b-20e1ab9d11bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e70a85a-68c6-4c6b-865b-9170db898097",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b1d8711-e1d0-4c7b-acd2-3bf46c2e1aad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ff3ebf11-732d-494d-b9e0-d052ad684a14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b622f75-5ca5-40f3-9e6b-4d6d7f0c62b4",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "c5b8e448-ccd7-43d9-9f8d-202b412cdfcd"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "56c6c50b-517e-4960-a683-306af4a2ce0b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e0d8cc4e-7805-4aa5-beef-758f6f5da02a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0fd6f802-0c96-4aa1-a451-0d2fe358cf81",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2fe1c663-1e3f-4f30-8ae4-1aab4bee81e0"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f5fdf7c4-45dc-46c7-a639-311237497c48",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "542485c0-f471-48c2-8c0a-e38f8ce0b61b"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "6c32adb3-0275-4b02-a170-45c80062198f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5b4c2e6b-084f-4433-bf97-c69b6efdc533"
                }
              }
            ]
          },
          {
            "id": "30225e7e-61a1-4563-92ae-cac24adcde1f",
            "name": "Positive Testing",
            "item": [
              {
                "id": "5aa3230c-a6e4-4e99-8c10-9cba3feb19d1",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d63c808a-ac92-4cf8-8c75-58057e9f71cb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json();",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json();",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json();",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "94b85e3d-97a5-4d62-b629-b2a9848487fd"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f758b267-e768-4ca4-9756-1d06ca2ee9ed",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "bdf0ac6e-203a-4806-89b1-1da050787546"
                    }
                  }
                ]
              },
              {
                "id": "72d017b7-0608-497c-8599-2855b24ca961",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e5d8dfa8-726b-436e-8485-5df4ca6ef96a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4fe1a03b-df9f-4b46-9dff-c3fa2b3e71ad"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f079aa2b-8c14-4963-9829-d43ae0b8faf8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "49714fde-2d5b-48c6-8a20-dbe0c6b8515b"
                    }
                  }
                ]
              },
              {
                "id": "b58e6e16-de1f-42af-bcff-21b09d269885",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d0179ff7-bc02-4990-bf10-76de860bc25d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1991a2ce-bd9f-447e-a13f-fa3833b2e27f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bf0d883c-240f-4a4a-93a8-5117e813b7fa",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "0b374ffe-197a-4b52-aea2-25a63c095f81"
                    }
                  }
                ]
              },
              {
                "id": "aede904f-3ccc-481a-91da-2b188ae6e1d6",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a6ba395f-7d95-4bff-b936-980dbf61ef27",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f8ff1d3a-e6cc-4f8d-b04b-8bef38b8ebab"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5df36bd1-ea04-493b-a920-0d94d20ffc56",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "47a33d3c-e7dd-43bf-82db-79e13bc8e1ab"
                    }
                  }
                ]
              },
              {
                "id": "c8ea3ea6-3bbd-4e80-b4ee-74899cfc1121",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d2a6de37-fc8b-4611-be33-db8c6443ee98",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ee17233c-6717-4d6d-a2c9-a44b05c19eaa"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "db91cc72-d93a-44fd-886e-c0c8bd121338",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "5d85e619-a583-48b7-9902-c4c771522388"
                    }
                  }
                ]
              },
              {
                "id": "28f12b52-af56-4ecf-a283-0374bc9f0ad6",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5c4844aa-ab28-42c6-ac55-0e5d91853bb6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4b9adcd1-3132-475c-81f4-b5b538e35018"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "38f49547-338f-4abb-b33c-cc62fbb7755b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "063cabd1-ee19-4297-b06e-5a436ce04c85"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d39920e2-0a0e-4fcd-b848-167b1872989c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "93f8d03a-cd70-4717-82fa-8c24b5e03a33"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "2eae2154-06f8-4486-bcf2-97ba0d38f98a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e4750507-e5b0-418c-834c-7e2393c5a2cb"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0b5376c7-1ee0-4cf0-b1b1-997396db21ed",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "65abe825-30ae-4ef6-9460-6f296fafad84"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "00e2bc44-f820-459a-82b6-979fbf9ab149",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0f8f0b33-bf61-45f3-adf4-fc1f482efb7a"
            }
          }
        ]
      },
      {
        "id": "62cb2faf-cb70-4a22-8fa8-7d8d85870c56",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "a062a642-5191-46ad-9019-4ebfbfc86fa3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "83b9e7f1-0c17-4ae6-a597-9c74f0000578",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "e30ce5e8-a9a5-40bf-a451-fd99a78bbb12",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ec8c256-cafe-44a3-a8e1-6e0d7eb6ddbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04ea97a4-63ba-4b9c-b102-c738aa52db0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2451166b-8409-4720-9702-ad1b24fa118c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "674e26f1-a1e4-4a17-bbbb-9396884fb382"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbc86531-d789-4169-b4b0-1f4f63bd9e7d",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63f8b4b7-bd10-44d8-a204-eef5a927eeeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "707ad20f-6817-46ad-bc5d-7994ece717c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c076b10d-4538-49f3-b2cc-1e406501a117",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d6837e06-764a-4fed-a308-85f33b8f833f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "361a05b6-e98b-41f1-a363-28d1e1567d88",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e819857-033e-4fe3-bc0f-fc87ab2e3a33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8968af1e-7380-4b2a-a8f1-876c4d66a85d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b18839e5-2b9e-4deb-b5a0-265dc4f5295f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8cb22ddf-82d0-4319-9bc5-b561d9db739f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "922ce51a-55bc-4dab-9357-1c5585efa216",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bc09ccc-cdc9-4097-bd0d-963a8e2cf6db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f77f6612-938a-496a-a188-d860127f8040"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fc66c62-8536-445a-b787-eda0874ccc49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c3347aea-7dba-47db-8bc4-020a8880261c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65b101b1-09c6-499e-a8d5-647496aa254a",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b6fdf1e-08cc-4ff4-a410-98b7d6259e03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82fd831d-1a27-4b30-8883-62744e709860"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd2f1b13-308d-4e60-89ea-6523620ca61e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8a1dc4fe-c14b-4eb5-a7fd-79ab0c3a41d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c7a5a64-30ed-4290-a93b-025d1c75e11f",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "967c4ed7-6379-4c5c-bf4d-a2c3b02b39b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f358b7e4-a5d2-437a-95bb-85032055b666"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a2aef71-7fee-42f3-9dd3-a1ee66f5f7cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "735689cc-800d-43e7-9da4-2049b36de669"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4680c4b4-8c1c-4e87-9a17-2d814a044d19",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03c5db65-cc7a-42d0-bccb-dfb6ce96a7b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ffc0a31-44be-41f5-a3ff-e5c41d2e29e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27f5efc4-e01d-4645-a992-f7893400f578",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "ec0b458a-5c03-4f45-a120-66142e12738f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1832e33e-787c-4a41-87b8-9ba2704aa393",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20ffd1d0-d5f4-44ab-b3b4-062a77de2cca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f764ba9b-8ada-4459-b05d-527124875a7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3d79afe-f5d1-4497-968b-0e32957c4ab0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6af3fab4-b4ae-4a28-b58a-8a7b5bde743d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e3ab121-ba4e-4c9f-976d-cdf950879785",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68fafd02-94a4-4431-bc6a-775217e69dbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf32dc98-4ea5-4993-aaa5-0bb1ec9f325e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1864cec-8426-4b46-9c29-ee9514b45f0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a54780cc-51ac-4d76-a43c-6bd19c2a970a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "400abb96-7c2c-457e-8773-732bc1d469b2",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0de4364e-fd1e-461c-a5fd-32c96d72f1ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10053864-fbc3-4b84-b511-7c70dd7a8cf4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e79ddb61-c0e9-4afc-831e-e81a00f799d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e98811ec-8f86-4692-9e91-5979176eed01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92cf46d8-da13-45f0-ba7f-5eba062db3cf",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "391bfbd3-ccb8-4f2b-af66-1760ee0790c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2dfb8d82-2085-470f-955b-ca94bd354049"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86ebfb09-13c9-4dde-93ba-5f2ff6662c10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "81c470c8-6a6f-42da-a170-485ccb71362b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c36652a2-8489-4126-ad22-c793dad5fa7f",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc0f423e-7f29-4a46-ba95-b787375ac349",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "951d692d-6242-4721-99af-fd8458e3ef09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb82cbff-4968-4cb4-92c6-b31f078b48f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b6361ecf-db40-429d-a662-adbedfcca33c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5dba328a-deae-4293-b7c9-804290ca6c19",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "469bc634-0b8d-4f8e-a16c-7695e18a98ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "760bde85-0a6c-4b6c-aa6e-556aa8a708c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cd8e7bb-cf5b-4964-8419-752ef133658f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8c3a3a7f-954a-4448-a5ff-7742735a37b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7faa75ea-7af9-4e32-ac2e-bff824dca2a0",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed97c1cf-b222-46d9-8162-80fdf04991cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d964ab4-d2ba-4630-af1b-257970465d8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b964d61-5def-422e-bd21-59e5aee5f07f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "46c3e96d-07d4-494d-8ec3-957788a437d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e4728f5-9726-4e1c-899c-9219df2576da",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1c7e07c-0a80-4fa3-8b78-ff62d39952b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94b5b437-3cbe-49bf-bf4b-8db9a122e823"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3eebc94-4a3b-4df8-a12b-529e9a628b6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "a873bdcb-7129-4b62-a385-50443b335708"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5469af1a-b16d-4cef-91c5-c9836c4ce215",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "385ca295-8a47-4af0-a91c-cc36819b3b4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bfe1a3a7-610b-478d-9f12-c0c1c86727ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fd096c9-54d9-429d-8150-7d9da007dfc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "ff3b8dac-1995-423c-8618-4aa0a84042a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2380d121-864d-4481-9d86-71a17048db5c",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3a6bf30-ac2d-4ae6-b937-025a687b3dd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "377a5fbe-4e11-4bad-896f-ebe04932a43f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbcf149b-a818-446e-860e-2dfafceac21f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "78f9eca9-64b8-4903-bc5c-0d5323e23a52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dce4e8ea-6c13-499f-8730-1b8ce9935de0",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20f14b6f-8f4d-48ce-884d-54271649ce72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a3a36df-ce3d-46d4-8752-b8ed862b090f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c913858-f592-481d-9c9b-e261bfd29eff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "54fa30e4-5e7c-45e9-9e38-1348d28dd50d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51cf0b78-469e-4931-a540-85bc5d8e02b6",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75ce2225-9ba6-49e0-9ec5-8fa45b07c010",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e931336-06e2-4714-ba07-ab507339293a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49110074-2c98-4d05-8260-6eb95b30c10a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "94598e52-b01a-4742-8790-71d33d72ab9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc210740-5cd6-4520-8928-a50376044896",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e16dbb92-7ea5-48ab-8973-28d62bf5cacc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56b0b57a-f1b3-4f46-bdfc-caa6873fccbe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ac5171b-88ac-474a-af75-023db22c764f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2033751e-2558-433c-aff3-a32f30e9b8ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8933e456-a7f6-4d81-a80d-113932f44540",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e47bd48-63a6-4475-b499-1a8461990868",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0c9fee9-f16d-436d-aaea-3b55d3d828d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "373d3b5d-240a-4e25-b352-8088e25ab58c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "365d5eca-d837-40f3-856f-a7e08ef35163"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f33e9f8c-5f29-4c87-a482-0dd8e7e5d853",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a9dc762-7c2b-41b6-ad49-ee22ed8b7574",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "173870b1-2116-4768-98c9-ec1d102617a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e76258b5-5d4a-4fa5-9f9b-33263a2936e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "71689806-0512-4d1b-af8c-a7aea520e10e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d43a03d5-9ede-4bcb-8d3b-2756ec5ffcae",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d77ed608-ea8d-40ba-a470-eadf2c812eb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2cb6bb55-6b55-411d-a5fb-32d87d153542"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b54346f2-fabe-4645-a328-f552bb9df1dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cb747f39-78da-4530-8b5c-999b3904d8d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "127e86da-8302-4b44-a867-e38936fa8868",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbf98124-7d56-4a83-8859-2bb8b6f5fc3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0b7f0e8-1a71-4d28-b13a-b15c0ea2c7ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bf7f63b-fbdf-444b-9ebf-e86e1589170b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "900f8c37-037f-4b3f-96f9-649774b0c5bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "555cb6df-9da3-4ee7-9203-8b9b313bf40f",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0841c226-a034-464b-8bad-6926ee8b281e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9787454-d6cf-44a0-8175-395d2a15e6b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41477a85-899d-4ee1-b0f5-88881a6576a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c0b77c09-2cbd-451f-ad0a-bc17ccbf1eb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49f06da8-a7d7-4ff8-89cf-f069773144f0",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c68293b-eaaf-49e3-956f-b33e164d67bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46184fe4-afe7-47e0-9592-aa5514927382"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3422e51d-80f8-460d-be08-c49942a38830",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "34c40628-e723-4bf2-b1f4-6825c9655d20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c457030c-152d-402e-8ea0-2c25c355338f",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c4269c7-9467-4690-b043-3e2df6ee9186",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50ef3894-3396-4a84-badd-cd43a0295ad6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd7ace5e-612c-4d8b-a89a-ecb1ce1bd4ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b75f8ada-6ff3-4de0-a00a-483f1b80f362"
                        }
                      }
                    ]
                  },
                  {
                    "id": "157aa0cc-4bee-43da-a621-5fc9458f8a3a",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "552467b8-1f37-420a-a103-190cd4f2c0fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e34c7db5-ba9c-47a5-b304-89b3fd504001"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddffee0f-92dd-48d7-baff-22fadcfe4b5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "96379dcb-84af-4553-bd8c-e345d8c00d4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f453c2a0-7e3e-4f0c-866e-9fc419e058d4",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6ae8940-0132-4630-85e5-8e224c619560",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2584e30-79d3-49e0-9411-d116a4a0ec95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d45aac05-49e3-41ac-992e-0703eb35f545",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ce461841-9deb-4241-953c-8d7ab6e8d272"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e30b94c-1c46-4f2a-addd-d93818596475",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21a7f518-269d-4f58-8f8a-4745fd5a9b7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ddc20480-b676-4a2b-a493-454230850da3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bfb509e-2c17-4d21-a821-f2fe8396b3d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f4e3f6d1-19c6-4796-b4fc-c853294183dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd6347df-4599-468a-9a0f-d3779e1966a5",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23cbb178-8577-4e34-93f4-91f20665d61e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8c20b47-728f-468f-93e8-a88eb415ca45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4aab2f86-b8a0-42c2-9feb-5973624529c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "36b9fc36-f816-4026-b758-30207de16424"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10d72070-b086-4c77-860d-48de18c5de7a",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "471e9375-a4e7-4884-a7d5-f701c12972dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3412f759-9d91-4b91-945a-2e4e6cd1b655"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe8a8344-f657-4610-a590-d1c8861d417a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ea88831e-9406-41b8-9cc6-dad52f4b5f1d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "98b2b6fb-d442-4756-b911-bc1e93649943",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a1e7d59d-7d2c-4890-95fb-fc0f7ca82e6e",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39604154-c7d6-4828-8cef-7c3c1f8827ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7588291f-b6f5-479a-ab65-b30facbf0f94"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2fa421b-1495-4142-b84c-c7b4425e189b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8fd924d2-6f23-4e5d-b8a8-b347aea3a94d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ec51500-82e2-4bcd-8b3f-9afc712e940d",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a39e858-fb1f-4c8f-9faf-85b794f56b44",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "9287c33f-4139-4ce7-a1c8-ecaad1326749"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b55204a-42aa-4b51-b41f-13e9c5bc6504",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "956bbb1b-e49f-4bad-82e6-3809b5c8c280"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "11b1db2d-41a6-4d78-a2b0-5b999e7b257c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1753afcd-8277-43db-a5d5-f215ac54f98f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "965ba83e-71c3-4aa1-afd5-e1f552d46d04",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1f39791c-11d1-4783-b90a-ba5b59b8d80b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1a401f9b-94d9-45f1-a64f-89b152343ca9",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "bd112b46-45c6-4e51-9be4-401e83f7c655"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "560370ee-045e-4db5-902b-0a0b450dbf10",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6dbfd1d0-e9e9-411b-a5a3-8a89a588eee0"
            }
          }
        ]
      },
      {
        "id": "06c80182-deca-449d-8ca2-59b4a1b21d19",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "c32761e4-5544-44c7-9d6b-57bdca8f8fda",
            "name": "Negative Testing",
            "item": [
              {
                "id": "86993e84-9d25-40ff-972f-cba7975de7a8",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "8770a5b0-0063-4f50-be7e-f3b0d9fcc871",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0eb5856-00c5-423a-8465-2cf7c8dc3b8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a2c677e-af0c-4221-91d5-0f332bcf0394"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36e60081-c4ca-48b1-8c57-25c5afd3fc73",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49b829b3-192b-402a-8773-88aa63f0b067",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba46d33a-fdf0-4321-aa43-a7abe6ac5940"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef8ff287-8712-4424-85ce-a5e8ceb9d389",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22cc0ba1-b0de-4e2a-a78c-ad11b4457648",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f44c39cf-81c5-4cf3-b224-cd459732599f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1267d411-790e-4636-a22b-e0c7cc7c6f18",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb98141c-64a4-402d-a998-6f141100b6fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44c189ca-3233-422f-999c-15aa3c23cbdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27403895-f443-46d6-905b-22388d9fe31f",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd5f1b51-d4c6-48e8-a983-8c16b35b57e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "340da714-66be-4244-9f3d-a64586160e32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a454ad0-84d6-44cf-9c86-0001dc5a4b43",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a5795f4-3498-421f-87a9-daf798f04a67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d22997a-76dd-405b-bbf6-f01980cdcfdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e2cc3a8-50b6-4c0b-9c26-39bf12ae71df",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53187a2f-a811-4521-aad2-2e0152a21e74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4980a39d-46dd-427f-9cba-8d25a0197c4a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ff90e8e-0b3a-4fa5-bf7c-b48e0aa338ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6e7ff1f-f595-4783-a8a0-1e9efa6b44b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fbb447d-dead-497a-94e7-7f8b3c8ba66a",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "672bdc89-9caa-4600-a6bc-34648bedbd84",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b218f807-02bb-4f2d-8fc0-3aa64da9ebec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64335ca5-3c76-475e-b8b4-274257f63cbb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b66840b6-e435-45eb-9e56-10ead0edceaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdcd87b0-e6ad-4c8f-bbd0-984bf431143a",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "718d3489-c8f6-49ce-b9f0-e7cdbbc210bb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4eda59fe-5577-4699-93e3-86ab3d2151c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7b132b5-c238-4de3-bc50-997ce4f8985b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd576ba3-a81e-4058-8550-fc6b76825d60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe79b9cf-7827-4935-bc73-aa18c0310e0b",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0e59a98-e460-48c1-857c-9ea1c36c899d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cadcbdf2-0d33-4979-8f25-9171f6e40b1a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6aeb7e1d-89db-4acc-a9a4-7991e1bdedbc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bbf59892-64cd-4348-a1d4-2a497ea1922c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c73fd5b-f96b-4aaa-8584-88f2cfeb4c9f",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..zF1sQbNclnV5pE5MfuXqMaTVBquwie4ctwzSdbC_LJ1Lx5qRK6V-y9wl5oTvN_GpuOvMIvlG3kQdjgqL3GBKDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "077d6766-149e-4105-a51f-25e859a9f282",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8757bf84-3533-4777-907f-f6803e34672b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d54fd351-8440-498b-83f2-a06ad856c877",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be138ff0-af57-4ca4-aa1b-3ae95712518d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b544508-de12-4684-b96f-9e3b104dd37d",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d277e910-d615-4260-94b5-e664f30b874d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "806f0ea4-e704-466f-9e98-f1f038cfa4a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99b4646d-0dab-45b5-a2f8-80d2fad3dfcc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79a7f358-03b0-43d5-b631-6973935cbdd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79497efb-7f38-4e10-be89-1f4d17b15d37",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3051ebcd-a6ae-4b43-b0d0-08bae95e5248",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3213adf0-130c-45cb-8b15-8b0674e67a97"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76ab488a-caa5-48a3-982c-717e09d57ec2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7bcd6659-356a-4504-a4be-fc7711216f66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cfb4794-bca1-450a-be08-4ea75c78a36b",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cb99b8d-9a49-4203-8694-dd6b70b7fba4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "794161a8-7b51-453f-9d39-d3a7f2f3dcc3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e1cf91f-7fa1-42aa-9ab7-2139b3ce6985",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e59019f9-e2f8-4159-8b62-2fa525a0f616"
                        }
                      }
                    ]
                  },
                  {
                    "id": "742ed371-b5d8-4d6d-9179-8170fcc1c9cd",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8e09c8a-6d77-4c5d-99e5-d5a0f1122c51",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7159dc12-8449-4946-8786-91dbf913b055"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76e19973-d035-4cf8-8f6c-82e00fc4f3a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7429db3-a4e5-4f91-8b68-9f86d1f8c668"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a69e617-d150-4d13-abf5-6f14756529f6",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94e6f217-c43e-490a-b94b-44e893c43eca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "362ebca4-fd9c-430e-986e-7cf09b51a600"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23eb6a52-02e0-45aa-ab3f-3897c7f81898",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "904f2002-d4c8-4a53-b5f3-8cfcd5d40fa3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "600d2ce7-63a3-40ce-bb95-483ccb199d73",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db7f0b4f-1d84-4b2c-a9e7-9de20e1a93fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0809f79a-ecd3-4603-b33e-55dcbbf35f14"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "861de13a-2f45-4a74-8a89-2f245e1987d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8346dab-69e5-4702-91c5-a1980cde5e40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e946ab32-f090-4af5-8518-d60f413adddb",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b45da7e1-cee5-421b-8f42-36591f6fa1fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07b6e8f5-8bb7-42cf-a3a3-22827ab858c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6e3306a-02e2-4c77-af62-38dbe5b96225",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d96add0-9ef7-4263-a454-e0e32ef9939f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dad7910e-0226-4803-8b01-1c02ae796190",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": false,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33a0af76-8075-4376-9575-c316c9648c16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e9774ad-e404-4346-9a74-4113709276be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdbcaf0b-c2ae-47a4-9c90-ba4bcf60941c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9edb8d96-fe02-4419-82ac-8568e4321caa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32df793c-438f-4883-9067-97f43c0b5db7",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": 123,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51c3ca97-0306-4a97-9b76-4c83d0917604",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63e294ca-4cd8-47ab-ab5b-37e80bed1919"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bea4d17-67d2-4b69-a197-c3a2c1ccb455",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ccbbabe2-2c6b-41d0-acb1-72d5f7c11048"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a44a4b25-e36b-436f-9a1f-6fbcaccaad59",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": null,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f886a7a8-d242-40c5-958e-c3af940b06e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6320e609-513b-4d80-93d5-cc4acf695623"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a820eb62-fb89-4050-8cc8-b173fd08ae2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4483a00-61f4-41b7-8186-142c99ff7c22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "600a9db1-f898-44b0-8dc4-2ea7be604bfe",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..5J-iTBtI5WNIe9L3kLF22cjjDx6iQuJAgl6yYYoIGMC-X_crKNlSlB5bRJsrb2MV-NDlWMtHe0grtMqRG1N0Bw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26b0c1eb-58b1-43ab-8f0a-b9703f603e61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "420644b4-d23d-49a0-a99f-ed49d3ea4140"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28bb2fdc-13ff-46fa-8db2-2bed4b56d1ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba027517-a5c0-435a-9de4-6015cf8c40d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2e6c4ee-a9ee-4ab2-8ebb-4090b27571bd",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df457c08-9288-4292-a4d9-ef154cfb7655",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "504454c3-1cff-4b3a-913e-fc599cfc8564"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca415f5c-6f73-42fb-bf4b-c0e51c83180c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2f28369-8b61-4b8a-bb24-3a494a19ff3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7388abaa-7dd7-4e36-96c5-d7f2242d3435",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7147538c-7d44-44ce-8f4e-4c296c29fd9e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "251405ba-a1d7-499b-9b66-41f7272f1b32"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad9b63f7-f1a3-4283-869a-aca10b7cefa5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08cb8a08-3bdc-4fd1-9358-e8ab23edd795"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fac13747-95fe-400c-acdc-3cf4b204fc67",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "631bf3c4-fe3e-47c1-9bc5-05fb57ce6627",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7bf5d2e2-512d-41d4-9242-dac581c33102"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d2eff97-a061-46b7-bbbc-25961bd2770b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a481807-0bb8-4377-bccc-8cbe859586e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36d12488-32c8-41dc-a442-c4239116e094",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "281f0565-82e3-41a2-a153-4b2bd25afca4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c66863d8-cd3d-4ef0-8a30-2cf74075cbe0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fefd02bc-8ac7-4f34-934b-4e09cb7f1b09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5356e7ae-859f-4c23-b883-0ac956a8848f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b72c240e-7825-4083-9e83-ee21a9848b51",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2e3b74b-320e-461d-a617-e233f4c3b359",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "23e49ba5-e954-4542-9398-846ac1432c1e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7a8062e-cca9-452e-9d1c-02ced201f33c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b67e91ac-9e6e-4a21-ace3-dfe2f40f6b09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06797c44-6c7c-417d-9019-684f55d8b7bc",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85d1068b-3ae3-4151-a55a-35b781faf28c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79387aa7-aab2-456b-a909-37df48feda9b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e7beade-7a71-48f8-ae75-f2235e50417a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44d99017-2fcc-4584-92ac-b95705b04226"
                        }
                      }
                    ]
                  },
                  {
                    "id": "281ef320-112f-4a29-9588-a4da87a686db",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "271d7dd3-e80c-4cab-922a-4610c4563a20",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a1d9ec50-6c53-4163-9d09-67fa649f657a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51314905-702c-4e11-96b7-4bd3f1010203",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b7b3ff7-330b-413e-bc91-67e929fd8b49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4858b5ba-832b-4010-a050-199180122738",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0f0caf5-45cf-49a4-a5c3-c478e6aa86a4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e0f91975-2602-4a69-ad27-dcda5b8a3df2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7d85d29-b2f0-4859-8357-2b08ffec3c7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e399829-51c6-46da-8404-4685254f1355"
                        }
                      }
                    ]
                  },
                  {
                    "id": "045bc950-07d3-4f39-b5b2-3ba114565946",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36d1f7ae-54bc-4f7a-a676-034a827c84f3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "71faaf43-1248-4e4a-b43d-c484db888272"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4533bdef-02b0-454c-9d25-ff250f547d97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36f8824b-19f1-475b-b44f-769d1e4943f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a9cff0d-40bd-472d-8f45-8eae4e276422",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d5ae12a-0d98-4e40-aaa5-94e09e97b549",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b9ed6111-de07-4a44-9095-16c3e78d2e5e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5addb018-2fbc-43df-9b73-e9eb02d03e59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "457d82ff-4feb-478f-ac21-be6bcca98936"
                        }
                      }
                    ]
                  },
                  {
                    "id": "378f07e9-8d83-4b97-a715-6e875602f6c3",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0762d08d-ffec-4ce9-ab27-2b6ab8ca5162",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "116aca2c-6ce2-4bcd-91e4-a2b06550d077"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "854a8568-7c12-4199-b8f3-ba5aa09956de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a09898d0-d4e8-425c-9304-52f3952968e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f189807f-7dd7-458d-b315-e4f43ae316af",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bbb2a17-474c-4270-ac97-2a1b35b39b62",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "83f9332f-23ad-469d-8306-e70496d74372"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f26cf133-7780-40bf-ac09-4c64efa76cee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92fb6584-3f2c-4f70-8ca1-e448f25a92ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e06c8b00-0baf-4849-885d-f142cfc55c38",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa87956a-6353-4cae-b4d5-4a1cf51601bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3000f7eb-e4a9-4461-b6a7-84d48b2fd3be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de869142-0d5b-47f3-81c5-e6f354f3b55e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3d1c011-7361-4448-b700-a0e9934858b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "019af389-283f-4256-97b4-7644d6cc917c",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x7a3s_8HfmUqGT6SDkktN-jeRmBR2xQ_9tOhJx4kEG3SCsRTySfDxya9yy57LNv__qbY1eMkm9SNrwdYiqlBAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38f9bbb8-8193-404d-a294-2df19dc1f12c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "702db597-ec37-4643-9bfd-0057d54dd372"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bef0d33c-f863-45f2-a357-debbfbd20a26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af7e6ff3-6fd6-4c65-9706-1642f643cae8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "600fc631-0da6-4bde-87fd-14232be0de71",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mMaPSvG48oEf3bv0t-6eLR3zvU3_BKoRIkgzkuZfm8zvjqbI7iy05D8k1mTeoSZEw3xYV-_sH1rChqGmmp7KDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07034de7-b9de-470f-bafb-f584034b939c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70be1341-b77d-4b31-8f3d-2df61cf69d82"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72acd3ef-ad5b-42fe-b1c4-8833110e657b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02400411-ef3e-4e81-873d-5d5dac1d3b53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35607400-5eeb-4ef0-97dd-53a0941f68d3",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..rAVfo-Gnj0vUX6yDAr7pslI6XAAyF2LHTXpiZEmnH5Hb4RsKcmDZZawaLSCg931y1cBUgZ1PQvGbJEdb094ZDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a2e6c53-b443-45a8-9250-14ac6f69e9f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "735a6b36-b9c6-4ad9-9c11-0c8ff1845902"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c26f0b1-46b3-4caf-baac-7c93c196d1c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13acfe38-a5e8-4058-8d74-e2a58d760d30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6288c60e-29de-4c80-b8a2-4eecafb5674d",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8efa9ba5-3f47-4918-bf01-60e25fdf65ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c553d9a2-ae11-48e3-917c-df7ed5548cc1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f4dc60b-62bd-4d8e-a0f8-e36af568e165",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4524fbc3-45b6-4163-922c-7f7bd424bf2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "314eda4b-5914-493a-9bd8-9e2c5eb1fce3",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f43748d-60f0-4bc8-85f5-a901b2e8bd51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65394567-03f4-4ab4-be95-b7750671d5b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b015bd0-fd28-49b9-bf9b-cf2cce2f1855",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21d5381c-7eb5-481f-83c6-9167542e5e33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46062ae3-9644-4078-a077-724081009702",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..vv4qa5LGRlgeMxW5G5VjEKDfjKKosQnvpx6oapYDlfUSWVagQsDoDcRmkotKzFHDcTh-opjGLp__agL6_d4OCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21f4950a-bbe4-41b5-8567-c1e206d54716",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f42cc85b-9cc9-4f27-b517-35d63f679d96"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6e6b035-5344-4880-b1d7-8b1071fbb6f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7de884f-2503-49f1-9cf6-60dd2c5cda49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37fcdf6b-d79e-4215-8c35-0301cd471ccf",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TTwcmWS6_0_t8XPlAGXbzWVSL_dL7OeYojY0FZz1WXCFvDfeAQtMh3dcIxuCeDqON6St3PODGfxluO_q1vWCDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "739ff1dc-2905-44ce-bc9b-09eca9d332d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f42c55fa-7203-4d33-8538-80a222624e19"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b8e15bd-8dfe-4f80-81cc-c77fd7452bdf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06f33355-7f3c-4c4e-99ad-c055ca80b2f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b3bd1be-0e19-4e15-b944-ce96b940668a",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..wpkNYYEOCjKMWm9xTYNn0J7IgXZQbbkEoohMQbloz_Zxb15UVu6DqiqsENotAeHvlRWd7RH2O9v4FwWBeqvPDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "587cfcff-7006-4eb2-84d8-6eca1314a5a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5612cc0d-7269-4eb5-8e3e-dec146340644"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd3b6ea6-48ef-4112-86f2-86ace70d59df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0fb9fe7-e820-42ad-b57c-8497166f17a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8000115d-fe48-465e-a2f8-845aa8e6b0f1",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60acc024-8830-418e-bbc1-6356cf011b17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80ef9dff-27c9-4aa7-b315-16f7749a08e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "abe9e8b5-09f1-49aa-8b3b-3d49eb116487",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe5587c4-96cd-49e9-8409-1d19c824b85f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "473e6bfa-6bce-401b-b27f-2ac7be0263dc",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHJmwuqqXWMdd298m7RCTGyGoAzsCx1y9tewaHukqaJJoPn2-TLDCQuXvlnFeAYAE_Cy3j1UScfoVx5k-eclAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0eb6237a-d58e-4128-a7a2-2510cdbbcdf3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99e378c3-544a-49ab-873c-bce8cc34ec3f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1bc40c3-846a-4f85-8e60-570f79b0a920",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56e526a6-bcac-4eee-b818-5d7e1eec7a3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f28a363-3b09-4a9b-a1b5-a8623e665164",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62dc8964-8110-4a3e-9dfe-e199e695c8fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7671f061-6016-4844-9585-9a04f09237e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dbc641e-d3b3-4de9-82c6-11c22a802194",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b621fbf9-822f-45a4-b582-6d8bd68a02a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c49aad5e-97e8-4740-b15b-0fe58bc45dfe",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..OzKfWk00QpV3_FJru3xJ3_ktwlU4O68prZWWCmdy3mQTbCz2lPFRl2sB4AkdD3AZUFMAnwxhscd9B0UnqxTZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2bd5517-1083-43e5-a7f6-54aad3d244a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6d07865-52ab-42e5-a169-17ee76fc2552"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90df0114-c18b-46a7-9c08-f1f1af4f7e8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c4cdf54-6006-41c1-a8ab-a62500c0dd98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4dda2cc-09af-4bbd-9005-058e76519ecc",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1W7WM5cXb0daWooGxEOYn_zm72mkmpF_tu8Fij39luQwNGDgK7h4nZGBFcS80HTVqiBKxzlhGq1yNnpUlLG-Ag\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb3bfedc-1613-42ec-af59-84e087604159",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8fa96ea-1fdb-48b5-acea-4f39626048ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a64c6742-bebf-4d74-be48-5b37ded25a5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55ceca64-3173-4d37-a4e6-9979a4077065"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b249f26c-5799-417d-890d-1aa1deb5e395",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dkiU2sStrvQWiNFK8cKmCbAcRGsC9kbDdKyr-NRlPc9ORQczitwUEymjviemIi1Oot23VohpyMcSFvgFIKIFDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb7d454d-8da0-43f6-8d0d-8c66ec04d60d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "084cd261-b067-442a-b7c6-a4776e650139"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce55e874-ce5c-4b78-92cb-23c718ae5429",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f24e3f3e-1601-48a0-aa69-91e6549ff108"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57df48d4-878a-4b05-b7d3-94cea92b5198",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "128192ec-5b18-4bf5-b047-7c54b102e42d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a01ceb47-9c21-473a-8a9a-dc09ad63ccc8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfbb3fce-81b9-459d-af9d-7f863aed6067",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4556c79-d32d-47cb-84d9-3f51bdd1c691"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be91fed2-f3f8-4247-956f-a96a6a3ead7d",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pNIbeUn6DL71QxEWTF1wQTqKfAJET5JB9FlmoLXk4-rv1owG68DqQY6qwcPx6fUbMijsWsXlvaFvzND0jAg1AA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a5ec0a0-b428-4db9-a0cb-e256d65b45d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0fc3e83f-9e01-445e-916b-b8078c6ba72d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b096d9e6-6b0d-4961-b362-19043fac8b52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53ebc0da-90f4-43f7-b21b-bc70c126eb5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "264671cb-ac8b-4a66-b2bb-9ebec04a1284",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z0P0ndVABJRB7mCsv4C-EgB-1SxgnfrU2uQBDSwKm2KfB1jBnzsEzY9enxOn7V1lBAPNxELTEaxPCAK7_n3bBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b7b45d5-97b5-40e9-b343-378936214c4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b3808fe-7e28-4dde-ae97-d239bab27958"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9120a7b-0834-4107-98ee-a7ed0ec58f43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "570401b4-196c-4cee-8c44-1f85ad413d71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a80f439f-fac1-4ad2-9f52-045dd228f21f",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4eb50da1-5501-48c7-a7bb-0858108db82a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "324d333a-9b60-4945-a70c-b94e9233cd43"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1053a0bc-86e6-48ad-8e50-2549a590b47a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ec8bbba-ea45-43e6-89ee-6448dca9ac6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23d5d5c8-1900-4f44-a921-b8cba1ccd651",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e08fd88-b29a-47e8-8c84-998fba90c607",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a540ea44-ce8f-441d-9452-61fb566e08ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9cf65a6-17be-41c5-88a0-fe9d0a43d7f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6d4764f-632d-472a-b6f8-193c2ede37da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "180ecfbc-e87e-4d82-9df9-e2e5c778106c",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..IXaPbANtKFiA3Sh28esCkg9kdwpHScJg3bOCF7Phmb5n9RC981EeIobgDnMzWIjP4v0S92FDEcZqA_XbW43GDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f094e25-734e-4d78-a49a-7fe5ebb203fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "afac57b2-6e39-4d72-8e7a-a779682fb194"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ee54f3e-5161-472f-9bc1-2eb07bc16468",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "058dd185-2ada-48b0-944e-da43881eb182"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca11feaf-dedc-4d75-b15a-caa2a8e23ad9",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iM5Xr2lBqwFIQhq9RI7Dv4K0dzdQ0z7i5YN4ELsstv9vDC9xA-GY2Ft-PsfubsbgVyQsQYjchCv23GULmhauCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6eaff4a7-7602-49cc-a2aa-3ba2013ba6f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61a485ba-015d-41e5-986d-b370b5209532"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e76587c6-2905-4149-94a7-4e9c622136ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69550250-532d-4128-987c-4dfedfbb65c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "934ba05b-3816-49e0-82a7-0a64d36831be",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c735135-f73e-4009-979f-8185b0a29ed2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0b1f661-601e-4cbf-8327-265e920f0850"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a68e3d27-3183-4800-bbfd-d77251b72ab5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24ba9cf6-288a-48e7-9039-81fa00db93d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5e47f9b-85b7-432f-9b88-b9504221d222",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19dda2ea-e9b8-4406-8c19-982accdb06e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "842821b4-e1a5-4c6e-bcb3-b824b6601db9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9da86e1c-99bf-435f-aa4c-5c0dfa1a6b86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7bf373c-4523-4bb4-b193-7b8b294bb7c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e72cde73-a6ba-4c22-980a-080836e42694",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..GBcSurXcOJcVinhthkmqvV40OS1rN2fY57Kad0HMLUuykp14JJCtNw_gmtf6SwZxhB860OVsUmuNbZXsMCi-DQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ecc9385-111f-4a53-b1a7-f7e2053f2f16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3a1b11c-cf14-4a5a-8025-2acd67b35c27"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79c104d9-779b-4665-a791-d34a357f9bed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "131d4431-a6b1-4531-929b-a56b952c0660"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f5a2f65-0cb2-4bb2-bd91-747a3988cc4a",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VWowmcXQAjabeJENG3aOcLzQ9HrvmSIs2pOWcaEMLdJtvJfP7oWohIBiqp94-eo1pd4Ocgk3hT0cLvS5qKBYAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b83c38ce-fcd0-46c7-a8aa-67f46e6df82d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb108fee-cb6d-4b40-8646-358782dab90c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c2e32a2-240d-4579-955d-e14939ec9e9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29fd46ab-ea95-4d55-8858-6bae1f27ecd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e18cf2bd-ed08-4dca-abc4-4bf5121ebe4e",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..-awe55AAvkjymZEpagD4fdSQk0uCGFfjyFwg7upmg_CISWk12JfezKe-N3hjTwYKCSCjScynLGvlH2x4iSgbDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb7f2f66-107a-4e1c-b422-06718c4e73d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9497564-2c60-4421-91d5-fe578ecc40fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a31831c-2272-402a-9cb7-e3c6f28cc4b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b0dce58-ba66-4fd0-bfa1-269e7627ad1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "333f9095-bf9d-4d7c-9564-d582b852fed6",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..NDwZvVUWw-xG0zU8VsWhiXPWrYycgK_zwN8zZts05DTw23rOTd9IOXQxqhEMzo_X0c25jzowIbpDfEFxqfmnAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ddfde3f-286f-4149-9c9a-4dd61173d31f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cadf425b-4154-4bb1-9db5-ff9fa7b92037"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fff04a6-4399-4063-9ec6-fc6f2dab26a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2fb994e0-ac5d-4c46-a139-739757dd95d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15165a09-ed64-461d-ba68-49e3ad8d03fe",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..y_7VEjN1ENYoedOrj2jsIqgL7FSYelxGgFZD5ckqKvSDM5BVEWiEctD24BWppCndRR7WR9_1ByBm2F1yBSaoCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dbe63e3-bab5-47b6-b45c-2e2ba6c3457b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e00092c-e279-4e33-8a2f-d1bea58dfb07"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb532d91-fb4c-4494-bd21-ecc46d420426",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98898ed8-8d4a-43e3-a380-7f3563dc18cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cae5006d-da59-4c8b-b03c-cc4e15390a9e",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "226c4286-f037-4fa1-be14-737d3b6b179b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "83d14c3b-d3ef-49e5-9429-3f37efaac9ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f269a7f-c782-43c3-a0d0-560167ea9bb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "469af11f-e9a3-41b8-af2e-767431eeed39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24a84e95-ca11-44c5-b249-e3143adb609a",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96aed7c6-a742-493c-a0f3-f6aea72e0567",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7fa5ecbc-4b37-474b-98be-82423f472803"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c287b32d-5b64-43f7-b8bd-8a7be620ce54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d21dadc4-2603-4f33-9628-d1fabde00af7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "130ec83c-84c7-42d7-83ab-f670cc29a8ae",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ec1cf81-8ad3-4f35-a21c-516aa91a20bc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3638412f-8438-4bd3-b5a5-2d53154edf40"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be2dcc58-aa36-4565-bdde-2da5f8109367",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "883208f6-7944-4f7f-b9cc-6195b29c4089"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db892d72-5f6e-48a1-b4c7-1bac30535bfc",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "398eada5-306c-465e-bada-5251efd64aab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0786b0bf-5b62-46f3-aa87-b223b53ba328"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08db8f06-fb66-4676-94cb-7bbedb3633c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7eaf6275-16f6-4755-b259-3d3deb4b8cfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c0eda0f-fb49-4ee4-bf7b-45d67ec1afac",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b29e8428-61da-457e-a2cc-adbb213694b0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fff9936f-0422-404d-ae90-e1728ef08a9a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c947f36d-a6c2-48e3-937d-48297f40f651",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "862832f4-16eb-4584-9cb9-a295fb4d8bfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fddaeac-3ce3-4fa3-9f3b-af9472c66b14",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c9326cb-797c-45ad-8a76-655e65a2949c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "27f3f406-34aa-4a10-ba3e-5d239f151161"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f5f25ca-5680-4e54-9a0c-f83e12d32731",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "931740e3-535b-4086-9696-946518ece1c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3ef846a-72dd-485b-981e-0cac982776f6",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "494c8232-ea81-4b77-a233-cbaba0eab546",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "763ea34d-09a4-47ce-b0b0-353c880a7b13"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8f3c133-ef4f-4e1e-9658-71e225853ba0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85b133ec-7ccc-48e4-80c7-97d2c9bbfd82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e9d3168-e07d-49e3-a7ff-6956b7886e7a",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "077037a7-c001-458b-af29-ee6acbf5680d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7da2e43f-54a0-4fea-b658-968e9143c7c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ece5cb11-be39-4c2c-a817-82254018ab3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37e351ac-206d-4065-a1f3-7c40d7ea269a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d6a2b23-58ed-4c40-9b29-1309e8715c4f",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b46039bc-8548-444f-b3ec-88185811998c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9de6c48d-2c29-41e0-8fd4-3a8945aab414"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5831643-3d3b-43bd-a3e4-e82f54354706",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86260ba7-48b5-4763-8942-3900cd539343"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d9f18c2-247c-4b03-a479-0f440bf31776",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c686eb2-a6fd-4c25-8085-77a367a9dcca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4a0d2cc0-5811-4fb3-bdfe-2a7e6bae0f24"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ded6af1-4001-4ea4-9811-0e29eb40a711",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aee0af99-c417-4899-b3b7-d951b1247dac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7f6a23b-289f-4b3c-9610-7e41a205d6d2",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "520b06d8-7391-4db9-9508-6ff70f01d063",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bd883721-9ff5-4c5e-9592-f79ef98037f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f7ff24f-d649-41f4-bd32-06815d96c958",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3103f6f7-f3c6-45e7-8af6-244d31814402"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee3e98b5-cfda-4d5a-b699-073f80c15280",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d6689b3-8e14-44cf-abfd-d11ff77e35f1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ad5e2020-acce-4e20-ae2c-43da8e8efb0a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e3dba13-dca4-4791-a738-f79eb01bb6d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "607e571b-4225-40cb-b226-6b3abd49489b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c5ee79d-51ab-40d0-bf5c-1e06e4559e34",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79a9da3a-d628-44ac-8263-e956fc28ca3d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "421eb6ae-bcf2-4c21-aca7-7842f8e791e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be83fd47-5f80-4fde-979f-f3c005952354",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06453940-6a3c-444b-9ed3-a5d257206e44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9bb9abb-46dc-4ea4-b36b-7ea40fe07553",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a54c99a3-4d83-4c9f-a75c-dafee22b98be",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ea3c0ce0-c1d9-4d04-8384-499a62d6dc3c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb814eaa-777c-421f-a0ea-af78fb856504",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e06c8e05-1f99-45b6-9f3c-554ad6cda044"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c65e174b-b02b-490e-a185-e527597af53d",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1678f5d-34c9-45e9-b316-abbff8cbe0d7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0ddf4ed5-5376-4632-8c92-406f00e625e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bde4894f-d3cd-4730-b3e1-882056070c94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d89800a3-3cef-4f12-b154-7070bbf19684"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad213ac4-4daa-477c-bb05-122637897e97",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1af38ba8-1689-4fcf-9ca6-26b41f1ae81d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cd1ac444-d97b-4cab-a7e4-8585b575652b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "498ae7d2-cf5d-4223-8fa3-d5f7207171ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "048ce5e2-e2e2-4aa9-a5af-c5bf832e8738"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ec5dfc4-7d47-4a59-b3c8-d7915ddcd442",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d403946-fa2f-4a4c-bce7-d09884ae4003",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5b7efba3-905b-43a0-b1a0-611c469d4578"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ae5ccda-4267-4df6-8d8d-04fd7d3bcb46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79b4233e-1429-4f2a-82b3-6db07dfbfe0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0632f79d-6ca9-4527-ae3c-2cb62c52ed48",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d918c142-5020-490c-9d69-004e8c3f4b85",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0f6ca107-8c81-4f28-9373-5dbcf7ba5a54"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d8510e5-3ace-40e5-8fd7-172c3d540523",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5df8202-8d7b-4498-9354-001af7c1c251"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5daa0532-628d-4d58-af6e-75211441d079",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32bcdd9f-d432-4bfe-b270-69b56bc88fdc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e24bd18f-c1a0-40ab-a054-308efbff7773"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f5bd875-b4fc-4a8a-aeae-b0f6f1fcdc89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41efb03b-eab9-483c-9f06-2ab65772f7f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49db5908-9223-457a-a378-bf3d0333dc84",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff9ad7a5-7544-459c-8228-04d7f865f163",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f10fc38d-8078-4b3c-a5f8-5a9383c9fcfe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d3e01b9-66ee-4138-9abc-02a48c03a95f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98f2fab8-271e-4a39-a967-4eaaf0bb75e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5467e7a-c6a4-4e86-94d9-677fdf50e63e",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbbc057e-63f3-472c-8e1d-ab68fcf35825",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "98291891-4aa2-47fe-bacb-4b6234a5e263"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fbe83c4-e9ae-4c50-bc19-e72d8e676d0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8495b7a5-8619-47f1-9cd7-c14972dc9c81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "590e57a2-1d73-44d5-b87a-0131bfd1ad64",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e79464d-4839-450f-8f23-53b35e70574f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4d537f3f-0f15-468a-979d-3c33f4d98fa9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bf9fc5e-592c-4b8d-9726-37a0c60ca48d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3bc254f2-e2fd-445c-83b4-1d0e9a3598aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c7c114d-3e7a-4219-8b26-69ed72095ec4",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14ade1fa-7f3f-4fff-aa54-c730e8159191",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "17618c44-7f30-401e-9c48-7c081eba500f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78ac80d6-da87-460e-8961-1daa84adaf81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "642591a5-9526-442e-b5a1-db6d14147e50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac202736-e0d5-40db-9cb8-dff5f48eb6bd",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27cd618b-9e3c-404c-bd84-4bf0b89d614f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c5b642b6-58f9-45cb-b2a3-28812687fe8b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "914521e5-ed17-4bbf-82d2-c9b6b913f5c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc079bb3-95ad-4aa6-bf82-3bdd2027107f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb9b0669-b225-4271-9c62-717e339ab187",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5b0dbb4-9249-4de4-959d-5755721a444b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d08d825f-00dd-43d2-bc7c-eeabaa728fcf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b73be50-44bc-4821-9d37-dd048194b64f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2cb40b60-7bea-4f85-becf-95a02951e80c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2c3b852-4110-419e-a3f0-915b93471e8d",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bca73083-22bb-49e9-8cb3-686160974c90",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d607f94f-c684-45df-a31d-fadcc5480e40"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3467277d-ce4a-4928-bb26-901ea96f2d75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "598d1b29-18f5-4d07-819c-3043a464c9d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f86b3d7c-d303-48fd-b552-4c8ff9e19037",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98a1f07d-11ad-4787-a322-5d3994a7c015",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "363e7594-0000-4aed-a6c6-1fff0b5d4bb3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b303cf46-8fa2-4342-ba3d-c47c02bc639e",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44fdfb30-71ae-4589-aa77-cc33f9e2d5c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f79803d-46c1-4bea-ab33-4b55ff9ae3da",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39c9f0de-9651-4c3c-a428-ee0c43359109",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "75aab41e-bd28-43c8-a9cc-c82301b0bdb6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1326e7a3-e34d-4f83-912a-c30b7213eace",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "129dab62-6447-4b1b-ac51-bc37617d8d0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24f5e88f-43c6-4107-b366-34eb143c91f0",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "552c25dd-e3bc-4d4d-bbbc-97fdf99dae38",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b4d9b5cc-77a8-4d3b-8098-19ae113765e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "413604fb-bce2-40d7-a26e-9e0e0ec7d8b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d52584d2-f237-4f08-ad5b-a57de0f4bfdd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c4db0dc-52dd-4bf2-9b63-b42baa8b9d8c",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "111905c1-7207-4dd8-9073-c1a6d6f8a298",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "da916c8d-5fd2-493d-880c-469546599ae7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47d18e2c-085b-4fc6-8331-1410dfee0f63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c606262c-18d5-42dd-99b4-e221c59e0722"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3e42d4e-355c-4eb0-a250-48448b1db2e3",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e9a99f9-69f2-4252-a089-5b01c66ad21c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "07987566-76e3-4b98-91b0-23f170d01dec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44544384-fdac-4897-ad55-5b2a494c6e32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c95ff11d-c02f-4113-9813-30841ebd6490"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18919e7f-fa81-4f07-ba6a-0a95abab3a79",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bd97a77-3713-49d3-8ea5-d3d80b8e1ab5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c839f78b-68f9-4281-84f3-78214d3ec46d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f49cb0a9-be63-4b02-9baa-a11d868bf237",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52cdc385-1040-4d07-8d03-fbbc8100b518"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c6de0f2-45e6-4fa2-acf0-289929a23bf8",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbab0486-dab4-466a-8e04-df2ca7efa98d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "16695f9d-92b1-4aa7-82f3-50857aab0e69"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cdc1ee9-d780-479d-a90e-2a997c709c2a",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8962355d-00f6-40eb-9fb9-11ea189783da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "454ab1ad-6877-4c71-a0d0-88d4984a9cb9",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9629482f-606b-4908-9ec6-6ef10e038318",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a53c022a-7ee4-480a-b575-e428f47e96aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b730f33b-1ad5-4eca-aeb0-c22d981a9f38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37311200-f320-4bc7-9dd5-a932b179b2e5"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "206b0808-5770-4b64-a23b-36222dfd11f7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "20f4c558-b961-4152-aa2f-95e8c1cc9ee5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8a98c91d-d632-4422-b628-ac391b96da0a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6e6185b2-159f-4e8a-b437-b1f9e8cfb21a"
                    }
                  }
                ]
              },
              {
                "id": "05cce62e-f877-4043-9dd0-eaf0a3b7e41f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c19e6222-c1c3-4fcf-838a-ea42faf61c46",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45aa9631-e8ca-4803-bcdc-0a0e9a265854",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "e8d62f24-2d88-40c0-b398-8ed2a24b534c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "efd06fa4-2dbd-4bcc-8c8e-2eaa99f91c1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "38e94f04-6a9a-405a-a3a7-9e9ca9f7cc66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e9730ce-7bd2-48d2-9cf5-9abdd7a1ab45",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "781f36a7-31fc-4e01-890e-8faf00299738",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "9b53a9c7-7881-4703-9f60-08dbce4adf09"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fad36fcf-7e7e-498d-a6f1-16b212956992",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0fdec637-e52a-4956-9ff9-061be4262fa0"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c39e2e1f-3643-438c-beeb-546e43e1b2a3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3fba85d9-a207-4ec1-8409-c2f6b8276e70"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8ca362aa-cc02-4800-9c61-246d2fe03a5e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7065a11b-a4d7-4542-9ccf-0a3a865aadb2"
                    }
                  }
                ]
              }
            ],
            "event": []
          },
          {
            "id": "7e9528e9-df84-4f38-9152-a5a7bf4ffad8",
            "name": "Positive Testing",
            "item": [
              {
                "id": "23ff09f0-52f5-4b66-8ac2-7fbb75e2a8f3",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "69961401-f921-400a-b159-5af036d4985a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "68d4f9cf-ac8b-4d5b-a951-ea9ed4b7bbd9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7624dd74-47a0-436b-81e9-70f96ce7de86",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dc41f7d7-7f9a-40c2-8650-76da9aa36815"
                    }
                  }
                ]
              },
              {
                "id": "b59583cd-80f3-4dfe-bc0f-b5e1132622fe",
                "name": "credentials_verify:id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "89e5d23c-ff28-4da1-a0bc-42a125a4d551",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0d2c4650-a495-45bb-ba21-a32b14333e39"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1e20e948-ac12-43c9-b147-da3c84979dda",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d62d4d08-b24b-4aec-8c0a-2fdfccccc5a8"
                    }
                  }
                ]
              },
              {
                "id": "3b892dd3-90a4-476f-ab82-94a536a9c6e9",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1ed47708-a68e-4147-9782-659a52df3613",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8b3e236c-3034-404c-ab85-2bbd9f132eea"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "042a53e1-e48c-479c-b50e-09d58d9ce2f0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ea697a9c-2372-456b-ba17-09e9b235b904"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ce816c1f-61ff-4433-a928-75492529f176",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "f613f7cf-48a7-4063-9ab7-0d0eedd0bf48"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5a02804a-d2da-4b2f-9b2b-231512bf1377",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "aabfc438-1211-4ab4-9442-56996844bcd9"
            }
          }
        ]
      },
      {
        "id": "ae7bc6d2-ea92-47e7-8d83-e67cbfc35b35",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "e3f87fda-659e-47ff-86d3-b7c003722927",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9d4105ad-0ad3-4d12-83df-5b6c908b8910",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "163999a7-e2c2-4f09-9d27-26139f4eec2b",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5f8ce06-9dfd-4368-a4e0-169e211b6415",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "30187f94-2d1f-4ff3-9328-7aa85673b513"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42e53b50-8a5a-4216-8ddd-091217a4ca9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6ece1b6e-c5a0-48ff-bf4f-f006d058f2a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e68957f-5982-4f7e-b5a2-b3026f5278d0",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "429e482a-5b9f-436f-a069-fa8b02700b5d",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "dc4ff04d-b452-4438-a6d1-9cd00842a4d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef670d60-175a-429f-a728-64d6c83427c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "81d4b5ef-c935-4948-bd84-ff286dae5116"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9c3726c4-21bf-4c61-aaf8-244997d40323",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1a32e6b4-fc8e-4166-9612-6574f9fa0926"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "648b79c6-14d7-4200-8c59-f69d97bf6fd9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "83bfd58d-265a-4a76-a198-0f1c5dcea07a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9fd7d7e5-2d00-41ec-a0d0-91086b3aa71e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "bb3e44c2-bc47-4b9e-8662-6984383e758a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d3d5f233-9f22-4223-8006-c98e71a24372",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "47948354-5998-4d21-9ea1-8c53f29faa39"
            }
          }
        ]
      },
      {
        "id": "3c40b76a-19b6-44d7-a7f5-22be413fc779",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "a164f5f7-e7f2-4817-bbf4-48dadc27a8a0",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6791f61d-62ea-4328-b74c-891cf1f17619",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "372b984b-6598-4cb1-b633-e345c2af4ceb",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "184e81c5-0cb9-4f5f-8730-d983e8e293a0",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "736c0e34-0d13-49b4-bb7d-4a77270dabed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd2a5a0f-7d38-4e5f-b467-33678f379843",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e7935bbe-8485-46a7-8ff7-220643d2ca9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d1a6349-e91a-493a-9319-cf5386100239",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8864a4df-fd6d-4b19-9dc4-d80bec9a3ce6",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "b353ad94-5a44-41f7-a527-0ea83c5f1fa3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6fa0f99-c18b-47f9-8a8b-c469c9061f26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "89eee58a-5fcb-423a-9c35-892384e75ebe"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "18b7f753-23ad-4191-80fb-8946dc9a4275",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "96684fdc-b82b-477d-93b1-4321c26d4a56"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5483eb59-d147-4ad8-ba60-b284f818f536",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ca567516-db3d-4949-a09f-fe8e443d0ebb"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "14e7307d-6be7-4c77-915c-09e2532685ab",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "b7d0632f-1fcf-4b04-97f2-d6374222c2df"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "40c58a4a-e5e5-4b57-a103-047edc76b915",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "015871dd-85c2-40a3-8ce4-9d991be53e25"
            }
          }
        ]
      },
      {
        "id": "64f6d6b1-e38d-4be2-ac26-f8c43175187f",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "2a7ac159-3f78-420b-adf6-fd93316a4288",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c1e87837-087e-4b6f-8cf5-cd2c91b46de6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0d0ba027-28ea-4e9a-a293-1cad88615af5",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f30dd08a-aebe-4596-acde-e88afb3eac1a",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "e305db14-6fad-4342-bc64-530e578ee765"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5faad668-51fe-49e3-941c-1a1ca4b45d90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7877a7cc-de12-49b2-a093-3f96c2f574f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "daae0525-abae-4a73-9994-8a6d1f181586",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d58120df-9e7e-4d12-90b9-c8168012bee2",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "fab85c9e-ecc7-4210-985c-edcb8b475335"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cf607bc-247a-4564-931c-7a761ecb8cf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cf51fe96-aad4-4e95-93b0-48f11e11753d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "64e0a7b1-62ae-49bb-a985-dc176b7cb401",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "07cb69cb-0d9a-4fc0-974b-71536442977b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0ae24f21-92d9-4819-aa05-ee240a0bf60a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "df4e5f71-b3a3-4151-bcb4-3f4458346bc0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5cb1f6fd-d60e-4402-87f9-eb3199e95af5",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "eafd24ce-2cf3-4c7b-b03c-e753f52f0c37"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b072c387-796a-4237-9374-54a7c832c6bc",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "99dd4a42-a0f3-4bfa-9eee-577242ab8b44"
            }
          }
        ]
      },
      {
        "id": "e06cf969-6d45-48ee-9a18-e1af997b0fe5",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ca4e592b-5392-4ec0-baaf-da493ed8eab2",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2aaeccab-93a7-4f5f-a883-3038b9ba5066",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "26e72286-13d4-4f31-af9e-ac7763b0b979",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "77b7b8b9-202c-413f-80af-b518d89aa890",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "41869d25-9300-4553-bdd5-0283444a804a",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1909,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 260,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 505,
        "pending": 0,
        "failed": 90
      },
      "testScripts": {
        "total": 959,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 106.49615384615386,
      "responseMin": 14,
      "responseMax": 3165,
      "responseSd": 223.6533976779682,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1668041220112,
      "completed": 1668041261476
    },
    "executions": [
      {
        "id": "00776744-ae52-433f-9808-fb5a5663b4bf",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 251,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "96b2c4d4-f97c-42b7-9349-31eb7a2c2881",
          "httpRequestId": "b7f7a802-dd05-4234-9cf4-164a003999d8"
        },
        "item": {
          "id": "00776744-ae52-433f-9808-fb5a5663b4bf",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "7c21626c-ebda-413c-9727-7f6aad3ea95f",
          "status": "OK",
          "code": 200,
          "responseTime": 104,
          "responseSize": 0
        }
      },
      {
        "id": "27f709ab-4222-44fb-87a4-719bd24cd9e3",
        "cursor": {
          "ref": "0a7a32a7-ff76-44c9-ad05-76634fd36b7d",
          "length": 251,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "8a47cc5e-c186-4ae3-9381-148b1a0295ad"
        },
        "item": {
          "id": "27f709ab-4222-44fb-87a4-719bd24cd9e3",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "ada9b8af-e18d-4d88-aef4-f88cea78dcc5",
          "status": "OK",
          "code": 200,
          "responseTime": 14,
          "responseSize": 0
        }
      },
      {
        "id": "23b98e55-8e16-417d-96f7-806d999c719c",
        "cursor": {
          "ref": "d766e59b-0a7f-42d1-b1f9-00fb80de1aa8",
          "length": 251,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "d35058bb-ade4-41f9-a607-7197cc8147a9"
        },
        "item": {
          "id": "23b98e55-8e16-417d-96f7-806d999c719c",
          "name": "did_json"
        },
        "response": {
          "id": "2ce5b14c-97b0-41c4-b82f-41e86ecbac80",
          "status": "OK",
          "code": 200,
          "responseTime": 181,
          "responseSize": 1369
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37e36444-69bc-4ec1-b72f-b8733ab0b4d6",
        "cursor": {
          "ref": "a9a84b56-06eb-4197-9592-fe451de2f62c",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "1e154a59-36f4-4833-a984-d561a0f7a863"
        },
        "item": {
          "id": "37e36444-69bc-4ec1-b72f-b8733ab0b4d6",
          "name": "did:invalid"
        },
        "response": {
          "id": "d1df20f1-92eb-4534-86d9-7ec0dec952e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37e36444-69bc-4ec1-b72f-b8733ab0b4d6",
        "cursor": {
          "ref": "a9a84b56-06eb-4197-9592-fe451de2f62c",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "1e154a59-36f4-4833-a984-d561a0f7a863"
        },
        "item": {
          "id": "37e36444-69bc-4ec1-b72f-b8733ab0b4d6",
          "name": "did:invalid"
        },
        "response": {
          "id": "d1df20f1-92eb-4534-86d9-7ec0dec952e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43ffdd6b-8d07-4e1f-a4e1-d4744fb3b755",
        "cursor": {
          "ref": "a246dd7f-6d34-4166-bb7b-5c2f0a7f8c00",
          "length": 251,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "5e2d92ae-6f15-49c7-a6ad-589099a36140"
        },
        "item": {
          "id": "43ffdd6b-8d07-4e1f-a4e1-d4744fb3b755",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "b14478e3-e9e8-41c4-b2cb-7e78f5150dd2",
          "status": "Not Found",
          "code": 404,
          "responseTime": 148,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6ecc288-5535-4a24-8fda-b9f883ef76dd",
        "cursor": {
          "ref": "19d516c9-39d3-4838-8989-6e14a58be911",
          "length": 251,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "a157f7cb-4e9d-40d4-ab0a-d2f0436be940"
        },
        "item": {
          "id": "f6ecc288-5535-4a24-8fda-b9f883ef76dd",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "d0168743-3632-4d95-a584-6fa8f51362a0",
          "status": "Not Found",
          "code": 404,
          "responseTime": 54,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17278cbb-ff3e-499d-8648-d2eac16e9173",
        "cursor": {
          "ref": "b948a6e8-788d-4450-b39d-41b3380fac69",
          "length": 251,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "c719dcfd-4866-42a2-b842-3cc281040a7b"
        },
        "item": {
          "id": "17278cbb-ff3e-499d-8648-d2eac16e9173",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "faab6e82-79fa-44d9-ab61-97dfd3aad810",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 41,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb1014e9-1f12-4b1b-8f6e-e5b8a2f18232",
        "cursor": {
          "ref": "42276f96-eaf5-4725-8e30-e7f8d01b6f25",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "62970309-e358-4777-99af-564b3ad6688a"
        },
        "item": {
          "id": "cb1014e9-1f12-4b1b-8f6e-e5b8a2f18232",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "b6fcb8f9-0959-48ac-8dc9-41983d7eb2cc",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 45,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb1014e9-1f12-4b1b-8f6e-e5b8a2f18232",
        "cursor": {
          "ref": "42276f96-eaf5-4725-8e30-e7f8d01b6f25",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "62970309-e358-4777-99af-564b3ad6688a"
        },
        "item": {
          "id": "cb1014e9-1f12-4b1b-8f6e-e5b8a2f18232",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "b6fcb8f9-0959-48ac-8dc9-41983d7eb2cc",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 45,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8016c1c-4990-4256-941f-e0252f31c57d",
        "cursor": {
          "ref": "831b3d7b-601c-4409-9487-695ae2948a6b",
          "length": 251,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "4ce5fc8c-dabe-434d-9195-4cfa5f07fa17"
        },
        "item": {
          "id": "e8016c1c-4990-4256-941f-e0252f31c57d",
          "name": "identifiers"
        },
        "response": {
          "id": "df454480-96d5-49d4-a498-4d8329f5707f",
          "status": "OK",
          "code": 200,
          "responseTime": 150,
          "responseSize": 1385
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfd03dfe-d598-452a-b0e6-c2dc433981f8",
        "cursor": {
          "ref": "a851f17e-a8cc-42d8-884c-015fc51b580f",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "ba2c298a-c443-4cd7-ae54-e3ef24501cbd"
        },
        "item": {
          "id": "dfd03dfe-d598-452a-b0e6-c2dc433981f8",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "3a76f834-0e4a-4420-93b9-6472e12cbfbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfd03dfe-d598-452a-b0e6-c2dc433981f8",
        "cursor": {
          "ref": "a851f17e-a8cc-42d8-884c-015fc51b580f",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "ba2c298a-c443-4cd7-ae54-e3ef24501cbd"
        },
        "item": {
          "id": "dfd03dfe-d598-452a-b0e6-c2dc433981f8",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "3a76f834-0e4a-4420-93b9-6472e12cbfbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5aa358cb-3260-4188-9076-50c4dea2c739",
        "cursor": {
          "ref": "4285a91d-e2d0-460a-b688-8d6a80caf2b6",
          "length": 251,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "8dd8b536-9223-4624-a42d-608ece32dbc0"
        },
        "item": {
          "id": "5aa358cb-3260-4188-9076-50c4dea2c739",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "66dbd6f5-01a4-4b7d-8c40-bbb60b438cb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47ad9860-dc9a-4c10-8a60-aa0dfa402cdf",
        "cursor": {
          "ref": "4b70fa6f-660b-490f-b46f-abfaaa010cda",
          "length": 251,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "a955e483-7839-4d25-b453-31373747abbf"
        },
        "item": {
          "id": "47ad9860-dc9a-4c10-8a60-aa0dfa402cdf",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "45895fae-2fa2-4009-abb8-ff4c52ecc42f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09583493-429b-4649-9175-dc5572c0f9cc",
        "cursor": {
          "ref": "e05c4be1-5ce8-420f-9de5-680c31e42c23",
          "length": 251,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "8331fb1c-1454-4767-aa30-5cb7f805625d"
        },
        "item": {
          "id": "09583493-429b-4649-9175-dc5572c0f9cc",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "b91c6519-3232-451e-80aa-b89422e0959a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a77ecd4-cc76-4d1f-8bfd-c4dba00a6e33",
        "cursor": {
          "ref": "c0aee13f-786f-47f1-bb3a-2d2147c3c0ee",
          "length": 251,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "7972d29a-0388-44f8-a7db-301d2e413927"
        },
        "item": {
          "id": "7a77ecd4-cc76-4d1f-8bfd-c4dba00a6e33",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "8dd17711-9bc3-4e1e-8040-ed1a6066ba49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d046690a-c1da-452e-8e10-30c8092bc874",
        "cursor": {
          "ref": "6071ac19-643a-4c91-81fd-263b13cb6c9f",
          "length": 251,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "9cf7448b-b42a-41db-83cf-9f5563d8ce14"
        },
        "item": {
          "id": "d046690a-c1da-452e-8e10-30c8092bc874",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "c8c0dab1-d90b-483e-ab29-202815e0e8f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5caba27e-bd03-4a5f-969d-c969e04ac308",
        "cursor": {
          "ref": "059f052c-fd0e-4261-beab-b5607d7de848",
          "length": 251,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "463a39e9-d944-43b9-a482-f30f432e24c4"
        },
        "item": {
          "id": "5caba27e-bd03-4a5f-969d-c969e04ac308",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "dde58d4e-35c0-465f-8d50-70ae87ae8446",
          "status": "Created",
          "code": 201,
          "responseTime": 593,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "b76ffb0e-1352-4d63-a75a-0ba5cdf33d11",
        "cursor": {
          "ref": "48f5d206-83dd-46ab-9aa5-b83d3eeca6e3",
          "length": 251,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "33aed4cb-baeb-496f-9566-4709bed5e9c6"
        },
        "item": {
          "id": "b76ffb0e-1352-4d63-a75a-0ba5cdf33d11",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "873daa45-2d13-43bb-a0ed-f1ce33c39555",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbc6b047-575c-4075-9bad-68885af6a886",
        "cursor": {
          "ref": "a1f5c922-6ae5-4db5-9b28-858d9af92183",
          "length": 251,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "7f78cc5b-92d1-4d0b-bdf8-1b0acdc2a278"
        },
        "item": {
          "id": "fbc6b047-575c-4075-9bad-68885af6a886",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "ebb23883-d8e7-471c-a66c-be4476f7496c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d512def-c50d-4aef-acbe-c83d95553a72",
        "cursor": {
          "ref": "27351e60-f42c-4ac7-8c83-f8c01a514836",
          "length": 251,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "e970018d-8c6e-4b88-87f5-79a7c7573753"
        },
        "item": {
          "id": "0d512def-c50d-4aef-acbe-c83d95553a72",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "3cdcb273-d49d-4aa0-9d8d-b4f616de337d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1220bd5-8bc6-4553-9f97-baec2ee10fbf",
        "cursor": {
          "ref": "cfbc7806-ce74-43be-aac4-7fccc82ff1cb",
          "length": 251,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "10ced806-1811-4582-a1ed-560cb47ead55"
        },
        "item": {
          "id": "e1220bd5-8bc6-4553-9f97-baec2ee10fbf",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "b556f2db-ae5b-4af5-aadd-1abf04422cef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1dd199c5-353c-4f8b-b33b-79bcd183cee0",
        "cursor": {
          "ref": "07f4c828-9164-47b4-8d1f-d6aba1e47967",
          "length": 251,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "c5b5480b-dd99-4ef4-bce2-768e7acf85be"
        },
        "item": {
          "id": "1dd199c5-353c-4f8b-b33b-79bcd183cee0",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "d77e04a0-b9db-4fcd-a5a6-6dc5eeaa38da",
          "status": "Created",
          "code": 201,
          "responseTime": 301,
          "responseSize": 584
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "437acec7-aa44-46f2-a824-cdbc5116bdc6",
        "cursor": {
          "ref": "c91a4d8a-ffb7-478b-a47e-e70c9375fc5a",
          "length": 251,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "2bc90813-6828-40c7-b98a-df752a147d05"
        },
        "item": {
          "id": "437acec7-aa44-46f2-a824-cdbc5116bdc6",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "4813fd85-f564-403c-8891-eb7fdec5af3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5d06e52-b4ef-4e1c-bf97-c9a38b069e10",
        "cursor": {
          "ref": "1b14a2ed-3d75-4109-b714-ac3db79a8ae9",
          "length": 251,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "4c2d2ef0-bb7d-4044-989f-a331cdb0d80d"
        },
        "item": {
          "id": "e5d06e52-b4ef-4e1c-bf97-c9a38b069e10",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "f0a2b5fb-9f5d-492a-94db-1bc53b3fa299",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4be917ce-6df7-4b1f-974f-5be460f2a2d4",
        "cursor": {
          "ref": "81e6f09d-9008-445a-a8e0-cc52792ba79e",
          "length": 251,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "97f9d68c-b050-45ec-b53b-70dcffbd87ec"
        },
        "item": {
          "id": "4be917ce-6df7-4b1f-974f-5be460f2a2d4",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "443b8cd5-a938-4a22-b923-f96c97db37ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b315d89-c6ae-412b-8b34-6fae55fb91c7",
        "cursor": {
          "ref": "9d079bac-92ac-4c51-8379-68ae5c38e4fd",
          "length": 251,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "ae90d399-9280-4b9a-895c-57967a75d588"
        },
        "item": {
          "id": "5b315d89-c6ae-412b-8b34-6fae55fb91c7",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "dfcfa24e-778e-4c6a-8d0c-a8762b7434c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ece379e5-a157-46d9-9bc8-e41b3671de88",
        "cursor": {
          "ref": "233acaf4-2f5c-4129-b108-137f2dbfdfab",
          "length": 251,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "ff524249-39ae-4bbb-8d21-b34dc64a6d42"
        },
        "item": {
          "id": "ece379e5-a157-46d9-9bc8-e41b3671de88",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "b15c202e-2ea4-45c7-a25f-015380c2f219",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3c02a98-1019-49ab-ae85-24e1d329786e",
        "cursor": {
          "ref": "834c60e1-6ec6-424a-87a1-af2ad490e058",
          "length": 251,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "9b50d410-4e35-4877-8f53-603220bbde00"
        },
        "item": {
          "id": "f3c02a98-1019-49ab-ae85-24e1d329786e",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "43ac9ff2-ce57-42e6-beab-49cc4f527111",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9030eae-1f4a-4491-ac58-34eb1c192efc",
        "cursor": {
          "ref": "6bcb3db3-c643-4fd4-87fb-182e44e7cbf1",
          "length": 251,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "b9a0f7bc-a3e6-47d4-91b9-cd94ff1c5559"
        },
        "item": {
          "id": "c9030eae-1f4a-4491-ac58-34eb1c192efc",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "07532d48-dc7c-4277-a7b7-e2682c099cef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb7ebb0b-49c2-47ba-8e9f-e5cb2ff2cf59",
        "cursor": {
          "ref": "ac9e4537-ba25-404e-85ce-960d8ed27055",
          "length": 251,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "9e01020a-e1fa-4778-b7b5-e68d3cff153e"
        },
        "item": {
          "id": "bb7ebb0b-49c2-47ba-8e9f-e5cb2ff2cf59",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "35a282bf-817a-4a6a-97a3-899bca324a43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46347b9a-65b0-46cb-b6a3-c081531d505c",
        "cursor": {
          "ref": "44d794cb-afd0-43e7-8e17-013722761162",
          "length": 251,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "c5d1da6e-78f5-457e-a0b5-3ab57958794a"
        },
        "item": {
          "id": "46347b9a-65b0-46cb-b6a3-c081531d505c",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "3a74055e-f910-4077-9409-21519e181bcc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "353bad5d-b65f-4b51-9206-2549dbfebd11",
        "cursor": {
          "ref": "00dee36d-323a-4fb0-bbe5-e89610566966",
          "length": 251,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "bb75ce54-bddf-4d07-944f-6cc9ecc1f401"
        },
        "item": {
          "id": "353bad5d-b65f-4b51-9206-2549dbfebd11",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "7605eb8b-8397-4f91-8008-26816c0458f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8124d1f-d404-48c4-9fc6-0e89d523636d",
        "cursor": {
          "ref": "d2a7006e-7a9f-45b4-acac-6636c5f8268b",
          "length": 251,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "7101f4a8-3ae0-4415-855f-6a0139f22c11"
        },
        "item": {
          "id": "f8124d1f-d404-48c4-9fc6-0e89d523636d",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "6494ac3d-7c66-4d40-8fda-d731c54971f6",
          "status": "Created",
          "code": 201,
          "responseTime": 389,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "52d4448a-bd21-4b03-98dd-3772499b2e7e",
        "cursor": {
          "ref": "5a956753-aecc-4249-a947-cec60e856aad",
          "length": 251,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "de55095e-0776-465d-97b7-3afe731d4889"
        },
        "item": {
          "id": "52d4448a-bd21-4b03-98dd-3772499b2e7e",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "e48c3616-1a3b-476e-baaf-bb6c5398a0af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcc6c709-6a16-4cd1-acca-31e39dc16a87",
        "cursor": {
          "ref": "71d828c3-30c3-4b23-8536-6d4f708d55a4",
          "length": 251,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "41310a4c-fa96-4d9b-8ff1-e28f4724150d"
        },
        "item": {
          "id": "fcc6c709-6a16-4cd1-acca-31e39dc16a87",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "be7c1cbf-ef54-4461-adac-267fb0e74822",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f2f7aa2-603a-432f-a1e3-5c1a3ae1f9df",
        "cursor": {
          "ref": "a7467733-e2be-4ba8-ab3d-bbb28646c302",
          "length": 251,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "ccfc9fa2-2aa8-4199-9aea-2382dba2c15e"
        },
        "item": {
          "id": "5f2f7aa2-603a-432f-a1e3-5c1a3ae1f9df",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "2bafa0b9-f1fb-479c-ac81-09a5b5d7f127",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4ce3e4d-44ef-40cd-b707-dbdfd6e6a8df",
        "cursor": {
          "ref": "e56faedc-b1a2-4f78-8591-33b609951b70",
          "length": 251,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "3210386b-8c51-483b-923e-535afe47b679"
        },
        "item": {
          "id": "e4ce3e4d-44ef-40cd-b707-dbdfd6e6a8df",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "1d15d8ba-b769-4a81-b8fe-7fcbbbd870a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56ddfb88-0010-4e33-9d16-6f7a41363d23",
        "cursor": {
          "ref": "f08df0e0-d8db-458e-b9a9-10d0c785aca4",
          "length": 251,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "aaf97819-a5d4-4b8d-b920-c7ec799b1d07"
        },
        "item": {
          "id": "56ddfb88-0010-4e33-9d16-6f7a41363d23",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "de84ec84-aa3d-4acf-ab87-48eaecd050b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d7faae8-f981-45b7-b87f-2054d1ad02f8",
        "cursor": {
          "ref": "2e607ac8-b66e-4b6e-a11b-f3a0e8d77c3b",
          "length": 251,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "943d87b9-353c-41b3-b484-d5cfd5f80c1f"
        },
        "item": {
          "id": "8d7faae8-f981-45b7-b87f-2054d1ad02f8",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "cace8877-96e5-475c-a616-7dd38141e24d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33052087-d2a2-4e75-a355-0f04c3e6e1f9",
        "cursor": {
          "ref": "f7075359-50d9-48c1-a765-bdb32dff9bc5",
          "length": 251,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "4132be9f-b68c-49e8-ac5e-571d168277ef"
        },
        "item": {
          "id": "33052087-d2a2-4e75-a355-0f04c3e6e1f9",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "35c0995f-48eb-4c53-92d4-9db5f53aaa32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "780d2380-a428-4f4c-b8da-8b5f6d9e728f",
        "cursor": {
          "ref": "dcb298be-a348-468c-a679-2a6f4e999c85",
          "length": 251,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "2c35811a-619e-4e27-b988-18c59bd39828"
        },
        "item": {
          "id": "780d2380-a428-4f4c-b8da-8b5f6d9e728f",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "d63b3310-b9eb-4ead-93a7-f39038970b03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b798d3f3-6b01-449b-8d17-4b51c56fa52f",
        "cursor": {
          "ref": "302d89d3-36be-4bc4-9693-04d17fdac499",
          "length": 251,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "db1b131a-5e3a-4162-8206-182bef5a4bb8"
        },
        "item": {
          "id": "b798d3f3-6b01-449b-8d17-4b51c56fa52f",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "88e5f307-624f-4b32-b4f2-c9ac50f2588f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "379f4c36-4b2a-48f6-a2f7-5deb8de50f5e",
        "cursor": {
          "ref": "f87969d1-6cad-4278-b10b-17de8431c360",
          "length": 251,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "f22dd5d0-a0e1-4d65-a4ba-2798275dd94e"
        },
        "item": {
          "id": "379f4c36-4b2a-48f6-a2f7-5deb8de50f5e",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "1ea78f4a-827b-43ad-82ad-1e50590152a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52852b86-9109-4d2b-92b8-33ed97aa796f",
        "cursor": {
          "ref": "6077d9d2-82bd-4ade-90e3-07cec3d7675f",
          "length": 251,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "c75dc8e8-40f7-42d4-9c5e-559d91c5863c"
        },
        "item": {
          "id": "52852b86-9109-4d2b-92b8-33ed97aa796f",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "fa5b1551-211d-4ea9-935c-a97599368ab6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47dcc5b5-9f11-4c27-9398-97b45898ca98",
        "cursor": {
          "ref": "c80c78d5-4f2c-45e3-a83b-b0d17bc374f6",
          "length": 251,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "4ac7cb44-9751-49c3-b9c4-395610c4e996"
        },
        "item": {
          "id": "47dcc5b5-9f11-4c27-9398-97b45898ca98",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "edfd406e-6d5a-4a66-ab8d-2fae8aaa3c83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae43f737-eb00-4d89-b5bb-f5a97fd0f6ea",
        "cursor": {
          "ref": "fdab9a4a-f41a-4c5d-aeb5-9925f3a4b68f",
          "length": 251,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "5a8761f2-7c3b-46b2-a78d-3260f5aca78c"
        },
        "item": {
          "id": "ae43f737-eb00-4d89-b5bb-f5a97fd0f6ea",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "ff8b7de4-87ec-43d5-b524-97635fa9e45e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 776,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "ab243cd5-e445-4d8a-97f0-0bd5de685070",
        "cursor": {
          "ref": "43eea230-b532-477b-8c73-0f05a0e057e3",
          "length": 251,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "45621538-29ce-427e-adca-7cae7a298554"
        },
        "item": {
          "id": "ab243cd5-e445-4d8a-97f0-0bd5de685070",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "de5ced33-6c34-4a73-889f-0aef46ab9877",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa02e8cf-b4b7-4efa-b771-f55aea881887",
        "cursor": {
          "ref": "81902db7-e715-4821-a443-2771d0c8f5ea",
          "length": 251,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "e9b0e282-f1ad-472d-90c3-0cfa2e47e37c"
        },
        "item": {
          "id": "aa02e8cf-b4b7-4efa-b771-f55aea881887",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "b2373f5f-283f-4965-8e69-43c1f6608b37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b9a41db-ddbb-4ff8-8c6b-988b1147588d",
        "cursor": {
          "ref": "86636f74-504d-430e-a593-4adb0c365b57",
          "length": 251,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "0c5afe75-b997-4566-ab3e-dbd5715e184f"
        },
        "item": {
          "id": "2b9a41db-ddbb-4ff8-8c6b-988b1147588d",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "a91724cd-e970-4b03-bc40-1d0c6fb63bac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e169dac8-12d0-42ad-8670-0dd001690008",
        "cursor": {
          "ref": "930a1979-7466-434c-85cb-09337c7a0a4e",
          "length": 251,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "78421b99-25f1-4d37-a58e-b55a23f2edb6"
        },
        "item": {
          "id": "e169dac8-12d0-42ad-8670-0dd001690008",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "a449d8b6-c03e-450a-a125-f68b3f7d6b33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04a68fa5-fbfe-414d-a5ad-bd50049e7df9",
        "cursor": {
          "ref": "11d6290b-3567-44a6-810e-8f4931045539",
          "length": 251,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "5d9cbdda-6d1b-4a87-b6a0-92975436623e"
        },
        "item": {
          "id": "04a68fa5-fbfe-414d-a5ad-bd50049e7df9",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "169f9c26-208a-4358-be6c-50e0910f5ce5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70ef38bb-0c00-47d5-acf0-e9145fa28243",
        "cursor": {
          "ref": "4fb07709-57be-4e50-8486-762106289eee",
          "length": 251,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "1f797a23-4204-4718-8a73-0893c1c59ed6"
        },
        "item": {
          "id": "70ef38bb-0c00-47d5-acf0-e9145fa28243",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "e202f52e-43a6-4b6b-bb69-1bbb93533694",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "333fb37d-8e6c-4db6-8248-d356f4f7bbc4",
        "cursor": {
          "ref": "3c6cf8ac-d23b-489b-829b-cd438ce94c9d",
          "length": 251,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "2650a6b5-fbf0-4159-b2e9-74e4eafe6799"
        },
        "item": {
          "id": "333fb37d-8e6c-4db6-8248-d356f4f7bbc4",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "e8aca389-a652-4874-9874-19bc952ac7ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 198,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "8d37ce06-ee01-47a9-8763-bdf7e5fcbf37",
        "cursor": {
          "ref": "bdd6b6c6-8d13-41c8-b494-fff435adac9c",
          "length": 251,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "ceb559e9-1048-4e82-a33a-198c214e21ec"
        },
        "item": {
          "id": "8d37ce06-ee01-47a9-8763-bdf7e5fcbf37",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "10c17245-a6eb-4c96-b2c4-db660e9f0f01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3450244f-4459-43f6-a47d-7357de78b77f",
        "cursor": {
          "ref": "b4ba85ab-087c-4f33-a364-171e1e5ec487",
          "length": 251,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "8e5cf7c0-140c-4a5f-bd08-246992a455b6"
        },
        "item": {
          "id": "3450244f-4459-43f6-a47d-7357de78b77f",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "b108bb92-7a8a-45de-9e7f-cc37da3657ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "882b3c9a-8415-43b8-adf3-39e535101cc6",
        "cursor": {
          "ref": "4bcdcabe-b9b2-4ece-a679-e8bee8cfeaf2",
          "length": 251,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "c3f4d4dc-6d8f-44c9-9119-c4ae5b92dbda"
        },
        "item": {
          "id": "882b3c9a-8415-43b8-adf3-39e535101cc6",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "ef1f2b5e-a7db-41c3-b422-9915e4bfe6bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fe17d35-d8d0-482a-bdf1-94a95df191ce",
        "cursor": {
          "ref": "716fd0bc-af97-4949-ad91-c298ec293548",
          "length": 251,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "d351784f-e9f0-4b27-a284-409906d7435f"
        },
        "item": {
          "id": "6fe17d35-d8d0-482a-bdf1-94a95df191ce",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "e32ab0a1-1243-4113-9d2c-0c960ccd7f40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd218b25-3faf-46a0-98a7-4cfa9311e7fb",
        "cursor": {
          "ref": "3bb93955-c47e-4134-9228-e60d9c2099bf",
          "length": 251,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "f617e067-20fd-40e1-a9d3-5f7280eb2afd"
        },
        "item": {
          "id": "cd218b25-3faf-46a0-98a7-4cfa9311e7fb",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "e7f88cb8-aa56-4cd8-a89d-6aa87c9a8b33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "582f0b4d-bfb2-4f83-9004-c89ae0a1d008",
        "cursor": {
          "ref": "8d9e0715-297e-4851-a0de-8b53f603ff42",
          "length": 251,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "3a7cfa01-3d75-475c-9ce6-ae5d69ab1cfa"
        },
        "item": {
          "id": "582f0b4d-bfb2-4f83-9004-c89ae0a1d008",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "60e0187e-de06-4753-b6a9-78c64b0e16ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "899a8697-016c-44a9-baf3-b740b5da9321",
        "cursor": {
          "ref": "6a47a23d-e049-4d38-80db-0ac5d1e0c2de",
          "length": 251,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "cc5b30da-9716-4eb8-a875-150c65ef8702"
        },
        "item": {
          "id": "899a8697-016c-44a9-baf3-b740b5da9321",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "d4d197c4-3211-4d17-9240-6241a78f994e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5f292f3-a9a5-4789-9271-61d30ba9538d",
        "cursor": {
          "ref": "89479631-9cd1-4c3e-98eb-d02284eb5590",
          "length": 251,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "6c7cd4b3-3675-4898-a286-28a331b77a34"
        },
        "item": {
          "id": "c5f292f3-a9a5-4789-9271-61d30ba9538d",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "3441f2d7-99d6-4982-8029-f38be4fe92c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4447a914-229c-4e41-bf2e-efadebed23c8",
        "cursor": {
          "ref": "e3bed581-a8ed-4d87-9f90-c8ca2965203b",
          "length": 251,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "1bd6fa7a-f40b-4c4e-98f1-ebf12b1e04ee"
        },
        "item": {
          "id": "4447a914-229c-4e41-bf2e-efadebed23c8",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "862c2bcb-6a1d-45b2-91cd-3bc44cbd4b78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1cac0e8-102f-4965-8569-730163ff8bd1",
        "cursor": {
          "ref": "fd4a2e15-2903-458f-8647-e0dd6ae2ffa3",
          "length": 251,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "14214b4d-3e92-4f13-ac2c-b1afd1cf6f33"
        },
        "item": {
          "id": "d1cac0e8-102f-4965-8569-730163ff8bd1",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "eac92a9e-4b07-475f-94a9-658a2891c217",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf359a8f-20c2-4937-9d2c-2b4a7fc16aac",
        "cursor": {
          "ref": "d242772f-5425-45e3-8165-46cd44ec48ce",
          "length": 251,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "30af8eb1-d663-4e4b-b6e1-41391be0c6b4"
        },
        "item": {
          "id": "cf359a8f-20c2-4937-9d2c-2b4a7fc16aac",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "72121986-0161-4cda-84e9-208f0a012778",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8291d625-ec3e-46ab-9de7-f36b21533a1c",
        "cursor": {
          "ref": "4a1d7e4d-acb8-4547-b9de-65c537112787",
          "length": 251,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "703a9f5e-52e8-4518-9272-949fb947c9f1"
        },
        "item": {
          "id": "8291d625-ec3e-46ab-9de7-f36b21533a1c",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "03361a14-e3fc-4350-b36f-8f0e4f5a78e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd1a2d7e-e1b5-4b21-8e88-7122122e381a",
        "cursor": {
          "ref": "b06e3637-f10f-488e-a39c-33b6f158ae6e",
          "length": 251,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "55241175-6579-461b-a1bb-3143eb27aa8a"
        },
        "item": {
          "id": "cd1a2d7e-e1b5-4b21-8e88-7122122e381a",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "f4194c42-62e1-4cf9-91ad-c939684c2772",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1e02d20-84f0-49d5-aa8c-4f0f4397f4b5",
        "cursor": {
          "ref": "917bde8a-4d02-4157-b473-869550d06756",
          "length": 251,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "8eb1b0e1-3e30-4121-b4a8-3553171f49e8"
        },
        "item": {
          "id": "a1e02d20-84f0-49d5-aa8c-4f0f4397f4b5",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "4a0ad54f-cc97-4b27-a086-e2ef71fa9424",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "843e7684-cf3e-4ccc-87a4-766e65c956bd",
        "cursor": {
          "ref": "8e8c1817-711c-41f7-8b07-1570152c4fca",
          "length": 251,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "9d6b83ea-3a4d-4faf-9af6-9110b68db40a"
        },
        "item": {
          "id": "843e7684-cf3e-4ccc-87a4-766e65c956bd",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "4a0f64d3-7290-4d06-b22b-1ba5bfa6f3fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da01255c-2a4c-4af1-9fe8-33fde8982977",
        "cursor": {
          "ref": "b4a3a595-3feb-4c98-929d-a57bf54b962f",
          "length": 251,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "0897d401-80af-43a8-99d9-4772dcf49849"
        },
        "item": {
          "id": "da01255c-2a4c-4af1-9fe8-33fde8982977",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "e4643008-14e5-4a8c-ba54-61db74ca13d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c4d4054-75cd-410f-ada0-8fc7eb547e53",
        "cursor": {
          "ref": "02176169-7b51-4e42-ab74-e37d875cd477",
          "length": 251,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "70d4ee8e-d50a-45ce-9dd0-21894daecf19"
        },
        "item": {
          "id": "5c4d4054-75cd-410f-ada0-8fc7eb547e53",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "d5680a8a-17b5-4c8a-bbd8-c8e0535d390c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 240,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e419bd6-c4b0-4ef6-aee9-89968789ed83",
        "cursor": {
          "ref": "7d036a41-18f3-4644-8558-3f75bf3d0fe5",
          "length": 251,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "2f28ac16-5cef-4a80-b2f2-7c04c370b8c3"
        },
        "item": {
          "id": "0e419bd6-c4b0-4ef6-aee9-89968789ed83",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "8a6ab89c-c80f-4574-9155-11505b20340f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fa0a2cb-078f-4bf2-a0f7-df45d4034b04",
        "cursor": {
          "ref": "1f6b16ff-cb03-4d4f-bde1-be0e09df132b",
          "length": 251,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "18d260ca-5a5d-4e66-8295-75de02b976f9"
        },
        "item": {
          "id": "9fa0a2cb-078f-4bf2-a0f7-df45d4034b04",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "f9f5592b-a93d-4df5-9b00-2b41e1e6312b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "338ffb98-f392-4670-ae21-bdf325f17229",
        "cursor": {
          "ref": "f3a6c368-5070-4e3f-ae49-04cd0224277c",
          "length": 251,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "9e7dc2bb-f2ca-411e-9c40-2b907140fa04"
        },
        "item": {
          "id": "338ffb98-f392-4670-ae21-bdf325f17229",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "f227d286-4969-4f5e-a748-abe5f1ef8b79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87dbb2a3-b197-44b7-84e6-f437780c52c9",
        "cursor": {
          "ref": "ace9d5e9-33b1-4cc7-8865-cf96f8a604d9",
          "length": 251,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "45840395-cabb-4b3b-854e-8652ca4c7f36"
        },
        "item": {
          "id": "87dbb2a3-b197-44b7-84e6-f437780c52c9",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "0184f97f-22b1-4434-8308-69f62159d2b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 557
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a461111-d798-49b1-a4ea-a201358ba946",
        "cursor": {
          "ref": "978a440d-cf6e-4aa3-aabb-562965201add",
          "length": 251,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "ec614391-1eae-4540-a834-0b502fa09a4a"
        },
        "item": {
          "id": "0a461111-d798-49b1-a4ea-a201358ba946",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "eb4b12da-c22f-4858-b7b9-bafaa5690320",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc9d109d-c923-49b5-a7bd-70126850fe04",
        "cursor": {
          "ref": "f4c0ce28-6a0b-435a-bb07-dab95dd84a48",
          "length": 251,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "7eb838b3-ca13-4a03-9727-699a3a5cabc4"
        },
        "item": {
          "id": "fc9d109d-c923-49b5-a7bd-70126850fe04",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "c033ef97-d962-4896-80f3-7e581dfc1bef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0033c07-a461-4776-a9d6-a7128b0be0d1",
        "cursor": {
          "ref": "d47b3e81-88c1-4e40-8c41-b70717129064",
          "length": 251,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "04ccde92-0b2d-40c4-a0bd-20d03575dbab"
        },
        "item": {
          "id": "e0033c07-a461-4776-a9d6-a7128b0be0d1",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "0042deac-bb4a-4a8e-b15c-93eab8041cf7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70b8b9a8-0152-475f-8827-12c6c3b83410",
        "cursor": {
          "ref": "3482103e-1e5b-428f-b757-522d64699dbc",
          "length": 251,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "4444ed08-9df7-4a56-b884-3493eab95307"
        },
        "item": {
          "id": "70b8b9a8-0152-475f-8827-12c6c3b83410",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "101ed15d-48d5-4f95-a8e2-eb6c24466ecf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ce34c5a-b819-4121-be22-45f485716225",
        "cursor": {
          "ref": "d1c12c01-7761-42a5-89a0-a3a058a7b4d5",
          "length": 251,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "b8ba9cab-f109-456b-9cd1-ec87370d7f47"
        },
        "item": {
          "id": "6ce34c5a-b819-4121-be22-45f485716225",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "487ce300-6fd8-4ff1-ba94-9ff1c35856c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c19f2120-97b5-4609-b254-9362a4fc51a2",
        "cursor": {
          "ref": "c93ac281-22b0-4fe8-b1f1-7d0af73c22db",
          "length": 251,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "f63c2bb5-ae3d-4e42-88cc-01dc9d7bf0a8"
        },
        "item": {
          "id": "c19f2120-97b5-4609-b254-9362a4fc51a2",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "fc5799a6-040d-40e9-b7ea-fdce0c184748",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2d8a576-5d45-4e53-9a79-2821eaa417e8",
        "cursor": {
          "ref": "9ce458e1-df91-4fc8-8dfb-131e70235cad",
          "length": 251,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "c0687f9d-b86d-4968-a690-5e157ea5a714"
        },
        "item": {
          "id": "a2d8a576-5d45-4e53-9a79-2821eaa417e8",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "ee717eea-aa62-4661-9494-7d5187762141",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e753dcf-6fdf-47a6-8a77-5727f4d475fd",
        "cursor": {
          "ref": "a9aee4a0-6c82-4eeb-b4ae-7acab57e2568",
          "length": 251,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "6eabc089-3a88-4b61-b140-72b16afb161f"
        },
        "item": {
          "id": "6e753dcf-6fdf-47a6-8a77-5727f4d475fd",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "78f4282e-5983-4438-aa8f-4a94b22296b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "029f1ffc-4863-4e1f-821f-01cb7549ce58",
        "cursor": {
          "ref": "cddc917a-f3e0-4220-a462-d3c32da8defa",
          "length": 251,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "060f1113-5cdd-480e-a006-09db36136a4b"
        },
        "item": {
          "id": "029f1ffc-4863-4e1f-821f-01cb7549ce58",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "5637b818-d8df-4af5-97e2-390eda4663b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20b7b678-2ef2-414c-8d84-68591e586813",
        "cursor": {
          "ref": "e93ed1e7-010d-4618-b4fc-ccb234ce5a3a",
          "length": 251,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "b63ec83d-0760-41e6-bea5-bf6a42c7a67f"
        },
        "item": {
          "id": "20b7b678-2ef2-414c-8d84-68591e586813",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "8135c118-e68c-4906-a706-8a2f9e28ef9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 294,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce62595e-3ca8-4d97-956a-fb8fc1c2e5fc",
        "cursor": {
          "ref": "88277917-46b8-4919-8701-6b7533af2c7d",
          "length": 251,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "d179afc5-95dd-4a44-848d-2e905d8b8b0d"
        },
        "item": {
          "id": "ce62595e-3ca8-4d97-956a-fb8fc1c2e5fc",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "ae8768e8-9ce7-4bc0-aaf4-a36f84f12c89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb881716-61e0-43ae-a133-b1d736ccfccb",
        "cursor": {
          "ref": "0c691931-7638-41bf-a706-8fe2139fb03f",
          "length": 251,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "1776db42-74a7-4b04-bda7-42614293d670"
        },
        "item": {
          "id": "eb881716-61e0-43ae-a133-b1d736ccfccb",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "bb833b31-1aab-48c0-9819-cd5dea79dba3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45f11a51-cab5-428b-aa75-267aa5b1aefa",
        "cursor": {
          "ref": "fab9d684-8b0c-4c85-be83-6b0b2b15d458",
          "length": 251,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "8717ea64-cb06-4cc4-aa79-d6877f76413b"
        },
        "item": {
          "id": "45f11a51-cab5-428b-aa75-267aa5b1aefa",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "9f69c207-2e20-47c8-a839-a16f66f2fbe0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07941b34-c215-4413-ba71-8267e5552b53",
        "cursor": {
          "ref": "c3692b46-78db-45d7-a09a-d1b0831f968a",
          "length": 251,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "3fd88da9-8d34-4393-b562-d3bd081b4f75"
        },
        "item": {
          "id": "07941b34-c215-4413-ba71-8267e5552b53",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "52b5e7ec-b579-4355-9fff-56360875eccc",
          "status": "Created",
          "code": 201,
          "responseTime": 334,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "3775e14e-0632-4b7c-9a81-222778f32655",
        "cursor": {
          "ref": "5324c677-426e-4606-b8b8-def7bfcadfdc",
          "length": 251,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "dc751654-2d20-49c7-82ca-c43a59451d8d"
        },
        "item": {
          "id": "3775e14e-0632-4b7c-9a81-222778f32655",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "79e17cd8-2d5e-40a1-a346-0247baadf537",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b7e23eb-ebd0-4454-b834-58832d7da82c",
        "cursor": {
          "ref": "1d856aa7-eb4a-4571-8ea7-dd5abf718b38",
          "length": 251,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "abda8625-1daf-424f-9ac4-862ff9de0e86"
        },
        "item": {
          "id": "7b7e23eb-ebd0-4454-b834-58832d7da82c",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "36498ffc-842d-4943-b4d6-2d1353d93759",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0e5e754-c2f7-4562-94ae-d2c3624b691f",
        "cursor": {
          "ref": "238f0ace-7b1d-45e3-bf81-8361c9624536",
          "length": 251,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "2282e7c3-ceb4-4ac5-a258-abe00b04a124"
        },
        "item": {
          "id": "a0e5e754-c2f7-4562-94ae-d2c3624b691f",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "3210174b-b029-4f0f-a412-a69e9a1e84d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 389
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82b502a2-5123-4ee8-b786-67a859f39148",
        "cursor": {
          "ref": "ef7332fe-35ba-4ee5-945f-2b9639070c66",
          "length": 251,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "bfadcc86-01bb-4e09-bb80-7cf1421d59e5"
        },
        "item": {
          "id": "82b502a2-5123-4ee8-b786-67a859f39148",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "5b475bd0-663f-45f8-8dc4-8ae056bb13ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 388
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f67979e-aab4-4566-a135-9304406a4322",
        "cursor": {
          "ref": "b9bce403-f75a-470c-8689-f591a7a80eb6",
          "length": 251,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "47ced9dc-b403-460f-a40d-01645ab61ad9"
        },
        "item": {
          "id": "2f67979e-aab4-4566-a135-9304406a4322",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "6d82ae89-4ffc-4455-8e1f-34fa19f022fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59f500a3-8776-4057-a6c1-954130aee758",
        "cursor": {
          "ref": "6a3725a5-d057-4cfe-b915-d485f86678a7",
          "length": 251,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "8d74b0ba-829e-41da-817f-f044a0fed4b9"
        },
        "item": {
          "id": "59f500a3-8776-4057-a6c1-954130aee758",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "2c85e5b0-0cad-41c6-b083-79d293711d80",
          "status": "Created",
          "code": 201,
          "responseTime": 322,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "4d283636-ed3a-466a-9799-fd327b9dc04d",
        "cursor": {
          "ref": "c4c95ec9-d6a8-4a9f-a4e1-977773e2e0ee",
          "length": 251,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "d2a5434e-acb4-434a-adcc-0735755b869a"
        },
        "item": {
          "id": "4d283636-ed3a-466a-9799-fd327b9dc04d",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "cf86c44a-71c4-4702-867b-2d9d9505c5f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68994af0-c6b9-43da-9909-398acb7f5eb5",
        "cursor": {
          "ref": "04b55944-b467-4cb1-aa41-5e5ddc901ff0",
          "length": 251,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "2abc9c1f-c56a-4d2d-9728-2ca4196646bc"
        },
        "item": {
          "id": "68994af0-c6b9-43da-9909-398acb7f5eb5",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "c8e4e262-0606-44d9-93c7-4aff71cb0e5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2131f462-76c1-478e-b8d7-9206aeb98f23",
        "cursor": {
          "ref": "f1b07647-9155-4d63-adcf-f9d800ae9d40",
          "length": 251,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "1b4d8b92-66b7-445b-bbfb-ff80f1df1042"
        },
        "item": {
          "id": "2131f462-76c1-478e-b8d7-9206aeb98f23",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "9016fa09-57bc-4eac-9fd9-ba4beefef1d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b47504b3-bdf2-41e9-b3cc-42995c5c5d25",
        "cursor": {
          "ref": "4570bfa9-d4fc-4da2-bbf5-43bd4c6cc609",
          "length": 251,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "83bc30cc-2493-4ab4-a137-072fc3319a9b"
        },
        "item": {
          "id": "b47504b3-bdf2-41e9-b3cc-42995c5c5d25",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "c1cde6fd-6bdd-4421-908d-2ce3a8075d8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e8cd2ef-6658-4390-950c-24358804564e",
        "cursor": {
          "ref": "36e41d95-e05e-42f0-9c9a-3a4642cf9ff7",
          "length": 251,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "772009d5-2d57-47c8-9823-89cea614e7f4"
        },
        "item": {
          "id": "5e8cd2ef-6658-4390-950c-24358804564e",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "cacfb78e-2754-49c8-bbaf-ec9604102e49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d404791d-a532-404f-8d69-af00f8292a8a",
        "cursor": {
          "ref": "1b8a375a-a2be-4b22-b5fe-3bfcd4dcd658",
          "length": 251,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "621c04f4-a5eb-4705-a13d-c263122c6014"
        },
        "item": {
          "id": "d404791d-a532-404f-8d69-af00f8292a8a",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "f2f7ec44-1f14-4b02-bef3-8695140ad6c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "969aab4c-688f-43ed-9f2a-e99cab9d5e28",
        "cursor": {
          "ref": "2a74787a-e94c-42f8-b8d0-3c84359f8837",
          "length": 251,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "2d9dbfb2-36f4-4f5b-87c2-f5584740cb0d"
        },
        "item": {
          "id": "969aab4c-688f-43ed-9f2a-e99cab9d5e28",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "a2fd9f68-ff68-4824-8f42-7f9a09ff76c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8dd1e015-78db-40c8-bf8b-83c0bbb217ec",
        "cursor": {
          "ref": "f2b0a652-1979-47e9-b0cc-41fae2844403",
          "length": 251,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "27965918-def0-40d1-b8fd-7a2b40b999b3"
        },
        "item": {
          "id": "8dd1e015-78db-40c8-bf8b-83c0bbb217ec",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "d4e3c9ee-0cfc-4e25-a31e-062c2e76e06e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "699e2722-18ca-421a-97be-2d7813fdd6f8",
        "cursor": {
          "ref": "f8c0ee0b-47dc-4b48-9342-8da1f0a4f572",
          "length": 251,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "0faf3826-26d9-4356-a336-c68048a6cf95"
        },
        "item": {
          "id": "699e2722-18ca-421a-97be-2d7813fdd6f8",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "adca182e-44c4-4d23-a06f-d37083ab51d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "7e70a85a-68c6-4c6b-865b-9170db898097",
        "cursor": {
          "ref": "263026e9-257d-4867-bce5-184c2e135859",
          "length": 251,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "f8b6862a-2ac0-4b3b-abd1-fce787269ffe"
        },
        "item": {
          "id": "7e70a85a-68c6-4c6b-865b-9170db898097",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "2c0f595a-f529-4985-9242-0e0a35ba00c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 145,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "5aa3230c-a6e4-4e99-8c10-9cba3feb19d1",
        "cursor": {
          "ref": "bd84c4a4-098c-4bca-91b6-830e5826d52f",
          "length": 251,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "f0a04d70-4448-4559-bb94-ac2f61800238"
        },
        "item": {
          "id": "5aa3230c-a6e4-4e99-8c10-9cba3feb19d1",
          "name": "credentials_issue"
        },
        "response": {
          "id": "e200b226-0cfa-4c8b-9605-9e1aecc18b16",
          "status": "Created",
          "code": 201,
          "responseTime": 485,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "72d017b7-0608-497c-8599-2855b24ca961",
        "cursor": {
          "ref": "6561aa92-6c98-412f-ab58-ed81e13d8df4",
          "length": 251,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "30bd33de-8a4f-4e42-b693-a2e48dfe468c"
        },
        "item": {
          "id": "72d017b7-0608-497c-8599-2855b24ca961",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "300f244a-83b4-4d78-b3d8-70b261c01f78",
          "status": "Created",
          "code": 201,
          "responseTime": 302,
          "responseSize": 591
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b58e6e16-de1f-42af-bcff-21b09d269885",
        "cursor": {
          "ref": "c7555c44-54ee-45c6-9650-da3c87f1b9c2",
          "length": 251,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "ab23e3d0-ad50-4249-82db-0f1c7cee65f5"
        },
        "item": {
          "id": "b58e6e16-de1f-42af-bcff-21b09d269885",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "0a7555ca-2d52-4ef4-a441-b97de8449f9a",
          "status": "Created",
          "code": 201,
          "responseTime": 285,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "aede904f-3ccc-481a-91da-2b188ae6e1d6",
        "cursor": {
          "ref": "0f849283-ae9d-4699-891b-e80d699e4600",
          "length": 251,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "85580cf5-f823-43b9-91f6-6a6d1a757d38"
        },
        "item": {
          "id": "aede904f-3ccc-481a-91da-2b188ae6e1d6",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "e742b571-2281-47b2-bd20-e57220768de8",
          "status": "Created",
          "code": 201,
          "responseTime": 320,
          "responseSize": 560
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8ea3ea6-3bbd-4e80-b4ee-74899cfc1121",
        "cursor": {
          "ref": "c6eedc24-8d36-45d7-90ef-afba21d7839d",
          "length": 251,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "b01b04ba-30f8-41b5-934a-2c6c58d0bce7"
        },
        "item": {
          "id": "c8ea3ea6-3bbd-4e80-b4ee-74899cfc1121",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "c65e41f8-b882-4fa2-9353-a4602c431e1e",
          "status": "Created",
          "code": 201,
          "responseTime": 298,
          "responseSize": 528
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "28f12b52-af56-4ecf-a283-0374bc9f0ad6",
        "cursor": {
          "ref": "df0fcfca-9891-45dc-9687-36f3b48c4848",
          "length": 251,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "f6288c5e-a2e2-41ab-b011-99bd90bf85d7"
        },
        "item": {
          "id": "28f12b52-af56-4ecf-a283-0374bc9f0ad6",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "4e10e256-3cc2-4e2f-9dab-a2b4c7a9b5a2",
          "status": "Created",
          "code": 201,
          "responseTime": 314,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e30ce5e8-a9a5-40bf-a451-fd99a78bbb12",
        "cursor": {
          "ref": "fcb7d8e7-12b5-4a1b-a4c4-3ede83910fd4",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "219f1920-cb70-4a00-8045-e25a9c431171"
        },
        "item": {
          "id": "e30ce5e8-a9a5-40bf-a451-fd99a78bbb12",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "82f9a258-31e4-45e5-8ff9-d25344922750",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "e30ce5e8-a9a5-40bf-a451-fd99a78bbb12",
        "cursor": {
          "ref": "fcb7d8e7-12b5-4a1b-a4c4-3ede83910fd4",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "219f1920-cb70-4a00-8045-e25a9c431171"
        },
        "item": {
          "id": "e30ce5e8-a9a5-40bf-a451-fd99a78bbb12",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "82f9a258-31e4-45e5-8ff9-d25344922750",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "fbc86531-d789-4169-b4b0-1f4f63bd9e7d",
        "cursor": {
          "ref": "9056229e-1e1f-4928-8e0e-7c859c2da0ab",
          "length": 251,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "06c07306-e6d7-413e-a26a-4c30530a51dd"
        },
        "item": {
          "id": "fbc86531-d789-4169-b4b0-1f4f63bd9e7d",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "7f892c1f-18a5-4d75-9f64-5eca1a16cf74",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "361a05b6-e98b-41f1-a363-28d1e1567d88",
        "cursor": {
          "ref": "5f91e99f-b307-4a97-bc4b-7d56d9705e61",
          "length": 251,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "4df9f904-21ce-41ee-84ee-2204cf4c443e"
        },
        "item": {
          "id": "361a05b6-e98b-41f1-a363-28d1e1567d88",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "838d66e6-2535-46f1-a03e-83ae813281e0",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "922ce51a-55bc-4dab-9357-1c5585efa216",
        "cursor": {
          "ref": "b09c5e27-f818-4617-905a-38ea7e22fafd",
          "length": 251,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "438892d2-49cc-4f95-b831-505c95400e7b"
        },
        "item": {
          "id": "922ce51a-55bc-4dab-9357-1c5585efa216",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "11fea95b-fccb-4d91-b997-27b762ad8017",
          "status": "OK",
          "code": 200,
          "responseTime": 34,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "65b101b1-09c6-499e-a8d5-647496aa254a",
        "cursor": {
          "ref": "ed4a9cc8-8312-4177-9361-0b4b40dfd05b",
          "length": 251,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "557cb8a2-79fe-4f8a-ae21-81cb891cf3e5"
        },
        "item": {
          "id": "65b101b1-09c6-499e-a8d5-647496aa254a",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "c1868bc2-ecd5-469b-b58c-1317e8c713a0",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "1c7a5a64-30ed-4290-a93b-025d1c75e11f",
        "cursor": {
          "ref": "aace6428-1181-4a22-b84d-da4ab42c2cf0",
          "length": 251,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "cb47c98d-f49f-47f3-a3ae-c77400d980f4"
        },
        "item": {
          "id": "1c7a5a64-30ed-4290-a93b-025d1c75e11f",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "d2ba44b5-ea6c-471b-a3a3-be15901e58ff",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "4680c4b4-8c1c-4e87-9a17-2d814a044d19",
        "cursor": {
          "ref": "3c3f35c6-0917-47ab-949e-2a1f5f524eb8",
          "length": 251,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "4a7cfb45-4f65-4cba-8b39-ae610ba312a8"
        },
        "item": {
          "id": "4680c4b4-8c1c-4e87-9a17-2d814a044d19",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "3de0031e-db41-4832-8708-b7e22437d76b",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "1832e33e-787c-4a41-87b8-9ba2704aa393",
        "cursor": {
          "ref": "c2a03d7b-11db-412f-99a9-af880455e75e",
          "length": 251,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "a8769c15-8043-4c9b-a04b-10094a1a656e"
        },
        "item": {
          "id": "1832e33e-787c-4a41-87b8-9ba2704aa393",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "8ced7d10-5be6-46cf-9690-b215a9b54295",
          "status": "OK",
          "code": 200,
          "responseTime": 34,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "6e3ab121-ba4e-4c9f-976d-cdf950879785",
        "cursor": {
          "ref": "6328963a-bf43-4977-ae27-ccbf22f8b42f",
          "length": 251,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "761e5e6f-6e4b-428a-b9d5-68cf52af85f5"
        },
        "item": {
          "id": "6e3ab121-ba4e-4c9f-976d-cdf950879785",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "9b6109b7-4707-4848-b6ed-589f5d25d100",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "400abb96-7c2c-457e-8773-732bc1d469b2",
        "cursor": {
          "ref": "67664779-7342-4665-8fe7-6f149a07ec19",
          "length": 251,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "f979d036-4367-45b3-80f1-c3199e232e93"
        },
        "item": {
          "id": "400abb96-7c2c-457e-8773-732bc1d469b2",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "68c4d1cd-bdbe-4243-9876-9fab80b809a9",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "92cf46d8-da13-45f0-ba7f-5eba062db3cf",
        "cursor": {
          "ref": "2c2c0469-397c-4bcf-8655-19f7a39667aa",
          "length": 251,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "c49f7841-5c0a-4a2b-a01e-0262b7507e61"
        },
        "item": {
          "id": "92cf46d8-da13-45f0-ba7f-5eba062db3cf",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "d653c3c5-1d12-4623-82e7-53fdda0a5130",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "c36652a2-8489-4126-ad22-c793dad5fa7f",
        "cursor": {
          "ref": "08d3caf5-718b-4e51-9a82-f381b0d084af",
          "length": 251,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "9831b577-ecac-41b8-a324-e662420c8443"
        },
        "item": {
          "id": "c36652a2-8489-4126-ad22-c793dad5fa7f",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "97cf623c-d6b1-4b15-a77e-bf656129d291",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "5dba328a-deae-4293-b7c9-804290ca6c19",
        "cursor": {
          "ref": "2a1d1ea6-5c2c-40ad-8186-603079960713",
          "length": 251,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "d4eb7a8a-0ad1-439d-aee1-af648e49a854"
        },
        "item": {
          "id": "5dba328a-deae-4293-b7c9-804290ca6c19",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "ed2564e1-6164-474c-853e-d340346c544e",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "7faa75ea-7af9-4e32-ac2e-bff824dca2a0",
        "cursor": {
          "ref": "ea2ffc1a-382d-4ac3-8f1c-84132de6df1f",
          "length": 251,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "1278f493-3a96-4356-8226-e31f48a08a21"
        },
        "item": {
          "id": "7faa75ea-7af9-4e32-ac2e-bff824dca2a0",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "ca9b7fb4-3531-487b-a101-9d42976143ca",
          "status": "OK",
          "code": 200,
          "responseTime": 35,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "8e4728f5-9726-4e1c-899c-9219df2576da",
        "cursor": {
          "ref": "bfb0ad27-9877-4778-9f1c-55c36cfa458d",
          "length": 251,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "a5ca5990-4ffb-45fd-ac23-e81e563f9652"
        },
        "item": {
          "id": "8e4728f5-9726-4e1c-899c-9219df2576da",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "b3ae3b1b-7be5-46cd-848d-c40bd951b8dc",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "5469af1a-b16d-4cef-91c5-c9836c4ce215",
        "cursor": {
          "ref": "96cf0b94-e53c-489f-9742-a13ffb59ba61",
          "length": 251,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "faa72c7d-54e8-4b1e-a1f9-e6d71a7f5daa"
        },
        "item": {
          "id": "5469af1a-b16d-4cef-91c5-c9836c4ce215",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "dd60554c-c414-4849-bfa6-5a9a79768570",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "2380d121-864d-4481-9d86-71a17048db5c",
        "cursor": {
          "ref": "6dd12945-fa2a-49af-a0d4-22959f7e3032",
          "length": 251,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "2f47fa2d-a1cb-4d6a-91da-58f4caa510ee"
        },
        "item": {
          "id": "2380d121-864d-4481-9d86-71a17048db5c",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "a8339901-a0fc-4421-b27e-8660f2d74972",
          "status": "OK",
          "code": 200,
          "responseTime": 35,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "dce4e8ea-6c13-499f-8730-1b8ce9935de0",
        "cursor": {
          "ref": "639551e1-49d5-49a5-b3e8-258513ae6d32",
          "length": 251,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "cbb88532-34a9-4c86-8c1b-3c613845e089"
        },
        "item": {
          "id": "dce4e8ea-6c13-499f-8730-1b8ce9935de0",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "f68b8cb7-d7f4-4619-94c4-1509a74c89e4",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "51cf0b78-469e-4931-a540-85bc5d8e02b6",
        "cursor": {
          "ref": "7ad40c6d-1a85-401e-b2d6-e1ec28fee2a8",
          "length": 251,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "01f65c02-66e8-4a27-a2ed-f4f8d57e9ca7"
        },
        "item": {
          "id": "51cf0b78-469e-4931-a540-85bc5d8e02b6",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "f4d26090-397a-4ffc-8f7d-86394d2c55b8",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "dc210740-5cd6-4520-8928-a50376044896",
        "cursor": {
          "ref": "d70bbd38-5f6d-4798-b096-30ba9421b9af",
          "length": 251,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "298d53c8-e147-4a03-932f-172353b189d5"
        },
        "item": {
          "id": "dc210740-5cd6-4520-8928-a50376044896",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "d122383b-7865-4029-9baa-284964ad9cf2",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "8933e456-a7f6-4d81-a80d-113932f44540",
        "cursor": {
          "ref": "1c5d9d26-1f76-447d-b453-655c71a71f1e",
          "length": 251,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "1696e667-e1bf-4bf6-8e20-b21384215296"
        },
        "item": {
          "id": "8933e456-a7f6-4d81-a80d-113932f44540",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "4d1c6d62-5eb6-49d3-a7b4-42edd5164ce2",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "f33e9f8c-5f29-4c87-a482-0dd8e7e5d853",
        "cursor": {
          "ref": "b0a9ede2-5542-43f7-b36a-5b5931e22f9d",
          "length": 251,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "18ed944e-4929-40f8-a179-311854a99b91"
        },
        "item": {
          "id": "f33e9f8c-5f29-4c87-a482-0dd8e7e5d853",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "1eb6402f-d763-4736-9659-8757cf0d23cf",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "d43a03d5-9ede-4bcb-8d3b-2756ec5ffcae",
        "cursor": {
          "ref": "485e3e76-e733-4af4-9821-bf9325f3d960",
          "length": 251,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "3de24545-5112-4ac2-ba48-23fb5c0ea1d1"
        },
        "item": {
          "id": "d43a03d5-9ede-4bcb-8d3b-2756ec5ffcae",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "7271e119-c5fd-4d13-92f9-eee47d5f2258",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "127e86da-8302-4b44-a867-e38936fa8868",
        "cursor": {
          "ref": "1c625d1d-15ff-47f5-a9d7-34bf1927ab4c",
          "length": 251,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "fd273439-4fd0-4ce4-ad22-6c570ef29428"
        },
        "item": {
          "id": "127e86da-8302-4b44-a867-e38936fa8868",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "7f456d28-6cc3-4513-ac4a-77b8e2851501",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "555cb6df-9da3-4ee7-9203-8b9b313bf40f",
        "cursor": {
          "ref": "adbe89e4-b18b-4db7-8943-24e84bfd579e",
          "length": 251,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "ac34953f-78d0-4d78-a9c8-93f77d2c00d7"
        },
        "item": {
          "id": "555cb6df-9da3-4ee7-9203-8b9b313bf40f",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "0f65e794-3669-47a9-8113-f4c279424ba4",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "49f06da8-a7d7-4ff8-89cf-f069773144f0",
        "cursor": {
          "ref": "29703316-3561-44c9-95ff-5204b82fdbac",
          "length": 251,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "612365e6-9440-4a5b-a764-ed96d775aea0"
        },
        "item": {
          "id": "49f06da8-a7d7-4ff8-89cf-f069773144f0",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "6c85b393-d015-45d2-adf1-d690ebfd4435",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "c457030c-152d-402e-8ea0-2c25c355338f",
        "cursor": {
          "ref": "6fb289c3-0e7f-45e8-8e77-89da4cfe91fb",
          "length": 251,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "e756f24c-6649-409a-a223-f5b7d3a94065"
        },
        "item": {
          "id": "c457030c-152d-402e-8ea0-2c25c355338f",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "939f9fc2-8336-4a75-807d-f7aef9bc6738",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "157aa0cc-4bee-43da-a621-5fc9458f8a3a",
        "cursor": {
          "ref": "b95523e5-dccb-4889-b58b-118a60c96e96",
          "length": 251,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "66b10394-b895-4f89-b5c9-b476066e2bdb"
        },
        "item": {
          "id": "157aa0cc-4bee-43da-a621-5fc9458f8a3a",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "17a79933-0f53-4317-ada2-a1a6ce2a5284",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "f453c2a0-7e3e-4f0c-866e-9fc419e058d4",
        "cursor": {
          "ref": "e496d3ef-5110-4eb3-8897-86194deb8f61",
          "length": 251,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "5f1eeae9-3351-4f8f-9b6e-7c6561d0b6ba"
        },
        "item": {
          "id": "f453c2a0-7e3e-4f0c-866e-9fc419e058d4",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "1e15f70a-fb57-4d03-b26e-a04f7cfdb972",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "3e30b94c-1c46-4f2a-addd-d93818596475",
        "cursor": {
          "ref": "04202b17-a478-41b4-9da1-2232f2109332",
          "length": 251,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "dedd1b4e-0805-4982-8b46-7a0f53c5572e"
        },
        "item": {
          "id": "3e30b94c-1c46-4f2a-addd-d93818596475",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "516c0d9a-8c67-41cc-bb4a-7245477a5528",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "fd6347df-4599-468a-9a0f-d3779e1966a5",
        "cursor": {
          "ref": "5e06b7b1-13be-4c3e-be7c-3e9870d0f675",
          "length": 251,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "848a071c-44b5-4ac7-8466-dbf3d2c5c2be"
        },
        "item": {
          "id": "fd6347df-4599-468a-9a0f-d3779e1966a5",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "e4021470-7dbc-4b8a-82ba-0e014a50c7a6",
          "status": "OK",
          "code": 200,
          "responseTime": 34,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "10d72070-b086-4c77-860d-48de18c5de7a",
        "cursor": {
          "ref": "62510869-851e-40dd-8184-5f6b344998f2",
          "length": 251,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "1737da5a-8f4a-41e0-8d46-b8e6b00d7b87"
        },
        "item": {
          "id": "10d72070-b086-4c77-860d-48de18c5de7a",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "c79b46c5-4526-46c2-8944-8347803aadfa",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "a1e7d59d-7d2c-4890-95fb-fc0f7ca82e6e",
        "cursor": {
          "ref": "2e2925b6-8e9c-4b58-9d99-46056f96febe",
          "length": 251,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "1aa9feb5-3b84-44ff-a568-a9ddf72bda5e"
        },
        "item": {
          "id": "a1e7d59d-7d2c-4890-95fb-fc0f7ca82e6e",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "9a5ea61f-cdab-4319-a14f-c5c88db14561",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 34,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ec51500-82e2-4bcd-8b3f-9afc712e940d",
        "cursor": {
          "ref": "1353ef24-9ad5-418a-a400-bfbb058b0230",
          "length": 251,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "0ac69dd8-8faf-4e97-b19c-c29106ce47b0"
        },
        "item": {
          "id": "3ec51500-82e2-4bcd-8b3f-9afc712e940d",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "394f87bd-ded8-48e2-8e6f-22f06b5cf201",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 33,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8770a5b0-0063-4f50-be7e-f3b0d9fcc871",
        "cursor": {
          "ref": "eb989d9a-f9f8-4463-9e47-0198a2ff75b1",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "75c30adb-6c0e-4e58-95cf-0d66252684f8"
        },
        "item": {
          "id": "8770a5b0-0063-4f50-be7e-f3b0d9fcc871",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "3b8998ed-d786-4516-8fe3-85aa08edf15b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8770a5b0-0063-4f50-be7e-f3b0d9fcc871",
        "cursor": {
          "ref": "eb989d9a-f9f8-4463-9e47-0198a2ff75b1",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "75c30adb-6c0e-4e58-95cf-0d66252684f8"
        },
        "item": {
          "id": "8770a5b0-0063-4f50-be7e-f3b0d9fcc871",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "3b8998ed-d786-4516-8fe3-85aa08edf15b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36e60081-c4ca-48b1-8c57-25c5afd3fc73",
        "cursor": {
          "ref": "1357ea77-04c2-4430-907a-6f860c613b9d",
          "length": 251,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "ac997982-2ada-4d88-8bdc-32d3b8cd1b1c"
        },
        "item": {
          "id": "36e60081-c4ca-48b1-8c57-25c5afd3fc73",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "a3998cec-30b3-46a9-97b9-00a3e89b9c52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef8ff287-8712-4424-85ce-a5e8ceb9d389",
        "cursor": {
          "ref": "fb2a5e59-2c3a-431f-b0d6-860359ee5957",
          "length": 251,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "9598c146-999f-4ece-846d-1decc622da6a"
        },
        "item": {
          "id": "ef8ff287-8712-4424-85ce-a5e8ceb9d389",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "189287f8-808d-43b1-994c-0a79fc5405c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1267d411-790e-4636-a22b-e0c7cc7c6f18",
        "cursor": {
          "ref": "914ec76a-7c70-45b4-92de-e3a90cd3d03e",
          "length": 251,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "9f0fec43-cdd0-44f6-91c9-0b4634e63f7c"
        },
        "item": {
          "id": "1267d411-790e-4636-a22b-e0c7cc7c6f18",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "dc19ca58-2522-4d6c-8e31-01344eba7cda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27403895-f443-46d6-905b-22388d9fe31f",
        "cursor": {
          "ref": "cdafad07-0667-4135-a65a-f944d258f871",
          "length": 251,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "952a8b14-8d81-48ba-baeb-5a6d6bdef36f"
        },
        "item": {
          "id": "27403895-f443-46d6-905b-22388d9fe31f",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "a13f9d2f-2cd9-40b5-882a-1f727e0dbd99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a454ad0-84d6-44cf-9c86-0001dc5a4b43",
        "cursor": {
          "ref": "2e85a52a-4bdb-49df-b965-ae9464429658",
          "length": 251,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "4ba53cde-2b16-4d32-befe-5f29bfb737b3"
        },
        "item": {
          "id": "2a454ad0-84d6-44cf-9c86-0001dc5a4b43",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "80ac720a-4bfb-4bf1-80c1-b26a6b986cc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e2cc3a8-50b6-4c0b-9c26-39bf12ae71df",
        "cursor": {
          "ref": "7bb1a531-2c20-46e2-82f4-2b43766bc8a0",
          "length": 251,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "61e55e8c-c984-472d-a8ca-0be0b14022a4"
        },
        "item": {
          "id": "5e2cc3a8-50b6-4c0b-9c26-39bf12ae71df",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "0d4f9aea-2ba6-449c-97a5-c0ea6113e925",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 551,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fbb447d-dead-497a-94e7-7f8b3c8ba66a",
        "cursor": {
          "ref": "2bde7c54-940f-4464-9c24-bdde9b62a2cd",
          "length": 251,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "fffa8df7-8805-4eab-bdee-0e6804837f15"
        },
        "item": {
          "id": "2fbb447d-dead-497a-94e7-7f8b3c8ba66a",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "ab1896f7-0424-40e7-881b-5716b7060227",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdcd87b0-e6ad-4c8f-bbd0-984bf431143a",
        "cursor": {
          "ref": "7b03b957-5e14-42f7-b2c9-b941127b4cca",
          "length": 251,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "9c65a856-8f9e-47c2-9e20-986fc9548314"
        },
        "item": {
          "id": "fdcd87b0-e6ad-4c8f-bbd0-984bf431143a",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "8f753c19-a60a-46cc-b517-3885ad1d4121",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe79b9cf-7827-4935-bc73-aa18c0310e0b",
        "cursor": {
          "ref": "20db62c0-b510-4d09-a093-01404625ffe9",
          "length": 251,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "f0e7913a-5279-4877-893d-5c7bd86d81e6"
        },
        "item": {
          "id": "fe79b9cf-7827-4935-bc73-aa18c0310e0b",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "e404d879-01c9-481c-be59-e02ecae7e220",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c73fd5b-f96b-4aaa-8584-88f2cfeb4c9f",
        "cursor": {
          "ref": "8c38656d-b4da-4b69-af89-ee9597d7b3b8",
          "length": 251,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "10a63d53-39e4-401e-8b2b-7b8b09cbd416"
        },
        "item": {
          "id": "0c73fd5b-f96b-4aaa-8584-88f2cfeb4c9f",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "e47b354c-10ca-466a-9aa4-fb6f02f9d27a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b544508-de12-4684-b96f-9e3b104dd37d",
        "cursor": {
          "ref": "33e0a8b1-24cf-45ad-8ee7-a40113cf4815",
          "length": 251,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "61cbeeae-59e8-4e8a-9e83-2bf027f40084"
        },
        "item": {
          "id": "1b544508-de12-4684-b96f-9e3b104dd37d",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "f61940c8-31c3-4a14-8e94-ee816b37a5a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79497efb-7f38-4e10-be89-1f4d17b15d37",
        "cursor": {
          "ref": "2d9bbbd5-e7f1-44c7-90df-e292360f18bc",
          "length": 251,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "ace101bd-d823-4c1e-85a5-b49db8feb789"
        },
        "item": {
          "id": "79497efb-7f38-4e10-be89-1f4d17b15d37",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "a06856d7-e8f5-463e-90a8-f8a6f5414409",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cfb4794-bca1-450a-be08-4ea75c78a36b",
        "cursor": {
          "ref": "3f7994c3-43df-4e71-bc83-5a82fb27fc33",
          "length": 251,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "5d7ccebf-9fd0-4fe6-a3fc-409d1eb377f1"
        },
        "item": {
          "id": "2cfb4794-bca1-450a-be08-4ea75c78a36b",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "25142b1f-66a6-4002-88a4-d71b060d8e91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "742ed371-b5d8-4d6d-9179-8170fcc1c9cd",
        "cursor": {
          "ref": "a6146041-9004-4539-92a9-77313ffc0b6d",
          "length": 251,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "c95ffe2d-c08a-4024-951d-6f752c6a9d02"
        },
        "item": {
          "id": "742ed371-b5d8-4d6d-9179-8170fcc1c9cd",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "028bd6fa-3d85-49f0-b2cc-4a96da5e8627",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a69e617-d150-4d13-abf5-6f14756529f6",
        "cursor": {
          "ref": "cbc87141-4664-40ad-9756-1ddf1220dfe5",
          "length": 251,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "4986546e-94cb-413f-ae02-bcf75519baad"
        },
        "item": {
          "id": "2a69e617-d150-4d13-abf5-6f14756529f6",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "a3482251-b8c0-4e1c-b4b2-9a0602dba8cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "600d2ce7-63a3-40ce-bb95-483ccb199d73",
        "cursor": {
          "ref": "b488c64a-1488-4e54-9553-edb8f593f55b",
          "length": 251,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "32e311f1-66a9-49bd-9ce9-5c3561c5531b"
        },
        "item": {
          "id": "600d2ce7-63a3-40ce-bb95-483ccb199d73",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "95004f06-2485-402e-a0f1-d893778a4c80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e946ab32-f090-4af5-8518-d60f413adddb",
        "cursor": {
          "ref": "310be85f-8028-485b-b694-c30ca919cfae",
          "length": 251,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "b6ad45db-116f-4cef-9f8e-e7effc5edfeb"
        },
        "item": {
          "id": "e946ab32-f090-4af5-8518-d60f413adddb",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "618d9e05-14b4-4c41-9494-5789109ef05a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 423,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dad7910e-0226-4803-8b01-1c02ae796190",
        "cursor": {
          "ref": "596e834e-e311-4266-8341-376be59c1c67",
          "length": 251,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "1ae9b111-2cf2-46cb-b1cf-06313e138b86"
        },
        "item": {
          "id": "dad7910e-0226-4803-8b01-1c02ae796190",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "c07b8489-4b77-4e5c-90a3-e009f509a95f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 219,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32df793c-438f-4883-9067-97f43c0b5db7",
        "cursor": {
          "ref": "79df686d-1ed7-4b7b-92c9-7c5cc3f3b47f",
          "length": 251,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "79507bd2-5066-49d9-9ac8-da5a932b988c"
        },
        "item": {
          "id": "32df793c-438f-4883-9067-97f43c0b5db7",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "2d2ec160-00eb-4e28-b162-c7c1e2aeeb54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 204,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a44a4b25-e36b-436f-9a1f-6fbcaccaad59",
        "cursor": {
          "ref": "3970a900-0223-4a0d-93f0-cb6f1cf5e4ca",
          "length": 251,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "4b9cfcfb-9314-4426-b40b-5a060b83e2bd"
        },
        "item": {
          "id": "a44a4b25-e36b-436f-9a1f-6fbcaccaad59",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "356b1dfe-a278-434e-a840-a071eaef4149",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 192,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "600a9db1-f898-44b0-8dc4-2ea7be604bfe",
        "cursor": {
          "ref": "c62c5ea6-2ef4-4347-9d2e-bc26c308e89d",
          "length": 251,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "bebffff6-b696-4f46-b74d-9f1428a2e99a"
        },
        "item": {
          "id": "600a9db1-f898-44b0-8dc4-2ea7be604bfe",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "9223f3b7-e6ff-4183-ac95-391fdb5d71a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 203,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2e6c4ee-a9ee-4ab2-8ebb-4090b27571bd",
        "cursor": {
          "ref": "7f2f5783-e0fb-43bb-b581-f70121cbfe30",
          "length": 251,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "eaf7a2d4-d288-41aa-b18a-4324e24bf8cc"
        },
        "item": {
          "id": "c2e6c4ee-a9ee-4ab2-8ebb-4090b27571bd",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "0c38640a-af9b-4bfd-a98d-6931d83dc996",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 201,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7388abaa-7dd7-4e36-96c5-d7f2242d3435",
        "cursor": {
          "ref": "632824bc-fabb-4f36-9012-20f314575100",
          "length": 251,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "9ee64804-f160-4c6c-9508-4f40ec93ce87"
        },
        "item": {
          "id": "7388abaa-7dd7-4e36-96c5-d7f2242d3435",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "36fb3750-584f-485b-9a79-b86ea0155591",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fac13747-95fe-400c-acdc-3cf4b204fc67",
        "cursor": {
          "ref": "762d1124-78d3-4cd8-ad62-3a1c28c95b59",
          "length": 251,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "94b6cafb-f7c3-4d55-aaaa-f82f9fe321d4"
        },
        "item": {
          "id": "fac13747-95fe-400c-acdc-3cf4b204fc67",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "911b83fd-e6c6-4719-b4c2-8bbb0cf1d418",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36d12488-32c8-41dc-a442-c4239116e094",
        "cursor": {
          "ref": "e4d6f1d9-fc44-4a48-88e1-0d356d912796",
          "length": 251,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "e738a1cc-3de7-4521-937b-ee51b30eefe6"
        },
        "item": {
          "id": "36d12488-32c8-41dc-a442-c4239116e094",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "2bef394a-2fd6-4060-997f-3b539f310b79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 236,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b72c240e-7825-4083-9e83-ee21a9848b51",
        "cursor": {
          "ref": "f36ad6e6-469e-494b-802f-32475d31ca3a",
          "length": 251,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "c081acb4-19f3-481b-b246-d44f835e5fbe"
        },
        "item": {
          "id": "b72c240e-7825-4083-9e83-ee21a9848b51",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "b56af020-8e02-48f0-8fc5-c00cb9aa6492",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06797c44-6c7c-417d-9019-684f55d8b7bc",
        "cursor": {
          "ref": "f566cb35-7111-460e-8ee5-6afb635ecf7b",
          "length": 251,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "9299e432-47f5-4a03-8fd0-f29ff56afb72"
        },
        "item": {
          "id": "06797c44-6c7c-417d-9019-684f55d8b7bc",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "334aee6b-9f05-41c3-bcbc-162d0851870b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "281ef320-112f-4a29-9588-a4da87a686db",
        "cursor": {
          "ref": "02780722-a48d-4f7f-a54f-23f4e97b3b3b",
          "length": 251,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "4fb2dde9-3c58-4964-bde2-aa53ca750b5d"
        },
        "item": {
          "id": "281ef320-112f-4a29-9588-a4da87a686db",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "5135e7ba-9b7d-40c0-922b-6bfb6f7c85de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 214,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4858b5ba-832b-4010-a050-199180122738",
        "cursor": {
          "ref": "efd0de1b-fe8a-4591-aefc-4d4fe5951b9c",
          "length": 251,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "a5a90dc7-5608-4cab-ae11-39a8383c664d"
        },
        "item": {
          "id": "4858b5ba-832b-4010-a050-199180122738",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "921455f9-a501-4f6b-9206-44299d7e529c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "045bc950-07d3-4f39-b5b2-3ba114565946",
        "cursor": {
          "ref": "3203e029-40aa-4a5d-b737-13e5b61787e1",
          "length": 251,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "edfcc684-1dc8-4ca6-ac93-36de5352e9e2"
        },
        "item": {
          "id": "045bc950-07d3-4f39-b5b2-3ba114565946",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "06ea44a3-f4d7-4c6f-b599-796a5fd0ccaf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a9cff0d-40bd-472d-8f45-8eae4e276422",
        "cursor": {
          "ref": "03615453-9528-41e9-b47d-d5c1e817a616",
          "length": 251,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "2b2a0812-849b-4a72-b197-0fedfc8685cf"
        },
        "item": {
          "id": "1a9cff0d-40bd-472d-8f45-8eae4e276422",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "7335f150-b3f2-4707-bcdb-f9c94598bb6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "378f07e9-8d83-4b97-a715-6e875602f6c3",
        "cursor": {
          "ref": "b5d38898-728f-4d50-83c1-952624fbe345",
          "length": 251,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "937a5f6f-9f2f-4131-9727-792563623f59"
        },
        "item": {
          "id": "378f07e9-8d83-4b97-a715-6e875602f6c3",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "126e4a04-1c5b-4506-acc2-a90ac90c2f8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 247,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f189807f-7dd7-458d-b315-e4f43ae316af",
        "cursor": {
          "ref": "44e94b60-fdac-4132-a4a2-74aa06b6da10",
          "length": 251,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "ddf96ba3-84ed-44e7-8a25-84c4e59d2fbb"
        },
        "item": {
          "id": "f189807f-7dd7-458d-b315-e4f43ae316af",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "e079fc8b-4e96-4ef9-a1d7-e673d8c1cdf5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e06c8b00-0baf-4849-885d-f142cfc55c38",
        "cursor": {
          "ref": "c724952b-d7bd-4baa-b381-ce27a1fc052b",
          "length": 251,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "9c10cfd2-956e-4acf-af06-4cce9d55a92e"
        },
        "item": {
          "id": "e06c8b00-0baf-4849-885d-f142cfc55c38",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "dde43f53-22cd-4420-aaad-5ddc49a14a62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 223,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "019af389-283f-4256-97b4-7644d6cc917c",
        "cursor": {
          "ref": "b9b5836c-0972-431d-bc10-623ce15b6a64",
          "length": 251,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "55dcae68-606e-49fa-8456-ba92b091f20d"
        },
        "item": {
          "id": "019af389-283f-4256-97b4-7644d6cc917c",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "5166b3cc-7723-4d57-b4ee-dc770191679c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 200,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "600fc631-0da6-4bde-87fd-14232be0de71",
        "cursor": {
          "ref": "898a592f-6a66-4ed7-9ae5-73b18c03a782",
          "length": 251,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "da9308dc-18d5-4ab4-9633-1036f188c38f"
        },
        "item": {
          "id": "600fc631-0da6-4bde-87fd-14232be0de71",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "bd038045-da94-465e-99f9-dfb28e703d1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 208,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35607400-5eeb-4ef0-97dd-53a0941f68d3",
        "cursor": {
          "ref": "36745861-fe4b-4b07-ac19-72f3c0478b8f",
          "length": 251,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "2cf3bf33-76fc-42b5-abc7-4138dd319377"
        },
        "item": {
          "id": "35607400-5eeb-4ef0-97dd-53a0941f68d3",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "c0e2f852-753d-4119-91e0-596a84e13b7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 193,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6288c60e-29de-4c80-b8a2-4eecafb5674d",
        "cursor": {
          "ref": "8ba1f3d1-e345-48e3-91bd-3c99c24452bc",
          "length": 251,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "90fe22b5-60b5-4bfd-af6c-251e895ed1c7"
        },
        "item": {
          "id": "6288c60e-29de-4c80-b8a2-4eecafb5674d",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "682f9013-5dfd-4fe4-9f66-3b6fe00c1bbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 210,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "314eda4b-5914-493a-9bd8-9e2c5eb1fce3",
        "cursor": {
          "ref": "e9ebfa80-3132-4e33-8b39-078d7e1a36fc",
          "length": 251,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "5a053b64-0d5a-4a3d-af5f-56fb79ff244d"
        },
        "item": {
          "id": "314eda4b-5914-493a-9bd8-9e2c5eb1fce3",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "d184bcbd-98d5-4be9-845f-e9c623535647",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 202,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46062ae3-9644-4078-a077-724081009702",
        "cursor": {
          "ref": "ef780447-045f-4f8b-b696-ed65720bdabe",
          "length": 251,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "045b030b-fce2-4f4a-912e-47d8e3bd6f53"
        },
        "item": {
          "id": "46062ae3-9644-4078-a077-724081009702",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "f7c90fb2-5b76-4d21-a705-d2352d4a33cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 204,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37fcdf6b-d79e-4215-8c35-0301cd471ccf",
        "cursor": {
          "ref": "94afa229-76c7-4de1-b4a2-33993c78a31a",
          "length": 251,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "cfe4b1f0-2cbd-4213-888d-3fd9c0c6c4fe"
        },
        "item": {
          "id": "37fcdf6b-d79e-4215-8c35-0301cd471ccf",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "d4a5a2b6-5a62-4392-aa69-4d88e911adfd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 194,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b3bd1be-0e19-4e15-b944-ce96b940668a",
        "cursor": {
          "ref": "f683443f-cf0d-4e8d-bb42-46fff8d95cab",
          "length": 251,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "be226e2e-9562-47d0-af40-348c31c04838"
        },
        "item": {
          "id": "2b3bd1be-0e19-4e15-b944-ce96b940668a",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "a49ef7d5-985c-437d-856f-45cbee98fead",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 198,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8000115d-fe48-465e-a2f8-845aa8e6b0f1",
        "cursor": {
          "ref": "dcba86f5-f309-48e1-a6e3-902721155b5d",
          "length": 251,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "65da72d7-61fa-4ba2-bded-ecab65541d0a"
        },
        "item": {
          "id": "8000115d-fe48-465e-a2f8-845aa8e6b0f1",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "beb062f6-86fa-4307-ae48-12cddfac2d7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 235,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "473e6bfa-6bce-401b-b27f-2ac7be0263dc",
        "cursor": {
          "ref": "639d7c18-6e49-4340-bf8a-e9b14d0a223a",
          "length": 251,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "018ca4cc-61a1-4101-a38b-c11ef649313b"
        },
        "item": {
          "id": "473e6bfa-6bce-401b-b27f-2ac7be0263dc",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "400be1bb-b249-4089-a663-85b6e7534ae5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 191,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f28a363-3b09-4a9b-a1b5-a8623e665164",
        "cursor": {
          "ref": "a872ae6d-611c-4cec-be0b-631c9ef0f5fd",
          "length": 251,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "411daa73-b641-4c2b-9066-73ee710e80e5"
        },
        "item": {
          "id": "5f28a363-3b09-4a9b-a1b5-a8623e665164",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "6cb27042-eea4-4c3e-afcc-bd6b091de52e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 193,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c49aad5e-97e8-4740-b15b-0fe58bc45dfe",
        "cursor": {
          "ref": "35cbddfc-c0cf-43d5-89b6-497338f48f15",
          "length": 251,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "844a0fe1-ceb8-416c-a796-de52131af1d8"
        },
        "item": {
          "id": "c49aad5e-97e8-4740-b15b-0fe58bc45dfe",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "92defcec-c745-416e-ba6a-2740cac60f7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 202,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4dda2cc-09af-4bbd-9005-058e76519ecc",
        "cursor": {
          "ref": "0f09bc04-b4a3-465d-8f78-9e3f62ef59e4",
          "length": 251,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "8107e6d0-5acd-4cb1-9257-6e0b3a393a9c"
        },
        "item": {
          "id": "c4dda2cc-09af-4bbd-9005-058e76519ecc",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "131f22d7-a8da-44d0-931f-be77c5222573",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 197,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b249f26c-5799-417d-890d-1aa1deb5e395",
        "cursor": {
          "ref": "b54f7b3f-aa78-46c7-bee9-4adb174b01ec",
          "length": 251,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "21a2426a-524f-40f5-a62a-9f4b551b6625"
        },
        "item": {
          "id": "b249f26c-5799-417d-890d-1aa1deb5e395",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "62742b25-16fe-46ce-9ff8-2f12e5998277",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 215,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57df48d4-878a-4b05-b7d3-94cea92b5198",
        "cursor": {
          "ref": "09722a74-40d9-4530-af61-36235ddbb333",
          "length": 251,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "f498918d-8ae2-42ca-80de-c414798400b0"
        },
        "item": {
          "id": "57df48d4-878a-4b05-b7d3-94cea92b5198",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "7a28a966-5a79-462b-9830-f791f4b428e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 216,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be91fed2-f3f8-4247-956f-a96a6a3ead7d",
        "cursor": {
          "ref": "cde2a7c8-4aed-48b2-85d3-f7918f2f4ab0",
          "length": 251,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "db5ceb96-f11a-40b2-880f-0003ed5ee9f3"
        },
        "item": {
          "id": "be91fed2-f3f8-4247-956f-a96a6a3ead7d",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "c25dcda6-546a-4f7f-9f93-d3467d5f218b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 201,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "264671cb-ac8b-4a66-b2bb-9ebec04a1284",
        "cursor": {
          "ref": "9346ab80-fa69-4cc5-9bfe-b61283e65ae9",
          "length": 251,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "2d179410-9b9b-4303-8486-b78cbb14811f"
        },
        "item": {
          "id": "264671cb-ac8b-4a66-b2bb-9ebec04a1284",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "8ab0afbe-85f0-4198-be72-8cc602ed5a7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 200,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a80f439f-fac1-4ad2-9f52-045dd228f21f",
        "cursor": {
          "ref": "ac43b394-d390-4a8f-afe5-55470ce5dda3",
          "length": 251,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "a2a2f271-f9db-4cdb-b4d9-075d426ab4a5"
        },
        "item": {
          "id": "a80f439f-fac1-4ad2-9f52-045dd228f21f",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "becc19ce-da18-44da-b100-9856eb696a9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 216,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23d5d5c8-1900-4f44-a921-b8cba1ccd651",
        "cursor": {
          "ref": "4fc69d02-b563-40bc-8eed-647080a228e1",
          "length": 251,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "ad72cae6-f976-4371-9b32-f60d4fd5b192"
        },
        "item": {
          "id": "23d5d5c8-1900-4f44-a921-b8cba1ccd651",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "8aabb635-0727-44c6-bc64-3c33f769e334",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "180ecfbc-e87e-4d82-9df9-e2e5c778106c",
        "cursor": {
          "ref": "915da508-2f6a-4108-b79e-fa1c247d2f07",
          "length": 251,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "5ca6ebe6-7975-473f-b6b1-28f65804f062"
        },
        "item": {
          "id": "180ecfbc-e87e-4d82-9df9-e2e5c778106c",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "15928acd-c126-42a1-9b58-d7561a6431d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca11feaf-dedc-4d75-b15a-caa2a8e23ad9",
        "cursor": {
          "ref": "0bb58b9b-f7ec-498d-9b15-76e404bc4e8a",
          "length": 251,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "64c78e48-3c8b-44f8-9b62-c9ac3e0233e1"
        },
        "item": {
          "id": "ca11feaf-dedc-4d75-b15a-caa2a8e23ad9",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "a304317c-f78d-44c1-b542-430c2db1c900",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "934ba05b-3816-49e0-82a7-0a64d36831be",
        "cursor": {
          "ref": "a8b0ae05-f763-4079-9161-8cc9fcf0d109",
          "length": 251,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "df9eaf81-e2f4-4c01-9b8b-0ea15af95a5c"
        },
        "item": {
          "id": "934ba05b-3816-49e0-82a7-0a64d36831be",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "7ddb0ae4-5d75-4526-9647-96f5e0bc14ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 230,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5e47f9b-85b7-432f-9b88-b9504221d222",
        "cursor": {
          "ref": "5487284c-ace2-4375-8c4e-050147f5ecb2",
          "length": 251,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "c99fb459-1da7-46f9-9f1b-83d5bb0998cc"
        },
        "item": {
          "id": "f5e47f9b-85b7-432f-9b88-b9504221d222",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "ff3b9a1d-6930-4eb5-aa00-cc8e92f6616d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e72cde73-a6ba-4c22-980a-080836e42694",
        "cursor": {
          "ref": "55a390ea-0213-4acd-9de4-fb4f3a88401e",
          "length": 251,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "baa9eeb6-a8ad-4098-84a3-2ebdb89e5fee"
        },
        "item": {
          "id": "e72cde73-a6ba-4c22-980a-080836e42694",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "c048c0ca-eaa0-4007-b546-c8e86aa66897",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f5a2f65-0cb2-4bb2-bd91-747a3988cc4a",
        "cursor": {
          "ref": "68f7488a-d3bb-4b84-8a56-b8a34cf3a03f",
          "length": 251,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "d67156ce-0edd-46d9-a06d-f46e1d7ac76e"
        },
        "item": {
          "id": "0f5a2f65-0cb2-4bb2-bd91-747a3988cc4a",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "ac388549-5cf0-495a-bacd-8825b8a8b0d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 113,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e18cf2bd-ed08-4dca-abc4-4bf5121ebe4e",
        "cursor": {
          "ref": "ffefaf07-784b-4de3-a056-5fd28a757535",
          "length": 251,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "70c6f59e-06f7-4050-8504-e8ab17050d93"
        },
        "item": {
          "id": "e18cf2bd-ed08-4dca-abc4-4bf5121ebe4e",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "f6d819da-15a8-40e6-9b37-299ae694beb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "333f9095-bf9d-4d7c-9564-d582b852fed6",
        "cursor": {
          "ref": "2d9c6a24-2350-4233-9972-f00687ff0384",
          "length": 251,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "a20792a2-0387-4f8d-a882-ee050fd30c5e"
        },
        "item": {
          "id": "333f9095-bf9d-4d7c-9564-d582b852fed6",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "b988e485-2c63-4a5d-9e9e-79880764474a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 217,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15165a09-ed64-461d-ba68-49e3ad8d03fe",
        "cursor": {
          "ref": "4d1b9622-cf18-4f20-a632-32b53a022117",
          "length": 251,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "ebca29ce-47bc-4c86-9538-15405df35e0d"
        },
        "item": {
          "id": "15165a09-ed64-461d-ba68-49e3ad8d03fe",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "844ea85d-a453-4b05-a380-ab24cbf2271a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cae5006d-da59-4c8b-b03c-cc4e15390a9e",
        "cursor": {
          "ref": "31fce38c-143e-4804-b9fc-75a91ac71de6",
          "length": 251,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "1c9b2a9b-5186-466f-91b3-2e7a8702e2f4"
        },
        "item": {
          "id": "cae5006d-da59-4c8b-b03c-cc4e15390a9e",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "f1046112-c3c9-465f-8eaa-55a999e59bba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24a84e95-ca11-44c5-b249-e3143adb609a",
        "cursor": {
          "ref": "99355ab9-c25d-4f69-821a-48099cc305ba",
          "length": 251,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "6727cbc6-bb8d-4d0d-b296-901be0fbcc60"
        },
        "item": {
          "id": "24a84e95-ca11-44c5-b249-e3143adb609a",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "5dca0729-a1f1-453c-a464-1dd595994072",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "130ec83c-84c7-42d7-83ab-f670cc29a8ae",
        "cursor": {
          "ref": "c447dd04-e592-4416-8fad-3e61e954317f",
          "length": 251,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "0015cba1-7621-4f62-b177-d23b853b8e8a"
        },
        "item": {
          "id": "130ec83c-84c7-42d7-83ab-f670cc29a8ae",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "fe06c1ad-a92d-4619-81d9-98607a1973af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db892d72-5f6e-48a1-b4c7-1bac30535bfc",
        "cursor": {
          "ref": "dfd01939-6dce-40f0-86de-14d0f4796f1b",
          "length": 251,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "4b93525b-2f9f-40eb-9f52-4bded19cd1f0"
        },
        "item": {
          "id": "db892d72-5f6e-48a1-b4c7-1bac30535bfc",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "a089c3e9-02a0-4b59-9a33-08b590512e0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c0eda0f-fb49-4ee4-bf7b-45d67ec1afac",
        "cursor": {
          "ref": "61ec7ee9-7012-4533-b75a-bf3e843c0b68",
          "length": 251,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "a9082cf1-af6e-47dc-8fc1-18efd2ae08ce"
        },
        "item": {
          "id": "2c0eda0f-fb49-4ee4-bf7b-45d67ec1afac",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "8c966d4e-d979-41cd-965f-286503896a21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fddaeac-3ce3-4fa3-9f3b-af9472c66b14",
        "cursor": {
          "ref": "12fa9cce-fb0a-4c4b-8d06-4bef513ddf1b",
          "length": 251,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "028346df-0364-4b96-a779-2386b2aec485"
        },
        "item": {
          "id": "4fddaeac-3ce3-4fa3-9f3b-af9472c66b14",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "a0c97055-590d-4e19-92a5-1ea5ba7a90f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3ef846a-72dd-485b-981e-0cac982776f6",
        "cursor": {
          "ref": "54f7a266-e836-4e98-b93b-6a5564c790c3",
          "length": 251,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "53afd100-fb8a-45fa-aeba-c346702e0018"
        },
        "item": {
          "id": "c3ef846a-72dd-485b-981e-0cac982776f6",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "4c2f262a-b5de-469d-9ab8-0f1e09c57079",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e9d3168-e07d-49e3-a7ff-6956b7886e7a",
        "cursor": {
          "ref": "faaa0d57-1489-4e94-9c64-921df80ab9bb",
          "length": 251,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "88e01317-33a5-4756-bb7c-29dac7373365"
        },
        "item": {
          "id": "4e9d3168-e07d-49e3-a7ff-6956b7886e7a",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "112e730e-c3cc-437c-832b-f58d32fc2dc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d6a2b23-58ed-4c40-9b29-1309e8715c4f",
        "cursor": {
          "ref": "5febb190-80ab-44b1-b041-73f65e9c7806",
          "length": 251,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "1269ac78-c616-4599-9c01-9c02e6b1883f"
        },
        "item": {
          "id": "2d6a2b23-58ed-4c40-9b29-1309e8715c4f",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "ac8c9255-6cb0-43b0-85e9-2e28ac67d62b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d9f18c2-247c-4b03-a479-0f440bf31776",
        "cursor": {
          "ref": "ed6184f7-b753-4f07-a799-eef564237c18",
          "length": 251,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "9f12c73a-c5d8-4c9e-a109-82607f58b309"
        },
        "item": {
          "id": "2d9f18c2-247c-4b03-a479-0f440bf31776",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "5e190cea-bcff-4d50-bd30-9161b632b283",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7f6a23b-289f-4b3c-9610-7e41a205d6d2",
        "cursor": {
          "ref": "927147fc-3d8f-404e-abdf-c333a3a1e5ff",
          "length": 251,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "0819c4e9-1987-492a-bb46-dbfc5549fc67"
        },
        "item": {
          "id": "f7f6a23b-289f-4b3c-9610-7e41a205d6d2",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "61c0b252-36ef-4adf-9df6-c53ded40c820",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee3e98b5-cfda-4d5a-b699-073f80c15280",
        "cursor": {
          "ref": "8b9904d5-4c76-45bf-8cb4-a442c5d1e189",
          "length": 251,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "0e142d4c-af71-47e7-9153-02c85a03a711"
        },
        "item": {
          "id": "ee3e98b5-cfda-4d5a-b699-073f80c15280",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "d9341bac-477a-4814-ad2a-651ee701eacd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c5ee79d-51ab-40d0-bf5c-1e06e4559e34",
        "cursor": {
          "ref": "bfc89a4c-3469-4d4e-8c44-0810539161af",
          "length": 251,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "d98ae364-bed2-41e7-a959-60360125439e"
        },
        "item": {
          "id": "5c5ee79d-51ab-40d0-bf5c-1e06e4559e34",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "80e1344a-6736-49c0-827c-ff67c73296a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9bb9abb-46dc-4ea4-b36b-7ea40fe07553",
        "cursor": {
          "ref": "e9b8d152-e46b-4e1e-9842-9c58da5e6b3f",
          "length": 251,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "407cc26f-fd53-4406-8125-ef629b62a654"
        },
        "item": {
          "id": "a9bb9abb-46dc-4ea4-b36b-7ea40fe07553",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "ec0c3b5e-ab0d-4c8a-be22-7ff9034c6700",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c65e174b-b02b-490e-a185-e527597af53d",
        "cursor": {
          "ref": "a07b9d6d-ba18-4e45-9065-dc5316c53fc9",
          "length": 251,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "4a418f91-f18d-4a3e-9a86-a08814671bcd"
        },
        "item": {
          "id": "c65e174b-b02b-490e-a185-e527597af53d",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "f9547722-f313-40ba-a216-25eb11032420",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad213ac4-4daa-477c-bb05-122637897e97",
        "cursor": {
          "ref": "772c5287-cb87-48c4-a2c3-4243561a0ff6",
          "length": 251,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "30363da1-b7f3-47cd-b154-4c771ff4386d"
        },
        "item": {
          "id": "ad213ac4-4daa-477c-bb05-122637897e97",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "4aaedb6c-91cb-4c08-9721-20c39a0478f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ec5dfc4-7d47-4a59-b3c8-d7915ddcd442",
        "cursor": {
          "ref": "d0a504da-8963-4787-b8c9-f4284397bc5b",
          "length": 251,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "027b10e7-c9ef-4b5a-bfc6-0b20c40ed195"
        },
        "item": {
          "id": "0ec5dfc4-7d47-4a59-b3c8-d7915ddcd442",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "7ce86833-08e9-40d0-bb8f-246061e00f0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0632f79d-6ca9-4527-ae3c-2cb62c52ed48",
        "cursor": {
          "ref": "863ccf25-1faf-45e8-abb0-37583ec1b171",
          "length": 251,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "7014f614-1b7e-46df-a6fe-dddb74353e20"
        },
        "item": {
          "id": "0632f79d-6ca9-4527-ae3c-2cb62c52ed48",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "9db50c6f-0829-4659-86a3-4a5fc17bb9be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5daa0532-628d-4d58-af6e-75211441d079",
        "cursor": {
          "ref": "e19d074e-225c-46f5-ad25-b2c59d8488ac",
          "length": 251,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "0ee59c18-0ce7-4cb5-ba8a-5a56793ebbb4"
        },
        "item": {
          "id": "5daa0532-628d-4d58-af6e-75211441d079",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "13fd67aa-ec99-4641-8030-2f0989d93416",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49db5908-9223-457a-a378-bf3d0333dc84",
        "cursor": {
          "ref": "b6ec6160-27c7-4700-ac80-e4a59a406ed6",
          "length": 251,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "bd841ae3-ecc8-48a6-b2f8-b6e05e96efd8"
        },
        "item": {
          "id": "49db5908-9223-457a-a378-bf3d0333dc84",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "b4b40610-0722-4a26-b83b-c3bc801619c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5467e7a-c6a4-4e86-94d9-677fdf50e63e",
        "cursor": {
          "ref": "21171fe8-1e5e-4c6c-ae91-6dc9516b36d4",
          "length": 251,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "55ff8ded-88a8-41b5-b690-238027c16345"
        },
        "item": {
          "id": "d5467e7a-c6a4-4e86-94d9-677fdf50e63e",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "ee5dafad-d7f3-4042-8fe1-929816d5b4a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "590e57a2-1d73-44d5-b87a-0131bfd1ad64",
        "cursor": {
          "ref": "4e5ea075-0825-41a3-bc88-10127603cb15",
          "length": 251,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "76f5a831-3b93-4b3e-a45e-a8d6e7c7a53b"
        },
        "item": {
          "id": "590e57a2-1d73-44d5-b87a-0131bfd1ad64",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "8ae1ad25-7d5a-4497-af6d-553dfff8b188",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c7c114d-3e7a-4219-8b26-69ed72095ec4",
        "cursor": {
          "ref": "f23bcec0-703c-4ca3-806f-bf5e2c9f7b87",
          "length": 251,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "c4722652-ee70-44c9-ade3-cbfa8cc31230"
        },
        "item": {
          "id": "0c7c114d-3e7a-4219-8b26-69ed72095ec4",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "ec0cc713-ebcf-4f0e-a464-79de99b090d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac202736-e0d5-40db-9cb8-dff5f48eb6bd",
        "cursor": {
          "ref": "750909d7-6057-4364-9fe2-6ea1fcf4f681",
          "length": 251,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "a6495fdb-335b-411a-bf18-b7ee1e55080c"
        },
        "item": {
          "id": "ac202736-e0d5-40db-9cb8-dff5f48eb6bd",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "5ef4e26f-a518-4d75-b5bc-795cefdf5945",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb9b0669-b225-4271-9c62-717e339ab187",
        "cursor": {
          "ref": "9e634f1c-dd7d-4f09-af7d-76f80f2acf55",
          "length": 251,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "41855110-e958-4ea6-9969-3536585bc765"
        },
        "item": {
          "id": "cb9b0669-b225-4271-9c62-717e339ab187",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "6614f5e7-97b9-4f59-b980-0f23e222d51c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2c3b852-4110-419e-a3f0-915b93471e8d",
        "cursor": {
          "ref": "0d443366-c3b4-4e94-a427-3a70df0dcde8",
          "length": 251,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "ca6155fc-6354-42da-af97-1ed8f24d5610"
        },
        "item": {
          "id": "a2c3b852-4110-419e-a3f0-915b93471e8d",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "f90f42d5-59f0-4499-ba13-387703cd8737",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f86b3d7c-d303-48fd-b552-4c8ff9e19037",
        "cursor": {
          "ref": "9a1430bf-b2aa-4e43-990f-aa15042db827",
          "length": 251,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "14fb3bbd-1037-49c2-accd-9e475a59c820"
        },
        "item": {
          "id": "f86b3d7c-d303-48fd-b552-4c8ff9e19037",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "69a5f071-5f85-463c-874e-afd98169d60e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f79803d-46c1-4bea-ab33-4b55ff9ae3da",
        "cursor": {
          "ref": "f52ca2a8-4819-44a5-ade9-592bc014e77e",
          "length": 251,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "2c4402c7-2dd3-4a7d-b2c4-06dabe0e8033"
        },
        "item": {
          "id": "7f79803d-46c1-4bea-ab33-4b55ff9ae3da",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "62d3b9e8-bcb0-4672-adfa-87bbc6355719",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24f5e88f-43c6-4107-b366-34eb143c91f0",
        "cursor": {
          "ref": "7d9a8274-55a2-42d9-906c-7dd805a06891",
          "length": 251,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "b4072f8d-ba3a-4f6e-947d-e375b027b66d"
        },
        "item": {
          "id": "24f5e88f-43c6-4107-b366-34eb143c91f0",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "ca400946-f81a-4d15-802c-b50e1a890d98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c4db0dc-52dd-4bf2-9b63-b42baa8b9d8c",
        "cursor": {
          "ref": "3d834301-250f-4385-aa78-ffd132963cc0",
          "length": 251,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "27e80f5f-a651-479d-b20c-c2f7185e85aa"
        },
        "item": {
          "id": "1c4db0dc-52dd-4bf2-9b63-b42baa8b9d8c",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "42088427-dc59-4096-bf62-5901a447a8f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3e42d4e-355c-4eb0-a250-48448b1db2e3",
        "cursor": {
          "ref": "ad0e44ed-bc12-468e-abf4-035e615d4b98",
          "length": 251,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "291b2a85-cc7f-4190-9a63-a0e81a453824"
        },
        "item": {
          "id": "e3e42d4e-355c-4eb0-a250-48448b1db2e3",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "887997a1-6d48-4d14-9019-0a5c4cc8c1a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18919e7f-fa81-4f07-ba6a-0a95abab3a79",
        "cursor": {
          "ref": "687f3336-b243-4fd4-867b-f67023d88657",
          "length": 251,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "69d3ad6c-0714-4464-8245-092352009a8a"
        },
        "item": {
          "id": "18919e7f-fa81-4f07-ba6a-0a95abab3a79",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "b7182591-f74f-4730-8657-41b8ce38fec2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c6de0f2-45e6-4fa2-acf0-289929a23bf8",
        "cursor": {
          "ref": "13c4e641-076a-43ec-9710-10964186aa83",
          "length": 251,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "e6460cae-c212-4988-b559-2b1e3915105b"
        },
        "item": {
          "id": "3c6de0f2-45e6-4fa2-acf0-289929a23bf8",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "be230188-9a37-40a9-897d-16aca96323a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "454ab1ad-6877-4c71-a0d0-88d4984a9cb9",
        "cursor": {
          "ref": "c66313f7-ca65-4c13-a92b-310a05de954e",
          "length": 251,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "6ace0952-5116-4ce3-a4c5-87e452d328fe"
        },
        "item": {
          "id": "454ab1ad-6877-4c71-a0d0-88d4984a9cb9",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "52a4f141-8192-4a9b-a6ef-0fb76925c7d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c19e6222-c1c3-4fcf-838a-ea42faf61c46",
        "cursor": {
          "ref": "9883bb28-f6d1-4dd8-806a-a2584e48c931",
          "length": 251,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "5dbdec4a-e12c-4773-9182-60e7f5eff84b"
        },
        "item": {
          "id": "c19e6222-c1c3-4fcf-838a-ea42faf61c46",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "a0ebfcbe-439f-4bc2-bc7b-a2e88a5fc48a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 41,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e9730ce-7bd2-48d2-9cf5-9abdd7a1ab45",
        "cursor": {
          "ref": "29d533a1-84e1-47d8-9486-3afaa383d07a",
          "length": 251,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "6a22f3e8-0e55-46b5-b477-6b20443bdaf6"
        },
        "item": {
          "id": "2e9730ce-7bd2-48d2-9cf5-9abdd7a1ab45",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "600ee00d-ae1a-4e8d-a866-c5144ef0052c",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 37,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23ff09f0-52f5-4b66-8ac2-7fbb75e2a8f3",
        "cursor": {
          "ref": "04629181-7d49-4669-a9f9-3f14fa6bd180",
          "length": 251,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "cd396117-351f-495d-a4f2-b9109c6eb4d5"
        },
        "item": {
          "id": "23ff09f0-52f5-4b66-8ac2-7fbb75e2a8f3",
          "name": "credentials_verify"
        },
        "response": {
          "id": "3d0f62fe-d1ed-49bc-8db8-cf114f43f454",
          "status": "OK",
          "code": 200,
          "responseTime": 495,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b59583cd-80f3-4dfe-bc0f-b5e1132622fe",
        "cursor": {
          "ref": "9cc98ed6-e392-4466-900c-c067a1329562",
          "length": 251,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "16c94f62-4a15-4fcb-8141-04f4131dd64c"
        },
        "item": {
          "id": "b59583cd-80f3-4dfe-bc0f-b5e1132622fe",
          "name": "credentials_verify:id"
        },
        "response": {
          "id": "f5f2a718-c209-4927-90bf-dbc34c628d87",
          "status": "OK",
          "code": 200,
          "responseTime": 332,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b892dd3-90a4-476f-ab82-94a536a9c6e9",
        "cursor": {
          "ref": "a75e0deb-0a37-4d14-8b68-5c081a78e041",
          "length": 251,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "0c3e75d6-39ef-462d-aa8a-3e71a3a24bf9"
        },
        "item": {
          "id": "3b892dd3-90a4-476f-ab82-94a536a9c6e9",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "92497b57-b29f-4316-b750-048a13266c71",
          "status": "OK",
          "code": 200,
          "responseTime": 691,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "163999a7-e2c2-4f09-9d27-26139f4eec2b",
        "cursor": {
          "ref": "5d3a6d51-3169-42dd-bb6d-f13163d17c87",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "63a493a3-95c3-43ab-bdc1-fca82b7b4525"
        },
        "item": {
          "id": "163999a7-e2c2-4f09-9d27-26139f4eec2b",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "177b3c42-658c-4c5f-adc6-4a3d4c823ea0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 34,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "163999a7-e2c2-4f09-9d27-26139f4eec2b",
        "cursor": {
          "ref": "5d3a6d51-3169-42dd-bb6d-f13163d17c87",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "63a493a3-95c3-43ab-bdc1-fca82b7b4525"
        },
        "item": {
          "id": "163999a7-e2c2-4f09-9d27-26139f4eec2b",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "177b3c42-658c-4c5f-adc6-4a3d4c823ea0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 34,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "163999a7-e2c2-4f09-9d27-26139f4eec2b",
        "cursor": {
          "ref": "5d3a6d51-3169-42dd-bb6d-f13163d17c87",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "63a493a3-95c3-43ab-bdc1-fca82b7b4525"
        },
        "item": {
          "id": "163999a7-e2c2-4f09-9d27-26139f4eec2b",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "177b3c42-658c-4c5f-adc6-4a3d4c823ea0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 34,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e68957f-5982-4f7e-b5a2-b3026f5278d0",
        "cursor": {
          "ref": "f4f0970a-b293-41ee-bc9f-c24b5f0ad541",
          "length": 251,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "1555dad4-e6a5-4c41-93ac-17e4e20f4290"
        },
        "item": {
          "id": "0e68957f-5982-4f7e-b5a2-b3026f5278d0",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "bf2ab28d-8db9-4bd2-bf5e-7c71ed497dbd",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 40,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "372b984b-6598-4cb1-b633-e345c2af4ceb",
        "cursor": {
          "ref": "7840b6d3-42ce-4007-8904-c60712521e47",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "b0b3f4a8-3457-4186-850f-51c5b1ed6361"
        },
        "item": {
          "id": "372b984b-6598-4cb1-b633-e345c2af4ceb",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "f3d5b6a7-1c72-400b-aec6-9d02a6e9174e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "372b984b-6598-4cb1-b633-e345c2af4ceb",
        "cursor": {
          "ref": "7840b6d3-42ce-4007-8904-c60712521e47",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "b0b3f4a8-3457-4186-850f-51c5b1ed6361"
        },
        "item": {
          "id": "372b984b-6598-4cb1-b633-e345c2af4ceb",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "f3d5b6a7-1c72-400b-aec6-9d02a6e9174e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "1d1a6349-e91a-493a-9319-cf5386100239",
        "cursor": {
          "ref": "560399ab-2f13-41e4-870f-7318dda462dd",
          "length": 251,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "f53f7778-a36b-4595-b42b-d2b53b9d985c"
        },
        "item": {
          "id": "1d1a6349-e91a-493a-9319-cf5386100239",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "1bfaab5e-379c-4db2-b979-0039aba61e55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "0d0ba027-28ea-4e9a-a293-1cad88615af5",
        "cursor": {
          "ref": "e26ae0b2-5563-4b8f-a2b6-024b6ea73df3",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "2b9a6751-aef7-403d-a093-1df20c6fd08b"
        },
        "item": {
          "id": "0d0ba027-28ea-4e9a-a293-1cad88615af5",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "29d8c6c1-3fde-46eb-8904-fa996e39deb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "0d0ba027-28ea-4e9a-a293-1cad88615af5",
        "cursor": {
          "ref": "e26ae0b2-5563-4b8f-a2b6-024b6ea73df3",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "2b9a6751-aef7-403d-a093-1df20c6fd08b"
        },
        "item": {
          "id": "0d0ba027-28ea-4e9a-a293-1cad88615af5",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "29d8c6c1-3fde-46eb-8904-fa996e39deb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "daae0525-abae-4a73-9994-8a6d1f181586",
        "cursor": {
          "ref": "374005c6-9ef4-492d-b72b-475d3f2604a9",
          "length": 251,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "06d86cb2-8e09-48a8-8848-43801fa0d95d"
        },
        "item": {
          "id": "daae0525-abae-4a73-9994-8a6d1f181586",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "9b05811c-caaf-433b-83c2-71cf1240d3e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      }
    ]
  }
}