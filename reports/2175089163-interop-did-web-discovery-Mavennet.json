{
  "collection": {
    "info": {
      "_postman_id": "2319fa29-4ea8-4739-96ea-bda2b74f92bb",
      "name": "DID Web Discovery",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "8f5981bf-ebec-436d-b528-a4f1b6e6c580",
        "name": "Get Organization DIDs",
        "request": {
          "url": {
            "path": [
              "identifiers",
              "{{ORGANIZATION_DID_WEB}}"
            ],
            "host": [
              "{{API_BASE_URL}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": true,
              "key": "Accept",
              "value": "application/json"
            }
          ],
          "method": "GET",
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "11ef6f80-47e1-4ac0-a402-c1ce269d2672",
              "type": "text/javascript",
              "exec": [
                "pm.test(\"Status code is 200\", function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "pm.test(\"must include valid JSON response body\", function() {",
                "    pm.response.json(); // will throw on parse failure",
                "});",
                "",
                "// The response JSON must include a didDocument property that contains the",
                "// resolved DID document.",
                "pm.test(\"didDocument must be present in response body\", function() {",
                "    const jsonData = pm.response.json();",
                "    pm.expect(jsonData).to.have.property('didDocument');",
                "});",
                "",
                "// The DID document must contain an alsoKnownAs property.",
                "pm.test(\"alsoKnownAs MUST be present\", function () {",
                "    const { didDocument } = pm.response.json();",
                "    pm.expect(didDocument).to.have.property('alsoKnownAs');",
                "});",
                "",
                "// The alsoKnownAs property MUST be an array.",
                "pm.test(\"alsoKnownAs MUST be an array\", function() {",
                "    const { alsoKnownAs } = pm.response.json().didDocument;",
                "    pm.expect(alsoKnownAs).to.be.an('array');",
                "});",
                "",
                "// The alsoKnownAs property MUST be a set.",
                "pm.test(\"alsoKnownAs values MUST be unique\", function() {",
                "    const { alsoKnownAs } = pm.response.json().didDocument;",
                "    pm.expect(new Set(alsoKnownAs)).to.have.lengthOf(alsoKnownAs.length);",
                "});",
                "",
                "// The second element of the alsoKnownAs property will be used as a",
                "// credentials_issuer_id for subsequent tests.",
                "pm.test(\"alsoKnownAs[1] must be present\", function() {",
                "    const { alsoKnownAs } = pm.response.json().didDocument;",
                "    pm.expect(alsoKnownAs[1]).to.be.a('string').that.is.not.empty;",
                "});",
                "",
                "// If a verificationMethod property is present, the controller property must",
                "// match the didDocument.id property.",
                "pm.test(\"verification method controller must match did subject\", function() {",
                "    const { didDocument } = pm.response.json();",
                "    const vm = didDocument.verificationMethod || [];",
                "    vm.forEach((m) => pm.expect(m.controller).to.equal(didDocument.id));",
                "});"
              ],
              "_lastExecutionId": "dbb995c3-2646-44c0-9af0-15588092cc7f"
            }
          }
        ],
        "protocolProfileBehavior": {
          "disabledSystemHeaders": {}
        }
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 8,
        "pending": 0,
        "failed": 0
      },
      "testScripts": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 0,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 197,
      "responseMin": 197,
      "responseMax": 197,
      "responseSd": 0,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1650071134788,
      "completed": 1650071135036
    },
    "executions": [
      {
        "id": "8f5981bf-ebec-436d-b528-a4f1b6e6c580",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 1,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "829c4146-78d5-4b0f-b370-c0f8da165a99",
          "httpRequestId": "552c966b-ec6f-4c31-a925-3ffc5ecd7cf5"
        },
        "item": {
          "id": "8f5981bf-ebec-436d-b528-a4f1b6e6c580",
          "name": "Get Organization DIDs"
        },
        "response": {
          "id": "d49d4e42-d2d1-4b29-ab31-9516ed3c53dc",
          "status": "OK",
          "code": 200,
          "responseTime": 197,
          "responseSize": 680
        },
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "must include valid JSON response body",
            "skipped": false
          },
          {
            "assertion": "didDocument must be present in response body",
            "skipped": false
          },
          {
            "assertion": "alsoKnownAs MUST be present",
            "skipped": false
          },
          {
            "assertion": "alsoKnownAs MUST be an array",
            "skipped": false
          },
          {
            "assertion": "alsoKnownAs values MUST be unique",
            "skipped": false
          },
          {
            "assertion": "alsoKnownAs[1] must be present",
            "skipped": false
          },
          {
            "assertion": "verification method controller must match did subject",
            "skipped": false
          }
        ]
      }
    ]
  }
}