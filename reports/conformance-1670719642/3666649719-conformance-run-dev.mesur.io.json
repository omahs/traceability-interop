{
  "collection": {
    "info": {
      "_postman_id": "f5f17919-82a1-4db5-be95-0f985635313d",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "ce95550f-5e89-4892-a6e8-114f797e27da",
        "name": "Clear Cache",
        "item": [
          {
            "id": "3baf0e60-f83c-4da7-a0f3-d1ff4e62bd7d",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f3a55a9b-7a4f-40ed-a8b8-48ad15331558",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "6343e540-f5c8-4f34-a807-da4a6747a763"
                }
              }
            ]
          },
          {
            "id": "7123e599-1918-44bb-a089-2ea6b3ea6119",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "2ab0e69b-bcde-4e6b-8637-05d1123523cb",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "688eb0fa-f897-495d-abbb-c9abace1ab71"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "8c60337a-bf21-4472-9588-deefa0b33d02",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "da7e47d6-def5-4731-aabb-4688b1e3b497",
            "name": "Positive Testing",
            "item": [
              {
                "id": "ccc2cad3-a88d-44ad-9c41-c45babf3e803",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "29685961-ff66-48af-bfc8-a2b580e961da",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e68993d3-e82e-4d02-9db7-019d05c3c8ab"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c18b7a33-7d27-494e-81a7-2435419029a3",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1cceab0f-e4e7-47db-84fa-3b508c4b2ef7"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "37563230-e8e0-4db9-a567-00aca81a5cb9",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "34dc7ade-bd18-48de-a8c0-479081c0b44b"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6c61ed92-aed0-4203-838c-1962d038badf",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "d7a7ab52-e323-4e21-9c54-da086173bd63"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cbe76d5d-9fb8-4fd1-9b57-ea88b106b518",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "283a9bd4-d5a3-442c-b43c-b37ea5b2a5f0"
            }
          }
        ]
      },
      {
        "id": "3e515507-95ec-49da-90d6-47a6deda1e56",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "afdacb3b-32aa-49d1-b88f-f6e114aa6800",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e3a2145d-578d-497a-8454-2b6b7028cf24",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "f1b4a70b-4dcf-4f82-a665-bb424ad66ad2",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec40db25-1c9e-4805-8c11-400192c8f35d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4c9f3c87-aa33-422b-a860-72a3799c8181"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6607cf0a-6f79-4f15-b73c-a4561c43ca6c",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18e7282b-970d-4daf-a701-00e3af50ee51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f3c46836-e94c-4a37-9b06-05d1183c736f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3ecc65d-bef4-4be2-a3ec-3f0d7f57b5eb",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "882b0564-5f81-48ff-b9d8-62e2d0ee96ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1c7db5cf-2547-4f04-8a07-705aa32e578d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "cf87bac0-ec41-497a-ad14-461237686f83",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6bc38a65-9287-4a98-a556-163aba210abc",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5fc13d5-4c3f-497f-9da0-f6baeea99ec7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3d19449b-6fde-42de-977f-9fca8737be49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab5bc63a-fdd7-41f5-8008-e0e69b5fcd0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f23572c3-51cc-4b40-9794-90855eefb38a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "387f259a-c29b-4d74-bf07-4b7d0c5ee409",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afb3d930-729c-4310-bac5-04fafbd334e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1d8f05ee-5eff-4312-8c07-ea1ea02fed20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "538d0387-c563-44c6-a678-cea549641971",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "ad0be99f-2451-4de1-a81b-8543e596e29d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "35c656b2-8467-41c8-a3ec-74d96cbd0b66",
            "name": "Positive Testing",
            "item": [
              {
                "id": "6529a665-8350-48f2-84d9-ab8402825b15",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "93937e34-71ac-42fb-a181-c69b36c7d578",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "03459bb7-2a13-4295-944c-f9339e7df713"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0f4bc5bc-271b-47da-8ffe-8042b3b63f6a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "df1750af-612d-4263-bfdc-6319865a140c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f66d38ce-eb26-4433-a0cd-223efd3eaa37",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4642a1e5-8535-4042-8f26-43ec99abd6eb"
            }
          }
        ]
      },
      {
        "id": "b43b2d10-24fd-4034-99f4-e0914664375f",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "d192a428-1c63-4500-a11a-fbc962840982",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9deeec53-7715-4df3-8bec-f8725198cebd",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "5bcd8850-b137-4ee7-946d-fe45d2e3902f",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a75254b2-e856-4797-bb13-86c97742e4fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1fa642d3-0480-40ca-9968-2825f276a8cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c69ffce7-d232-4898-8923-86693ad763f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5d8f736f-09ea-4455-b607-e35814b848a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3061ecc6-0134-4f58-b240-ca48f8acfc3c",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48d3e336-3e0e-4978-a8bc-1b5c7f7ca0f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f7af20e-023a-4994-a56d-fffe11f9d8af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83d55e38-1e86-4f69-9a39-4a7e61f6d195",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ad2efae0-40b7-4f18-9fa3-9d58905d26cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "441020f0-279a-4204-ad17-5dc5e91c6ebf",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59587ab6-4a3c-4f10-8012-6912058dce31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c744ef40-c6f7-4221-b6cd-c16c2596d5f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "411ed209-07e8-4126-abf9-8b8febe3a4fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "741d1685-1f06-4fa4-afbe-31e6d2fcd812"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7e4eb93-0adb-463b-a5d6-a5e0e988413b",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c91e6eec-2290-4a0a-9988-6e17197bd957",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "defbd0a4-213a-4b47-a996-721f01566255"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5b27ded-43b3-4c04-ad98-4579f03e1a45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4c92d771-7e9c-4239-b0fc-9cdaa76c0c05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fc79d27-35f1-4964-8c50-bcfc577772a8",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "300cd647-0a1f-4d11-98be-ed772e419786",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "961fd0f3-e778-4928-bad7-bf380de7efd1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37561597-7bba-4c02-8f33-0286cb8108b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "64dd07a3-61f4-4b4f-8fda-fc9eb1c5990d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42ef6f82-d5bd-4cf3-bc07-57bcd3b2e5b1",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c42950d-f40c-4214-aa97-5de4ff14bc72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7fbb7516-2aa0-4bb8-b519-859eb02de853"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "002b2bd7-d1bc-416b-a8fb-a87f604197ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b2dd3263-9db7-4145-a997-9b5b002a4cee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f55be3e-b466-4357-92f1-2db00c7e5a71",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a37ff2cc-1e5d-4ba8-8625-82533d0bc94f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2822604e-72d7-4304-9b83-5452e07f8569"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "065bf4d4-ab62-4c71-8d09-af0d8e3e0aac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f14985ba-eb02-4094-919b-d3874bc1b799"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05c0dddf-6bc3-4bde-b96a-68eabcac46d1",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "192fd136-af74-4fd0-ac5b-07667e755a8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62a181ac-6059-445e-bb9d-2bf50a370872"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8773fc12-bed3-48b8-81b5-fba8d5180515",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4e31e93b-2e86-448d-b849-2a15a3f51a8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac6ae494-3775-4f5f-b2fe-92ed7c636bab",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13410e13-0272-4449-8bc2-26dcb8e16cc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d06895c4-3950-49ab-a3f9-035fa6a937ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3c68ff9-02e0-4025-81b2-87c8169dc327",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "278a883b-7642-4c85-bcfc-78650fa41117"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48394eaf-9ea0-4518-95ec-77e81cc3872c",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc24a5aa-d4e1-4f24-9424-13de61f8eb7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a07531d5-aa28-456c-ad5e-0d262333ce3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6bb1876-1eff-42dc-ac22-2d54e3e9c29d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "663e775a-77ba-492f-b9ba-aa6c7d76736f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f3f23d7-5f64-493f-b724-dd221f487b04",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3627384f-5bcc-4bde-b0b5-23758dceaf2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63e6ee97-e643-4564-991c-c42fa414c8aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4246c74c-da21-45a6-b644-b6fcdcddd090",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bde3c15b-4824-4f24-bf4b-000880126393"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d06e8ab3-596e-4340-9673-d9f98d5f3de3",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b5c8f32-51ed-45b8-8f86-b92339e1562c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84b34326-541a-4060-8d5b-fe90d2672950"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "567d9c1a-3c98-40bc-a755-6164989fb0d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3b4c802a-bcf5-4962-a2a7-5185673003c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3f2e95e-8071-4d66-9b4a-101f98c26951",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d8727c2-dcb6-46af-8283-26e87d0919f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77ee2e55-c248-4f18-a6f8-b1b9cd57e858"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d554f38-a1ab-48f0-b6cd-6dfae341357f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9725b570-43e1-4877-8ee3-bdb40e581837"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74d0325d-9d49-45cd-ad3e-1ae17d53e0d5",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53bc4269-b539-4f9e-a89c-0d77d765048a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "223d1abc-5b72-477e-80d4-6a4bc7549f4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adbcff63-97df-4f2a-abae-1081cd7f31eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "59a8337d-d0f0-45c2-adc2-6f0d1f5a5349"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2910c5e4-3f15-4fd3-827b-b4cea5d811f1",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b78f5793-3306-4650-b7a3-87022e1f0d72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4fbcd8fc-2f06-4e1f-aff3-b4499ef9ff28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c61ef74-803b-47b2-8945-282667a062d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7cbe387a-f206-488d-b3e4-e3e0d3a90008"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d9d580e-3b23-4b1a-8db9-acbf645b0097",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97bff4cf-2119-4d39-9f2f-730b610334bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7405730-c1d2-49a1-8b50-2e76e1a3ab69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5250e73-ccb5-4017-9888-1b3cebe68626",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1b840a2f-3700-40c0-94ae-73561dc3a12e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f27fefc-c9b5-4486-93fc-38f13961aa02",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "131f51d8-7bbf-4287-9509-f2b39f61a4a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25e127c9-1589-493d-98e1-61df5cc6e07f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "482d30ce-bb89-4b5d-8d75-5794a23750cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d771f626-1272-4a3e-864b-c4da10acb9f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3aae0a06-9fa8-449e-9388-39452705e206",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd49d821-1969-405e-a753-c7ec5a028f26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4107da94-9c2b-4dde-9aad-3d52fd3b6d17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "788d3e42-ed02-4a65-9971-f1c32c5c3920",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "cf9f3a5e-16dd-4ad6-90c0-7db261a607a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c6f66de-840f-4fe4-b2b5-546f7ff74abd",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf2ddb56-c842-426f-bbec-87f89b2a73e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1830978c-06d5-427c-999e-c3b84181a786"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4626e162-f39e-4d41-9049-28abb5bf4c52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d8f8eed9-bb4e-4a00-877a-250b37d2f850"
                        }
                      }
                    ]
                  },
                  {
                    "id": "846e7b4d-87c1-4444-9890-bef5eac4006e",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6e5552f-0bca-417c-b31a-a077e7cdaff7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6b2335d-abfb-4877-8c89-996797c1f3b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38a7697e-d06e-4e72-a534-cb88085998c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "374bc0ff-7b3c-403f-becf-8d9e50571782"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64becc07-c4ae-4681-85ef-c45b409b411d",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "893f1537-7e36-4fe2-ab2b-2a182cfe6ecb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "218d9a42-87d5-4d68-809c-f4e3230148f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aee47a1b-0ddd-460c-8eea-f544afd49c26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2677e79b-4484-4ceb-9434-9b9fd0ced041"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a597d684-4f4b-4724-87e5-9c74b2e08983",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7a512d1-6365-49c0-98d6-a16aaebe457a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41dc22a8-926a-4d85-8ca9-9ef5a9dff7f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d584bd35-f392-4ef8-9f0c-7b5729f2c7e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8eb05af9-f856-478d-af2a-2c26bc0615bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "434865db-6c57-4678-b67c-929c9cb048b3",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3f445d8-4e33-4642-8fad-9310234d9ba7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d1e598f-d6e5-41e6-b909-7956d5c43ec6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cf10368-3599-4529-bdcb-b7a050882f28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1c256fc9-3bda-4f33-935b-d29612224122"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83cc6f20-3993-456c-93a3-7919c38ba5e0",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e8ab1e4-d075-4afa-928f-504d49fe5983",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd225ca8-1e5c-4f99-9590-e516f2269103"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6548338-a7d1-493f-9688-125561931043",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "7cf2bccf-7040-4575-af7d-b97f01bda7e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39ed8d2c-9c5a-4d9b-90d5-88e6dc03ab6a",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb471163-3520-403b-be3c-7ffa377c19f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7782fa39-dfee-435b-a093-0b30ea68bc2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cb2bd7a-ab95-4371-82ff-9e08f979ca14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5b16dc1b-d314-43d3-ba2b-f74f71df4cf8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b537a731-167d-47f3-8308-1820898cd85d",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2929b483-525d-4427-9975-c95af2ad1948",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "904e4a9b-bddd-432e-a8b2-0767e6220db2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db37f7b2-69aa-46be-84d2-33658c282063",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c9f9d290-8af2-4fe9-a6ec-9c95aba0dece"
                        }
                      }
                    ]
                  },
                  {
                    "id": "471fbcbf-dc91-495e-9df9-78ec7fbb6678",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "167b92c2-3f7d-4ee9-bd58-4110fae87b61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4042508a-ad6c-4d39-a347-0fba5fb2bffc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "111023fd-a9f2-4117-a36b-0ad6b90a3278",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "cb0391d3-8816-4655-bfb1-ccbef04f698c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81f5d0a1-f435-41cb-bdd4-759429bcea6a",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4aa3428-b77e-4722-99f9-695cd7c0eb31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a849961b-80df-4d4c-a115-94d9916eb614"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "faa4a172-e308-4f80-8800-5c93c51f3d30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5ce5b501-01a1-4d10-b56c-5424d20190a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49ee53b8-815a-42f5-8b33-677c30374586",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d51bc54e-c103-4761-8031-aa060aec6900",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7ecfcb5-73dd-4dfc-9f52-ed9531cf1b29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fec4b4db-9d75-41a8-bb0c-9423b946f4b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "69104d3e-2f5e-4b8c-8a88-ce57d3c62149"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33f3c253-1ba3-42ad-90c2-ba26f77e3cb4",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1d803d1-9ae9-4470-a59d-a05d0603744b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0415389-a33e-41de-b529-73cec21e800c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d07bdae3-d218-4bd0-8a81-eca0a29b3074",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "0be6cc89-7696-42e7-9fe1-a886c364d5e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88ee6b15-4a50-4bac-8fee-f95129a0e203",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0678f51e-1413-444f-9513-13d0c1daeea9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d35417c4-bdd1-4c76-9f97-4525c72f41e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce0934e2-4356-433e-b324-6ce6b06aefce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d87f866b-3697-41d4-82da-1efb8ec64525"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6376776-fd9f-4313-aca1-ef61865a08ad",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa36985f-8d39-4b7c-bd5e-f71fd994325b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "801b6ad1-73bf-47b5-8c33-61b49576f0e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9b1471e-1e2c-4270-8cc2-f22716cf6d20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5be93d8f-9ee9-418e-b6bb-70d6798a6c0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76dc9944-cc9c-4dc2-96e3-88491b3a59fd",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6581c17-c37a-4fbc-a9d5-2d0a44c635da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ecaf73e4-6b5c-4eff-8843-299b64a6177b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23551cab-e58b-4e72-b8bd-3c7c8da26e15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2c3d3cd7-b960-4e40-9c69-cda3590ab64b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5f0786a-e7ee-4525-b1d7-f9e2f9d3b19b",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f354d22-9513-4ed4-9947-c30d7dbe0be3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b197d978-c78a-44c8-a578-93f6621ff945"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "403c0a3e-564e-4532-9df0-9507cb9d7131",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5cdac210-3ff7-451b-a7e3-2a424d562f24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cc1b049-b98b-4f7e-81cf-07ec868541dd",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d07fb82f-21e5-4ac7-b41e-8fefcc0ed73f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42ce6ec4-b55f-4a9d-a5d4-b0ce3c4f0902"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca781f41-db02-4d05-97ac-99f189ebc5df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "03924640-9b07-47b5-b7ae-6a1634391111"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5c09c39-fac1-4db5-a371-c784f9df1f64",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f18ce766-32c1-4476-b0b5-7cd00f9284c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "744ed91b-4a98-44d9-84f9-cdfcdff2f871"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27ade0cb-0e50-4cb7-bd37-ce4d7547c5c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c7ea75c4-b938-40e4-af4a-2e22c7716ddf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1adaa2ba-a050-46c8-b109-3c5fbeadbca4",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f89353f9-e20d-4dab-9026-8364a586ecf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a6daa15-9287-4d9a-a06e-977e9ed3690b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2df9fed2-8b0e-48a4-bfce-e8f1fd74a5fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3f843166-f2cf-4242-9153-937a4e7646db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b51170c-b624-4f63-865f-26c3ff69262e",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c3a9ca7-563e-4d97-950b-12cf79a0de1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b46160b0-60cf-4e83-8290-3474bd76e7c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df3a4011-5a40-4978-a1a0-99d2bf55ce23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "9dd9efb1-22e1-47a6-83b2-a00bfd4d21c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74bbe172-f3c9-4f9f-bf38-22d8eddc3f3d",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4429b0e0-f88a-4f4c-9d23-30a2ce170279",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11ce24b5-411a-42cc-9a5d-860393cca6af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf6907d5-2313-4d14-89d7-8e4b3d089d79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "9929ce89-bde5-4bec-8049-86e09fa65df0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3883d35-1cde-415a-aef0-422ba374490f",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7271eede-a1e8-40c7-82bd-411346af4dec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8eb990d0-67be-4acd-9155-505d2161030d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27e52535-cd2f-4b72-bed2-6a96bcd2ccb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "e4e991b8-a63d-48d4-b79f-ff90cb49b1fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa2ee893-9345-4cf6-a63d-8017885fc19c",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d651997-2f24-4f47-a905-726a484f9c97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ae69df5-3b82-4e81-821b-3004a68a3c11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51b05a4e-5db5-4eb7-be8d-eb10e4e73474",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "f40c3154-4b69-4a40-a459-a05a4e96e4e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ede8660-e1be-43b9-bad1-dcf727eba6c1",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74b86f37-043a-483b-afb5-1ae2c27b1399",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "015b9c83-2c99-47e0-9991-59112d131022"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12fa3ed7-6680-45d5-a4f1-cd770307f48e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "5779fe6c-ecf2-4296-9dad-d89ef676a5f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edf45055-6b9e-4367-b969-1c738d2f57b7",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "509b4a3e-006f-4607-80a0-51e7fd887a61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13cfc88a-78b0-409c-8d5d-af7d3286e4fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07a875e7-acb3-414f-9197-51428d8ce776",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "119a8f5f-088a-4848-bc15-a4a51d428754"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b43ac1f1-6570-49bc-ad76-3a7778b37783",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a182a7d7-a03b-4c89-a273-546319aaecc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0b53d92-c0df-409a-b849-b28e32ab68cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42d4c3f3-233f-4594-a3d8-a5e3590baa5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "74185a1f-2af5-4e09-9afe-fbad2347c23c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39b9c881-eb58-4606-8a8e-65028e81346e",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a25e5533-f3f6-46fe-842e-d5dc5312c6f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99dd1f12-5fdf-4398-92bf-0549f7c44b27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10d9a480-e743-49f8-bf1e-1663ab466c30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "2d3291cc-e9be-4ba8-88b9-28636180df56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5db5d5dd-87d0-4b1f-94e7-08fd0d05ca07",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "931c41d6-88d6-4cf2-ab55-1cc9f4e833a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b45e7132-9d9b-4055-b4a4-0cc9c793c898"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fd4a8b5-a3f7-46b2-b289-65fb86870f22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "994a74fb-fcb5-490b-9ef3-87e5a3e468fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c754ed09-beff-4334-9b97-dfedeef8ca07",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1087d2e-80a4-4d74-a5c3-abf832821f44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e113dbc-ce3f-47f9-88d6-cadc2fd8e064"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96b97bce-47ea-41f2-9ce7-a8b5a0a2e52b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b763e60a-58d0-45af-8a87-d91fa5169fdd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29d9efe9-ef48-4be1-9047-2c7d3abb1f21",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f134414-7584-4776-bc99-6f375c9ad7a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43f0b876-c85a-4f49-ac1f-7cc81fe43eb0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd54c0a3-22f5-4e9f-81dc-63fad8442ffb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "10077b61-b417-48d5-b2e7-676a10d72978"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72f5ff02-80ac-4254-80d6-7cacd3b40f66",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "263c7d25-ab19-492e-a987-a74311815eb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65e63728-b464-4428-a5f2-197c033d54f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c1709dd-8c85-4d9c-bad4-3d3974be4c0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b34f2ed7-d7b2-4f57-8c1d-9052ddd68c0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2956d8c-0907-495d-ae8e-6a7b81b8d90d",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "621e2d52-1e19-47b9-8344-ed4557aaad6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f37c73bf-f8be-4ab0-9351-a1de148c1635"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e06ae05b-a176-4f3d-96eb-eb5f2b1a7a60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "add1f5a8-c3bf-4421-98f1-329a5c8e50a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7286b61d-e0f2-45ce-af96-31e1bc92f38e",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78508338-f44a-4a9e-98b0-79c4ca505dde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2cf2850-e4ed-4450-a35b-9a97e5964403"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "deddada3-8ed1-4876-a2f4-d136e790e899",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "ccc83fc3-5eee-4010-b476-a8265e239187"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97c86065-8ae4-4b0f-bd99-a8c731abad54",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf97f585-fe93-4e4e-b09d-75986dbf9391",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22ef28ec-7339-4b06-8992-30daaec71947"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bc2e38a-0ecb-4f72-a5ef-2f77b5a5530d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "28928e55-ac07-4ca7-8382-9e036480efc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46e5a463-440c-47a6-860a-e295913cf9c1",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3885dde2-31ac-42f5-8d17-6f6ec9c4a188",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc383ea1-d7d2-4188-afc9-eef3641a833a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b1063ee-4633-483d-b9b3-559134062a37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "91d86d73-7b2d-4cd5-9c8c-cf675fc54648"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2033e90b-d6a2-4025-9d81-b72b813feaa9",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a5896f3-c26e-40a4-be66-a4d74736a062",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24f2b619-8179-4cca-a505-7afca24b6490"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad8e4aab-b91d-4f00-9dd1-223adc7cdedf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "039a05b3-cd73-4635-9523-8647ea2a016d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec4f1916-0475-406d-b437-987622317e6e",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09874311-d6d5-45d7-a0b6-eade7e9b610e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f83a83f1-ecc2-4435-a576-b4ea3aff53ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee31c4ff-bea6-456a-9d27-d47d536512a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7699dcc9-ca23-44e8-8040-313a2a6ebbb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "554d7e6c-ed02-49b7-ae6d-775b4b8f4de7",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afcf19ca-4743-4ec8-918b-07949d5156b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50490ee1-fc47-4832-8718-f5e492d57c46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe25b889-143e-4fa2-8834-d38ce0804970",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "05f66e02-9265-4b83-8dd2-28631cc79643"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ab9ab4c-c701-4edd-8c8a-e8de396b3bcc",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50b6ae0b-e669-4fa0-98df-3713892292e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "063d9aae-af47-4596-ba55-ee0df7416aaa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e929c8c3-559e-4f1d-b465-7d27c19099cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "04a8365f-4025-420d-baea-45cfc2332b01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79ab0b94-11cd-4683-8e5c-ca4a4f2b7849",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22bbbd34-fb32-4719-8d5e-1bfae9291fc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13651c83-cb44-4b1f-8a41-3bf3712a5390"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51718b73-48ba-4a32-b19b-094bc813916d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "465474f3-133d-48c8-8cbd-2374e03fddc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af0adfef-6c2a-49ee-9093-87b7d955173f",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4704d106-a98e-46b0-ac7b-cf1143dc2939",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0348fd7c-7f41-4e76-a7c4-2299340bd92c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3817ab55-7f1e-440d-be73-d262b8b0b7c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "3ad4fe3d-f6b6-466b-bd96-6acc8d2f4092"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b6f5dec-5c3d-4f8f-90fd-523feb0886ec",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05e95fd5-dd7a-4d36-876e-0f82561cc203",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfbeb05a-fa54-4e80-acd0-9b3289f3d276"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56f68b47-e119-4014-a765-0633b4ae114a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "4be18c69-4762-477c-b46f-6758afb64b87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9ca99b4-5a7d-49c4-88ed-6de8a690d331",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2eec59a3-b245-4175-b549-0951d5c769ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9df4877b-a091-456c-9d00-3c3eb99a6ca5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe6be71a-b088-40ae-bea2-3c4b5966c31e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "d72891cb-9980-4862-a032-941dd8df7dd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ff74cc9-0479-4d20-a5aa-f1a87c0c901c",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0de96e9-d61f-4c73-8c4f-14ee353c0ac0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "420ee058-eb15-472f-b50c-6cf610d16bcf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b97b28e-1cc9-4755-87d8-2662a4d51f5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "34087b26-1f6c-4520-857c-dd8a37921d94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a1c6609-877b-42a1-9790-3c4df4003772",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e7aaea1-e08b-483a-b254-edbfdbb08f7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24cd6067-4d3a-4c84-bff4-a665750f3564"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b791d1b-77f9-4d17-8321-48e5184b449b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "2d33e34e-bce5-4ffc-a810-b5c3efdd5c74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a783b03-fa30-4bcd-ade1-0cb4ec45fcd3",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84dadc96-9c57-4b11-8362-03247c6457d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b06ba86d-2d68-40ce-8239-bf1f9cc19b3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37932dcb-02cd-4fdc-b757-0f68a0edefc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "64979c55-5ff1-40fb-81f5-e709b71c937d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc5fa4ba-6a42-4ec8-a5c3-d681c3b645e8",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7de7a4a2-a466-4c3a-b2da-df311e5e130d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ce9d5d3-e3c2-44a5-b16a-91dba7c6e7ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "608b1358-1822-4850-90f2-aa36dcd96c86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ca3120ec-b100-4ce6-b40e-96721ea2e98c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a23cd92-cc23-4ca8-b5cc-b69f9435ec81",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "131e6e38-2d91-45dc-8d53-e82ad2ba1caa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8dd1dbf5-2891-4bcc-87e6-e47130e2852a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2d4733a-89da-4d2e-a347-ba54d8cfce7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "14c68e2a-a00a-4b92-97ee-c4468eab4b67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5b99573-f440-44c2-b678-c29f80ff7e8d",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60469eae-069b-4bed-92f1-9a7b1aa4676d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45df814b-ad2c-487e-9bb4-1d3a328f85b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c7d1b78-c10e-4faa-984e-d55c6dd2eb1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fc95facc-0c4a-4498-8cff-ab5030cd4d03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1515e2e1-ee4b-4c57-b0af-6276b6b34110",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b58c8c8-1af6-4851-b157-a42793fb7a24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae7d9d3b-cd10-47e3-99b8-98311a616e1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b633684-4bb4-4a94-af26-41b498c02217",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "ffd382b0-c36d-42d3-a114-a8b157a47615"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc519c73-ecd1-46f2-a6a9-becd2b1bff10",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29470bf8-a1b6-45b9-9915-8746aa44dd6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8c83fb8-727c-4e34-a12a-a165a93f020d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dedf924-3662-49a3-ae56-d12f977be692",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "1cd6c811-fa58-4d30-b7ca-d750c107e7ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d88af16c-0aaf-44c1-84e2-722c547afe07",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b747e4c-2583-46e6-9221-b90d166af4f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f836810c-9642-4964-a4fc-fe6b0085ac05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a787563-10db-4e4b-be61-5051af5808b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8164ff0e-ffb8-4e02-9561-9298e3265491"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d68943d3-2f8b-4e97-9ada-f72ff9dbfa1f",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44780e95-c6ef-47e5-b6cd-6430ed75a825",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9c6b90c-7b18-4bd1-966c-91885776d08a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a124e33d-41da-4262-a6d9-f2e8ccd8308b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3d42af39-d495-460a-b438-c89f41f7ab62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9515ce13-6f1d-46fa-8a69-638a1e89bd5b",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94be7c73-d04b-4504-b6df-a090f04ded3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae8a8fe0-893e-43b8-8a5e-01e90f4c6a1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5a22bd7-3e86-489d-9515-b7cae25fd8d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b181c38f-d6d9-49d3-b7f6-3f930fbbbec1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6a2e21c-89c8-4d8e-b0e2-3cf5d1a3562e",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b7c896a-4633-400d-affb-df06686174cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab4e83be-4ba3-46bd-a6e6-2b0d30551863"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42a832e6-aec2-4cd6-8f0c-92bc934cc601",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4a92dd58-0d17-4f76-80ff-5c3ac7e0515e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "258150f7-0735-4c1a-a52e-9d646316a269",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3e626a7-a709-4baa-abc0-8274a448e456",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "650f247d-46ca-4383-9a0c-31d83f77f0b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3521ead1-6778-4a75-b042-9b1201de8dd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5b84a063-bf6b-48a9-9d2d-482340cfd844"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29354b54-238e-4375-b3ce-9e4d1fa41ac8",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7c80e84-2ec6-4c89-99dd-8f50351ef079",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e1464f7-a604-4b52-af4b-772e327f1612"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4db9daa2-be05-45d1-a8be-b1b5626a1870",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "9c41a7f4-3bc1-41bd-82f4-538eb61c7efe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6ff934d-466a-446a-9a5a-1d362d36695a",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02ff22f1-7f48-4c3f-8341-6fd2d01f957c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96a8dd63-a570-496d-a35d-849cd4abe27a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e77c57e6-8394-4e1a-8f3f-331c34f7c1a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8119ad35-ac19-4fe3-852d-dc18b06d92f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77464d6e-935b-4f81-a35d-7e34eca20462",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6ed7646-a19d-489b-925e-f351cd1ce5f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7c2b3c8-3c85-4e44-a7bb-1ab317cce84e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee6cd0d2-efe8-4c20-adcf-a101a45b3321",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7ff00d4e-aea9-4873-b23c-c9d9ecbd3980"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a417c897-24cf-49fa-9a86-268a30f22536",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82ac6058-3925-46dd-8728-c6a0e2a13d90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc66ca4f-9ece-40ae-b12c-4cc96fec12a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c76071f9-fa19-4759-bcf7-04af9c6f58e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "74a85656-52e5-4c93-b470-2bda1ef46680"
                        }
                      }
                    ]
                  },
                  {
                    "id": "987ec37c-a248-4d21-9e22-c0f44b5952eb",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3aa8f3bf-84e2-4eba-8468-c757cd6f36bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aeb5b0e9-9518-4386-8c3b-48cdf8db78dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "401246d8-fc4b-4c33-8691-777de6c2f2aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d68a8665-86fc-491b-ae9a-7b617732e6c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8505f57e-3db2-4bff-91c5-4d1487d46283",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6d42db9-a727-4d80-87d8-7d9e12adf3fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de7994bd-a7b7-4517-91e3-38f2b7dc8ef1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19f54a90-13e3-49db-b70a-35ca04d3572c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "cf74a535-1b78-4ff4-b1eb-d53fa7141432"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c01156d-5c8c-49d8-a201-512423ce355c",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e697cb81-bf4d-437d-a058-9fea04dec73a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5c6505d-28dc-4457-8f02-3dd71a7c9b8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3fa7945-c668-4512-8b33-c00a3759951c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "49513dc0-b0b9-41f6-8b8a-0f492be4a9e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d2ece8d-4b9e-4bbf-aefd-fcb105697d35",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee4e2fe7-9d31-47a3-ae33-c0ca4c0a98b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a5e646f-e801-4ad0-baa0-8f1958a8d4f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94c65808-8fe7-4c16-8d48-c226b542d45b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f5093645-d082-4c01-81a4-8f16d48c71d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9de14598-68f6-410b-b4d2-2a95158a2f1a",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c485cd51-0550-4af6-a0e8-295b81c8014a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24ad61d2-8d88-4ab2-8de4-b4fb1c0feea1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8afa40ab-a073-4741-84b6-2ad6a257461b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "991c1156-d8d8-4e67-9a66-0114f4f86855"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5dcc701e-b6dc-4804-9d1a-d8725ee31080",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b15036a-e5ce-4dce-99f4-5db3ba062736",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04a589c1-4018-400a-8186-9530a120c5c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47e2c945-843b-44d0-8ed4-013f64c122ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c1a567c3-f93e-449a-a5db-307fc4027bca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51cd1e37-1c20-4a93-9d9b-30f08caf31ca",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc7cc67e-42ca-4862-9b0e-5045fa49b0ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36365bd0-7c86-4bc5-a764-d627e67e329d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f115372-f5fc-49f0-9e33-beb1aa2b61c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "403a4ee1-0888-4cc7-af91-cb94df7e6f5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc57b95c-0014-46be-9076-7ad43c05f5f0",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5110b60b-06d8-46f1-b762-d18b8884e401",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac071d50-2665-47fb-993f-ce0b5d2f244f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "007939ea-5f5a-4b28-aaa3-6916aea4e44b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "63fa9e40-ebb9-47ad-99f7-f4091da6d09f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a40adaf0-8288-492a-8ba1-ae073b596bc5",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84889229-0d9e-4209-9824-9e75fb03b825",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "649787ca-63a4-4e5d-a681-c64d3194f351"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5391c1b4-d287-48e4-b063-96920b3ea73c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "90ca6f13-ee7c-48bf-88a5-e7eeb2182c3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "012d923a-c48b-49e8-85c3-22eaf0deff89",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9abed18f-5a4f-403d-8a28-989f557b54b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ca1ebf7-9d9a-4c91-96cf-3bafcfb0e400"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d55fba9d-e1a7-4452-bbd9-77e22b6235c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "f52fc8cc-b704-491e-861f-104460be04dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d8481a5-783b-4033-a8b0-d8ec6eba04c5",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c823a1f-4759-450e-8006-d9ec95982c32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31e1cc1d-09e1-4f7c-9f20-e8c9ca789fa2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eab43bf5-f409-4691-853b-7272526ff83e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "f03f3d3d-a82b-4f21-a6b8-4f107bb6aaa7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5134de75-6e25-4714-83fb-d2fcdc35eeca",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b34d886-043e-4d21-a0fa-4c8124698761",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "710d01a8-2796-4c42-b6ef-d1eb42402b2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b34aafee-08bf-46d0-b3fa-b64edd79383d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "ecf91ad4-d33d-431c-a762-353f60a8fc72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b46893a4-124b-4b15-8bd9-8bead084f147",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48c27cf7-7bb5-4bb6-a33f-c616637aee8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f84782f-a406-4711-b71f-6f0c70ae4ca9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76213051-9bd5-426e-bade-6cb3851d80fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "92e84338-0908-4462-8c6d-f8b508e4036d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ca24afc-8a39-4f5e-a57a-35c943234aa9",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2678b21-cf81-416a-b343-e74f5703f799",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "44072167-13c7-45c9-a952-d49b72e97533"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a774a13-cd97-4da2-b7f0-b3fddee25aa6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "ed613dad-20ec-4b71-aa61-4e42c5d64c50"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "0acf9801-d311-47fe-a3e4-aed17d8c9bbe",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "74297ba0-f046-4c93-8998-cbb1042073f9",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce1a0148-46f9-4406-9ff4-1c32e7a9e064",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4241ee72-6312-460a-95ae-928f3bd029b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7178bf03-d119-48a8-a685-0d7ee263a6a4",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "6074c731-9a3a-4e0a-ac09-cb3b5c347367"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7ca9bf8-3196-4919-8dfe-a7f66d0d1076",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "691372bb-6332-4718-9044-02247c4c53fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f53901bd-d08a-43e8-a5a3-6a7291aeec98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "266121ff-918d-4d0c-99e5-eb532932fa10",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "569337bf-d5d9-4999-9a85-0e083d80a9e1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "26802af0-2b01-4da5-ba54-ebe1dd6cc834",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b4aea59c-14d4-4a88-8a1d-82de1f83c6de"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b07d72f5-f622-49ec-9e8e-3b6da1789a73",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "316efbbf-d4db-4038-8285-f1fc3eb9873a"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8c88046f-098e-428c-93fe-e93156297094",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b0d05de8-9f43-4555-b8f0-ded2da358fc9"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "5d4df35a-dec8-4b0d-8bfa-ca5d830c52e2",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "47da6621-c3ba-4635-ac6c-8f7cb9a2c1ed"
                }
              }
            ]
          },
          {
            "id": "8b433dc5-5591-4eb1-b189-652897330bf5",
            "name": "Positive Testing",
            "item": [
              {
                "id": "177fbd6b-11af-46f4-b97a-086b74a1b8a0",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1e3f6577-e3bc-4f9e-ae1a-c76433ef32de",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1fb41dba-0d37-4193-999e-0877c554f887"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bc976281-f6cb-408e-bfc8-e74f82361e3a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "f33958bd-9eb7-4895-a3bf-fec60035ba0f"
                    }
                  }
                ]
              },
              {
                "id": "e766b317-bb57-4015-9642-2fa114ee3985",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "46ab03c4-7521-40df-99c6-7463dcee1cf2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "fe78956b-a8ae-44dd-9b98-f854cabd268e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7ea283c9-6ef3-4aea-a215-7d7dc8e8a922",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "be407204-f8b2-4215-8260-e7d6cd39e1a2"
                    }
                  }
                ]
              },
              {
                "id": "ff3a3145-10b5-42fd-a1e0-e82828841e23",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "108b6f94-905e-46c0-a523-fa5db2d81112",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5c94450f-03fd-4eba-892f-61c827f57908"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1636dd6d-adc7-4dd0-9d0d-adc2ba998a44",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "5dd75145-b985-4be5-b614-65cb484da107"
                    }
                  }
                ]
              },
              {
                "id": "95a6c69d-8d2d-4958-a4be-f40378adeb68",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "198839fb-e746-453f-8fce-461dceab957e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6f20924c-3668-4d72-94b5-1dff2f869904"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0a7a6c9a-f296-44d2-a459-02ade5090696",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "a9270add-d3b4-4e6c-8394-d96013a26aa0"
                    }
                  }
                ]
              },
              {
                "id": "7fe98a1f-0aeb-4d33-a641-149ff2a468ad",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "36a41970-f8b1-448c-951b-39720786f3c7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "06a232d7-ce83-4f52-a04e-981fd6268fcc"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "571ae5e8-4a1e-499e-a25a-e80c9cb68908",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "0254f67b-f0f5-4608-a05e-8c7de58c1fdd"
                    }
                  }
                ]
              },
              {
                "id": "69111ef8-4c90-4ead-a79d-e0d5531ad5dd",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "02676d8c-9505-4416-9247-7f080e87b3ce",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3e4cbc20-f910-45fd-8b2e-4835af778dad"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4c44d3b2-c99d-42a3-b5d7-7b926487ebe6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "845ecdcf-958b-45c5-9baa-9f3dde4c8882"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "41b39ccb-9c12-4d37-a114-7ef1c6d196e6",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b72ded13-2355-4d29-ac5f-5cad3835a9dd"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "950e3b7a-9b9a-44e0-9e92-ae3a174eae8b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f2072531-e27e-48a2-a9e9-e9f0806b62a1"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ee0d0008-3c53-4f36-94c9-2a8b35ba0ad2",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "5406a48a-015a-4515-9831-4e41daaa8d95"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f6643d41-91ca-4ca9-a039-892d3a7efe38",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "be0a9fb7-d58e-46ab-981a-edae45a790b3"
            }
          }
        ]
      },
      {
        "id": "bff9f412-30d3-4735-908b-f8a22d945d93",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "2bcbbe51-aeaa-4c19-a0fe-4b26b1a84695",
            "name": "Negative Testing",
            "item": [
              {
                "id": "34fc4227-8f5d-4b26-a299-514970bcb0c0",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "65e1ee80-4f17-42c8-9aae-90ac49461e21",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b45014d-4205-4419-9b61-d32a2c9c0db6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5ae3fae-4279-4edc-9e2e-44bc91a1ad0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60df37fc-7a9e-49f7-92a7-2cc74aabb2e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "798410a6-f7aa-4acc-9040-2abad2711610"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3def53a1-05be-4dcb-82c7-a24bc0032f98",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7968a6f9-b661-4706-b170-6e37b8a7ccbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71b2d60d-ddbb-46a1-bf7f-287cc7c0e1c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05e94012-f7b9-4353-8e2d-cdd23b6b0be9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f5d71756-510b-446d-8044-9bc81371f817"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b35ab34-6a09-4663-9887-fc9b5af8b2cd",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a5a3850-8dbb-4cee-9dca-f578a6d8d980",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad6a4556-3d61-4c55-9a6c-fd7b939dc4e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59b71b8b-1471-4bdd-b528-9ef98af34705",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "52416ce5-7b44-496e-a25a-4fae26106902"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39574124-6b39-4877-9104-d296fed7c964",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a83210e-f92a-4adb-b24d-3420b0c906f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce17fefb-6b06-40d3-92cd-4fb3284c5e0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c280cff-8dc0-4922-8e0f-afbc3099736a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a1b407f4-5ef5-46d9-b837-5610766addb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc1d45c3-be64-4c33-b00a-a84d149990a7",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6abd428e-c007-487e-a217-c2f0897970b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01bb7bf6-3629-463f-869a-8f2983f6815d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3856269f-65b6-45a5-8167-9c771d91fa99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cd0d01d0-b981-4030-927f-099e3d90113d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65f7839a-f52e-41ad-a6ca-6a0cdbeccf64",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "396e94bd-f628-4703-ab2f-35b92506a1a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d894626-5054-44be-b8b9-fceb5b476bf0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bd9f641-a8cb-4a2f-abff-1da97515594d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "822a522a-ca8a-4cae-bae2-0348fc4b5478"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5af026d7-1b41-451c-bba1-39b8dadf078a",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab35b665-8fcb-448e-8967-6ed7e4d67b14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b24eb605-2b03-4fb0-83cd-367796879d47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5334c6c3-37a3-454d-af2a-2d47e96f552e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "72a6bf65-7444-4d2c-b38b-4acff95bcae9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb1d0243-eaaf-4240-a918-4bd40481c70e",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7832a0bf-a8bd-4d81-92ba-7ef1c483d613",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de9d29a6-88fd-4389-bb77-31001646dee6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef917598-fbb6-4e51-9ac7-0f5840e549f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "948e2044-e3bc-4c63-8cbe-0823f909aa03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91cd2616-3bba-46a9-ac23-b8f4d54b9600",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3b6a241-c161-46ec-9a92-6c54fe4599e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d965247-0670-4d46-8b4d-cd489aef4ccb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b839239-c86f-4428-b0cf-85fbd590191b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b761c47a-7ebc-4616-8a7c-c2f25c8e65d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23470427-c6be-497f-84ad-70c20018dc41",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "872ba140-02e0-4570-8601-c9690b7cf5f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c3c3799-329c-48df-bfd8-ceb16f6e7604"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c97ef8e-af16-4fe4-9c45-c16e3e64404a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ba366b55-ebb6-4e9c-81fa-c1ff9252f859"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a29c6c9f-feeb-4bac-9bd9-d4b638589764",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60321980-f342-49d8-b563-86cf0b9ecea3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a682a8fe-8a4d-4a9a-90ea-4f1969301a16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "937592f2-d62f-4741-be8e-aa2ff3e2771a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "ac3dca05-bd22-4246-b1a5-ccbfa70bf2b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03af63f6-fc20-42b3-ada5-59d1e82cc225",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e631b7a4-7299-480c-832c-ef3e505dc399",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b44456c7-b961-47b9-a65b-103758ccff42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77f377c9-5ce0-40cc-ac18-e750dd0a96e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "aaae2e1e-01ae-4834-82cc-7aa79265f4b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b59e1f5-5325-4287-8131-00d57b164592",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "606608ed-515a-4137-a9e9-63357f149a74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "effbb805-e3b1-4407-9282-c772cd5c60a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc5dfdd2-3a07-49c6-b95b-15878b9e6e50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "dd34151c-773b-4232-88b9-889b6b86baad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c697620-65b0-4b74-9490-70bac2ce78cc",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ee66abe-bc75-43f1-b7ff-cc2bb2bc8e4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2befd90-42bf-4ee6-9df7-4d24dcd816ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de0e961a-f5ec-4b8d-b3e6-978191b8923e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "2a6fe714-c4e9-4fe6-8a98-60a5916b709e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c9eb3b2-507c-47c3-ae1e-99e1fe1eef6f",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31876bc1-53e5-490d-a48e-be8692c79d67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58f8dc37-0d7e-466e-9c98-9ed707d09875"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f86722c5-2ed3-4175-99fc-76eed8c11d86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "559e022b-4f29-441d-b865-03abd97be767"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1081768-1a00-47ba-b993-b065263fb54b",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38e6f4e4-60b6-4965-ba92-4a9fc62cfc1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04418c75-0b15-4b91-b596-d0df53eeb3b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48e50861-8fab-46d2-8a2a-e4bb782d9eb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "5d073135-b3f3-4c2c-a1db-c2a53afb9ea5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "829f0106-4e84-4bcb-8810-481dd6452f1f",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cd0be5a-02e5-46b0-a20d-6208e226b3ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9bfdb79e-8007-459e-90e1-cd13f0ce3067"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd530e9d-f68e-4090-bdb4-f7e5331bca8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "c427ef95-d351-43c2-b637-8fbee3444f3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "612c255c-578a-4952-9a2e-6b6084af6649",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8a27fd7-a0ef-4de9-849e-c1076e1838d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e519810-6d6d-49e6-98e2-3b4b24d14438"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0561e4b4-ec3c-4d05-adf9-1facf952397c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "a0825aeb-f2fc-4c52-810e-9b657b408aea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40ca472a-2bd8-45b8-a263-e7c26f239a10",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9215cee-1962-4a42-bc70-eca3cfc8c012",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b9799bb-4135-4438-b881-079937ae0c88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d994056-f493-4f6c-af4c-8e76f71698e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "641e0b57-f12f-40e8-b4e4-5435486a97da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11d8ff2b-2cc0-4242-9197-4682a0cf34f4",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06ba8194-234f-4c31-a95b-87358abb8f51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c1fc5e6-8869-4fad-bed1-86b42261e110"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9686e46f-9d96-4591-a4ff-9a5abf00ed89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d0a355ab-eaa4-430c-9ff5-8c630d5a26e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4678f436-233c-45b8-bfb8-1c8a5bd7ee73",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b16817d2-62ea-4dea-a045-b32e23547ba4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "102d53bf-1514-402e-853d-30f65b43c5ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9e4b034-694f-4181-a5fb-f2c315097179",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9d4d18be-2707-4487-a938-8e79fea3b4e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eacc4bdf-15f6-4ee5-a30a-bf3ef2f9c76c",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f811ead-e941-4328-9fe9-722e873b9f02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1794b7d-2332-4ad3-ba65-b3fdee716ae2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67d488a4-66c2-4ade-a1c0-d6e19d75a04b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8b29cf1c-ef5f-430e-9642-0b0913baae48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85987227-2a78-492a-85f0-bb6baf76ab83",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2c64a09-9d9c-45b1-a708-bedf47916413",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c842a218-0463-4b23-a383-496ba7c44268"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1306f17-1fb8-42fe-a8ff-e3393fd89d61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ab673235-5749-4426-8be9-943f3e50f6b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0296e129-8605-428e-b9be-e33e346fd710",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8184265-02fc-4afa-b9c1-f71890fcdeda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75b687a8-4752-4e14-9f2c-40df5215c71f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "786d517f-7e1b-4501-9568-dc313de25fe0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7e08b524-71d7-47aa-bb24-7f351ead57cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe747e19-934e-489c-88e2-4e1e56648033",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a82e114-9b94-442d-8b3b-080964cb6380",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf4de655-6420-4ac6-95c4-77f8935cb65b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3852f5d-d459-4942-8186-4bbf021a4e74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "902f5c4c-e2bc-4716-9f10-e31ffe18184a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "033ab310-3515-4758-82d6-722244948cff",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c55d640d-5423-47b4-8333-914713a4f6f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40eb9c19-2915-4b22-8d38-86037aa44dab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7b1c5c5-24fc-4630-927c-fc58c673d606",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3341012d-4959-452d-9179-a1c2329df005"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2da84805-9083-4cfa-a4c5-b643f8dc9556",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6210c736-db0c-44bb-b56c-a9e382714318",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52c92714-e3f6-4292-af7a-b5db8dda60ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88f6cdfe-d8c0-4b8f-80d7-7f053f48c6ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8def7dc3-4aeb-4d04-bd21-b4eeafa76d99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "317a3619-ac21-4df0-8dac-f91acee51249",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44f6df87-c8a9-492b-8c49-8170e9fe55a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9a14628-7be7-4218-b89d-48b041672c0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bae20f73-b963-4577-b5d3-1a5c440481c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "10984744-a701-4c6a-b70a-802d99a3248f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bc600df-2653-475d-b330-cd996a5ad3ca",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29bc5470-3308-431c-b6e3-a3ec9db79f86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c18eca8e-d24b-47e4-add5-a18e72d8c048"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dff7b278-cced-420d-9006-5d0892511012",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0637707d-6dc6-4945-af73-e5aa400f9cf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b3dee0d-2c72-4aa9-ba82-1577306c0866",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a70d1d22-0844-4dc9-9d52-dfd147544517",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa4cb91d-a424-44ec-a8f2-1816af4f6117"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9743c8e4-c40e-4806-93df-513a374d562d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "582dc717-74dd-4dac-a639-8a2daae8f991"
                        }
                      }
                    ]
                  },
                  {
                    "id": "627b375b-c302-42d8-bcde-03ef6444b152",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9bee619-a241-4421-9949-4d9d6750e983",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96ed8383-8aeb-4d8b-b121-d51b9f4a63e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "633eb6de-144b-4cc3-b080-da1bf2ef2199",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2c659969-a535-445f-9d9e-6018049815aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b14956b-0c2a-48e7-928a-e6d3841ba592",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f543692-0b27-4a8e-8931-4c781dacc9e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc6c717a-a3ef-49a2-9579-17b6fd2705c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f698a062-fc51-4f31-bea7-1f1c2bca2a28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ce94e755-4269-4423-8629-88863cb8f72d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "4169586f-3530-444f-8d41-89efe17ea787",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2afe65b2-bb98-4fa3-aa0e-4685ab6908f0",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "117065c8-4b1e-420f-b58c-acbea201b1aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e12727d-6eea-430e-8edb-3ff50ef9f505"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "718d8ae3-9748-4a88-bd76-89b9ce35440d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5a37a275-51be-45b8-9e06-188b66ddc804"
                        }
                      }
                    ]
                  },
                  {
                    "id": "124c95d3-1f95-4759-8454-56185cf6defc",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24036d34-3302-4c22-9541-2829c7cbd479",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "2d7df5f7-542c-4227-af6b-d7ca67c6b8ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41afe1f5-8ba3-466e-b3e2-4d5f31720f82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6f0c4de6-c51c-47b2-9b8a-12e0fd0db67a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1dddad3d-7074-4f6b-bcb8-e2ab55940508",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4f29043d-42a5-45b4-879f-99be891014e7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "744531d0-b25b-49cd-91b9-e5a2b51df711",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f8981aaf-df9d-44ec-99ae-7bf4a0b35a35"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "63ee71ce-608e-4906-b4ed-e9698e1bc301",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "1d5b79e2-86b7-43fb-a0f9-0efb18b45ba7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4c25da9a-8f09-412d-9bb8-f4db804a86f6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a6e378e0-48e2-485f-bd14-f9fc1b5d1041"
            }
          }
        ]
      },
      {
        "id": "9d870bc2-e20a-4d59-8a05-b874eac91416",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "1fa71b39-bea8-49f1-937f-b18809e66901",
            "name": "Negative Testing",
            "item": [
              {
                "id": "072cc18b-016e-4758-ba1f-926395d416f9",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "aeecbb83-08a0-45cb-8dce-937ec27d66bf",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3ec36f6-1089-40a0-bbef-85b71d9290bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5006c727-68f2-41bc-9761-ea6333baf23f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a25089e8-2cbe-4bbe-a633-116f617ddfe7",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df8d7838-7a4b-426a-bbbe-c30e7ff705ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2379d83-346e-49d2-8a25-45140d7a4e0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfa4b9c7-a4f3-4c8c-8031-52dcc679c82d",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccbd0e8c-c78b-4d37-b070-2d5681dfbf56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75494c80-cd71-45ac-b67d-b281b5012263"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0aad27c0-fca8-4099-aa2b-1b01d3824ddc",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13707347-5668-49f8-939a-e2465f291c53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "050c7b29-eb72-470e-a6fe-57c450cd91ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b792bca-ca5a-44e8-9fd6-1fe10dc82992",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33484348-4e9f-46ab-ac77-d47a1b047c88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9eea05f-03b0-4d13-9a98-ee9961c23d79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d16a9ae9-6fa7-4f61-9482-756a57f1b97a",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b716e57f-026c-4d48-a6dc-a4b6608e30ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c705da2-2fb1-449f-b3d5-1b17d338e771"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52015c43-c3aa-4885-aa3e-a44166c9f0e7",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2720ae8-2ad8-4271-807c-05838129eb7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c17232e7-78ef-4662-90ee-4fac167e3cf3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54d25242-deae-4bd7-b828-f0c7954010f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea731575-a249-4a72-979c-8a6183d7164a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3d82ad2-a710-4d28-a6b8-46b38aae7f15",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44c1ba86-33ce-4435-8384-18d97dcd55f8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fd0d6797-9fae-45bc-ab10-ad3bf5bbe68a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98fe4c10-52e5-4082-8564-3036d3b800f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98274f91-94d9-4d64-a8be-b69a180c2de6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9755b8d-1bfb-4b34-8d08-b4d2cec21ff0",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c795832-6a00-4110-a06e-41d2aae0d941",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eeef63b2-1920-4cb3-ad0e-d3d36abd45a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dbe1b40-4795-4e7c-b2ef-52c7c6880e5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a6c12fe-ff08-48a6-ba63-0a743ea65feb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "838fc9f2-1eee-4e71-b67e-dd768b947e93",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d57ced77-b9a8-4e72-8a10-a58ab42bd959",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "56532398-8efe-41e0-8775-cc57ac55bdbf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be6cc2a9-2bd4-4b3d-8cb0-90822f0dd39e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eed8bc22-fb19-40f3-900a-7c55992c8a0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8894017a-ef1c-4b8c-a78e-44179a463adc",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..zF1sQbNclnV5pE5MfuXqMaTVBquwie4ctwzSdbC_LJ1Lx5qRK6V-y9wl5oTvN_GpuOvMIvlG3kQdjgqL3GBKDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c8eaf44-7df2-437e-82c7-323fa49dac49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eaa844f9-ee44-485b-8240-86acab052392"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e45912f7-b065-4274-8b02-d777175f9810",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb101ea8-0c9a-47e9-98ea-9e98c4be907a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9c24e39-72f0-4405-9304-7561b224dfff",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6147c77-7724-4618-9b2a-53b72231a535",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73ac01f8-b229-41f5-95ca-82c0e5f57f3c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4182c85-ffcd-4099-9c76-d1d747736b7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f3a7da4-5573-485b-aee1-3dbaedb9c22b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82b9365d-6ebc-4ed8-b2aa-4ef2138691d0",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85aa4ab8-a73f-46f8-b025-88e0ad20c79a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "505ba246-008b-4621-b80e-e2a0edeefb32"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f9b3389-57cf-4ca5-8837-b385106817a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88efed8a-8b50-425d-abda-940d7a8d10b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf112845-8955-45a2-8570-de876523a263",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56aa2496-d369-4a0a-a04b-86c2665e67d9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8ea11b82-4c37-4dc7-8c7c-15c597f12fa8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0bc5e01-c529-4b5d-92a4-84b8ed340730",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b3f6906-9548-4c9b-880d-25dbab43092f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81671c5f-dcad-43e1-a84c-a1d088294263",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44dd1c2d-7b48-4b7c-890f-d314b10e8067",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8c17c338-9e48-4209-a284-5cae1c8227a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68bce873-0291-4930-bf8d-5c24dd5564ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e8d999c-2dfd-410e-869e-8a3764f5891d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28610f8d-24fd-4a0e-b614-e33b9995f48f",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b706d153-13e7-4621-b422-0b0c2b3ecd20",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8b2f188e-33aa-4d65-bd9c-ea749b67ce4b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b85bcf8-a3ac-4c76-9b70-3ca43728e8dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "962ca8c6-f5d2-45ab-814f-09c2b292a361"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca03b471-22b2-47b2-8b39-5e96d95a9b6a",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c4f69dd-bb65-402b-beeb-9185f1070d04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "790010c8-a95d-4c4b-86f1-1bddb77ee7e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1f58a81-a007-4611-bf64-6e6ad7204e09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a57a892a-3f59-4544-a48d-270d2b0a38fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f44c287-165b-468e-ae0b-ea06afbfe771",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc850fea-5f62-4dd8-a625-552093a14713",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f448d02f-852a-4b0f-a4ca-10367cb76b99"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "517ec21d-3e1e-4140-a014-458dff7bc8ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5408c53b-7c7d-4154-9fb7-ffe0a7011ed1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b4b7ac8-bd9d-4ee9-b995-71e74fd50b6a",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": false,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bba67d8-ea4d-4d83-9b0d-61c085821549",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d3708cd-edaa-4dab-ad3b-53070483f349"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2293105c-81d8-436c-b7ad-ce2aa5ba36fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44a4f985-7adf-4cfb-9661-8ae9b5fcaa39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56ec88ec-397f-4e12-a268-fca78cfc1793",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": 123,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6bd8252-6252-4520-aaed-1fbb8879fdab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2acf299e-3f6a-4c20-8d19-9bebe231f1ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a5cef24-1e86-4afe-a2c9-91e8ea45f976",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a4e4f07-2340-49fa-b8f0-25879fdfb319"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4faaa007-8b8d-4c01-9c95-bf8d1411ec92",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": null,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee904547-10df-49ec-90fd-9391b15db475",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc475434-9c99-4571-b0eb-85870332f31c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac35e827-181b-460e-b301-3c2e6eca2186",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab50e0ee-3f39-45d2-99ff-effcaeb6f689"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67ac080c-732b-41d8-90a9-828015fe6c81",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..5J-iTBtI5WNIe9L3kLF22cjjDx6iQuJAgl6yYYoIGMC-X_crKNlSlB5bRJsrb2MV-NDlWMtHe0grtMqRG1N0Bw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55123f3f-9b19-459a-83a1-9e32340ddee6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d1d98b5-9a38-4206-a564-8c4b535deafb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be4b8773-a074-4ac4-b542-ab059741c059",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43f818ff-564e-44ef-bf24-ae18260ae277"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d802286-228c-43ec-a0df-8fb14acd10fe",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2135ed98-70c0-47c2-8c19-f1d57fed7e22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8edff8e-35b2-4754-a9a1-2ffcd2bb24bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d6b9774-e428-4120-9dd5-1b2c674e3e1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "980c0820-e1c5-4167-84ae-6cb5e82ab8ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5c3ab6f-c3d8-4990-8f0f-688fb8b20874",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89a4ef23-236b-4bc2-8349-4c08b5a6ed93",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bcaaf947-2ef3-4386-8deb-5d36bf987ce4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b28388f-ae22-4849-8aae-3a2b22756e3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37a88722-61d0-4cec-8d0d-82a68a10f377"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75c7fda8-cf5e-4ac8-8bad-a1649d09c7bd",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ecbadaf-e823-4d68-b762-ea49e5d9efc2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "72fa2e14-344b-484a-afd7-828f161401a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83266ed4-9ad9-4875-9d80-48dfdc1a1aa9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1ed232e-2655-49bc-bded-7633f43599c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18e7cef9-8b40-45b9-9b02-aae09d9071ee",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90c62402-05c9-47cb-b6db-c1dd1d56c873",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0534c85e-36f6-4ced-843d-c86b48437783"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d54bd5b2-e104-42ff-b35f-d95deb8050fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3cec8b4e-1a79-4b92-a22b-5c3406f3e643"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2a59e6f-3c56-42e7-b98f-4906e0cc2889",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb39fa13-722f-4152-b1f0-80005447236c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ab1a1866-4145-400f-b434-1a2d3df6af7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26be42d2-ca3b-4c83-9cfe-070624d524d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8cfd6a6f-13a2-43aa-9901-17439aa573d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3da4d6d9-4b57-4bc9-be17-5d9fee50dd32",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6980f46-bb4b-41a9-951e-e231410385e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1b97ca1-3c33-415d-b328-121fedb62965"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26fbe498-05ab-4126-b87f-974d7c4f7523",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe236686-d418-4b15-90eb-100066f768f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09584774-a797-4e87-854b-3373833242aa",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03db3d44-e576-42fa-80c4-ebfbfa26733a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "af096a70-a68a-4306-aaad-92856805f3c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc9053b5-47d6-4f46-8ee3-8b1d9f52ee93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69c61e89-a5cd-481d-90e3-6438334dbe5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9254ae5b-8d0d-4a16-9b75-8527e2abc289",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d762164e-d961-40ff-b248-45c5585d262e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bb2ede58-ad1e-4bf9-a6bd-183028453d87"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bffe2f5-4962-4042-967c-bfc2ce67a09f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8ac8423-3ccc-426b-95d4-c4456c6a52fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcc24bfb-cf4f-450a-bf3d-b9d2d04d287a",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "921c5877-1c48-4ccb-92a0-ca6121991336",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c7d3972c-7484-41c4-afd4-b5f5e12c5418"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7145eb77-4e72-481a-875e-5b29951decd4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3215cf2e-791f-4e8d-8ac8-1de0d4d1f249"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffdb54c8-706b-4cc4-87ea-c4716a32eba2",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c33193d8-59b5-42a6-aba4-21eec9e2ada2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4433fe4d-9aa6-4f61-b4f6-1d9fb74c9ef1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8d4b269-8865-4d43-972f-f7bc61236b7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7663b1b1-2d3a-4119-bbd6-ed03d122aafb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cdef0d4-67c4-4ea9-9416-593411f9f49a",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79e14815-f8d7-425f-b8e2-91456d65bbfc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0a5c2d54-4b3a-46ea-83d4-ccd2bda1cf8f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "081024f0-7711-4d71-bf7e-2c20b69c6554",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3125c14e-c636-45f7-b0f0-37c8b317ce23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01007579-242d-4b08-9670-15d03fcafb55",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1912efe5-1552-4d39-9d25-d70551f79dcd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7b2551a5-ac64-4d1c-974a-11fa14cc3abf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2b8d481-48eb-46e6-9f5a-55e6191f2661",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a22830f-fb5b-4da8-a327-980c15aa3598"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cc30953-c598-4350-8435-3351ef81dac1",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4da17d51-f400-4aba-80fe-7e768c83a72c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6baa6abb-2cfa-42f8-bd17-bc2085d36368"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6961514c-0d57-4dcc-ac0e-cb75911870b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e0e711b-d2cb-4282-b093-b096f794a2bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5d8e569-6115-49aa-9b60-f46e4e87ba5c",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x7a3s_8HfmUqGT6SDkktN-jeRmBR2xQ_9tOhJx4kEG3SCsRTySfDxya9yy57LNv__qbY1eMkm9SNrwdYiqlBAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84cb49c3-3b30-4e80-9ae9-06c7dec41474",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1dd6883f-4199-4fea-b43e-20ec1107a3a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4d268f3-6270-4732-ab40-bca049dd873a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc6c0ef7-4cf3-48d6-9d5c-64fde6b1902a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf2bcae4-3dfd-4ad0-a5ce-a17b9791d704",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mMaPSvG48oEf3bv0t-6eLR3zvU3_BKoRIkgzkuZfm8zvjqbI7iy05D8k1mTeoSZEw3xYV-_sH1rChqGmmp7KDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3b9f7a0-c6d9-4479-a6e5-57452d996b18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d036989c-84ba-4ead-bae3-510455d623dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c1cb6e2-de03-434c-a84c-334605a2c732",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0541df8d-83c9-4665-a4e3-ce0f49f52107"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91b533fb-66f3-4a5a-a603-3a77d2a55da0",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..rAVfo-Gnj0vUX6yDAr7pslI6XAAyF2LHTXpiZEmnH5Hb4RsKcmDZZawaLSCg931y1cBUgZ1PQvGbJEdb094ZDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e82c5c42-8bfa-4561-a659-3f83fb746c8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e392d363-8222-4231-a485-6c4a2161bbaa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b189e93-6c4f-4227-a1ea-f6626067466d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fee3d63f-d12b-4f9b-bcac-1839cd9ee3df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21b19e87-851a-4ddb-989b-60348340210d",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92c2bc2b-0886-464d-8af1-58f0f8304774",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "267d7d8c-379c-4910-a9b0-5ed5a600d77e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00407833-3a39-46fa-af7e-363cf0398091",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8fdc244-5710-43fe-bb27-848f0a6a8dc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "256735d6-9a7e-4359-a194-ea02cb7a4d53",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96426d85-2080-4cb7-a643-fe7744fb0c96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e155b5f-67c2-407f-a8b5-2cd7d9c9b04d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33503e20-2d4b-4fea-b11f-1c28a6feefff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe3a95fa-c0bf-4e4c-802d-468039206c5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc92ec09-6d51-43d7-af69-3f40c5f270b2",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..vv4qa5LGRlgeMxW5G5VjEKDfjKKosQnvpx6oapYDlfUSWVagQsDoDcRmkotKzFHDcTh-opjGLp__agL6_d4OCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba32ab82-a36a-495c-98f5-6529e6fdd136",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ae5c9c7-bcfe-4a17-977c-12b8c7bf15de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84e1e4ea-978f-47d8-86ba-3b9497756d48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf5ca43c-0186-4c48-9790-a2cbeeb9cac9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ade932f8-f323-4b9c-84de-83b1be92d91e",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TTwcmWS6_0_t8XPlAGXbzWVSL_dL7OeYojY0FZz1WXCFvDfeAQtMh3dcIxuCeDqON6St3PODGfxluO_q1vWCDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b74098a1-2647-4549-9c7f-ee3a143b8351",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42042b21-d106-44f9-99a2-e9462cd12cb4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "404ad8bf-a1f4-4bee-b958-8c7f13946e5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "137fe516-f930-438a-a009-0a467daf668c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59cd1c73-84d1-496e-b4c5-4cb261df2bfa",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..wpkNYYEOCjKMWm9xTYNn0J7IgXZQbbkEoohMQbloz_Zxb15UVu6DqiqsENotAeHvlRWd7RH2O9v4FwWBeqvPDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53905826-fa5c-46bb-a31e-38ae21d61e49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b2c4a93-bcff-4e52-bab5-a21d7fc5de86"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebd1e786-b3af-4982-8481-5ce175a69437",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb29f2fb-34af-4505-a2af-15f0f23ebfb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23e96767-90b4-42de-b4d6-06b608566218",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b23e7259-f297-4f4a-b166-958a8c47818d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9985ece4-678a-4cdb-9008-e472a7847255"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5260a04d-6ed1-4cd1-b8ef-77b184fb829f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb003aa1-b59d-42f8-ae77-16abbbdc2e73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "734c070e-29d2-4b98-8e1e-f97a657c011e",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHJmwuqqXWMdd298m7RCTGyGoAzsCx1y9tewaHukqaJJoPn2-TLDCQuXvlnFeAYAE_Cy3j1UScfoVx5k-eclAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f4e7aa5-90ff-452e-b656-b21071c42969",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48f0f3fd-e901-44c5-9f33-25b4763979be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "356ab718-be19-460f-96ee-336368e14c18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2151f847-f9af-4e98-99ad-60bfe91bbb8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d2865ac-7d03-407e-b9cc-7d86cba5bd56",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3e7a4c3-24ce-49bd-a44a-e83cbf9bc80f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b1db0eb-b66c-4e20-ae36-dfce130ec8d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a489892-2d22-479d-8062-24616c1923ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b8e6c64-0611-409d-815b-7b44111073d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4738025-d36a-43c1-bec2-8b3065bb5ebd",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..OzKfWk00QpV3_FJru3xJ3_ktwlU4O68prZWWCmdy3mQTbCz2lPFRl2sB4AkdD3AZUFMAnwxhscd9B0UnqxTZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efa8d962-1763-4967-942a-b47ab033e6e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "412e6600-88d8-4fb4-bf88-1a982b327bcf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf430522-ddfe-47eb-82d0-e00d9d63a9e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "384d73cc-cfe9-4a48-afbe-aefb0a6e67b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5a5bf92-f80a-4dcb-a7f2-260a596468b0",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1W7WM5cXb0daWooGxEOYn_zm72mkmpF_tu8Fij39luQwNGDgK7h4nZGBFcS80HTVqiBKxzlhGq1yNnpUlLG-Ag\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1875a7d2-f950-41e3-8eda-2d578c17f761",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60d2dc07-5e65-4297-b3d0-a215af3c6673"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "427b977c-1abe-486d-b716-c179beab87ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d824bea1-9515-471a-be28-bd55db1799df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "986cec52-9d68-4ad1-a9fc-7f8f3a31afa0",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dkiU2sStrvQWiNFK8cKmCbAcRGsC9kbDdKyr-NRlPc9ORQczitwUEymjviemIi1Oot23VohpyMcSFvgFIKIFDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "788b8429-bff5-4027-b88f-235f6c396ff1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2796825-f274-4a8f-b0e0-b739e7c8afc6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5f6d841-2feb-4602-ac38-8f47014ac724",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "856b87e6-8905-4db8-8e62-8d0b4e5535cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b060e6f-46fc-4916-904e-1e6b3946e368",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efd2ea5a-4f48-4f24-adc5-88b541c581fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cff6233e-97e3-4ed3-adf2-ede533e2af74"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "166804b7-a623-4784-9344-ac07f1d856b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61ff75f0-000b-4e25-a3d8-86dba13ac6bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "834aea10-16c2-4e88-a759-3b9e9f38bac3",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pNIbeUn6DL71QxEWTF1wQTqKfAJET5JB9FlmoLXk4-rv1owG68DqQY6qwcPx6fUbMijsWsXlvaFvzND0jAg1AA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5a1193e-2ed6-49f5-965a-fa26f81da4f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc456512-e70e-44b5-9010-edc0067da767"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "823d40b5-fbab-4e08-a20d-afcd5c1aa642",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6718190-62d1-4764-8c7d-3e9c71257173"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d108a30-db52-49f8-9cfc-51925b1d37c2",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z0P0ndVABJRB7mCsv4C-EgB-1SxgnfrU2uQBDSwKm2KfB1jBnzsEzY9enxOn7V1lBAPNxELTEaxPCAK7_n3bBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e824bcfc-d287-4c7a-bbef-054c97e9aa1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9926ccb4-34d4-456e-b94a-1195e69d5cfe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1053594-f9d7-4f2c-b306-7e66f16ab095",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47b2282c-60f1-4773-98bd-ab0965b6449a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f40c67f-9897-49fd-86ca-820bce1e1a23",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91298853-51f6-492f-bcb3-233b037929a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53eed25f-e264-4d44-9e6b-991e9218dc2f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc8acacb-c491-47f0-a14c-35fbe08eb3b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6caa69d2-aace-4452-b7ec-7b9c82310ceb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e42de35-a328-44d9-82f7-d844b46f56c9",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a048f91-0778-4140-969c-b6aa6d1d341e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47074fab-81d1-43a7-ab20-c9ebee7cfe68"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "036d54f8-6299-472f-a9c2-72f9d001e571",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0318c3d9-aff1-4cf7-a37d-9a5097bde011"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc0d6b26-94d0-424a-a32a-50c10931d05a",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..IXaPbANtKFiA3Sh28esCkg9kdwpHScJg3bOCF7Phmb5n9RC981EeIobgDnMzWIjP4v0S92FDEcZqA_XbW43GDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce7de9e6-0065-4bb8-8bb5-2454eb4a5433",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ecf69ae6-c90a-4689-b4cb-de7d06cbdf39"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3c4ee1a-1093-44b5-a8a9-e2545e8291a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20467288-1d5d-474a-a0b3-457a73de50a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d829873e-2cf5-4c86-b9bc-5da0ff9ceade",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iM5Xr2lBqwFIQhq9RI7Dv4K0dzdQ0z7i5YN4ELsstv9vDC9xA-GY2Ft-PsfubsbgVyQsQYjchCv23GULmhauCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a635f2e4-05a0-430b-b017-d4fbfb4f6713",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2097f56c-3636-4375-844b-9a37340094ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4adf146f-133f-4e9e-a06d-621103e37ecc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b297fd35-5d16-4c63-be94-bba0c7c128b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4eec42c0-d447-4cf3-8b0f-051a1386349f",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f91cb85-6e26-492f-b570-9ba6b2dc533b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "687703c7-0ae7-4ab3-8f7f-22efa5fb3851"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba36f950-d2e6-42ec-a153-9d7fccd2a2f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb3d9f0c-1483-4ccc-8df1-85f804fd0c46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07dd59e4-dc57-4f00-970c-a37894cd6a6c",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82641283-6b9f-4f1b-819c-e4be292d054d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1eaeb07e-8d6f-4392-a3b2-419106282e8a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8545359d-37a5-43c0-a1a2-05d7136437ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "742217fc-04fa-43a4-9e1f-bafb05bead5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32f22373-1f8c-439d-95c0-2fb103ea53ee",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..GBcSurXcOJcVinhthkmqvV40OS1rN2fY57Kad0HMLUuykp14JJCtNw_gmtf6SwZxhB860OVsUmuNbZXsMCi-DQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26a5eca2-63a9-4d51-8b3a-01810b49bf81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9407c3e8-bc62-4d76-917e-ea7de1588772"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de140182-1cbf-46ce-98c4-a47e364cd683",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dab3e65c-52bc-43b3-93bb-db712766e62d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4eae1b51-2442-4057-a129-05732dadcbd2",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VWowmcXQAjabeJENG3aOcLzQ9HrvmSIs2pOWcaEMLdJtvJfP7oWohIBiqp94-eo1pd4Ocgk3hT0cLvS5qKBYAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ce9e759-7c53-4ac5-990b-8b4aa8376950",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14462f9b-586a-46d2-86af-fe4a25a26bdd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d70b612-9881-49e6-a118-c008e40e8744",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d681c4c1-908a-4d79-a940-65de53cb284f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "672b30ac-8551-4837-8802-ad5331a80520",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..-awe55AAvkjymZEpagD4fdSQk0uCGFfjyFwg7upmg_CISWk12JfezKe-N3hjTwYKCSCjScynLGvlH2x4iSgbDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bcf70a3-e036-4e1e-ad14-9934e9ad3e55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "605aeb1c-895b-45b5-92af-655b0e8bceef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6cd575c-02bd-4217-b134-079d2c8a7ae6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91344dd5-2687-4169-9169-18752a24fe76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a64079bf-98e0-466a-ae8f-8f898e3beef5",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..NDwZvVUWw-xG0zU8VsWhiXPWrYycgK_zwN8zZts05DTw23rOTd9IOXQxqhEMzo_X0c25jzowIbpDfEFxqfmnAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5b8419a-fc93-44f9-b3d5-feca93cd488a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b403ce6-ec28-4a62-84a7-eae92c215e72"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39880c38-215e-4a3f-a8d7-a91ade418712",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d47d7be-d0d9-4c49-aa6d-061b28d08556"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d8c22c9-587d-47cc-9f94-4f3c3c677834",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..y_7VEjN1ENYoedOrj2jsIqgL7FSYelxGgFZD5ckqKvSDM5BVEWiEctD24BWppCndRR7WR9_1ByBm2F1yBSaoCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "405fd72b-27fa-4b1f-86cc-4f4a10f5a1c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4febfa87-a3b7-47cf-b1e2-a6f7ed89326c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e378cec6-f602-41e6-9600-83399f8478b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c44b8e85-83cc-428b-b719-2b6a790335cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b847a2e-0879-42a6-b4d1-74ea988b341a",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dca0cf7-7975-49ef-955f-b99d1d488e03",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4c514659-2410-462b-bcd3-a040f8fee3c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f713ed0f-5c2d-4ed3-8295-7489cd2cdb14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95e53cee-2627-4873-b0c7-d0f1a33c04d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb97677f-6610-4743-8e3f-4ad4edd2d114",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4a1953c-d437-454b-a021-9cc6a32941ed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a315cea7-de47-4b0d-99f4-f7fbb607f085"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ba9c006-fe38-4f62-9460-67745e48d58a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9391a713-8ccc-44c4-bcbe-7e1bcd2b6d7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8edab257-ff83-4185-8c4f-577a5e81ad43",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "218e80a5-9e15-4378-8a5e-fac1cdf13c16",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bc1aa57b-1ae2-4462-a5f3-4e7b9f18863d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98970c9f-ffaa-4fe3-9a40-71d97efac63a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5f560f5-5f39-468c-b454-1f6f9d4051b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e61a005-3f66-4231-a2be-b9b9947c429f",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7875ff60-70d7-4ef9-88cf-d6bebea9630e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "47cbb826-c1ff-4edf-baee-c92bb684d587"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7ca1ba0-442e-4d81-b645-9e9d887ac9b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5964711f-2b54-4d40-87b6-00b050cab343"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd01cbad-9313-4a65-bb6f-dcdaa01f1d6a",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "924a7264-b507-4f3a-a620-5c48c6d43dc7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5bb38823-3eb9-4144-8b97-25ee22b22d92"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c12a247e-d21c-4a40-936b-9d4653f0e5ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3eb4c6c-c45a-40ee-86b8-a493e8e3411a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49cc8ae0-130d-42a7-947e-308c20743df7",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e390e2e-e552-4ff2-88ac-7831a71b2006",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9a6134ef-441f-4b08-818d-f2e2e5ff79ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bda24df-ed4e-4221-b01a-8eb147267c59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d3bdbc7-4f0e-4ac6-8e2d-b6c445b63676"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d65c776a-b7b2-4554-b645-1ba8b1d9c658",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71ef4da8-1ff6-4a66-9fe7-89bfaaeca3cb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6cb7d6e7-8ab6-4225-82d5-07ef3a45ed97"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "393a721b-063f-4232-8570-90463889862f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9b51fe1-a9a6-49a0-9ad8-e785af7c4fa7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f3e2f42-ff29-4b06-9ca7-dde9a9cef479",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e18696c0-2308-4e20-aeda-4e1114d73356",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "53fc69a3-5d5c-42a0-a92e-5164fafb158a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f86b8072-c64e-4ee8-945f-4100411f950d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f60d643-15e8-418e-bbc4-10fad619b5b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85d82e9a-d21f-41d3-a5ba-2fe4d2a7661d",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb469edf-28ff-4c72-9f17-40d3e0ddf30a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ca50beda-f1ff-427d-8896-50d66296d1ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61106877-ee50-463e-8fb2-164b969d646a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "415fc7ad-9a4d-4a94-a453-ad0d43f62506"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cc44d57-b93e-44d0-951a-7f1cd00ec233",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c805f667-b9bf-4383-a404-0555bf446391",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3a615b53-c58b-484a-af1b-d7c057d02b30"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29f9b907-6440-4543-ac29-5d2f4ac9fa3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e960c307-4ad7-41cd-9642-3431a1aa14b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70923666-e52e-448a-9bb4-e692ff3d1c5d",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "711fa613-5f23-424c-8aa1-26e4763745ea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1969ced4-2b72-4d4d-bfe3-0a7a87ef2e00"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1448d91d-4b84-46e6-88f8-8a5a24dd749e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c17fa203-4279-443b-ad13-9dab40cb25f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c94fc14-cceb-4973-aad0-6be7b91828e3",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a66a44a-767c-4194-b1cc-75101c574a25",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "63decc31-b4b5-46a3-ab41-9383171117f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c068a10-2c21-4bd1-b510-b09bfac8da7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbd76c59-f8e8-4fda-b992-ae2d1a78fa50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69b29bf2-a4bd-487e-8874-6a28bef6aaf0",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a452cbde-5316-45d4-8dcb-d1790f39c906",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d49e911a-d62c-4b3d-87fd-a3caf16dfcec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05044fdd-e271-4eff-9c53-78fcfeec266e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c33f478-27f3-4f86-8d62-a27850b2ae96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00428cd7-190a-4dc9-b0fe-5a638e8f3baa",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad351b6f-1c44-471a-aac0-7782469b3e61",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8014af10-d616-4d30-aa7f-a82f06f0f07d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "829832c0-2607-43fc-b587-94559e0c56f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54322fb3-3cbe-4639-a087-870a20d1aab8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afe3a228-c11e-4a05-bdd6-4694082ea8d4",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e07fbba-d59c-4c83-bc77-e87d47b2170e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ebc0aa7c-0d06-483a-b868-2e377be80d42"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63585165-cf51-4dc1-b285-a341c9429f2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7628d437-1b9a-4f33-be05-0e6cecf93dee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a76152ed-23b9-4468-a70c-7218ad21f180",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf70ad25-4264-4719-912e-ab8add73e627",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9531c9f9-312c-43f5-aae7-7288c247840c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ae2e2fe-f9b6-47bc-8d19-e5d53f306980",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a815d486-5ff2-4035-8a56-914cd83f5787"
                        }
                      }
                    ]
                  },
                  {
                    "id": "694ac705-acd1-4ecc-bcd6-02dae363d0f1",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47307680-a703-418e-974d-42337a4106f5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5bf4a9cf-2cae-46d9-8453-5fb4689f68c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0aa91b6-8146-4796-a8bf-598222a6482c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25254388-0ddb-4118-94dd-9e57b110488b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35440510-40c7-4dde-a6e1-55e6a4efcde3",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a46366b6-d9ef-4281-9d79-6c02acc618f4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b379bc70-65a9-405c-8d52-453817516b2d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28b2c201-a79d-4b40-bed6-0146392b4d44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f58c139e-b5e0-47aa-a207-0309324f1a4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24f10491-03dd-49c3-b60b-dfbc8d006a25",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94bb4eb8-9df2-4787-a383-367677e28866",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c994227a-d1ba-438a-a72d-a721e19d100a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cbbd783-81d5-4605-871a-b201d2b3a137",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7a461a9-2453-4e86-9f69-9e7b0a25ffba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f42c74a-5570-4b14-ba8f-1f81a1773190",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d35fd051-e451-4b97-bfa5-bc874b9fe736",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9df983a5-d39c-4172-9360-ba9c8662d671"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55c8e859-030d-474e-aefb-6b6c6aca1914",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fde11816-48ee-4f06-aecc-af315e3c885c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9352bd5-e6f3-49e4-9202-535e3b3c5b3f",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c13a83c-92f5-4d32-b19c-4eb553ce6a86",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "17a554ab-0a47-49a0-8d98-a5a926c430d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3661e459-a567-4d7d-84a5-2cf96f3ce118",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11c46bdb-6ac5-4b82-932a-ddb799e6ba26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5fc346e-d79c-4ce7-bd98-275250dfa358",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9416ae48-93f3-4b6b-a30f-63b767dd457d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "64dfbeb2-54da-4284-a72e-5ac38db5dbe1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dbd4f6b-9da2-409d-81a5-39fb00cdf4dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7aa20051-7896-464d-a093-fdf1fb7e6e5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72bef416-d556-4305-861d-b4b6086600d1",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a91c983-2a76-45e3-8379-3e8c0d1bb9a0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e5ad89aa-4160-4a9b-8ef1-bd53f6c048f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e2a8e03-f9c7-421e-8e97-abdbc7640f71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6461e01c-9fa1-4870-bbb1-208f7db01c3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c6b62fb-b33c-47b1-baca-e072e0ef1093",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3843deaa-eafc-444b-9f97-81a6f64878c4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9e0293fc-7d8e-49e5-854b-96946737caaf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19d1ec01-9cb4-43b7-99db-a639f81f140a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f000c2e-e59f-4a16-9624-4df8c54a3c2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b655c22a-124c-48c0-817e-00c87259ae84",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d889c20-b335-4f90-90e8-5dd9c65bfba2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "96158c1a-3594-4c92-96ae-83113a3b9ee2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e7cb6eb-36d4-497c-aca5-04b422682345",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ceb376e-df7f-4086-9679-3066bc050797"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e22fbe5d-c455-45e9-aee4-4f116087d0a4",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d5422b3-2745-4305-aa62-1b049184a640",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f0644461-f9b9-441d-bf3c-4933e55200d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3748eef2-4e76-4013-8e60-da661eb9aafc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8dd642a-c714-48dc-92fc-b580ef70381f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "248da35a-b215-4762-9ef0-01666ece6b38",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "045d94b5-fe7b-4051-be4c-8d87f2a35169",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6709f830-b6b8-491f-bbde-db06ef7aebca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4870be6-2cc5-426b-a798-e2a88193f507",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b8e576b-de1e-4bcd-8a68-d46f3e1219cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e27ac8e-5833-4311-b7d3-8a4381a549e9",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed709105-2579-4705-8b4a-98b4291584cf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cfd761a9-3cc0-4211-b54e-6c2f6229393b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "781e4cb5-371f-4cb6-b5fb-872b7eefe2b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f866e6b-17d4-4e6d-93df-2cb176493f79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a914802-46e8-4aa9-b8cd-599eb5cbefb4",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "210d3728-b68e-4723-9c4b-9d1fdfda61bc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "90efa747-ab0e-4351-9cc5-4642146acccf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92dc99d7-1cc7-409c-8663-cd8c44701d65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b487565-71b1-4d32-8963-8549a0c2832a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ac242d1-328b-4ca3-9cc1-0bcca2699ea6",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71663e25-2474-4c5d-8de4-a8ab8e56fb45",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "353d0541-024e-4e52-9c8a-68fe07dcc5ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db9bde36-126d-4970-af31-5ec1d18a7d13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35cf4277-d69d-4307-ad6c-0ccd211070b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86c9a2d0-fa39-497b-8343-61078be4bd7b",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88c90850-3aa7-48ea-87bd-54081b09b270",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2cef534a-f03f-449a-b46f-165daf178e47"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aaea8d23-9bef-4fc9-a94f-9380eb7c99b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "182c033b-e1ba-42b6-ae94-f5618564280b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a64a092-57b1-44b2-a5c1-3fbab1948ad9",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "807d8875-89c8-413d-90eb-b9ed95b60826",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "84553a06-af9d-4ec0-bee9-ba7400b4179b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7874ced-9674-4118-b028-8f9db89838e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5dc8a043-8dd9-480c-a45d-700dc069ba20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93ce176d-2b7d-47ad-a46f-45c8283e635c",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ad12231-0151-418f-8d53-a99707006673",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a1d5e56a-3e98-4cfe-bc5d-ddc221cefddf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad75ff23-c6f8-45c8-bab0-33c83bd99bc1",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49204870-4115-498a-99ed-268ff6e1dc3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "312916b7-93ba-48aa-b4bd-eda57b726ecf",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4ef5756-a126-4d1e-99fe-740c6e78c71f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d6ed836a-b455-4987-b2f0-b64f87cdfc0c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "616e7ce9-4498-41f0-b80c-6811d77db552",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71d1780c-0e1e-4134-8500-d23c9f6d99ac"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b04de37d-fc46-4b19-af08-b50235f9e0c9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8702279a-b1cf-401e-83a9-dca0b562ebcb"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b0caf821-d438-41a4-83c1-59e00d10f321",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "fbc37240-590c-49a7-a7d8-da0a3ce623f0"
                    }
                  }
                ]
              },
              {
                "id": "dc0c3609-79a8-4285-bbee-bd415de4bef1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "63c2773f-7ff4-4d6a-8ff7-cc93ac428fce",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2972893a-ae2a-4f15-807e-99b4b9955a01",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "b0f5a66e-714b-4bb3-88b8-54725fbc5124"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac8bce7f-1284-4101-823a-14ed7c455af1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "83ecb8d8-183b-456e-8bbf-dad09b72bed9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c86945a-659c-4132-ba53-09acc7a60572",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b085a598-c933-4fdd-b90d-5855ba8c1b6c",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "b7c8da71-1110-49c9-a458-fec2d8f3cd2c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02605507-423b-4af0-8831-2b30ae5b4bb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4708a58b-6e7f-4a23-a696-f7b0e434c9f0"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ec769884-22b6-4865-b31c-37a4851daff9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "eaa68ba3-56e0-4522-ab69-ee8b6f69ab38"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c1224bfa-4752-4717-8250-4b75c5b8cbd7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9a7b1cee-9eb4-456c-a3d6-a77c7f2e0ebd"
                    }
                  }
                ]
              },
              {
                "id": "c175be8c-1855-4511-94cf-bfa9341eda48",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "333a9628-01e6-471b-93ec-fb6d05f7289c",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2408a5f-2d99-4779-8a70-2433ed2c5f29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "18dcfabb-19a4-4ca5-a979-0581ceeec2bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "293eac60-5a56-47bb-9db4-75b9bd059798",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "128b7dc8-13c6-42b4-81a9-a252fb043882"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "b9226380-b34c-4ec0-8413-8e767492f867",
            "name": "Positive Testing",
            "item": [
              {
                "id": "6195b537-f864-4fcc-bba4-28e8da527f1a",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "984df250-adf1-4ca8-a521-7de1f68df651",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "57c0e811-0e6f-41cb-a2db-1faba2c571a8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "db420bca-4778-4441-a039-3f944e62a424",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2dbfd863-708a-45a9-bd5c-6be276eb2d42"
                    }
                  }
                ]
              },
              {
                "id": "0acd69fe-52ad-4a6a-a2cf-8d6725d189ad",
                "name": "credentials_verify:id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3cf8542e-84a5-4fc5-bec3-8f6dd23f0fb6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "3f6e4617-2e65-4740-9bf7-51efdf2a20b9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d0cd830f-f765-471d-96d0-aabde06a1355",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "53db7c4b-eb36-475f-a65a-3ec8703cf721"
                    }
                  }
                ]
              },
              {
                "id": "1d43b8f2-1e35-4b47-93e4-d01ad4b813a0",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "db6238b5-1111-4cbc-9a5a-caa40d45d2c8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "2755c2ba-5840-4dca-a6fb-43b2e058d1d6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b2351054-10f5-46ea-9e1b-29d718e7b2a2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8fc8ed83-449f-417c-ad6d-dfd5ebb14899"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "54712229-9b2d-4161-99c1-d89a1d1e71c5",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "52b69521-c085-493e-9c60-f874011fe4e6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "93326160-d614-4e73-81a2-364a4645e2a7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ebdad95b-adbb-4802-bbca-4ad17df76a56"
            }
          }
        ]
      },
      {
        "id": "edc33ed9-a159-4eea-9e6a-e13d2d480490",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "ba1add51-5f14-4758-b36c-73358dbf4582",
            "name": "Negative Testing",
            "item": [
              {
                "id": "de874508-c6b2-4385-903a-415492b89eef",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "99885fe9-dbb2-4831-ac2f-0a25b9a6c055",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31f72c06-5a03-46f4-b6d2-ff1e2088a264",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "263b77e8-09c9-43c1-837d-58c02ba94ecd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f23a1a22-c3d9-4692-9e69-4ddebaef8f3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "45b59805-1cd6-4c2c-81ae-0c456eb87bb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa764f26-26e9-4543-8fbe-646d8f06299a",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9373fca-1cf6-40f6-b4dd-e589ce196b75",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "bc135ad1-1050-4a2e-8069-aab894f5d134"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1f906cc-892c-4f2a-b036-55afcd358d30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "db79845f-6e7c-4a0c-ae6f-63ce66aa6abb"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9a098e21-2d3f-4e25-afce-c0230f22304c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cd7afd0d-9769-451e-b7b5-7a62a89fb78d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "42af0e01-b9fc-481e-8cad-789e836f49d8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "41566a08-99b8-4552-b51f-0d70321bc199"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0e82da27-9161-4752-89d2-eca9af285036",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "c46e5595-c4b8-44af-bcaa-9dec9558a701"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "01161f1e-2802-4a2a-a6c1-e77224634884",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1e30a3e1-8b38-4960-b543-fb591ded0350"
            }
          }
        ]
      },
      {
        "id": "5eff36cd-d172-44b2-aa6b-da8f09a987ee",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "df6fa92c-f7f8-4145-a5bc-0d042cafae63",
            "name": "Negative Testing",
            "item": [
              {
                "id": "fa26cdb6-1b4d-4def-bd03-561dd3c268aa",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "61442ea5-c6e8-478f-b133-e81613b944e2",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e51bd0b-2cd9-4972-a045-64ae0674a56e",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "91057a67-122f-4076-9ab1-ba673509c85b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1105f4e-b61c-4f40-837e-c7e6294642e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c236dc0d-a8ec-4bfd-aa25-e9bfbf783d88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00b7dd35-1654-4163-9d9c-72aea8301dd5",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "320be946-e81b-4bbb-ba12-32e48a641dd0",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "597d0d6d-77fa-480c-a17c-025b6aeea4fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e8aaba5-e2ad-43dc-9e89-2ce48a40d932",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f514827b-fd25-4986-8251-5f3c8fe288b9"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bed616cc-483d-463b-8360-b8e06cceb0d9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2b8217ce-c4ee-491d-b15d-30298c7c587d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "39dc8753-d838-4e2b-9a0f-94101d7cc0ca",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7f48a9c2-4c6a-4c31-bf8a-c4e1ec71d4c9"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "26b0df08-6281-4125-a6b9-320cd07f1c24",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "898e4e2b-156d-4595-998e-3c6192c7f810"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "04e5f0c4-e1ed-40cb-93f4-a2f20fbf1c39",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "89a8a85b-707c-4483-8bc2-13aba8a83907"
            }
          }
        ]
      },
      {
        "id": "7ee52cf7-ea23-4a02-ae3d-6b480efe25a6",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "510197c7-e79e-4c92-9025-bf5cef8e2da3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6d9c5196-d8af-419e-a3b2-fea6d54e7a09",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "676ef90b-dfcc-4ee9-8e1b-0fb849917101",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bd6e19e-4fe5-431a-87b0-b5e2fa9019bb",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "0f6cbe77-22b0-4eb1-b286-e948f198abe0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47508278-363c-45a4-8f35-313847c5e639",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8b783af8-78b2-4514-8fda-0934823e8ce3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6dafddc-43a4-4336-9e38-6df4920fdf8a",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c28e07e9-fe78-4fda-afd3-b5a42094b079",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "7a89431e-f49f-4537-b8de-2df65c1dc01d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b48316c0-b415-4edd-9450-220e5530f2f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d37ff5af-1666-4af1-acbf-06d50ecd6821"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d1ab1ea7-20e5-42c5-ac08-061728201d4b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a2d4316d-f57d-4247-8048-cbd1a10fc551"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b74774fc-da10-4a7a-ac24-af75ea55d816",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "20b68a02-7870-4cc0-9a7e-052abb5be5f7"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "22598600-bcd4-424c-9ec3-e571331b3229",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "16ee4c72-de66-4b27-a758-5e86895795d1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4ae66af6-4034-444a-b2e6-525e2c008633",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "040008da-a841-4fe1-91fe-78fa933037f7"
            }
          }
        ]
      },
      {
        "id": "7e6d1928-bdf4-4b57-bdf1-7749bcb9baf5",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d074c41b-15a9-4e68-bf88-6b42f5d47ba1",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3cb9e0cb-dd42-44f6-a1c2-1aee31098a79",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "9cdf0208-e12f-465f-972f-6fa255b03f96",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b32576af-d1c9-4a6e-88f8-86bffef6a92c",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "10cacca4-69d6-4902-b3f1-0c82a23b4405",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1915,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 261,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 511,
        "pending": 0,
        "failed": 92
      },
      "testScripts": {
        "total": 962,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 953,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 96.23754789272027,
      "responseMin": 21,
      "responseMax": 720,
      "responseSd": 122.63541693453602,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1670719373725,
      "completed": 1670719409838
    },
    "executions": [
      {
        "id": "3baf0e60-f83c-4da7-a0f3-d1ff4e62bd7d",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 252,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "5599ee61-f6d6-4623-934d-27ab1aa69f37",
          "httpRequestId": "60503766-af6d-4496-8647-4e25a18de01d"
        },
        "item": {
          "id": "3baf0e60-f83c-4da7-a0f3-d1ff4e62bd7d",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "1732bcf3-7448-4120-b0b3-2a7164eca1f0",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 0
        }
      },
      {
        "id": "7123e599-1918-44bb-a089-2ea6b3ea6119",
        "cursor": {
          "ref": "c7dc483e-f057-45b5-b6de-1b291b04849d",
          "length": 252,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "ff67cb4d-2c4a-46dc-9f36-9ae994f2d94a"
        },
        "item": {
          "id": "7123e599-1918-44bb-a089-2ea6b3ea6119",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "12155a59-41dc-4f56-817b-725373db45b0",
          "status": "OK",
          "code": 200,
          "responseTime": 21,
          "responseSize": 0
        }
      },
      {
        "id": "ccc2cad3-a88d-44ad-9c41-c45babf3e803",
        "cursor": {
          "ref": "c2900553-e791-4199-baa4-88621a493d6f",
          "length": 252,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "15af8fc4-9835-4464-8074-a467511f0ab0"
        },
        "item": {
          "id": "ccc2cad3-a88d-44ad-9c41-c45babf3e803",
          "name": "did_json"
        },
        "response": {
          "id": "1b3b42f6-2b53-4e68-90ba-191ac91fd373",
          "status": "OK",
          "code": 200,
          "responseTime": 228,
          "responseSize": 1369
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1b4a70b-4dcf-4f82-a665-bb424ad66ad2",
        "cursor": {
          "ref": "e669918d-5f94-4126-ade0-30454817b33c",
          "length": 252,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "abb0a7cd-7921-49bc-a443-fc4fd4ed00ba"
        },
        "item": {
          "id": "f1b4a70b-4dcf-4f82-a665-bb424ad66ad2",
          "name": "did:invalid"
        },
        "response": {
          "id": "bfdd16d4-bc76-4a21-87c7-65c554841fd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1b4a70b-4dcf-4f82-a665-bb424ad66ad2",
        "cursor": {
          "ref": "e669918d-5f94-4126-ade0-30454817b33c",
          "length": 252,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "abb0a7cd-7921-49bc-a443-fc4fd4ed00ba"
        },
        "item": {
          "id": "f1b4a70b-4dcf-4f82-a665-bb424ad66ad2",
          "name": "did:invalid"
        },
        "response": {
          "id": "bfdd16d4-bc76-4a21-87c7-65c554841fd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6607cf0a-6f79-4f15-b73c-a4561c43ca6c",
        "cursor": {
          "ref": "80852052-6b74-4178-9e49-8d0cf421b25c",
          "length": 252,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "7d856f5e-b5a4-45a9-b511-1519320d1595"
        },
        "item": {
          "id": "6607cf0a-6f79-4f15-b73c-a4561c43ca6c",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "24da4198-0fb3-4988-aba0-401859f26cd4",
          "status": "Not Found",
          "code": 404,
          "responseTime": 167,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3ecc65d-bef4-4be2-a3ec-3f0d7f57b5eb",
        "cursor": {
          "ref": "8b123982-011a-4515-a186-a04fa2116be2",
          "length": 252,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "a5bec9c0-4fd8-4bcf-b8c2-4f0fcd7ca319"
        },
        "item": {
          "id": "e3ecc65d-bef4-4be2-a3ec-3f0d7f57b5eb",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "624b7d1a-8aaf-405b-b697-acf2f4c2d803",
          "status": "Not Found",
          "code": 404,
          "responseTime": 39,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bc38a65-9287-4a98-a556-163aba210abc",
        "cursor": {
          "ref": "a27f0dab-39aa-4205-a5c9-3caec9a9b7c0",
          "length": 252,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "33e3d07d-2abe-42d0-8e79-b0e9d9283cab"
        },
        "item": {
          "id": "6bc38a65-9287-4a98-a556-163aba210abc",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "dc26e71b-efa1-44fc-8052-c511d4eedcca",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 39,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "387f259a-c29b-4d74-bf07-4b7d0c5ee409",
        "cursor": {
          "ref": "96eb9909-9232-4e26-acd1-dbdb57913aed",
          "length": 252,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "3f4d76bf-32e6-468a-998f-ce9c0d23cd38"
        },
        "item": {
          "id": "387f259a-c29b-4d74-bf07-4b7d0c5ee409",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "861aa5cb-5a3e-49b4-ae59-3bb02f7b4d2e",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 48,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "387f259a-c29b-4d74-bf07-4b7d0c5ee409",
        "cursor": {
          "ref": "96eb9909-9232-4e26-acd1-dbdb57913aed",
          "length": 252,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "3f4d76bf-32e6-468a-998f-ce9c0d23cd38"
        },
        "item": {
          "id": "387f259a-c29b-4d74-bf07-4b7d0c5ee409",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "861aa5cb-5a3e-49b4-ae59-3bb02f7b4d2e",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 48,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6529a665-8350-48f2-84d9-ab8402825b15",
        "cursor": {
          "ref": "5491dcc4-f4e8-427d-b74d-885ccba8420e",
          "length": 252,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "8df64da6-fd4c-44f2-aef1-5a78f284faca"
        },
        "item": {
          "id": "6529a665-8350-48f2-84d9-ab8402825b15",
          "name": "identifiers"
        },
        "response": {
          "id": "3ae8a41f-8cda-4aee-bd65-fcbc40a3e107",
          "status": "OK",
          "code": 200,
          "responseTime": 170,
          "responseSize": 1385
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bcd8850-b137-4ee7-946d-fe45d2e3902f",
        "cursor": {
          "ref": "f47d1fbb-0c4e-4889-bcaf-e9894a753de0",
          "length": 252,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "79525d3d-1672-4fa1-a030-44b403160b52"
        },
        "item": {
          "id": "5bcd8850-b137-4ee7-946d-fe45d2e3902f",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "99386a55-4179-4d3f-89c2-dc184dc9e84a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bcd8850-b137-4ee7-946d-fe45d2e3902f",
        "cursor": {
          "ref": "f47d1fbb-0c4e-4889-bcaf-e9894a753de0",
          "length": 252,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "79525d3d-1672-4fa1-a030-44b403160b52"
        },
        "item": {
          "id": "5bcd8850-b137-4ee7-946d-fe45d2e3902f",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "99386a55-4179-4d3f-89c2-dc184dc9e84a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3061ecc6-0134-4f58-b240-ca48f8acfc3c",
        "cursor": {
          "ref": "64271075-40c1-4660-9303-c8f9114ec4ff",
          "length": 252,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "ba22ef5f-642f-4199-8435-a7a3bd6cc977"
        },
        "item": {
          "id": "3061ecc6-0134-4f58-b240-ca48f8acfc3c",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "427f95f0-4106-4eea-83bc-20268c992d8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "441020f0-279a-4204-ad17-5dc5e91c6ebf",
        "cursor": {
          "ref": "20135d8d-bdfb-4a66-8ce2-568d1afee720",
          "length": 252,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "c9102dee-714d-4248-bdf8-24476d4b185e"
        },
        "item": {
          "id": "441020f0-279a-4204-ad17-5dc5e91c6ebf",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "508aade6-0f56-494d-85e9-64eb5044d9fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7e4eb93-0adb-463b-a5d6-a5e0e988413b",
        "cursor": {
          "ref": "b70369c0-5723-4583-8d96-4a6ff80373ad",
          "length": 252,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "6d094359-f363-4799-91f8-d696d56653bb"
        },
        "item": {
          "id": "a7e4eb93-0adb-463b-a5d6-a5e0e988413b",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "840d9697-ac9a-465b-9f46-5ab424701abb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fc79d27-35f1-4964-8c50-bcfc577772a8",
        "cursor": {
          "ref": "49d1d830-ae87-417b-8cc5-bd538d9e368e",
          "length": 252,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "1ba93835-8abf-4ade-8f5d-a968b41ac1ab"
        },
        "item": {
          "id": "9fc79d27-35f1-4964-8c50-bcfc577772a8",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "d458a8cb-14b1-443e-873d-b5cbf4db5830",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42ef6f82-d5bd-4cf3-bc07-57bcd3b2e5b1",
        "cursor": {
          "ref": "a77f3060-0a68-4d91-83ad-6de77290ebdd",
          "length": 252,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "5310587f-a507-49c1-80f3-40f63dcad191"
        },
        "item": {
          "id": "42ef6f82-d5bd-4cf3-bc07-57bcd3b2e5b1",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "aab62096-39e9-4d97-8144-c8726242a242",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f55be3e-b466-4357-92f1-2db00c7e5a71",
        "cursor": {
          "ref": "f47af295-1dff-41b7-87dd-803769f15477",
          "length": 252,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "9a94621b-cad3-44f8-867e-7d09c0069481"
        },
        "item": {
          "id": "3f55be3e-b466-4357-92f1-2db00c7e5a71",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "f5f2cd6f-7be4-403c-8b00-87cad5220f1d",
          "status": "Created",
          "code": 201,
          "responseTime": 718,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "05c0dddf-6bc3-4bde-b96a-68eabcac46d1",
        "cursor": {
          "ref": "1d484321-65c3-4a10-afa4-021060b4ca2c",
          "length": 252,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "fe5dcea2-b111-4dd0-aea6-45dacb86373c"
        },
        "item": {
          "id": "05c0dddf-6bc3-4bde-b96a-68eabcac46d1",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "b33afcaa-1cda-4602-ac52-4e8d5db5eca6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac6ae494-3775-4f5f-b2fe-92ed7c636bab",
        "cursor": {
          "ref": "efa5bac8-cef0-477f-9378-fcbef44d2823",
          "length": 252,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "8aa91884-ca61-4d69-85fb-83384a585353"
        },
        "item": {
          "id": "ac6ae494-3775-4f5f-b2fe-92ed7c636bab",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "b4bc4f43-f9ce-4bb2-afa5-2d364dae17b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48394eaf-9ea0-4518-95ec-77e81cc3872c",
        "cursor": {
          "ref": "11584f04-b16a-44ec-9813-4108cc5b85ff",
          "length": 252,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "aadcacd7-3f97-4c80-99bf-573be1ed7dbc"
        },
        "item": {
          "id": "48394eaf-9ea0-4518-95ec-77e81cc3872c",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "3e0c30b0-7cc5-4ee3-8c3f-9b43a7edd8f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f3f23d7-5f64-493f-b724-dd221f487b04",
        "cursor": {
          "ref": "bd2ea220-ea78-4a9c-8de1-9f580cbfa0df",
          "length": 252,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "8f33e81f-22c6-4971-ba9e-a12b8dda7d57"
        },
        "item": {
          "id": "2f3f23d7-5f64-493f-b724-dd221f487b04",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "3d142244-064c-4f4c-bce3-8f98fe4d4682",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d06e8ab3-596e-4340-9673-d9f98d5f3de3",
        "cursor": {
          "ref": "8d5cfe28-cbaf-41a1-8d58-ee5e80fa6732",
          "length": 252,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "8a4d1bf0-5688-4fa0-a8a2-e8df4243396a"
        },
        "item": {
          "id": "d06e8ab3-596e-4340-9673-d9f98d5f3de3",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "9b2ba249-8536-474c-b445-2884455c4abc",
          "status": "Created",
          "code": 201,
          "responseTime": 450,
          "responseSize": 683
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "e3f2e95e-8071-4d66-9b4a-101f98c26951",
        "cursor": {
          "ref": "d545ad3f-f98c-4c05-95f3-6923fc25142f",
          "length": 252,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "b9fbb3d6-7319-4d5d-b407-376fa1b14bbd"
        },
        "item": {
          "id": "e3f2e95e-8071-4d66-9b4a-101f98c26951",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "f7ebecfa-b620-4fc8-a0c5-8aab21702dfe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74d0325d-9d49-45cd-ad3e-1ae17d53e0d5",
        "cursor": {
          "ref": "eecf37ab-4037-463b-8f55-6a55659b6f34",
          "length": 252,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "6ebc9226-4db9-4761-89ff-b5368528b6f7"
        },
        "item": {
          "id": "74d0325d-9d49-45cd-ad3e-1ae17d53e0d5",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "998450be-9975-489f-b5fa-5be3121a8537",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2910c5e4-3f15-4fd3-827b-b4cea5d811f1",
        "cursor": {
          "ref": "6304d5f4-906b-46ca-bcca-502ff22ec9cd",
          "length": 252,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "7e668cb6-c20f-4c83-97db-e642c7044abc"
        },
        "item": {
          "id": "2910c5e4-3f15-4fd3-827b-b4cea5d811f1",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "b3ed14cd-9c2c-4c69-982d-7fa12d75e50d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d9d580e-3b23-4b1a-8db9-acbf645b0097",
        "cursor": {
          "ref": "81c37658-1614-4f44-b4ad-982e26f6278a",
          "length": 252,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "513b9e96-2e53-4361-8497-240f11f54631"
        },
        "item": {
          "id": "4d9d580e-3b23-4b1a-8db9-acbf645b0097",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "ccaffe3e-c9b1-46e1-a3d7-1e37bff7399a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f27fefc-c9b5-4486-93fc-38f13961aa02",
        "cursor": {
          "ref": "93f2128f-d51e-4415-bf21-f27dc3eeba66",
          "length": 252,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "20b35915-99f8-4101-9b71-b67a6e8c0d41"
        },
        "item": {
          "id": "3f27fefc-c9b5-4486-93fc-38f13961aa02",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "64123384-f0f5-4fa6-afad-8e7730b2283b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3aae0a06-9fa8-449e-9388-39452705e206",
        "cursor": {
          "ref": "f503a775-415e-4160-9a84-a36146fd64a5",
          "length": 252,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "4f89960f-bbae-41dc-9c5c-4d733e4d572a"
        },
        "item": {
          "id": "3aae0a06-9fa8-449e-9388-39452705e206",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "f6156a1f-880c-4e1f-acf4-af4434f85e89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c6f66de-840f-4fe4-b2b5-546f7ff74abd",
        "cursor": {
          "ref": "68c1e3e5-e83e-4fb6-9bed-26e34bf2e24d",
          "length": 252,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "e453c8c4-df08-42f0-b380-f62daada6e1e"
        },
        "item": {
          "id": "3c6f66de-840f-4fe4-b2b5-546f7ff74abd",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "aca352b3-119d-481a-a607-3b596954f412",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "846e7b4d-87c1-4444-9890-bef5eac4006e",
        "cursor": {
          "ref": "cf895c3d-7965-47d8-8c29-3f70952b2690",
          "length": 252,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "d8fee662-caed-4758-a6c5-5ff03a2be940"
        },
        "item": {
          "id": "846e7b4d-87c1-4444-9890-bef5eac4006e",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "3cf3cd73-c1f1-444d-8f08-51b286be385b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64becc07-c4ae-4681-85ef-c45b409b411d",
        "cursor": {
          "ref": "452d5d8b-37a3-4721-b8d7-914e118da735",
          "length": 252,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "af679649-9e00-49ba-b325-14bd4665cfae"
        },
        "item": {
          "id": "64becc07-c4ae-4681-85ef-c45b409b411d",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "403d283d-9a39-4c93-97a3-9d99592757db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a597d684-4f4b-4724-87e5-9c74b2e08983",
        "cursor": {
          "ref": "bb76faf8-b425-4abf-8f21-e7f90adde1cc",
          "length": 252,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "7a2ef94d-fc88-412c-bcb9-770fc0f82979"
        },
        "item": {
          "id": "a597d684-4f4b-4724-87e5-9c74b2e08983",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "da80cd0a-7bdb-4af7-819f-39f76a48417b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "434865db-6c57-4678-b67c-929c9cb048b3",
        "cursor": {
          "ref": "efc060fa-7fb1-4785-982a-6b2f8591807d",
          "length": 252,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "fb722b45-2343-4340-8981-f15c017237fb"
        },
        "item": {
          "id": "434865db-6c57-4678-b67c-929c9cb048b3",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "29c16b8c-b7c6-4c36-9e61-8d7602ba5812",
          "status": "Created",
          "code": 201,
          "responseTime": 526,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "83cc6f20-3993-456c-93a3-7919c38ba5e0",
        "cursor": {
          "ref": "8eec109d-ff66-4e93-a354-602eb117f1c9",
          "length": 252,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "c06b3a0e-0335-4f50-a620-f41d2859c403"
        },
        "item": {
          "id": "83cc6f20-3993-456c-93a3-7919c38ba5e0",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "bc3ca411-4354-4ca4-bd91-c5732de61c61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39ed8d2c-9c5a-4d9b-90d5-88e6dc03ab6a",
        "cursor": {
          "ref": "36899267-0735-41d3-a264-1e16587cb2c1",
          "length": 252,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "5ead364a-b20d-4cf2-9563-8533cc509ec9"
        },
        "item": {
          "id": "39ed8d2c-9c5a-4d9b-90d5-88e6dc03ab6a",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "33b3882d-dc50-4aae-8fbb-829924c4cbdb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b537a731-167d-47f3-8308-1820898cd85d",
        "cursor": {
          "ref": "8a357281-b6e7-443e-b7a9-3161b6d6eff5",
          "length": 252,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "057b8907-a4cc-4dea-b1de-86f70631d41a"
        },
        "item": {
          "id": "b537a731-167d-47f3-8308-1820898cd85d",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "24b5d445-5710-4ca7-834e-fd8740128440",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "471fbcbf-dc91-495e-9df9-78ec7fbb6678",
        "cursor": {
          "ref": "211ac353-dfe6-4125-9b31-b6a3aac111a0",
          "length": 252,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "a659578a-404f-45b7-b7e4-d817504c85c3"
        },
        "item": {
          "id": "471fbcbf-dc91-495e-9df9-78ec7fbb6678",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "00e1224f-f9ef-4fdb-9228-fc9e36289515",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81f5d0a1-f435-41cb-bdd4-759429bcea6a",
        "cursor": {
          "ref": "22599992-7d93-4f27-af8e-871e20d753aa",
          "length": 252,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "3b9933cc-8f2d-4109-93c5-9c42562baeed"
        },
        "item": {
          "id": "81f5d0a1-f435-41cb-bdd4-759429bcea6a",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "e3453b10-5a80-4092-97be-3e67fed0f7d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49ee53b8-815a-42f5-8b33-677c30374586",
        "cursor": {
          "ref": "f9120d02-9285-43d8-ab39-06d1857ff039",
          "length": 252,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "8661d3dd-e73c-41d9-8a6f-f23638fccbb3"
        },
        "item": {
          "id": "49ee53b8-815a-42f5-8b33-677c30374586",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "ae1c6d7e-b7dc-46e1-ba44-872f5bac7b90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33f3c253-1ba3-42ad-90c2-ba26f77e3cb4",
        "cursor": {
          "ref": "2ec14181-a9da-4c4c-adaf-ca3bde212e3c",
          "length": 252,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "da5d16e4-d92f-4bf1-bf38-fa7c7cc577f9"
        },
        "item": {
          "id": "33f3c253-1ba3-42ad-90c2-ba26f77e3cb4",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "d92b0b32-5357-461e-b267-2c57eb7aca0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88ee6b15-4a50-4bac-8fee-f95129a0e203",
        "cursor": {
          "ref": "2cf2c5fb-9d5b-4032-8343-94eac2ce29a3",
          "length": 252,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "ee610944-404d-44cf-a9bf-b85dc21c6f92"
        },
        "item": {
          "id": "88ee6b15-4a50-4bac-8fee-f95129a0e203",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "5d5724ff-edc9-49fc-9374-daf9afda52a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6376776-fd9f-4313-aca1-ef61865a08ad",
        "cursor": {
          "ref": "b892b8fd-1478-41bb-82ee-6dec99f43dcd",
          "length": 252,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "c8fe9c77-4db9-4377-af81-c8049c6c732d"
        },
        "item": {
          "id": "d6376776-fd9f-4313-aca1-ef61865a08ad",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "4a149a44-5a7c-4c61-925e-5bde8da455ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76dc9944-cc9c-4dc2-96e3-88491b3a59fd",
        "cursor": {
          "ref": "442fc527-b45d-4578-a4e5-2f7ae8ce0a2c",
          "length": 252,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "0ef777e8-e467-470b-ba0f-d5a312ff60b3"
        },
        "item": {
          "id": "76dc9944-cc9c-4dc2-96e3-88491b3a59fd",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "59ee2bea-0033-4632-87c0-11b68fb7c9bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5f0786a-e7ee-4525-b1d7-f9e2f9d3b19b",
        "cursor": {
          "ref": "77a309b9-8801-47b7-99cb-4cdcab0638f4",
          "length": 252,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "57dfb14d-580e-4499-ab91-d3ff65f0e2bb"
        },
        "item": {
          "id": "f5f0786a-e7ee-4525-b1d7-f9e2f9d3b19b",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "49e05ec8-2b4c-4786-8f66-730113fdbfe4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cc1b049-b98b-4f7e-81cf-07ec868541dd",
        "cursor": {
          "ref": "cac65c2f-2843-4e4a-8537-b40f862c2628",
          "length": 252,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "8f3bb728-2ee3-4f59-9f2a-de6cb334ad35"
        },
        "item": {
          "id": "0cc1b049-b98b-4f7e-81cf-07ec868541dd",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "9d6ba27c-2a87-4b1a-a938-7db156c42370",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5c09c39-fac1-4db5-a371-c784f9df1f64",
        "cursor": {
          "ref": "128171a7-8a07-413c-9bb2-96af9db36d83",
          "length": 252,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "3b7bb165-d7df-48fc-8bb4-06b52fc4dbe7"
        },
        "item": {
          "id": "b5c09c39-fac1-4db5-a371-c784f9df1f64",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "4a6004e0-9a04-4f36-b8b5-ef6202aeb544",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 337,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "1adaa2ba-a050-46c8-b109-3c5fbeadbca4",
        "cursor": {
          "ref": "4e013ec2-ed4e-4523-bc0a-08d1e4d650c7",
          "length": 252,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "f0fda90b-b907-4d5b-84e6-1868a4038e89"
        },
        "item": {
          "id": "1adaa2ba-a050-46c8-b109-3c5fbeadbca4",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "d417df83-98fd-4ed4-9af4-74ab24e40d87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b51170c-b624-4f63-865f-26c3ff69262e",
        "cursor": {
          "ref": "4b40fe49-2437-42ad-bc46-b010e8fb4813",
          "length": 252,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "39561b97-ae52-4641-9e0d-de4ec41391d3"
        },
        "item": {
          "id": "0b51170c-b624-4f63-865f-26c3ff69262e",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "19736414-6932-4d51-900b-398beb552003",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74bbe172-f3c9-4f9f-bf38-22d8eddc3f3d",
        "cursor": {
          "ref": "480d69a0-cf7e-467b-aed1-74d13f7b2a94",
          "length": 252,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "fa64b292-c765-4d70-afc8-79141440df49"
        },
        "item": {
          "id": "74bbe172-f3c9-4f9f-bf38-22d8eddc3f3d",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "3ed6d6d8-bc33-4bf6-9c6e-0fb32169f7c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3883d35-1cde-415a-aef0-422ba374490f",
        "cursor": {
          "ref": "4e7ed768-ff22-4099-9383-fb652f52eda3",
          "length": 252,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "5194f011-130a-4bb3-ac22-17064c07436b"
        },
        "item": {
          "id": "b3883d35-1cde-415a-aef0-422ba374490f",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "537e180b-daae-4c42-9c6b-59eefc077e3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa2ee893-9345-4cf6-a63d-8017885fc19c",
        "cursor": {
          "ref": "10c082c7-e01f-4f38-b19a-b150cca85e1c",
          "length": 252,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "9381c168-9a76-4185-8298-423c93b0276b"
        },
        "item": {
          "id": "fa2ee893-9345-4cf6-a63d-8017885fc19c",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "85a6a9cf-286d-43df-9eaa-103e94fce1ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ede8660-e1be-43b9-bad1-dcf727eba6c1",
        "cursor": {
          "ref": "0b45ed27-0acc-432e-9e19-d6a863063da5",
          "length": 252,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "2c28c992-f9fa-4c9b-a589-daacfb1a46d9"
        },
        "item": {
          "id": "4ede8660-e1be-43b9-bad1-dcf727eba6c1",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "ad7077c9-6a38-4078-be87-c40c974b4736",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edf45055-6b9e-4367-b969-1c738d2f57b7",
        "cursor": {
          "ref": "9efa1aa4-2d26-4d51-867a-5f6f287a1e10",
          "length": 252,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "da16d8c8-299e-48dc-b6e6-5fdeb7de8d1d"
        },
        "item": {
          "id": "edf45055-6b9e-4367-b969-1c738d2f57b7",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "a8b4a826-f2dc-4b20-b72c-bda8b6262239",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 227,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "b43ac1f1-6570-49bc-ad76-3a7778b37783",
        "cursor": {
          "ref": "5ab71cda-fbc2-47f0-897b-c069a71c5c99",
          "length": 252,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "4bd25c75-5868-453d-98b8-3fe3b66a513f"
        },
        "item": {
          "id": "b43ac1f1-6570-49bc-ad76-3a7778b37783",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "ab5188a2-b238-4161-862d-8e0101b1fae1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39b9c881-eb58-4606-8a8e-65028e81346e",
        "cursor": {
          "ref": "81ff661b-2d40-441d-99b4-5a83c4dd84ff",
          "length": 252,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "7b5ad453-5fc8-44f8-868b-6b1fdea650a6"
        },
        "item": {
          "id": "39b9c881-eb58-4606-8a8e-65028e81346e",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "b087af8a-90ce-4ead-bc4e-783850d6b9c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5db5d5dd-87d0-4b1f-94e7-08fd0d05ca07",
        "cursor": {
          "ref": "38e32764-0e39-4f47-b385-9a5fb402dd9a",
          "length": 252,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "25bf7f49-f2d5-4c49-9d3f-1275f4e5e9ba"
        },
        "item": {
          "id": "5db5d5dd-87d0-4b1f-94e7-08fd0d05ca07",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "2d221486-8623-4e28-b043-ac31c288bfef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c754ed09-beff-4334-9b97-dfedeef8ca07",
        "cursor": {
          "ref": "284aa2ee-15cc-43a3-8391-b3885ce064a3",
          "length": 252,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "47675938-6873-483d-892e-158bc64043b0"
        },
        "item": {
          "id": "c754ed09-beff-4334-9b97-dfedeef8ca07",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "227705da-2356-4ae2-882c-07c0d0b66177",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29d9efe9-ef48-4be1-9047-2c7d3abb1f21",
        "cursor": {
          "ref": "506c9945-90ce-42c1-b810-5b41f6a0565b",
          "length": 252,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "84508bcf-b2a0-4f8f-a4fa-ad6edd498e37"
        },
        "item": {
          "id": "29d9efe9-ef48-4be1-9047-2c7d3abb1f21",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "3fa1bed4-658e-4314-ba8f-cbd3bf8737cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72f5ff02-80ac-4254-80d6-7cacd3b40f66",
        "cursor": {
          "ref": "7e317590-e078-45d7-afd5-8ba9a39d8fb6",
          "length": 252,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "cc248aad-7309-4a7e-84aa-4fc37e2b58f4"
        },
        "item": {
          "id": "72f5ff02-80ac-4254-80d6-7cacd3b40f66",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "b08a6110-52f7-410e-9173-fd09e18d2e26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2956d8c-0907-495d-ae8e-6a7b81b8d90d",
        "cursor": {
          "ref": "d40768c9-28e6-443d-ada2-0368384a2fb5",
          "length": 252,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "01c9dd2a-943f-419b-aad9-ec77dfc0632f"
        },
        "item": {
          "id": "f2956d8c-0907-495d-ae8e-6a7b81b8d90d",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "00967b3a-419b-4357-b33e-f11b68f7e4ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7286b61d-e0f2-45ce-af96-31e1bc92f38e",
        "cursor": {
          "ref": "d9ae059e-9fb8-4f14-9792-2a65e0f11aae",
          "length": 252,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "dc1b45d8-61c4-4303-9baf-fe318c48fc72"
        },
        "item": {
          "id": "7286b61d-e0f2-45ce-af96-31e1bc92f38e",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "16b0bffb-6790-461a-9309-9a598fc1e653",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97c86065-8ae4-4b0f-bd99-a8c731abad54",
        "cursor": {
          "ref": "aebe70d9-ec51-4f54-8bc7-397167189de3",
          "length": 252,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "8d696060-6ba5-4ded-8108-d45a8d24b161"
        },
        "item": {
          "id": "97c86065-8ae4-4b0f-bd99-a8c731abad54",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "9edb16c0-6bbf-49d9-82bd-2dcb0d8e368f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46e5a463-440c-47a6-860a-e295913cf9c1",
        "cursor": {
          "ref": "44f8e14b-8cde-4807-b5ba-ba2059d72d1f",
          "length": 252,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "34db73a4-696f-425e-aa3b-a080ce638fc3"
        },
        "item": {
          "id": "46e5a463-440c-47a6-860a-e295913cf9c1",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "037f57bc-acf2-4607-8959-478fe0b01f10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2033e90b-d6a2-4025-9d81-b72b813feaa9",
        "cursor": {
          "ref": "b7e34e20-cfe4-4012-b47f-8db41af0cc22",
          "length": 252,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "59930fa2-a918-4050-96d3-7fe9fab0a9b9"
        },
        "item": {
          "id": "2033e90b-d6a2-4025-9d81-b72b813feaa9",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "1982533c-c37b-4829-adb2-f78fbe03a248",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec4f1916-0475-406d-b437-987622317e6e",
        "cursor": {
          "ref": "ca917f52-4541-4ab2-a696-af29aeb5c52b",
          "length": 252,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "d2113b99-db15-4ee4-a3af-c302f28385f9"
        },
        "item": {
          "id": "ec4f1916-0475-406d-b437-987622317e6e",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "6f6f1bfe-39e0-4a3d-af9f-41a3f7343b6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "554d7e6c-ed02-49b7-ae6d-775b4b8f4de7",
        "cursor": {
          "ref": "c4f8fd3f-8475-4739-87b8-4ec22adee231",
          "length": 252,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "5ff0c25d-68e0-46c8-a806-fbc330addc9e"
        },
        "item": {
          "id": "554d7e6c-ed02-49b7-ae6d-775b4b8f4de7",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "3f6c8619-4635-4bf4-b0c7-6f4314b62846",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ab9ab4c-c701-4edd-8c8a-e8de396b3bcc",
        "cursor": {
          "ref": "08377ea9-d17d-4f11-ad8b-334e6e81bcc8",
          "length": 252,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "3f4dd60f-83cd-4ee3-8578-4a607be6133d"
        },
        "item": {
          "id": "9ab9ab4c-c701-4edd-8c8a-e8de396b3bcc",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "cb5d3c09-f916-4b09-bc1b-7c4b0b006b2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79ab0b94-11cd-4683-8e5c-ca4a4f2b7849",
        "cursor": {
          "ref": "d2bc2cc6-9fb5-4463-85bd-05b39f8286d1",
          "length": 252,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "19d3d604-59b1-41c2-9955-5a24a880a19a"
        },
        "item": {
          "id": "79ab0b94-11cd-4683-8e5c-ca4a4f2b7849",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "78b03b33-4052-42e8-b28f-99ee0e5769f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af0adfef-6c2a-49ee-9093-87b7d955173f",
        "cursor": {
          "ref": "da1cca0b-c7ca-44e8-a750-f91e057ff5ad",
          "length": 252,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "cffb120d-7bfd-4ffc-8f10-a1df518d013d"
        },
        "item": {
          "id": "af0adfef-6c2a-49ee-9093-87b7d955173f",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "acde0ffc-a0f0-4121-8fdb-68b3ff30714e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b6f5dec-5c3d-4f8f-90fd-523feb0886ec",
        "cursor": {
          "ref": "d3e896de-21d2-4e3e-a3c5-7805e6cac1a9",
          "length": 252,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "7cc4d517-af81-4175-905e-0e9bb120f461"
        },
        "item": {
          "id": "0b6f5dec-5c3d-4f8f-90fd-523feb0886ec",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "a11d7de6-2cf1-46c5-9d43-a77cd6fa7195",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 201,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9ca99b4-5a7d-49c4-88ed-6de8a690d331",
        "cursor": {
          "ref": "cf8e6de4-5118-4ae1-8a94-664fd5933d1d",
          "length": 252,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "ce342855-e4f9-4407-b203-19a45b09bc64"
        },
        "item": {
          "id": "a9ca99b4-5a7d-49c4-88ed-6de8a690d331",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "817f1617-151f-465e-ba0e-565d047f0ecd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ff74cc9-0479-4d20-a5aa-f1a87c0c901c",
        "cursor": {
          "ref": "0eafa1e6-3b33-494b-8d16-5da8fd2827ea",
          "length": 252,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "fa8fd8cf-7146-44c5-a9c3-694f61c64923"
        },
        "item": {
          "id": "7ff74cc9-0479-4d20-a5aa-f1a87c0c901c",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "415d3225-1a8b-4113-b28b-b15207cbf792",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a1c6609-877b-42a1-9790-3c4df4003772",
        "cursor": {
          "ref": "4be428d1-92b1-494c-bdd9-7711a4715dd8",
          "length": 252,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "529bdf64-9d45-42af-a576-8f94de10b819"
        },
        "item": {
          "id": "8a1c6609-877b-42a1-9790-3c4df4003772",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "702ac094-2054-4996-85f5-175773d1d8de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a783b03-fa30-4bcd-ade1-0cb4ec45fcd3",
        "cursor": {
          "ref": "04065979-fcdf-48d5-80af-c92f66ec7768",
          "length": 252,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "e8b53216-54c2-40db-af74-946710ca18e4"
        },
        "item": {
          "id": "1a783b03-fa30-4bcd-ade1-0cb4ec45fcd3",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "1b198214-7e3e-4e49-82f5-582ef6de1e16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 557
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc5fa4ba-6a42-4ec8-a5c3-d681c3b645e8",
        "cursor": {
          "ref": "20685d1d-8c19-4f82-933c-cc58b498a797",
          "length": 252,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "2545d42c-e5d2-44e4-b841-1f02ef094de2"
        },
        "item": {
          "id": "bc5fa4ba-6a42-4ec8-a5c3-d681c3b645e8",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "ea9ac028-fec3-4b11-8705-72c54897b0a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a23cd92-cc23-4ca8-b5cc-b69f9435ec81",
        "cursor": {
          "ref": "84ddafb4-9d7d-4c89-a8f8-7d84186ea4b1",
          "length": 252,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "d958c028-120b-4223-91ff-dcddd788ccc0"
        },
        "item": {
          "id": "9a23cd92-cc23-4ca8-b5cc-b69f9435ec81",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "d603f60b-12c4-44ed-93a0-616043dbd52d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5b99573-f440-44c2-b678-c29f80ff7e8d",
        "cursor": {
          "ref": "25260dff-b65d-4b19-a8a4-6fddf7cd34d6",
          "length": 252,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "d1fcd9f8-9541-4719-acbe-be1f8985fa05"
        },
        "item": {
          "id": "c5b99573-f440-44c2-b678-c29f80ff7e8d",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "28fbb4b8-50df-4146-a406-5e0dbb3267ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1515e2e1-ee4b-4c57-b0af-6276b6b34110",
        "cursor": {
          "ref": "34fe7c1c-c5ba-4a5e-81cb-5b0b71d32643",
          "length": 252,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "1e8fef54-6546-46d5-ac82-0ea65a968a9b"
        },
        "item": {
          "id": "1515e2e1-ee4b-4c57-b0af-6276b6b34110",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "83cf6a9f-8af5-4e62-a42f-44496b430218",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc519c73-ecd1-46f2-a6a9-becd2b1bff10",
        "cursor": {
          "ref": "c39cfbf7-878e-4f24-b530-4dd8960cb94a",
          "length": 252,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "b07d1170-539d-4aed-ad1f-4ce97b8aee2c"
        },
        "item": {
          "id": "fc519c73-ecd1-46f2-a6a9-becd2b1bff10",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "d4ffc952-8f68-4315-b709-5bb82fa855de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d88af16c-0aaf-44c1-84e2-722c547afe07",
        "cursor": {
          "ref": "ba7b2d54-26c7-4815-9f67-e308cf0f5628",
          "length": 252,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "bf077bec-9d57-473d-a069-48652fa3b583"
        },
        "item": {
          "id": "d88af16c-0aaf-44c1-84e2-722c547afe07",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "d5d7477e-6e5b-4899-b584-48df3b0de969",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d68943d3-2f8b-4e97-9ada-f72ff9dbfa1f",
        "cursor": {
          "ref": "1c5652eb-45d8-4aa5-bd2b-52708f984893",
          "length": 252,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "db14b739-8f59-44f6-b47d-567abe56d160"
        },
        "item": {
          "id": "d68943d3-2f8b-4e97-9ada-f72ff9dbfa1f",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "3f7fc9da-692b-45e7-9e80-57975fda0a9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9515ce13-6f1d-46fa-8a69-638a1e89bd5b",
        "cursor": {
          "ref": "cc48212f-ce1f-47aa-a6f8-5865c5e11a6a",
          "length": 252,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "5c6b2595-00c8-4e58-8690-c8f08f7ffc20"
        },
        "item": {
          "id": "9515ce13-6f1d-46fa-8a69-638a1e89bd5b",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "06b83b17-b799-412d-a3ab-7430f4ff3ffe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6a2e21c-89c8-4d8e-b0e2-3cf5d1a3562e",
        "cursor": {
          "ref": "48e0b135-67b8-4cc0-b7ef-b78259854ebf",
          "length": 252,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "7ac21d4b-f3bc-492b-88ab-7e1d6f0f4ad8"
        },
        "item": {
          "id": "c6a2e21c-89c8-4d8e-b0e2-3cf5d1a3562e",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "42f46164-ba5e-411b-b2c6-232444aad2ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "258150f7-0735-4c1a-a52e-9d646316a269",
        "cursor": {
          "ref": "789da5b8-1527-466a-9d6d-29b7a088a233",
          "length": 252,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "0c6d247c-d0fc-4ae2-85c2-2008a06ab7de"
        },
        "item": {
          "id": "258150f7-0735-4c1a-a52e-9d646316a269",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "4660daac-bae6-4980-ba29-4f4b139fc79d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 331,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29354b54-238e-4375-b3ce-9e4d1fa41ac8",
        "cursor": {
          "ref": "7ec73223-ba78-4890-b181-64909a58fe81",
          "length": 252,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "dfaead11-a8e0-4a0b-a935-087398842955"
        },
        "item": {
          "id": "29354b54-238e-4375-b3ce-9e4d1fa41ac8",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "114ca3fa-5631-4f1b-9641-dc6636c28e38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6ff934d-466a-446a-9a5a-1d362d36695a",
        "cursor": {
          "ref": "2f3ced32-5a6e-47e9-8a2c-70a435a5cdc5",
          "length": 252,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "b1e80cb9-92a9-439d-aa56-d9a559ed2427"
        },
        "item": {
          "id": "d6ff934d-466a-446a-9a5a-1d362d36695a",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "d903ef6b-943c-4dec-b01c-89fcfe77e440",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77464d6e-935b-4f81-a35d-7e34eca20462",
        "cursor": {
          "ref": "d216bc8b-8698-4e16-a661-e1bd1dd75aa9",
          "length": 252,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "10a5572e-a383-43be-8e58-57bb156ae76b"
        },
        "item": {
          "id": "77464d6e-935b-4f81-a35d-7e34eca20462",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "c25b1601-1090-49ab-9315-d8455bcea388",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a417c897-24cf-49fa-9a86-268a30f22536",
        "cursor": {
          "ref": "c2cfd179-b960-4569-af4a-26eb67a4c4b6",
          "length": 252,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "19f6b763-c01e-4429-9622-0adcc1f8bdc7"
        },
        "item": {
          "id": "a417c897-24cf-49fa-9a86-268a30f22536",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "7b93f3a1-d828-4c34-bd05-52d0c899742e",
          "status": "Created",
          "code": 201,
          "responseTime": 458,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "987ec37c-a248-4d21-9e22-c0f44b5952eb",
        "cursor": {
          "ref": "3e161fbb-ae26-4f3d-8677-195350b89f83",
          "length": 252,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "7f4b6422-0ec7-4760-a6ba-eda429cc3913"
        },
        "item": {
          "id": "987ec37c-a248-4d21-9e22-c0f44b5952eb",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "e119d7c1-ed23-49e4-b19d-621cd98b2067",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8505f57e-3db2-4bff-91c5-4d1487d46283",
        "cursor": {
          "ref": "b0e72598-d048-4b0f-8b80-af47bb1a5334",
          "length": 252,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "80427ec0-ad23-4f9f-bb36-9843bc3f3d75"
        },
        "item": {
          "id": "8505f57e-3db2-4bff-91c5-4d1487d46283",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "36bebbdb-6a56-4629-adf7-06e972e90d96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c01156d-5c8c-49d8-a201-512423ce355c",
        "cursor": {
          "ref": "2f1f579e-128c-4ca1-a897-864a3a234162",
          "length": 252,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "4c16189c-181b-4ee6-9ecd-5d70f2caab22"
        },
        "item": {
          "id": "1c01156d-5c8c-49d8-a201-512423ce355c",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "8c5de105-bebf-4eda-bd9b-928b491d9999",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 389
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d2ece8d-4b9e-4bbf-aefd-fcb105697d35",
        "cursor": {
          "ref": "556a0684-6a28-4ddc-b54e-20737fe55b82",
          "length": 252,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "6a5c4df9-545e-41ee-9ae5-a48f2a9c1098"
        },
        "item": {
          "id": "4d2ece8d-4b9e-4bbf-aefd-fcb105697d35",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "440e595d-1acd-4526-8887-9c85f2a2b3ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 388
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9de14598-68f6-410b-b4d2-2a95158a2f1a",
        "cursor": {
          "ref": "69b30478-28b1-4b82-ac4e-078845fcc5a1",
          "length": 252,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "2f542867-84f0-48a8-aed7-ed541e9e1acb"
        },
        "item": {
          "id": "9de14598-68f6-410b-b4d2-2a95158a2f1a",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "3dbe111e-ce14-4c2e-a8fa-d5fb906db503",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5dcc701e-b6dc-4804-9d1a-d8725ee31080",
        "cursor": {
          "ref": "48f4c307-533d-4bf0-b067-6ce4c97e2779",
          "length": 252,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "8fee099e-ef6d-42a9-9741-4b57acb04d87"
        },
        "item": {
          "id": "5dcc701e-b6dc-4804-9d1a-d8725ee31080",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "38d1b85b-624b-4fb3-bcb8-7988cfe0dfc7",
          "status": "Created",
          "code": 201,
          "responseTime": 420,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "51cd1e37-1c20-4a93-9d9b-30f08caf31ca",
        "cursor": {
          "ref": "7454e1ca-deee-442a-ba4d-9e1d85e8694f",
          "length": 252,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "c90fa402-4d9b-476c-acf2-70b4115fe741"
        },
        "item": {
          "id": "51cd1e37-1c20-4a93-9d9b-30f08caf31ca",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "fffcd819-7dab-452e-81e2-56af1c828188",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc57b95c-0014-46be-9076-7ad43c05f5f0",
        "cursor": {
          "ref": "bd196774-ed02-4a2e-b9a1-df0b5b6f9e74",
          "length": 252,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "18c6ad57-e764-4f50-a689-04d863c491fa"
        },
        "item": {
          "id": "dc57b95c-0014-46be-9076-7ad43c05f5f0",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "7ac71781-e02f-4e1c-ae16-4d4ea0f9a5e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a40adaf0-8288-492a-8ba1-ae073b596bc5",
        "cursor": {
          "ref": "aa64c457-3af7-4fa4-8f62-0339341c3de3",
          "length": 252,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "f4dc86ff-0cdd-4bb7-ba13-72a6f1bcf5e2"
        },
        "item": {
          "id": "a40adaf0-8288-492a-8ba1-ae073b596bc5",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "f437901c-a2e4-4a89-a5f1-4bffb47ce994",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "012d923a-c48b-49e8-85c3-22eaf0deff89",
        "cursor": {
          "ref": "ec2bb7c8-f508-4c6c-810e-52cad247d35e",
          "length": 252,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "921ee70e-d841-4311-bf15-f116a221d673"
        },
        "item": {
          "id": "012d923a-c48b-49e8-85c3-22eaf0deff89",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "a9a33df5-ec9c-4080-98c6-d6736293f549",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d8481a5-783b-4033-a8b0-d8ec6eba04c5",
        "cursor": {
          "ref": "cc1a6e2c-be20-47c5-9201-abd423bd5bfb",
          "length": 252,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "3c3520e7-fae2-43c5-a876-f1c52bb72939"
        },
        "item": {
          "id": "0d8481a5-783b-4033-a8b0-d8ec6eba04c5",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "e4d195be-9e4e-4b0c-937c-bdb6819cd8bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5134de75-6e25-4714-83fb-d2fcdc35eeca",
        "cursor": {
          "ref": "d6e0dc53-5bd8-4c3a-8d7c-772e8377a07f",
          "length": 252,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "17222417-397d-4bb3-895b-f3044d0663ae"
        },
        "item": {
          "id": "5134de75-6e25-4714-83fb-d2fcdc35eeca",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "b405677b-f0c6-4e0b-aeab-a6900ccd764a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b46893a4-124b-4b15-8bd9-8bead084f147",
        "cursor": {
          "ref": "6a52f991-bfa6-497e-a56f-9b82ddb63d05",
          "length": 252,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "adc2f4c9-2854-4700-8248-cac6621b1022"
        },
        "item": {
          "id": "b46893a4-124b-4b15-8bd9-8bead084f147",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "e4ed99e1-2098-48ea-a31b-3e60e5bc2083",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ca24afc-8a39-4f5e-a57a-35c943234aa9",
        "cursor": {
          "ref": "08c06cee-c234-4b65-b747-ae5a43bb88b9",
          "length": 252,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "d81e7af7-ec85-4506-bde4-16a5b07cac96"
        },
        "item": {
          "id": "1ca24afc-8a39-4f5e-a57a-35c943234aa9",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "ec966001-ecdb-47ed-a6fc-65a86f97d000",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74297ba0-f046-4c93-8998-cbb1042073f9",
        "cursor": {
          "ref": "29460dcf-89ed-46f5-b86c-7aa91b46813f",
          "length": 252,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "81e4db7e-1bbb-441d-8e5e-f1be180b37dc"
        },
        "item": {
          "id": "74297ba0-f046-4c93-8998-cbb1042073f9",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "30795365-bb58-4b57-9f46-12a6eea53b3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "c7ca9bf8-3196-4919-8dfe-a7f66d0d1076",
        "cursor": {
          "ref": "70fb68ce-4fbd-40da-9dc4-228adc44b07d",
          "length": 252,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "23758d3c-f7c7-422c-874a-69e32d4b29d4"
        },
        "item": {
          "id": "c7ca9bf8-3196-4919-8dfe-a7f66d0d1076",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "fc3682c6-77ef-4969-9145-edd16581ebd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 130,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "177fbd6b-11af-46f4-b97a-086b74a1b8a0",
        "cursor": {
          "ref": "a02522ae-cc56-424a-94d3-63dee8f38e6f",
          "length": 252,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "8587a8a9-935d-40c2-8b40-3f59776ff8fe"
        },
        "item": {
          "id": "177fbd6b-11af-46f4-b97a-086b74a1b8a0",
          "name": "credentials_issue"
        },
        "response": {
          "id": "8ac5fa94-238f-4a53-a9f8-d551a5b90403",
          "status": "Created",
          "code": 201,
          "responseTime": 440,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "e766b317-bb57-4015-9642-2fa114ee3985",
        "cursor": {
          "ref": "88398be2-7912-4fbb-a9a5-667debd0ad52",
          "length": 252,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "71d51c03-9c84-447c-b883-383ebf5c9051"
        },
        "item": {
          "id": "e766b317-bb57-4015-9642-2fa114ee3985",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "5414db21-d45a-4a1b-ae62-bb7730db7666",
          "status": "Created",
          "code": 201,
          "responseTime": 413,
          "responseSize": 690
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff3a3145-10b5-42fd-a1e0-e82828841e23",
        "cursor": {
          "ref": "40839443-8ff7-43a5-a2b7-6cb37e03958a",
          "length": 252,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "984f0b4d-f358-42cf-a643-ef8208a22f2f"
        },
        "item": {
          "id": "ff3a3145-10b5-42fd-a1e0-e82828841e23",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "0afcda71-4701-4bec-bc19-67c4d7ef5e19",
          "status": "Created",
          "code": 201,
          "responseTime": 365,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "95a6c69d-8d2d-4958-a4be-f40378adeb68",
        "cursor": {
          "ref": "81d1d5e2-9c92-4b3c-9438-4bacbd3a34c1",
          "length": 252,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "1e47ebf3-5b29-4dc1-8519-b762e1439619"
        },
        "item": {
          "id": "95a6c69d-8d2d-4958-a4be-f40378adeb68",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "cc0198b7-b27c-4a62-bde5-492291d2a994",
          "status": "Created",
          "code": 201,
          "responseTime": 387,
          "responseSize": 659
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fe98a1f-0aeb-4d33-a641-149ff2a468ad",
        "cursor": {
          "ref": "b2931627-267a-4e83-8f90-50fec15b2a8a",
          "length": 252,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "cce1855f-0aef-4974-a495-ed64befc9be5"
        },
        "item": {
          "id": "7fe98a1f-0aeb-4d33-a641-149ff2a468ad",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "ea59b55c-fabb-40d8-b7c1-fe22695cb5eb",
          "status": "Created",
          "code": 201,
          "responseTime": 369,
          "responseSize": 627
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "69111ef8-4c90-4ead-a79d-e0d5531ad5dd",
        "cursor": {
          "ref": "2ed23c90-16ea-47fe-9628-93801da6d697",
          "length": 252,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "f379c70f-6fc7-448e-a33e-6969c2550279"
        },
        "item": {
          "id": "69111ef8-4c90-4ead-a79d-e0d5531ad5dd",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "79abb844-5780-4b3e-97c3-0983ab9aff9a",
          "status": "Created",
          "code": 201,
          "responseTime": 375,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65e1ee80-4f17-42c8-9aae-90ac49461e21",
        "cursor": {
          "ref": "a895f943-0e13-47d7-9731-8b90a418b3e9",
          "length": 252,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "3058fcea-0a9a-4ace-8e1d-46c4a32b9b9f"
        },
        "item": {
          "id": "65e1ee80-4f17-42c8-9aae-90ac49461e21",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "18e00da1-41ba-4841-a749-b74771ea3f52",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "65e1ee80-4f17-42c8-9aae-90ac49461e21",
        "cursor": {
          "ref": "a895f943-0e13-47d7-9731-8b90a418b3e9",
          "length": 252,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "3058fcea-0a9a-4ace-8e1d-46c4a32b9b9f"
        },
        "item": {
          "id": "65e1ee80-4f17-42c8-9aae-90ac49461e21",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "18e00da1-41ba-4841-a749-b74771ea3f52",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "3def53a1-05be-4dcb-82c7-a24bc0032f98",
        "cursor": {
          "ref": "f8dead95-f3bb-47c7-982f-880221879477",
          "length": 252,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "2a469346-f5ff-417f-a6ea-cbbc4d417b8d"
        },
        "item": {
          "id": "3def53a1-05be-4dcb-82c7-a24bc0032f98",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "6cb7428b-03d4-4fc5-b11f-0a82b57cb6bf",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "9b35ab34-6a09-4663-9887-fc9b5af8b2cd",
        "cursor": {
          "ref": "a5a92bc3-aa8c-4f5c-ab5f-1092a113f837",
          "length": 252,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "07a2a2aa-edd2-4a22-bff4-6e416415aae3"
        },
        "item": {
          "id": "9b35ab34-6a09-4663-9887-fc9b5af8b2cd",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "68f1f707-6e1d-4f20-959a-ba729d2a2ac8",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "39574124-6b39-4877-9104-d296fed7c964",
        "cursor": {
          "ref": "3fd60c7f-bc05-474b-964a-0269e5059908",
          "length": 252,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "8b846cf4-47fd-40f4-bb25-8b8557380c5b"
        },
        "item": {
          "id": "39574124-6b39-4877-9104-d296fed7c964",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "f549850d-38f8-4afd-b190-ef7e19c255e7",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "dc1d45c3-be64-4c33-b00a-a84d149990a7",
        "cursor": {
          "ref": "b1514d10-6877-4a03-90c0-325a378fbbf4",
          "length": 252,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "5c7e6a08-9c76-45ab-b2dc-0fa3d95cd791"
        },
        "item": {
          "id": "dc1d45c3-be64-4c33-b00a-a84d149990a7",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "093a63c3-c1c2-4b54-8401-9edf57a538e7",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "65f7839a-f52e-41ad-a6ca-6a0cdbeccf64",
        "cursor": {
          "ref": "ddefcb7b-ad2d-48fc-b83e-0e104af7c501",
          "length": 252,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "d3addf5f-b1c1-4639-9e33-618a40424e49"
        },
        "item": {
          "id": "65f7839a-f52e-41ad-a6ca-6a0cdbeccf64",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "6123c05d-1739-4a60-8f61-8e9599e908d1",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "5af026d7-1b41-451c-bba1-39b8dadf078a",
        "cursor": {
          "ref": "0f77f873-444a-4d72-9625-578c0d729d07",
          "length": 252,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "168efa78-b351-40cb-bcca-b420112287d7"
        },
        "item": {
          "id": "5af026d7-1b41-451c-bba1-39b8dadf078a",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "7f9b757e-648d-492a-a1ed-ba08a3e748fa",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "fb1d0243-eaaf-4240-a918-4bd40481c70e",
        "cursor": {
          "ref": "2e29cf50-31e1-4dce-8ebb-171cc3638f73",
          "length": 252,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "6c81efc7-054a-43ee-a4cc-88ca1d9eda42"
        },
        "item": {
          "id": "fb1d0243-eaaf-4240-a918-4bd40481c70e",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "b377a861-d1c1-4171-be1a-27d4998c38ea",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "91cd2616-3bba-46a9-ac23-b8f4d54b9600",
        "cursor": {
          "ref": "d7f78cee-b52d-40cb-a5e3-576eca6a91f0",
          "length": 252,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "a13d1667-9970-453e-8649-cd2ecf1569cb"
        },
        "item": {
          "id": "91cd2616-3bba-46a9-ac23-b8f4d54b9600",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "11cca192-781b-4031-b3a5-78c5b4f1a64e",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "23470427-c6be-497f-84ad-70c20018dc41",
        "cursor": {
          "ref": "6a57f4be-256b-4d26-8130-2cce8db02ece",
          "length": 252,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "56d3b7fa-482e-4afa-8267-8d0c25071862"
        },
        "item": {
          "id": "23470427-c6be-497f-84ad-70c20018dc41",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "0febfb91-389b-4f78-9f97-d5f9826a9294",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "a29c6c9f-feeb-4bac-9bd9-d4b638589764",
        "cursor": {
          "ref": "9f46e551-2edc-484f-b4d8-79885238fc8f",
          "length": 252,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "0c35bb90-2ef4-4ed0-b4ee-73869f1e2ef3"
        },
        "item": {
          "id": "a29c6c9f-feeb-4bac-9bd9-d4b638589764",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "2f44315a-bff4-4f5b-a65e-c61319d25d6c",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "03af63f6-fc20-42b3-ada5-59d1e82cc225",
        "cursor": {
          "ref": "c3c46bf1-f59b-4b90-b1e9-a1abaa73e2ca",
          "length": 252,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "35c9913c-844a-41bf-9ec5-1064a5f0d164"
        },
        "item": {
          "id": "03af63f6-fc20-42b3-ada5-59d1e82cc225",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "2aecc31b-5ee8-4f36-8eb6-76bbb351612a",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "1b59e1f5-5325-4287-8131-00d57b164592",
        "cursor": {
          "ref": "1741fd03-234e-4b58-9a08-96f41047a9b9",
          "length": 252,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "44d66c43-d83a-42e9-8c25-4ab969e9bbe1"
        },
        "item": {
          "id": "1b59e1f5-5325-4287-8131-00d57b164592",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "dd90b198-87bd-4920-84fd-afd190d75be5",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "3c697620-65b0-4b74-9490-70bac2ce78cc",
        "cursor": {
          "ref": "9c90f425-eddd-4be6-bf3b-a4d1ccd6114b",
          "length": 252,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "57bf385b-f70a-4811-a84a-d50972d7f0ef"
        },
        "item": {
          "id": "3c697620-65b0-4b74-9490-70bac2ce78cc",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "a903a3dc-1834-46fa-876f-828833ee6fb0",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "9c9eb3b2-507c-47c3-ae1e-99e1fe1eef6f",
        "cursor": {
          "ref": "e1f3bdd5-b864-45b9-855e-22f601c3e4a2",
          "length": 252,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "8706bd9e-276d-4e29-b857-e62aa6a693d1"
        },
        "item": {
          "id": "9c9eb3b2-507c-47c3-ae1e-99e1fe1eef6f",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "0f53f436-0983-42e5-86cd-6fa3313ace28",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "b1081768-1a00-47ba-b993-b065263fb54b",
        "cursor": {
          "ref": "8cab915c-4122-4123-b6a3-d3ad2d7f274a",
          "length": 252,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "0fcd6292-3dcd-451f-978b-fec470ae1e1c"
        },
        "item": {
          "id": "b1081768-1a00-47ba-b993-b065263fb54b",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "60791e07-8738-434b-9871-6985df4988b8",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "829f0106-4e84-4bcb-8810-481dd6452f1f",
        "cursor": {
          "ref": "a8575dad-df00-40f8-9f44-f3fbdb73ee90",
          "length": 252,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "a55df38c-bf05-4030-b1fd-a0f9b602ccba"
        },
        "item": {
          "id": "829f0106-4e84-4bcb-8810-481dd6452f1f",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "5388f260-f14f-4cbd-a0aa-1f3721c4458c",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "612c255c-578a-4952-9a2e-6b6084af6649",
        "cursor": {
          "ref": "7ab8ba14-d055-4313-acb8-0672b5b02c9b",
          "length": 252,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "925e0bda-ce3b-46b3-92a5-66d1f1e60be9"
        },
        "item": {
          "id": "612c255c-578a-4952-9a2e-6b6084af6649",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "d2b36a82-77c1-43e8-9cc9-915047c5f20e",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "40ca472a-2bd8-45b8-a263-e7c26f239a10",
        "cursor": {
          "ref": "fdc639af-1902-45b3-aaf7-589c68ad6575",
          "length": 252,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "df68a160-6537-47b2-8bec-66eeabb4b514"
        },
        "item": {
          "id": "40ca472a-2bd8-45b8-a263-e7c26f239a10",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "2d000c58-385f-44d9-a110-1de5534ef91c",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "11d8ff2b-2cc0-4242-9197-4682a0cf34f4",
        "cursor": {
          "ref": "53b2b348-ef7d-4aae-b64b-563684eead51",
          "length": 252,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "a02b19d5-d0bb-4744-b027-2cc63de2a72c"
        },
        "item": {
          "id": "11d8ff2b-2cc0-4242-9197-4682a0cf34f4",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "42af76ed-4385-494f-be29-e5ff12452f86",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "4678f436-233c-45b8-bfb8-1c8a5bd7ee73",
        "cursor": {
          "ref": "1459b9d5-181d-4784-88ac-c8012c04f6c8",
          "length": 252,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "b49005e8-eeef-41a6-8b87-baf3673e8917"
        },
        "item": {
          "id": "4678f436-233c-45b8-bfb8-1c8a5bd7ee73",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "77ed5c5e-d3c8-4a1a-ac6a-4990c9f88d19",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "eacc4bdf-15f6-4ee5-a30a-bf3ef2f9c76c",
        "cursor": {
          "ref": "2eb36a56-f7df-4383-b906-c5f162201b48",
          "length": 252,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "3d2629e9-9bc3-4fab-9d35-d1241b89378f"
        },
        "item": {
          "id": "eacc4bdf-15f6-4ee5-a30a-bf3ef2f9c76c",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "e1068a68-7a7b-43e0-ba22-d71bbf2d6034",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "85987227-2a78-492a-85f0-bb6baf76ab83",
        "cursor": {
          "ref": "9a5ba5ad-fe98-444b-ba24-635430b83c63",
          "length": 252,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "0b66bc51-836c-4e0f-8701-5fe8f408b96f"
        },
        "item": {
          "id": "85987227-2a78-492a-85f0-bb6baf76ab83",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "6fe465c8-0c53-4c35-94a3-5f380f4d1153",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "0296e129-8605-428e-b9be-e33e346fd710",
        "cursor": {
          "ref": "d21165e9-8c19-4ab1-b82a-bbd0adfff2a4",
          "length": 252,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "67de9954-7435-43df-9c16-869a7ae789d0"
        },
        "item": {
          "id": "0296e129-8605-428e-b9be-e33e346fd710",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "f7d79ac8-78ec-4715-8e37-80b1d8a26301",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "fe747e19-934e-489c-88e2-4e1e56648033",
        "cursor": {
          "ref": "4d059d62-6f56-4cdf-990d-e91d70ee43ba",
          "length": 252,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "66bd9261-f10a-40e1-ac71-9d6ac315e841"
        },
        "item": {
          "id": "fe747e19-934e-489c-88e2-4e1e56648033",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "edd617e3-979d-4a2a-b16c-e8171c32e48d",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "033ab310-3515-4758-82d6-722244948cff",
        "cursor": {
          "ref": "183969c0-cd0c-410b-a9dc-d56b502b66c0",
          "length": 252,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "8956e7eb-3c7e-4d8a-93dd-2d78970f82f1"
        },
        "item": {
          "id": "033ab310-3515-4758-82d6-722244948cff",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "072e76eb-d5ae-419f-ae92-ee8bb03ccc46",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "2da84805-9083-4cfa-a4c5-b643f8dc9556",
        "cursor": {
          "ref": "e69d28a3-f16b-4c46-890d-b8bd201abcc5",
          "length": 252,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "8322605a-41f8-4417-b0fc-37059d867a7c"
        },
        "item": {
          "id": "2da84805-9083-4cfa-a4c5-b643f8dc9556",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "9228a8c3-7276-43f7-b06f-6387814a7ae8",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "317a3619-ac21-4df0-8dac-f91acee51249",
        "cursor": {
          "ref": "06daf719-b0dc-4250-8784-12d5954f6f6b",
          "length": 252,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "51b513be-fef7-4cd7-bfa5-782c50eceac7"
        },
        "item": {
          "id": "317a3619-ac21-4df0-8dac-f91acee51249",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "d601892a-08c1-48b8-b9bd-f583261a8fa7",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "2bc600df-2653-475d-b330-cd996a5ad3ca",
        "cursor": {
          "ref": "fe756c82-0b57-44bc-b2a5-f597f8e5693f",
          "length": 252,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "3d6a68c4-6ab6-4115-bb4d-399bc8395c89"
        },
        "item": {
          "id": "2bc600df-2653-475d-b330-cd996a5ad3ca",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "ad4a7904-ff16-4e5b-9e18-4b9ece2ab0c2",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "1b3dee0d-2c72-4aa9-ba82-1577306c0866",
        "cursor": {
          "ref": "ac3ea3ae-70db-4553-a4ad-cc6b9ac044aa",
          "length": 252,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "ea733443-fb1a-4ed3-8cee-feb320d0c514"
        },
        "item": {
          "id": "1b3dee0d-2c72-4aa9-ba82-1577306c0866",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "42d1b350-d0fc-4d9c-b40b-9977e23fc8aa",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "627b375b-c302-42d8-bcde-03ef6444b152",
        "cursor": {
          "ref": "1d2da429-e536-4733-9e94-dc970652ea49",
          "length": 252,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "9d46343c-db2f-483d-89ac-2e7569b9b435"
        },
        "item": {
          "id": "627b375b-c302-42d8-bcde-03ef6444b152",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "2c1f4767-d630-4d8f-b866-c98f887d5e87",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "6b14956b-0c2a-48e7-928a-e6d3841ba592",
        "cursor": {
          "ref": "b1fba2aa-9db1-4713-a4fb-cdfd131ce34b",
          "length": 252,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "ca4577ef-939b-498e-b6a3-63d396d3e177"
        },
        "item": {
          "id": "6b14956b-0c2a-48e7-928a-e6d3841ba592",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "4d130577-e108-487c-9f3a-a51d35921dbe",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "2afe65b2-bb98-4fa3-aa0e-4685ab6908f0",
        "cursor": {
          "ref": "2711ffe7-a00c-43f3-a176-9d9ceb6b4adc",
          "length": 252,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "1648dc8a-4dc8-4e20-916c-23d96c928c65"
        },
        "item": {
          "id": "2afe65b2-bb98-4fa3-aa0e-4685ab6908f0",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "fa7de8aa-f70e-4115-8a98-4c19b77eb7e8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 32,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "124c95d3-1f95-4759-8454-56185cf6defc",
        "cursor": {
          "ref": "9f926cc8-a134-41a1-84fc-7cfe4105e3aa",
          "length": 252,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "b6f70e5f-0c01-493c-a386-e8bcc8f5adc3"
        },
        "item": {
          "id": "124c95d3-1f95-4759-8454-56185cf6defc",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "91c101e6-c270-455d-b0fb-a5ce45fc6dc8",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 31,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aeecbb83-08a0-45cb-8dce-937ec27d66bf",
        "cursor": {
          "ref": "c28fa1d5-2e73-497f-96ce-751cae06797e",
          "length": 252,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "38e23cc7-ab21-46c9-845e-ef1c0c92a94a"
        },
        "item": {
          "id": "aeecbb83-08a0-45cb-8dce-937ec27d66bf",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "94203338-9ba0-4370-aa1e-707481bfdbc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aeecbb83-08a0-45cb-8dce-937ec27d66bf",
        "cursor": {
          "ref": "c28fa1d5-2e73-497f-96ce-751cae06797e",
          "length": 252,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "38e23cc7-ab21-46c9-845e-ef1c0c92a94a"
        },
        "item": {
          "id": "aeecbb83-08a0-45cb-8dce-937ec27d66bf",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "94203338-9ba0-4370-aa1e-707481bfdbc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a25089e8-2cbe-4bbe-a633-116f617ddfe7",
        "cursor": {
          "ref": "6f784ddf-3a36-4f23-8aec-2a0b37167687",
          "length": 252,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "19ea8fe0-002d-4a7e-b26b-4b17a52a7c07"
        },
        "item": {
          "id": "a25089e8-2cbe-4bbe-a633-116f617ddfe7",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "cbc99f7d-91e8-48b6-b148-7792c4cc3509",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfa4b9c7-a4f3-4c8c-8031-52dcc679c82d",
        "cursor": {
          "ref": "1b1b4abd-b5c0-4996-9fd0-51556932dedd",
          "length": 252,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "998f1f8a-d2b3-41b8-9080-ebdbfe2a741c"
        },
        "item": {
          "id": "cfa4b9c7-a4f3-4c8c-8031-52dcc679c82d",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "b123e682-e1e6-46f4-aff4-b46d02d75e17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0aad27c0-fca8-4099-aa2b-1b01d3824ddc",
        "cursor": {
          "ref": "c49f6549-5d9e-4121-b4a4-be67c0e111e4",
          "length": 252,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "01570f31-7928-4dd8-a204-284139d71833"
        },
        "item": {
          "id": "0aad27c0-fca8-4099-aa2b-1b01d3824ddc",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "d5c82f03-d1ed-4bc9-ab2f-479e6b47e223",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b792bca-ca5a-44e8-9fd6-1fe10dc82992",
        "cursor": {
          "ref": "a625787c-5da9-45b5-91a6-377488bdfd7a",
          "length": 252,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "0dfbee06-0e51-40e6-ba82-bbd714477560"
        },
        "item": {
          "id": "0b792bca-ca5a-44e8-9fd6-1fe10dc82992",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "0d8703b3-7fa4-47ce-afab-1f3c71c0f80c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d16a9ae9-6fa7-4f61-9482-756a57f1b97a",
        "cursor": {
          "ref": "db404769-bde5-4e3c-b7ec-c3f837cd1520",
          "length": 252,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "f43053d0-8e42-40eb-984c-226a8879218b"
        },
        "item": {
          "id": "d16a9ae9-6fa7-4f61-9482-756a57f1b97a",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "05f37869-ae5d-4e6d-a169-4eac0ad9fff5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52015c43-c3aa-4885-aa3e-a44166c9f0e7",
        "cursor": {
          "ref": "5b7a6368-3e01-445f-8cde-982a3aae7dfd",
          "length": 252,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "d9ffd50b-66e2-4456-b8f3-3842d94398f3"
        },
        "item": {
          "id": "52015c43-c3aa-4885-aa3e-a44166c9f0e7",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "56f74718-d9fb-46a6-86ab-0707835d9eed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 621,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3d82ad2-a710-4d28-a6b8-46b38aae7f15",
        "cursor": {
          "ref": "151638ee-e81b-49b9-9ba7-02b69b087e76",
          "length": 252,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "f68b6b38-8f66-42b3-b1c2-1f6a2b414c28"
        },
        "item": {
          "id": "e3d82ad2-a710-4d28-a6b8-46b38aae7f15",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "b65d69d9-0e61-4e00-8b1b-2ea86cba17ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9755b8d-1bfb-4b34-8d08-b4d2cec21ff0",
        "cursor": {
          "ref": "40b3a068-5657-4f28-861c-43950fed4bb3",
          "length": 252,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "fd78e64d-9e82-454d-ab52-b03fe61cc869"
        },
        "item": {
          "id": "c9755b8d-1bfb-4b34-8d08-b4d2cec21ff0",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "9a304a28-0c05-4ef8-9042-54a850ab4a26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "838fc9f2-1eee-4e71-b67e-dd768b947e93",
        "cursor": {
          "ref": "4fcd155f-00eb-4f2f-98c4-f4faf04f2e7b",
          "length": 252,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "5be00ecc-ff18-41f2-beb0-68e48275317c"
        },
        "item": {
          "id": "838fc9f2-1eee-4e71-b67e-dd768b947e93",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "00396a32-53fc-46bd-90d1-1dfd70148889",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8894017a-ef1c-4b8c-a78e-44179a463adc",
        "cursor": {
          "ref": "52f40ce0-ae2b-4a00-9342-7e039d796e06",
          "length": 252,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "8fbb916a-6276-4f52-a08f-190b9283572c"
        },
        "item": {
          "id": "8894017a-ef1c-4b8c-a78e-44179a463adc",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "8ff9d6e1-3053-4cef-b9fb-47be3c15a0f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9c24e39-72f0-4405-9304-7561b224dfff",
        "cursor": {
          "ref": "d500f5af-6b03-4061-ae1c-290e18612b82",
          "length": 252,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "476b28b5-f708-477d-a3a7-4a65aa823b76"
        },
        "item": {
          "id": "d9c24e39-72f0-4405-9304-7561b224dfff",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "99785861-1a67-465a-8955-9ac3b3595d03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82b9365d-6ebc-4ed8-b2aa-4ef2138691d0",
        "cursor": {
          "ref": "89d514f4-21d7-4f8f-8665-0b30bac0e314",
          "length": 252,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "0a31c944-d13d-4745-b2a4-d7db43db6134"
        },
        "item": {
          "id": "82b9365d-6ebc-4ed8-b2aa-4ef2138691d0",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "7ddd947b-b137-4225-9aeb-06bae0260f71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf112845-8955-45a2-8570-de876523a263",
        "cursor": {
          "ref": "9d138e69-3588-41e3-abbe-9e074d0439db",
          "length": 252,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "8436b667-9da9-41c6-9b24-e09f3521c07e"
        },
        "item": {
          "id": "cf112845-8955-45a2-8570-de876523a263",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "b1f55467-8819-4670-bd23-290b3b811dd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81671c5f-dcad-43e1-a84c-a1d088294263",
        "cursor": {
          "ref": "d0a36d1d-faff-47cd-84fa-abe3b755a972",
          "length": 252,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "937f3b25-ff3d-4161-88be-9c48da9ad089"
        },
        "item": {
          "id": "81671c5f-dcad-43e1-a84c-a1d088294263",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "c1b27382-3753-4caf-b1e0-220b6b34813c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28610f8d-24fd-4a0e-b614-e33b9995f48f",
        "cursor": {
          "ref": "e25b7410-9baf-4f24-af0b-a6426faee3b3",
          "length": 252,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "4041070b-a1a3-4511-8dcf-a5c79edb4fbe"
        },
        "item": {
          "id": "28610f8d-24fd-4a0e-b614-e33b9995f48f",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "8c4321f7-184c-4493-8205-813fd77ccf71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca03b471-22b2-47b2-8b39-5e96d95a9b6a",
        "cursor": {
          "ref": "ec5116d7-7c63-4e8a-801d-2e376f6b1149",
          "length": 252,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "7ff7fbdf-c469-4bb2-93e0-65bb4c54d60c"
        },
        "item": {
          "id": "ca03b471-22b2-47b2-8b39-5e96d95a9b6a",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "8bf7f24b-6783-4df6-accc-40c3646f57c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f44c287-165b-468e-ae0b-ea06afbfe771",
        "cursor": {
          "ref": "44325e48-35cc-462f-b911-b4c21d87c85e",
          "length": 252,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "76362e42-193e-4abc-b64e-af1186cdc2d9"
        },
        "item": {
          "id": "0f44c287-165b-468e-ae0b-ea06afbfe771",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "3442bd2b-1182-4482-82e3-1632c411d246",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 249,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b4b7ac8-bd9d-4ee9-b995-71e74fd50b6a",
        "cursor": {
          "ref": "78bfc4aa-05ac-4185-8020-5859cc54e7a7",
          "length": 252,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "92e10f65-9c32-40ba-b542-74abd3da6665"
        },
        "item": {
          "id": "0b4b7ac8-bd9d-4ee9-b995-71e74fd50b6a",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "201b7357-71a9-493d-871a-aaba5bf0e6b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 210,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56ec88ec-397f-4e12-a268-fca78cfc1793",
        "cursor": {
          "ref": "6402a9e2-16a0-43a2-a934-d586eccdbda0",
          "length": 252,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "50a0c2ee-0757-4ca3-bbfa-ea64c9d09072"
        },
        "item": {
          "id": "56ec88ec-397f-4e12-a268-fca78cfc1793",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "f14df191-74df-4575-b73d-3b3852b92f96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 215,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4faaa007-8b8d-4c01-9c95-bf8d1411ec92",
        "cursor": {
          "ref": "7467f76d-c74f-410b-af36-9777ea07adea",
          "length": 252,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "db77a3bd-6139-4876-8e56-4b10c7d785bf"
        },
        "item": {
          "id": "4faaa007-8b8d-4c01-9c95-bf8d1411ec92",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "6d62c1d0-b8ab-4f88-af5e-dd97dc876e16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 268,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67ac080c-732b-41d8-90a9-828015fe6c81",
        "cursor": {
          "ref": "e9b56ec6-63c1-417c-9018-525f5ff548c2",
          "length": 252,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "149dd258-ccbc-433f-afeb-a9207aa41ac8"
        },
        "item": {
          "id": "67ac080c-732b-41d8-90a9-828015fe6c81",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "658bf873-271e-4dc1-a4be-d4bb57c3b9ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 216,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d802286-228c-43ec-a0df-8fb14acd10fe",
        "cursor": {
          "ref": "ddd5f056-dabf-42b2-8900-105768994736",
          "length": 252,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "6d118332-9ba0-4cc7-9aa5-e582e41b8b4b"
        },
        "item": {
          "id": "0d802286-228c-43ec-a0df-8fb14acd10fe",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "736a06e3-1a8f-4ef5-aefe-8091a5c1dd99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 212,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5c3ab6f-c3d8-4990-8f0f-688fb8b20874",
        "cursor": {
          "ref": "d0852278-e24f-4a71-9e63-961bd5e4502b",
          "length": 252,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "484756e5-6705-4ec3-bab9-b2bd8e02d26d"
        },
        "item": {
          "id": "d5c3ab6f-c3d8-4990-8f0f-688fb8b20874",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "da3f66e0-1396-45fc-b165-b017976ee5a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75c7fda8-cf5e-4ac8-8bad-a1649d09c7bd",
        "cursor": {
          "ref": "2c4422a8-a76f-43ad-bc94-7f2473d0a9ab",
          "length": 252,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "e3d9ef22-2540-4d23-a772-06c702ac7a31"
        },
        "item": {
          "id": "75c7fda8-cf5e-4ac8-8bad-a1649d09c7bd",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "7752c3dc-5471-4d8f-b2b0-e7e66d0dad67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18e7cef9-8b40-45b9-9b02-aae09d9071ee",
        "cursor": {
          "ref": "dabf54f9-1807-4b78-ac9c-ba233272a542",
          "length": 252,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "b34908cb-8d49-40cc-a602-fad0f1ce7eec"
        },
        "item": {
          "id": "18e7cef9-8b40-45b9-9b02-aae09d9071ee",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "2ec28f14-e549-47cd-98dc-704aa2cb9172",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 228,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2a59e6f-3c56-42e7-b98f-4906e0cc2889",
        "cursor": {
          "ref": "e0d47d65-7edb-4e5c-acae-02d1fb797fef",
          "length": 252,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "3eab37b3-29e7-4a29-9f50-56df9ff8948f"
        },
        "item": {
          "id": "a2a59e6f-3c56-42e7-b98f-4906e0cc2889",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "21a44eb8-9a49-46fe-9c7f-ccf78203097b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3da4d6d9-4b57-4bc9-be17-5d9fee50dd32",
        "cursor": {
          "ref": "f3974416-b2d4-4626-864a-349301ee3e53",
          "length": 252,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "e0d5fed7-21d6-4ea3-bfb1-0586f3e96f70"
        },
        "item": {
          "id": "3da4d6d9-4b57-4bc9-be17-5d9fee50dd32",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "dc01e07a-8157-4ae4-8f31-ae4b0d127e02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09584774-a797-4e87-854b-3373833242aa",
        "cursor": {
          "ref": "171774b8-8731-4f70-93f6-86f715ec2a16",
          "length": 252,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "1c0d7485-3e72-4555-bfb6-4d93fd3dd01f"
        },
        "item": {
          "id": "09584774-a797-4e87-854b-3373833242aa",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "d1e11208-dcee-40b2-932b-ea1e69648a2b",
          "status": "OK",
          "code": 200,
          "responseTime": 244,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "9254ae5b-8d0d-4a16-9b75-8527e2abc289",
        "cursor": {
          "ref": "1019c2b2-ee3c-4393-88c2-351d923193e8",
          "length": 252,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "c4b38cb7-e003-4b60-807f-9670b6ef224c"
        },
        "item": {
          "id": "9254ae5b-8d0d-4a16-9b75-8527e2abc289",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "0aa5b9e7-612b-41a0-911a-1a7d4c3f89e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcc24bfb-cf4f-450a-bf3d-b9d2d04d287a",
        "cursor": {
          "ref": "e6e4d200-5feb-4476-b382-1315938cf917",
          "length": 252,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "a00ebf10-d716-417f-bf48-f49bea9447cf"
        },
        "item": {
          "id": "dcc24bfb-cf4f-450a-bf3d-b9d2d04d287a",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "a51bcfc7-3ee0-4dc2-915b-cc0a691a1b45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffdb54c8-706b-4cc4-87ea-c4716a32eba2",
        "cursor": {
          "ref": "b5391ff7-e51b-482c-9c1c-ed0684a1f99b",
          "length": 252,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "3e1d13a4-12e9-48ce-ba88-767219c4d249"
        },
        "item": {
          "id": "ffdb54c8-706b-4cc4-87ea-c4716a32eba2",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "0a8f17f6-492d-43ea-9056-f1906aaacdb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cdef0d4-67c4-4ea9-9416-593411f9f49a",
        "cursor": {
          "ref": "5fd600e6-e72c-49d7-9ea4-2e8a0826d3b2",
          "length": 252,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "4fadc157-4be2-4380-9962-15d3aab62eb5"
        },
        "item": {
          "id": "0cdef0d4-67c4-4ea9-9416-593411f9f49a",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "43dd82f9-09e1-4c33-a8d2-83a3bc1248e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 246,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01007579-242d-4b08-9670-15d03fcafb55",
        "cursor": {
          "ref": "5d87a867-7396-4961-bedb-7ef1a1734bd0",
          "length": 252,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "8b06140c-cf57-423b-a86f-8220fbf735d9"
        },
        "item": {
          "id": "01007579-242d-4b08-9670-15d03fcafb55",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "3e0c694d-77dc-4e4d-83f2-855665282f2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cc30953-c598-4350-8435-3351ef81dac1",
        "cursor": {
          "ref": "779089b6-7396-4d73-8737-08f8708e5347",
          "length": 252,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "efc19402-a935-4e0b-8979-cd7b8244f417"
        },
        "item": {
          "id": "0cc30953-c598-4350-8435-3351ef81dac1",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "c61a40a4-b2ed-47c3-9307-7c5cba05a764",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 283,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5d8e569-6115-49aa-9b60-f46e4e87ba5c",
        "cursor": {
          "ref": "b2aa39f8-1f3f-446b-9afb-13c4ba3eeddd",
          "length": 252,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "c1df6c01-6cc3-4c0c-9df1-9038aa773d1a"
        },
        "item": {
          "id": "e5d8e569-6115-49aa-9b60-f46e4e87ba5c",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "633389d9-f1bc-46bd-af79-a15e0bf8b32b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 229,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf2bcae4-3dfd-4ad0-a5ce-a17b9791d704",
        "cursor": {
          "ref": "c43e286b-da67-489b-a253-9f97ef171978",
          "length": 252,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "98b26d25-5d72-42de-ab85-785fa4328e10"
        },
        "item": {
          "id": "cf2bcae4-3dfd-4ad0-a5ce-a17b9791d704",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "b4a61ecb-37c8-43ef-b109-cf67340142f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 240,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91b533fb-66f3-4a5a-a603-3a77d2a55da0",
        "cursor": {
          "ref": "40462d9e-7dba-4d19-96b8-c711330cb75f",
          "length": 252,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "a64703bc-f7c2-4d23-a4c4-aa1e3a7b9dfd"
        },
        "item": {
          "id": "91b533fb-66f3-4a5a-a603-3a77d2a55da0",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "6d9be3fa-8553-49b7-8441-f13ce1461111",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 219,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21b19e87-851a-4ddb-989b-60348340210d",
        "cursor": {
          "ref": "66a4d511-217b-4b7d-accb-1f25603c3a36",
          "length": 252,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "9f9d0c32-6d0f-447c-beec-9d5f1dc5446d"
        },
        "item": {
          "id": "21b19e87-851a-4ddb-989b-60348340210d",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "0585a374-8fc1-45f9-9e30-a35c0934ff79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 235,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "256735d6-9a7e-4359-a194-ea02cb7a4d53",
        "cursor": {
          "ref": "3e45fd03-4e89-4b9a-b76c-33184e434e93",
          "length": 252,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "8527ed1d-086f-4131-88c8-1588920f315f"
        },
        "item": {
          "id": "256735d6-9a7e-4359-a194-ea02cb7a4d53",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "9f8e2b0e-909b-42e4-8f11-cc8a4fc98037",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 243,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc92ec09-6d51-43d7-af69-3f40c5f270b2",
        "cursor": {
          "ref": "04b61b1d-77e0-4542-a18c-50e6cfe265fa",
          "length": 252,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "8107b9c9-e3cd-47bd-a051-abae50726b56"
        },
        "item": {
          "id": "cc92ec09-6d51-43d7-af69-3f40c5f270b2",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "c4f67357-763e-43cb-9db7-6ffb596daa7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 212,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ade932f8-f323-4b9c-84de-83b1be92d91e",
        "cursor": {
          "ref": "0eb18acc-0e70-4a26-a96f-288d750117bc",
          "length": 252,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "5dd28f68-50a9-4a46-a03f-06b0db602fca"
        },
        "item": {
          "id": "ade932f8-f323-4b9c-84de-83b1be92d91e",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "a9a95798-0fd3-4141-811b-9a6841e6ba11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 217,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59cd1c73-84d1-496e-b4c5-4cb261df2bfa",
        "cursor": {
          "ref": "a4671123-0676-4031-a2e6-f83395e792c0",
          "length": 252,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "6cfba6b5-707a-46c3-9c7c-81e3cce8c6f2"
        },
        "item": {
          "id": "59cd1c73-84d1-496e-b4c5-4cb261df2bfa",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "0e198625-2da2-4e49-b9a5-02445a4642a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 206,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23e96767-90b4-42de-b4d6-06b608566218",
        "cursor": {
          "ref": "4b10066c-1e6b-46f8-a312-5ba5238fa81b",
          "length": 252,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "a84e28f8-f22b-4a39-9737-c91ff8b6f464"
        },
        "item": {
          "id": "23e96767-90b4-42de-b4d6-06b608566218",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "dbd81f77-3516-490d-b4f3-39f4d0f749c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 229,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "734c070e-29d2-4b98-8e1e-f97a657c011e",
        "cursor": {
          "ref": "f3906f7b-fde6-4670-8a33-4829e86abd5f",
          "length": 252,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "b26140ac-0a42-436a-9d2b-9b3b7ca5548e"
        },
        "item": {
          "id": "734c070e-29d2-4b98-8e1e-f97a657c011e",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "4849337c-2324-401e-8bdb-2b43dbea5896",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 210,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d2865ac-7d03-407e-b9cc-7d86cba5bd56",
        "cursor": {
          "ref": "2a2476f3-0f98-4844-adfe-32a43b0b8351",
          "length": 252,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "305c8897-b95d-4fb6-b243-028e2aa9ea58"
        },
        "item": {
          "id": "0d2865ac-7d03-407e-b9cc-7d86cba5bd56",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "b498bc15-5948-40f1-892c-e1f1bcc2fe51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 214,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4738025-d36a-43c1-bec2-8b3065bb5ebd",
        "cursor": {
          "ref": "2833652e-1ff9-4f20-84a6-c64603441104",
          "length": 252,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "470f5ffc-b97b-425e-9c57-ebb7e9e30e76"
        },
        "item": {
          "id": "f4738025-d36a-43c1-bec2-8b3065bb5ebd",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "29d832c8-fe78-4cfd-a67b-c4dd9b933873",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 243,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5a5bf92-f80a-4dcb-a7f2-260a596468b0",
        "cursor": {
          "ref": "a86c5a9c-9a74-4e89-bcab-0f4e5f0af414",
          "length": 252,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "170aff6a-3fda-403b-8013-e8447d2840a8"
        },
        "item": {
          "id": "d5a5bf92-f80a-4dcb-a7f2-260a596468b0",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "76cfc449-dbe0-4d28-9b0a-0f5d574f7422",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 206,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "986cec52-9d68-4ad1-a9fc-7f8f3a31afa0",
        "cursor": {
          "ref": "e0de5eb9-2aeb-4cbc-b076-bc5b244ffd5a",
          "length": 252,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "431a663b-59ca-4cc2-9925-900791dea2f3"
        },
        "item": {
          "id": "986cec52-9d68-4ad1-a9fc-7f8f3a31afa0",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "1414831d-ddb9-4279-9f85-b81864af9675",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 239,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b060e6f-46fc-4916-904e-1e6b3946e368",
        "cursor": {
          "ref": "5b42dfa1-bc73-47f4-9175-5264986ec5cf",
          "length": 252,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "cfa96f1f-90fa-44db-8589-64145290b8e7"
        },
        "item": {
          "id": "4b060e6f-46fc-4916-904e-1e6b3946e368",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "ff5a4927-ec62-493e-8a98-6281465d2cd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 214,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "834aea10-16c2-4e88-a759-3b9e9f38bac3",
        "cursor": {
          "ref": "245cfac8-3064-434c-a6d6-5fec1063da25",
          "length": 252,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "c026a2a2-a6b9-4916-bb84-ef43bb2e717d"
        },
        "item": {
          "id": "834aea10-16c2-4e88-a759-3b9e9f38bac3",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "6d0308b7-a566-495c-a0cc-285344b64904",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 239,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d108a30-db52-49f8-9cfc-51925b1d37c2",
        "cursor": {
          "ref": "ec7b9525-2164-4103-815f-fdfba680559e",
          "length": 252,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "99878dc7-f5aa-406a-bf76-526d2e4dfe09"
        },
        "item": {
          "id": "5d108a30-db52-49f8-9cfc-51925b1d37c2",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "3894aa92-9296-4382-a9b4-4113f6fd3588",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 215,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f40c67f-9897-49fd-86ca-820bce1e1a23",
        "cursor": {
          "ref": "250b4913-99d2-4e11-af5f-e758f7444acb",
          "length": 252,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "15fe3dc1-1dce-403a-909d-ca66452836b0"
        },
        "item": {
          "id": "4f40c67f-9897-49fd-86ca-820bce1e1a23",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "9fb159f2-eb4b-4205-acc8-96e53c2b49b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 202,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e42de35-a328-44d9-82f7-d844b46f56c9",
        "cursor": {
          "ref": "177608c7-5ee4-4fb5-9bfb-966c6383bc79",
          "length": 252,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "2afe1a47-3396-485c-ab73-8a832929c0f1"
        },
        "item": {
          "id": "5e42de35-a328-44d9-82f7-d844b46f56c9",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "efbb015a-7eb8-4cda-a8aa-34ed050c55df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc0d6b26-94d0-424a-a32a-50c10931d05a",
        "cursor": {
          "ref": "354931e2-5e69-4c1e-a236-728f9b31a3b8",
          "length": 252,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "c8c147ec-549b-4684-b74e-caecb07ba6a0"
        },
        "item": {
          "id": "cc0d6b26-94d0-424a-a32a-50c10931d05a",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "47c5d393-ddf4-4a10-9934-c6d45ca8b800",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d829873e-2cf5-4c86-b9bc-5da0ff9ceade",
        "cursor": {
          "ref": "af78fea1-58d3-4f09-985a-68b1846e2aec",
          "length": 252,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "2ae753c4-6899-4f81-9c50-11c4a354f059"
        },
        "item": {
          "id": "d829873e-2cf5-4c86-b9bc-5da0ff9ceade",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "f447f371-b1f9-41ef-b57c-916e30f3ac71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4eec42c0-d447-4cf3-8b0f-051a1386349f",
        "cursor": {
          "ref": "fe57a787-1bfc-466f-9e33-aaf3423db328",
          "length": 252,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "768612e2-d13e-4fa3-adb1-1322a4e3a797"
        },
        "item": {
          "id": "4eec42c0-d447-4cf3-8b0f-051a1386349f",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "b3d8116a-f120-491c-9f50-66fabbfaddce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 212,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07dd59e4-dc57-4f00-970c-a37894cd6a6c",
        "cursor": {
          "ref": "40f8c95a-44f9-4ab7-a2d4-707176679847",
          "length": 252,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "4424ada9-c115-4eb0-8420-0cd2e58b8f10"
        },
        "item": {
          "id": "07dd59e4-dc57-4f00-970c-a37894cd6a6c",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "486db8f0-2ec5-49eb-878d-778b6c11c562",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32f22373-1f8c-439d-95c0-2fb103ea53ee",
        "cursor": {
          "ref": "37d23c68-5a9d-43f1-8a34-96f148ef8005",
          "length": 252,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "e28a8e96-b7ab-42dd-98e0-c4bec2af141d"
        },
        "item": {
          "id": "32f22373-1f8c-439d-95c0-2fb103ea53ee",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "d46d6487-1b75-4041-b2a7-34370a67f8e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4eae1b51-2442-4057-a129-05732dadcbd2",
        "cursor": {
          "ref": "3d9ca38b-6528-4755-92d8-3aec40ed5943",
          "length": 252,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "8ca1fdca-5d83-4e72-83e8-fdc8b51be326"
        },
        "item": {
          "id": "4eae1b51-2442-4057-a129-05732dadcbd2",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "f7a4d63f-9d57-4941-ab75-4e73153c3f07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 148,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "672b30ac-8551-4837-8802-ad5331a80520",
        "cursor": {
          "ref": "b63151e3-c5a7-4c20-933b-f4290fd23443",
          "length": 252,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "324ef4bc-202e-4fe5-9786-65b5d7dd6504"
        },
        "item": {
          "id": "672b30ac-8551-4837-8802-ad5331a80520",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "bd6df769-3ff6-4da1-b0f0-642d12ce9a39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a64079bf-98e0-466a-ae8f-8f898e3beef5",
        "cursor": {
          "ref": "87cc79e1-56a1-4eb7-a408-5ec35bd7c743",
          "length": 252,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "88f0ef2f-1b15-4360-bebc-8d374cfa62c7"
        },
        "item": {
          "id": "a64079bf-98e0-466a-ae8f-8f898e3beef5",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "829c9da1-7b12-4410-9059-97b080e0dafe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 358,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d8c22c9-587d-47cc-9f94-4f3c3c677834",
        "cursor": {
          "ref": "23190edb-3914-45a0-975a-d81cc3024239",
          "length": 252,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "fef6075b-846c-498d-a86c-9cdcf094015c"
        },
        "item": {
          "id": "5d8c22c9-587d-47cc-9f94-4f3c3c677834",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "c6a3e265-84a5-42a7-9645-16d8a132b677",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b847a2e-0879-42a6-b4d1-74ea988b341a",
        "cursor": {
          "ref": "83f1dbb4-de16-493b-9e11-de198dcce96c",
          "length": 252,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "fc010c53-d6b7-440c-a69c-ce9d16961a76"
        },
        "item": {
          "id": "6b847a2e-0879-42a6-b4d1-74ea988b341a",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "983cbdad-ac9c-40c9-8ba3-cbb91f60144a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb97677f-6610-4743-8e3f-4ad4edd2d114",
        "cursor": {
          "ref": "ed1c9a04-4793-4dec-b785-5bafc69b3ee9",
          "length": 252,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "ff432a07-b3ec-433f-9a92-9df7af196c27"
        },
        "item": {
          "id": "bb97677f-6610-4743-8e3f-4ad4edd2d114",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "a3db4789-f803-4de8-9adb-0edef0f38091",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8edab257-ff83-4185-8c4f-577a5e81ad43",
        "cursor": {
          "ref": "f305e611-4a03-49be-83fd-fc66fd8b9069",
          "length": 252,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "a073da51-63e3-4438-8410-9b945f1af400"
        },
        "item": {
          "id": "8edab257-ff83-4185-8c4f-577a5e81ad43",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "0c95f685-c0db-4a01-866d-ef08200886ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e61a005-3f66-4231-a2be-b9b9947c429f",
        "cursor": {
          "ref": "b44d2ccf-d072-4e85-a5c3-35717c439e26",
          "length": 252,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "8d7f42ef-73dc-44aa-a91e-07c17cd29504"
        },
        "item": {
          "id": "3e61a005-3f66-4231-a2be-b9b9947c429f",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "59303748-70e2-472b-bce6-018a67d72aa4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd01cbad-9313-4a65-bb6f-dcdaa01f1d6a",
        "cursor": {
          "ref": "8c70d04a-4de0-479c-a3e0-206ccdd3738b",
          "length": 252,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "8eee1bff-d065-48de-80af-2f5451521815"
        },
        "item": {
          "id": "fd01cbad-9313-4a65-bb6f-dcdaa01f1d6a",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "174cc2e5-6efa-480b-b2a9-06baaa3b9562",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49cc8ae0-130d-42a7-947e-308c20743df7",
        "cursor": {
          "ref": "72bb2ac8-5482-4997-a18f-29c38f59ef5a",
          "length": 252,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "fbd9c8a9-4755-4db3-8911-28eff5d134b6"
        },
        "item": {
          "id": "49cc8ae0-130d-42a7-947e-308c20743df7",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "04568b77-e782-4778-97b4-c9b5736bf5d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d65c776a-b7b2-4554-b645-1ba8b1d9c658",
        "cursor": {
          "ref": "b54f7eef-8377-47be-8db3-6b0bcd6e0b26",
          "length": 252,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "5c35b155-55da-44e0-8dea-42a67be4f485"
        },
        "item": {
          "id": "d65c776a-b7b2-4554-b645-1ba8b1d9c658",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "11cbfe37-86ad-4e37-9441-de2ff7b3fcf7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f3e2f42-ff29-4b06-9ca7-dde9a9cef479",
        "cursor": {
          "ref": "495fdabb-b81d-481f-9403-aae16c52a608",
          "length": 252,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "43dadf85-023a-41b1-b38a-bc2a8e0fe66a"
        },
        "item": {
          "id": "0f3e2f42-ff29-4b06-9ca7-dde9a9cef479",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "46a962e1-5228-4a56-96bd-18a6611fe24f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85d82e9a-d21f-41d3-a5ba-2fe4d2a7661d",
        "cursor": {
          "ref": "1381922f-cf4f-42b3-8800-eb79d7c7fc6b",
          "length": 252,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "9b2adaed-e31e-449a-981f-c86603d55c85"
        },
        "item": {
          "id": "85d82e9a-d21f-41d3-a5ba-2fe4d2a7661d",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "b76cbad1-6df1-452f-9a11-e4e90a8a6378",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cc44d57-b93e-44d0-951a-7f1cd00ec233",
        "cursor": {
          "ref": "f2149f8a-0444-448d-9e0a-65e940c00543",
          "length": 252,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "e9f86073-571c-4fca-8d30-35c8c9bbb17f"
        },
        "item": {
          "id": "0cc44d57-b93e-44d0-951a-7f1cd00ec233",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "7dbe597f-a985-469b-b531-cb7db71b441d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70923666-e52e-448a-9bb4-e692ff3d1c5d",
        "cursor": {
          "ref": "2bd89ac7-00ab-41a4-9485-0456d1adc5ad",
          "length": 252,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "641116fb-2b96-4716-a766-720f92beee34"
        },
        "item": {
          "id": "70923666-e52e-448a-9bb4-e692ff3d1c5d",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "fbeda614-5cd4-45f3-963d-f236bc7ba5bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c94fc14-cceb-4973-aad0-6be7b91828e3",
        "cursor": {
          "ref": "7d9d39ab-b066-468d-8ca5-b370ed444235",
          "length": 252,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "0dca96fe-3529-4744-88c1-a285fddf0aa9"
        },
        "item": {
          "id": "4c94fc14-cceb-4973-aad0-6be7b91828e3",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "179c011a-6dce-4912-a524-cfbf7e68a9ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69b29bf2-a4bd-487e-8874-6a28bef6aaf0",
        "cursor": {
          "ref": "bc96d55c-9754-4d13-9c11-8410db1fefa8",
          "length": 252,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "3405093f-2ef3-42fd-a40b-886c2bfe2858"
        },
        "item": {
          "id": "69b29bf2-a4bd-487e-8874-6a28bef6aaf0",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "f4bfa214-a106-463e-a8bf-bf66fa00b438",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00428cd7-190a-4dc9-b0fe-5a638e8f3baa",
        "cursor": {
          "ref": "524bbb16-181c-416c-8455-978e8d4bc549",
          "length": 252,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "5c1d20c2-e816-4cd8-8aae-8e0e5166027b"
        },
        "item": {
          "id": "00428cd7-190a-4dc9-b0fe-5a638e8f3baa",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "25a79e4e-a016-4af2-94a7-7c8f6f05b169",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afe3a228-c11e-4a05-bdd6-4694082ea8d4",
        "cursor": {
          "ref": "c34b1165-ce2a-49c0-a1c0-fd8304028ce9",
          "length": 252,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "6f539729-154f-4f10-8635-7135057c58dc"
        },
        "item": {
          "id": "afe3a228-c11e-4a05-bdd6-4694082ea8d4",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "9894a820-02b0-4e86-9465-d210b8e37434",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a76152ed-23b9-4468-a70c-7218ad21f180",
        "cursor": {
          "ref": "421fb8ce-dd65-4e07-9c28-081c9b44a669",
          "length": 252,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "eef15bb7-9c42-4060-b11d-549366f4043f"
        },
        "item": {
          "id": "a76152ed-23b9-4468-a70c-7218ad21f180",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "62ddd6a6-9cbd-4918-b03b-cafec01a6b0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "694ac705-acd1-4ecc-bcd6-02dae363d0f1",
        "cursor": {
          "ref": "be9b3a86-c042-4453-a4d7-7bf7075e5600",
          "length": 252,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "1eb8560f-9cf7-49ee-8b40-863595a02c14"
        },
        "item": {
          "id": "694ac705-acd1-4ecc-bcd6-02dae363d0f1",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "7a7c5a0e-a919-484b-bf3b-6429a9636ec8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35440510-40c7-4dde-a6e1-55e6a4efcde3",
        "cursor": {
          "ref": "0c4183ef-466a-4615-80e9-400cf708f41b",
          "length": 252,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "251cfeca-68e0-47dd-8e49-68620634c81a"
        },
        "item": {
          "id": "35440510-40c7-4dde-a6e1-55e6a4efcde3",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "5a331879-3641-4281-a4fe-5f7932353567",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24f10491-03dd-49c3-b60b-dfbc8d006a25",
        "cursor": {
          "ref": "a241ef5c-bd7b-4858-a7ac-c94fa72d30e9",
          "length": 252,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "73d457b0-3d72-46e4-a9d4-7885d2b4936e"
        },
        "item": {
          "id": "24f10491-03dd-49c3-b60b-dfbc8d006a25",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "b408345d-a211-4291-adf2-7818cb2c463c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f42c74a-5570-4b14-ba8f-1f81a1773190",
        "cursor": {
          "ref": "ce1905a1-a6f1-4c47-9039-ebf8247e7434",
          "length": 252,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "6d3c402b-1e6d-4929-b9b4-155554b72ead"
        },
        "item": {
          "id": "0f42c74a-5570-4b14-ba8f-1f81a1773190",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "6ee78606-deb6-4424-be75-d673102c6d1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9352bd5-e6f3-49e4-9202-535e3b3c5b3f",
        "cursor": {
          "ref": "4a840b07-5efd-45d9-9a0b-a5fdd1739f81",
          "length": 252,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "f5df91a4-4d32-412d-8b7d-2b7f0182bb0b"
        },
        "item": {
          "id": "b9352bd5-e6f3-49e4-9202-535e3b3c5b3f",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "e4299573-6070-4b92-8ed8-67a2ce4a8455",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5fc346e-d79c-4ce7-bd98-275250dfa358",
        "cursor": {
          "ref": "f2aac27e-2d04-4727-ad92-39daf5263a42",
          "length": 252,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "e60b99e2-0c21-40dc-a623-5f978ee64d75"
        },
        "item": {
          "id": "d5fc346e-d79c-4ce7-bd98-275250dfa358",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "55878a50-c649-4fbf-9563-9fd54bf9304e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72bef416-d556-4305-861d-b4b6086600d1",
        "cursor": {
          "ref": "4e27b208-5e4c-4c5f-b283-650639650fc5",
          "length": 252,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "de8aa9f4-083f-49f8-bf94-c64e89612edc"
        },
        "item": {
          "id": "72bef416-d556-4305-861d-b4b6086600d1",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "65d9a36a-afdb-45e6-9899-d07097b216b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c6b62fb-b33c-47b1-baca-e072e0ef1093",
        "cursor": {
          "ref": "1fc3b018-b038-443a-bbc9-7400697a83e7",
          "length": 252,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "93d809c8-b22f-4856-a209-ed7c6e336c14"
        },
        "item": {
          "id": "0c6b62fb-b33c-47b1-baca-e072e0ef1093",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "9b427852-c59b-4025-ba22-d58b0830e225",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b655c22a-124c-48c0-817e-00c87259ae84",
        "cursor": {
          "ref": "5aa922a1-9ec6-469d-b46d-112fd70d15c9",
          "length": 252,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "8fc93a84-a35d-473b-90de-5bb4efce23f0"
        },
        "item": {
          "id": "b655c22a-124c-48c0-817e-00c87259ae84",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "ea68472c-99b0-4811-bddd-11f9834d8f3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e22fbe5d-c455-45e9-aee4-4f116087d0a4",
        "cursor": {
          "ref": "1180e517-48bf-450b-bfcf-99f66c44de17",
          "length": 252,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "12ac7218-050c-47ac-86d8-b80382f4d95d"
        },
        "item": {
          "id": "e22fbe5d-c455-45e9-aee4-4f116087d0a4",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "651778bd-74ac-4ac3-8f24-0c805fc9c6df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "248da35a-b215-4762-9ef0-01666ece6b38",
        "cursor": {
          "ref": "2872f85d-1594-40ea-bb34-f66a6f395841",
          "length": 252,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "844853f1-3bc4-4385-9ffe-31fb8af652f3"
        },
        "item": {
          "id": "248da35a-b215-4762-9ef0-01666ece6b38",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "901eec3f-de62-4cad-8323-e39e4259d830",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e27ac8e-5833-4311-b7d3-8a4381a549e9",
        "cursor": {
          "ref": "2223d620-4936-486d-bc3b-46bbd1387292",
          "length": 252,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "71b7a497-86b3-4034-87cb-72facc2646ba"
        },
        "item": {
          "id": "0e27ac8e-5833-4311-b7d3-8a4381a549e9",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "212902cf-399a-4fcb-a057-37610edfcfcb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a914802-46e8-4aa9-b8cd-599eb5cbefb4",
        "cursor": {
          "ref": "c5053e95-0848-4a9b-8444-ea49216125a0",
          "length": 252,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "39018520-caee-4372-b753-7ebdf077068a"
        },
        "item": {
          "id": "7a914802-46e8-4aa9-b8cd-599eb5cbefb4",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "5e226960-9a1a-48da-8966-20c0a333b13e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ac242d1-328b-4ca3-9cc1-0bcca2699ea6",
        "cursor": {
          "ref": "8668cd96-e126-431f-b35f-acd267c85ee1",
          "length": 252,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "fe93a90b-82cf-43c6-8bc1-78224f447d9c"
        },
        "item": {
          "id": "1ac242d1-328b-4ca3-9cc1-0bcca2699ea6",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "adf1c348-0fed-457d-bf8e-2aa44fd584ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86c9a2d0-fa39-497b-8343-61078be4bd7b",
        "cursor": {
          "ref": "b44f8606-3ac7-4a67-b133-a273c700e186",
          "length": 252,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "d94b4b60-5735-4baf-9a92-4f7f36f3957f"
        },
        "item": {
          "id": "86c9a2d0-fa39-497b-8343-61078be4bd7b",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "05cead52-ba3c-48d6-83b4-fa82e9316442",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a64a092-57b1-44b2-a5c1-3fbab1948ad9",
        "cursor": {
          "ref": "1b6449c0-17bc-4b4b-9b1f-bdeb3941a33f",
          "length": 252,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "c9f3ee8e-f4c2-4b75-8ed3-21dc77f6c2b8"
        },
        "item": {
          "id": "6a64a092-57b1-44b2-a5c1-3fbab1948ad9",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "9f1add57-fa46-4099-983a-e6b2ca0e0b15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93ce176d-2b7d-47ad-a46f-45c8283e635c",
        "cursor": {
          "ref": "00729493-5915-4743-8f19-265bbcbb80bf",
          "length": 252,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "7d3aee2a-edc9-44cb-bc95-cb243d17bb19"
        },
        "item": {
          "id": "93ce176d-2b7d-47ad-a46f-45c8283e635c",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "37a90c63-14f6-4016-8229-42043ec70996",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "312916b7-93ba-48aa-b4bd-eda57b726ecf",
        "cursor": {
          "ref": "0d12086f-d91d-4795-a7ac-483a85c41c2c",
          "length": 252,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "6891b25e-f133-4de6-add3-978e752039d7"
        },
        "item": {
          "id": "312916b7-93ba-48aa-b4bd-eda57b726ecf",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "20dae647-e9a2-4c7e-834b-74749a540689",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63c2773f-7ff4-4d6a-8ff7-cc93ac428fce",
        "cursor": {
          "ref": "e4c3391b-3563-4af4-bb0b-065ae16b435b",
          "length": 252,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "7dfde2a1-fb76-4bc9-a4fb-366e6642de44"
        },
        "item": {
          "id": "63c2773f-7ff4-4d6a-8ff7-cc93ac428fce",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "cf6d8b47-0a14-4762-88a4-e760ddead57e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 39,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c86945a-659c-4132-ba53-09acc7a60572",
        "cursor": {
          "ref": "41160793-5958-4293-9292-c29532e00455",
          "length": 252,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "00e15628-fd98-4984-ad17-ae64925e7b2f"
        },
        "item": {
          "id": "6c86945a-659c-4132-ba53-09acc7a60572",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "8b6a4aff-e744-4df4-a671-cfb7dfccda30",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 39,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "333a9628-01e6-471b-93ec-fb6d05f7289c",
        "cursor": {
          "ref": "12698a6b-f9b3-4470-a094-dc07bf32a4eb",
          "length": 252,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "4ef096e0-7809-4549-9eac-231f2b6bad4a"
        },
        "item": {
          "id": "333a9628-01e6-471b-93ec-fb6d05f7289c",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "25669851-7da2-4213-b5c2-070e58ca1caf",
          "status": "OK",
          "code": 200,
          "responseTime": 285,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "6195b537-f864-4fcc-bba4-28e8da527f1a",
        "cursor": {
          "ref": "b656b6ab-04b0-4770-b89a-d8a633370b5a",
          "length": 252,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "19204a66-62cd-4248-b357-09140d6ba3fa"
        },
        "item": {
          "id": "6195b537-f864-4fcc-bba4-28e8da527f1a",
          "name": "credentials_verify"
        },
        "response": {
          "id": "5043f2b0-4d63-42a0-bde6-9c752dfd07d0",
          "status": "OK",
          "code": 200,
          "responseTime": 404,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "0acd69fe-52ad-4a6a-a2cf-8d6725d189ad",
        "cursor": {
          "ref": "3ad33ecc-1448-4d75-8d83-5c60a9948543",
          "length": 252,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "6dabfe68-a5cc-4d25-8e55-c2fff07e1201"
        },
        "item": {
          "id": "0acd69fe-52ad-4a6a-a2cf-8d6725d189ad",
          "name": "credentials_verify:id"
        },
        "response": {
          "id": "fbd7c4b1-55b5-4768-b387-2c56247f9232",
          "status": "OK",
          "code": 200,
          "responseTime": 720,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d43b8f2-1e35-4b47-93e4-d01ad4b813a0",
        "cursor": {
          "ref": "7709c3a0-8e27-4fbc-9c77-929de0cc557d",
          "length": 252,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "5e18b0db-f31d-444b-a60c-073a76a615c7"
        },
        "item": {
          "id": "1d43b8f2-1e35-4b47-93e4-d01ad4b813a0",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "4685ebce-8d92-4981-bce9-c7d2629c6356",
          "status": "OK",
          "code": 200,
          "responseTime": 426,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "99885fe9-dbb2-4831-ac2f-0a25b9a6c055",
        "cursor": {
          "ref": "5dc02a0d-e3ab-49c9-8cfd-b11ead4ec1d6",
          "length": 252,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "d0bf6604-00f6-47fc-a7b6-68ba6fd16a67"
        },
        "item": {
          "id": "99885fe9-dbb2-4831-ac2f-0a25b9a6c055",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "4c5da201-0039-4919-93a0-fb0951ff1abe",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99885fe9-dbb2-4831-ac2f-0a25b9a6c055",
        "cursor": {
          "ref": "5dc02a0d-e3ab-49c9-8cfd-b11ead4ec1d6",
          "length": 252,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "d0bf6604-00f6-47fc-a7b6-68ba6fd16a67"
        },
        "item": {
          "id": "99885fe9-dbb2-4831-ac2f-0a25b9a6c055",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "4c5da201-0039-4919-93a0-fb0951ff1abe",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99885fe9-dbb2-4831-ac2f-0a25b9a6c055",
        "cursor": {
          "ref": "5dc02a0d-e3ab-49c9-8cfd-b11ead4ec1d6",
          "length": 252,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "d0bf6604-00f6-47fc-a7b6-68ba6fd16a67"
        },
        "item": {
          "id": "99885fe9-dbb2-4831-ac2f-0a25b9a6c055",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "4c5da201-0039-4919-93a0-fb0951ff1abe",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa764f26-26e9-4543-8fbe-646d8f06299a",
        "cursor": {
          "ref": "f7347279-f334-4352-81a0-f1824372b34e",
          "length": 252,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "21af4953-23c1-4831-b1b2-22ae8c952016"
        },
        "item": {
          "id": "fa764f26-26e9-4543-8fbe-646d8f06299a",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "a91e22de-8f65-4ecb-8dfe-7a071d92f7ee",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 42,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61442ea5-c6e8-478f-b133-e81613b944e2",
        "cursor": {
          "ref": "496498df-cdec-4b1c-bed3-f3dd57e1926a",
          "length": 252,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "7513689d-eedc-48b6-b7c3-a625162dc435"
        },
        "item": {
          "id": "61442ea5-c6e8-478f-b133-e81613b944e2",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "2e174c1f-e55c-4280-87d8-2d3e4eb68d6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "61442ea5-c6e8-478f-b133-e81613b944e2",
        "cursor": {
          "ref": "496498df-cdec-4b1c-bed3-f3dd57e1926a",
          "length": 252,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "7513689d-eedc-48b6-b7c3-a625162dc435"
        },
        "item": {
          "id": "61442ea5-c6e8-478f-b133-e81613b944e2",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "2e174c1f-e55c-4280-87d8-2d3e4eb68d6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "00b7dd35-1654-4163-9d9c-72aea8301dd5",
        "cursor": {
          "ref": "50e22231-9e2e-4164-9b75-2013cebb4319",
          "length": 252,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "cef36804-5d4f-429c-9867-3a98ec448cd1"
        },
        "item": {
          "id": "00b7dd35-1654-4163-9d9c-72aea8301dd5",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "956378c2-05d5-4654-84f3-9394ec66f5df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "676ef90b-dfcc-4ee9-8e1b-0fb849917101",
        "cursor": {
          "ref": "b5de5273-46b6-41fa-8311-00af79c3b5c6",
          "length": 252,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "154b97ec-6145-4dc0-8495-d87efdff1599"
        },
        "item": {
          "id": "676ef90b-dfcc-4ee9-8e1b-0fb849917101",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "d5b13b47-9935-40a5-be3e-d3fc4d80c721",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "676ef90b-dfcc-4ee9-8e1b-0fb849917101",
        "cursor": {
          "ref": "b5de5273-46b6-41fa-8311-00af79c3b5c6",
          "length": 252,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "154b97ec-6145-4dc0-8495-d87efdff1599"
        },
        "item": {
          "id": "676ef90b-dfcc-4ee9-8e1b-0fb849917101",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "d5b13b47-9935-40a5-be3e-d3fc4d80c721",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "c6dafddc-43a4-4336-9e38-6df4920fdf8a",
        "cursor": {
          "ref": "99e4cb5e-0ea4-4149-a2a9-b0c7d7bcd89c",
          "length": 252,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "774ffaf9-3484-4476-b6b1-ca988ec4b729"
        },
        "item": {
          "id": "c6dafddc-43a4-4336-9e38-6df4920fdf8a",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "7d70e21d-9c83-4192-8f1c-7a908b31813e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      }
    ]
  }
}