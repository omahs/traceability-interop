{
  "collection": {
    "info": {
      "_postman_id": "7f2d134c-0652-4763-bcaa-ff75092b3e39",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "d5b08d98-dbbe-4a76-9af1-3476c8430a95",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "2f83ccfb-d4a3-4ec5-910b-0ae15b9503fd",
            "name": "Positive Testing",
            "item": [
              {
                "id": "3927b680-803b-48cf-9238-c852adef1e1f",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "475757d6-0051-4eb8-84e7-85af1759d8fa",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bb18a335-14c2-43dc-a78d-8d3ec67f9e3d"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1ed155c3-891f-4c1d-836e-c13022cba6da",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c8e701ff-4fb0-4552-959d-44aafcca6f1e"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "e3bed002-21a3-4f91-99e7-2427fbe7687f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0e91929c-8dab-40f7-8da8-24116331529b"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "51499866-8828-4f26-b8ef-a12927c0eab6",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "792337aa-c633-4465-a1a7-5988ee65523f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e2cfbae2-1607-4a13-857f-d213f2f4f35c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "55fd15b7-7044-45f1-a168-1c9b7ba58217"
            }
          }
        ]
      },
      {
        "id": "15b7d4b5-05f2-4245-854d-9a20277f1d65",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "780efd97-0bc0-44a7-8abe-25b9758df9f4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "61b24701-7cb1-4e6a-9142-2d0a7c96a031",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "6b59af37-20dd-40ab-a09e-4f018f2e645f",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f640699c-6cd7-46bd-bf73-106c7edfaa85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "284193bd-9d04-4a81-9afe-2ff873e4d224"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a403bda9-f05a-40d8-badc-9d7970844ac6",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43e87e9a-8768-4e67-a6c9-f01b9f4a75b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ebe9c36e-f820-4325-83b7-662074176712"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d209803-35b3-466a-be74-ca24f223c5c6",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "319c330c-c603-42df-bc53-6233babd2dfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0abb965d-05b7-467c-bb51-25844bda7922"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "e5d12bb3-50a4-4249-b216-ebe1fe39ecb8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "83b4ac40-bd87-4d26-b558-23dbc1f98576",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ce7cc84-6353-4601-8ee8-20b1a32d5318",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4d77632f-4c97-487c-91ca-44dd33062d9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0eb1a085-bb02-4721-8fd2-b90df79c90a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ad185b2-11de-4ab1-b879-070b1f5b5f1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ea9f57a-a64a-41ec-86c4-743d1248e5e0",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c681836f-5a1f-422e-b4c7-8e1951fb4524",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1b2aba01-9942-4b4b-abc9-df95b94e05f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea0f1196-7b83-4ef7-aa06-108c69860240",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "bf271483-0ff9-4426-955c-f2a7e0388a46"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "2d4a63c0-6845-4723-b6b5-63b0b2809881",
            "name": "Positive Testing",
            "item": [
              {
                "id": "fcd1745f-5da6-4094-848a-00eb75b7bac6",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "cbf82491-b278-4b0c-b954-f1e38b9c8571",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "836cae0a-0696-4356-a983-442097ffe8da"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f5108d01-a822-4c54-8518-49410c79fea4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "932ae666-edc0-464c-8b44-d0796ddc6dd0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "81108ee8-c26e-4a3d-a410-447b885b28f7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "93c77e8f-b1ac-4e8d-83d1-0ee10c7635e2"
            }
          }
        ]
      },
      {
        "id": "7a3d4240-d547-43ad-a6a1-ed0bd84f79f6",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "f06509a2-97b3-4446-b7c1-a5ed0b1416c9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "49da1d39-7e84-4bee-8b2c-8b2bcfdd57bd",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "55cd972b-c451-4496-9576-9364065baddc",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b56595f-e25e-4317-8b5a-835c16749e19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4702db20-9186-430b-833e-e31d98007ea5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8baf238a-4955-49d7-bf92-5690fc29f293",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9c7ebab9-5228-41a2-b123-51c23d6ed372"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d0860ff-ce26-4d76-9c4e-b7a1bb42094e",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15550f2a-a5fd-48da-b1db-72dbb3624be9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd1a7808-c160-40c0-b7bf-da2732e513cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2aa9cd0-8249-4abd-9ebe-7a7b3617e300",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "17b0c45a-de36-43c0-867a-4bdedcc09a6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15a959fc-96b2-4122-bd5e-1fb6225112d5",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3f547df-ff00-41b2-8a10-7444c6d097bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09f034fe-9936-40bf-a789-6b93b5fceed4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11d3eb08-9f4f-43ac-9674-65d631c22f92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3619cf0a-5575-410c-8593-74f60454966d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db3bb8f9-be3b-496c-a333-0a675b064a29",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fac45cb5-6cd5-47cd-aa11-0d7f9a512b86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34e11cd1-3df5-49aa-8158-a684645d087d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4211b8f9-ae80-4c8a-bcab-38754d007446",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5970a800-13ee-4db4-bed5-d5d868a2dfd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d022c22a-1fc0-4a4c-a236-de02d691bbad",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bedf1a03-818b-436b-bf97-c9dd8eae679a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dfb2927e-9847-4948-8ba5-2ed4bc326898"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9de41d10-f970-4007-b9b2-804b65d6ec1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e551fd56-03c5-4359-89ed-9673df479da3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c6007b1-8e2f-420c-a264-7d277107a8dd",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfcaf452-c141-4bdf-932a-537f5d47b091",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a4177f2-9c52-4a30-9289-63424223f69e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "125d0c14-8b80-4c69-88b8-20622fa3d81d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "939e0e40-6d8d-43bb-b85c-17fd8e9abc54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "180b39ad-5051-42f7-8fbd-b94695f1c9c6",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79cf5b35-0930-4df5-a501-63568b7f6b16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8841f9a-d39c-4084-9509-cd9102e91203"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f5d9d59-ed41-45b0-87c5-1348a68497fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9db78a46-d28d-4a82-bd58-09a0fdfa79f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "611f0462-2b29-4139-b6b2-f1ff418a2d94",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7facf204-f8ff-4b10-be42-588a40a71975",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02a5b514-df60-4f97-8dab-dec3c6a02c38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2f760bc-a1bd-477c-9882-23680ae07633",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3f965cf5-0cba-4f0a-91b2-3d3ea5e1c85e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e65cceac-4106-4e51-a9b6-81cb1b6e2655",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5880c567-bbec-4d43-aeeb-677d3a2360a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92185301-186b-4e25-8e3f-09a42107444f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a42dd21f-940f-4488-8d93-e1449b3ffe8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "73b69662-cae1-4c28-9e6e-b3f4d6d5373a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6078b450-16e7-44bd-a9b2-0649dd15a16a",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d794e2bb-ca91-4eb8-8593-65ff9509677a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46cf7edf-5fe1-432f-9858-67622cfa599f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3995b611-7610-4ae5-b0a3-3199d849f7ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8939712b-bb19-480e-863d-9d7a61859172"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b988473-9682-43c7-b668-8c7c61da0ac3",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d70a24c1-edb0-48e4-9743-efcbed3eca29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c14d760b-08ea-439e-952b-6ac75114406f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afe436a3-264b-4dc1-ba0c-bfa24334c91e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "573cc3d4-2982-42a2-9dc6-0b8eb4ec4f14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df338451-033d-4f6e-bf18-b2f16ca4cd35",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0260668f-2636-4bf0-95cc-2f4f6f8080c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0c77ef7-c988-4989-840c-24601086e045"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07d34a41-28f6-493c-911d-fc47aae92937",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6f435d6d-7cc5-4097-b868-8defc139ed4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b771293-8edf-450f-bec6-0234f79e2b2e",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f1786bb-34e0-4169-a4f4-1cf2a9473ac1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac2f626a-bb20-4f76-871c-f0fb72acb90c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "053e03ad-7073-43d0-aa14-ad732168fbab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ff68cbfd-4747-487d-a1ea-e3e6d5b2a851"
                        }
                      }
                    ]
                  },
                  {
                    "id": "485b6275-7a91-424b-8461-410814227f8d",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "615a6551-d949-4c2a-879c-f85a66d4f1d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41e7d6a0-89af-480f-841f-345b341253b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "497f2c1a-4b3e-4445-ba95-22c7b6b2627c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e7541653-1946-4ae8-8b34-454e51236ab3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c94ab5e-88c0-4a0b-9d0b-7926eb0d8746",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98324aa1-9a7c-4a92-8134-bf83c447d41f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "669990e0-7560-4701-bc17-e4afc7779fbb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c57213ed-9b75-4938-9ca6-24cc139f65cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b960dabb-c28d-4ca8-bd5a-4716e5b7497b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7ce1a40-3112-471d-a8b2-8678ae14a6d8",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4aaafcb4-cb6e-4603-97f6-72d4eaaf0a9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dae88c0d-a5f0-489d-be79-7c4b7b1bfe45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4adcbe27-cd30-48f7-a701-2837df87bc9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cdf1b0d4-6ef1-423d-b3ca-8c0aaf39d182"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f724db27-2a65-4fd7-b8ff-eb150cd87e9d",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76aec3f2-4a59-4e30-85c8-576a51c12b46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92e791b0-9b36-48ff-b5c1-5f4f30aa62ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "399be9d8-14f5-4cbf-b025-08411db2e18a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3e76e5a3-a3d8-416c-9b90-fd537faea512"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c39660f2-ebb9-42dd-8b22-13b9609477ed",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18843758-b83d-4ba9-bac5-7c2f6e21117f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd7a4808-2c55-49ff-9c91-de7a1aae936f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21585a2d-7130-4ff2-bf64-42d1681a52c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "1b204b32-7c78-4628-930d-60e91da9df87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "522d264b-f378-45ce-983b-71847b531bb5",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb3af8ba-e994-468c-a679-8273bfc6fbb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95817c03-aa6a-4266-837d-43b4a09e032b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d35bdc23-350e-4e4b-802c-5ff6cb6758d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "247d8744-7602-4f31-8dd5-53694cbf5a61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73c903f2-239e-4e19-b20f-2777d5953797",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2880c157-7592-400b-88ea-a18d0fa84f85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc82f328-2259-4932-a6a5-ccbd9c02480a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b23211b9-7b06-41c4-bca0-5d35f91d0f29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "dad29d55-e8b4-46ea-9fac-a55888b9a11e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3074b4ef-77d3-4ae7-bd2b-43d7e8bb4874",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "790bc6e1-fc64-4d1e-9345-f1178815744f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef71cb80-5448-402a-a7b0-d4b052224b1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16c097b8-0abd-4391-9714-60c28dc39da4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1a32abd0-05c0-45e9-b06c-d41564ebd48b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da018fb6-2042-458d-b5f0-eed569974663",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcb1548d-9cc6-4d90-ba27-2156eb91edae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9abdc018-700a-48dc-96ac-d33c84c6f0df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0e5aee1-7d35-4f6e-9720-229a9931bb83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "924fdde4-9a32-4b49-8c69-ab9aa1e9cccd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a499daa1-88ef-4bec-b6e1-65f44183d12e",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48e48b05-4a0e-4dc3-869d-8f50e7db9d95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb955fa8-de52-4153-a6fd-c83b93b0be27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f34de7f-ae74-47be-bd3d-b5a7d02ddcae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "79f683fd-b0e2-472d-b44d-b90a36ce98f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe5f8005-44bd-4eea-a375-b29568dbf7f0",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a9a7d20-267e-4bea-b507-5e432e8a45d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4b331e6-5a12-488c-8135-90f127697092"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "366c1732-ff29-487d-942b-f6c1624d8a40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "ff365de8-4c93-42a4-aeea-e6a55ee80ead"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31d2c65a-ef38-439d-a4d0-1395708eaced",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d5498a0-aab1-4481-8552-c9cfe4fd5cba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9e50fb5-9f99-4d6b-a176-7b32984b41dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5073270f-3c28-4fa0-8c31-6f5a7608f708",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "fae4efce-aed1-4f0b-9f75-e799b3f31d9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf16a1b4-92d3-4970-8cda-ef27f9f7ba3f",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5664831-f2b4-40e9-9815-c36543c7f803",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6d02c54-733c-4651-bae0-4c6143657a4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "308fd8d5-9cde-4bb5-aeb8-45504422881a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "129483d6-8657-4ebd-945d-bebfdaa11554"
                        }
                      }
                    ]
                  },
                  {
                    "id": "123856d5-ed39-44ea-a3de-a99fbced04df",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3968063-4954-4cd4-adb4-8f56d61b8bd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4159905-983a-4efe-851f-17619cbc15bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fac7ac0c-f849-4713-bfc7-4f3b582063a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "68a51258-384d-4abe-ab37-21d8eee5e09e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93ac595f-1c9a-45e3-bf46-f6e23a1c2cf1",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1e8274e-a2fd-4c63-9bf7-dd1a53cb16e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69db353e-5c68-4ad0-86b3-3c19483cd645"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "765bd844-1292-4fe2-aa2a-10acd5088660",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8d91d265-185c-433b-ac3d-5f24d8a394b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a3b5cc8-a9df-404e-bedb-36f3d796fe10",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4051ced8-c4aa-4495-9633-c925ddd25696",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9cf2a2db-72e0-4d22-b6dc-782b2a3728ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cf1c676-178f-4791-ae61-011403f9d51d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a9291e36-6b7b-47dd-a12e-c55426174319"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad041616-2d8a-4aaa-9787-c39b3e7f9e38",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c03f2a4-2f20-45fc-bc26-5f8542dc79d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7360464f-87be-477e-91d5-15d6993db21d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf3cd2f6-9beb-4e26-9613-c7dc97f06ce9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "bc1524eb-cbe3-46bd-bf0b-a9981ce81d94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e284eb9-0b69-470d-b1e6-e6049105b314",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4910acf-8285-4ec6-a310-e60af377cba4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f593b2d-ff9a-449e-97d1-d45559c45252"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68127e49-1656-42b4-a7ec-8cf960c85d0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "8956e92e-753a-4a3c-998f-4e623cc8e3a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07fff1e9-1b20-4105-9767-111040737c85",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9621e3b-31fe-4c9f-bfce-5f42177d1a62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ca04c1f-2f8b-4e96-9f2f-0b3d57ba0b8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12665a93-0dac-4d93-8e18-0eafd5ee3e10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a1f90556-d38e-4392-8ccf-18d58b467283"
                        }
                      }
                    ]
                  },
                  {
                    "id": "119c9b01-d884-4aad-96dc-55bf295025e5",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65996c96-0890-479f-a5b9-7d564c87baab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "916ca9be-06ae-4568-8eac-5e57483789a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "592d2460-c8bc-46ef-bd8a-08bb79e08090",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "fe6df3c2-17b4-4007-8d3e-a1a081c10081"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e37d330-e5b9-4577-9769-a247a442aa87",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47f84ac5-addf-4896-92f3-818d38e429be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99da10ac-887f-41a4-95c3-cde22495381e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b474d6a-dfde-4423-9365-3a5c25bac7db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3747f78f-9b71-4205-953a-c1fd08b12540"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b7b31ed-cc89-47c7-8d13-933d9ad9895e",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e374aca-7e86-4e26-9eea-720d380fba1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc6d12e5-b149-4aff-bd90-8d555bc08971"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2178bf24-0c68-4c44-ace7-dc8df2e8215e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "53fc8815-e7a1-4afa-9e83-f9df95fbbec0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21570449-6bcb-4094-8676-dc8b56b28725",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39736c0a-3d36-439b-843f-5b4fe928dc8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d76fbd83-19dc-49fb-ae9a-73e174382d53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22d9402b-bbb3-46f7-af93-cd7996f502de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b9b207e9-91d3-48dc-a378-c98161cca49e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1da28e6-28c0-4da9-8201-ad436d4577ab",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "309a8d98-092d-44bb-ab91-d4b3b5201819",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "745d7d16-cbe1-4348-9558-d831132d60ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfc3a431-32a6-41a0-a1be-258c425872de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b910e476-a83f-49ba-9474-c0a550a0aa92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c85a4f15-21f5-4e35-ae2c-0039b3fd6e13",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "905f62eb-e4b4-452a-a887-8a368e5227c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e35acacc-7d1a-4a78-b4a6-7cd4f08b1f90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71881351-4eba-4c17-9357-31173dbfeb24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "15ebafd2-3921-4402-b557-fe3706e125c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0171d7e8-d1a4-4cd4-b2f2-70331145083b",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9c8623a-7eed-41f4-8f2d-1812df2bb02a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "edb5503a-01ce-482d-b02c-279f7d520757"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d12f35f6-280e-463a-bbdb-8e72f9f66ec5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "1ff940a3-b92b-4922-9c43-ab0b504040e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4053f6ca-6d04-4f9e-89ad-4e158eb9abb5",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb35ca2b-e6f6-46c5-a394-6f5cb8601cd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b300bf48-bae5-4311-ade0-0bc816f4cd3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d6bbad3-bde1-4fc6-a4fc-115fee012e6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "9420bb45-501f-45c3-838c-9d45eaff653f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6e57af6-bef8-41f2-9d2b-6ff6fdf26bb0",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0f3c767-eb02-4a74-8b8f-0d363bf8255a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d2f23a3-9f86-4a2c-bd79-0bf425757df4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7e40404-adf5-453b-8286-016e492f5841",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "c250293c-a66d-4381-9950-b64861815512"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ace54d80-7b74-4c86-b35f-6daf18e632dc",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e59fdfc0-bf4e-4d66-ad8b-07a5df39c7ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "209ddd64-b4ac-467b-af18-209d677b134d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "530cd94d-a46d-4e55-b4af-df2b83050e2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "cb3bfc94-a010-4cdc-8bc0-04b3e188eca7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0257a3b9-8dcf-4cc3-af53-8e1211935832",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad86653a-5db4-40c2-9657-4d390776ba7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5bed9717-3654-4330-9720-691fcbb7f33f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a59188df-05ff-4bbc-8a9f-685782ec04a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "75fe30f2-a952-4367-abde-a31546830bad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0280a1a7-544a-4f3d-b873-ecbd27be9bd1",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad41399a-42c8-469e-b968-34b58db77d58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6fde15f-9112-4bb5-aabf-0f0a4701bbfc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87bcb612-d404-4c89-9fd8-eebdcf111f66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "15e7382c-71ae-4c20-9607-9b2ca510a952"
                        }
                      }
                    ]
                  },
                  {
                    "id": "135d5871-615a-4c10-8dd9-d158a47af30f",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "664da2dc-0f00-4e07-a96f-48196089a5e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd95cc4d-4c1a-4467-ab6a-7c9af8964ce7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17e4e1b0-82a1-451b-bee2-6d8a8cd440ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ece45161-b1c4-4b8f-83e0-d6520cd8741a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59dcf7b4-d1cd-493e-a3f3-b5217ab564f9",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f82c7c5-6819-424e-b6f6-b272ae239586",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ca8872e-c7eb-402a-8b12-910722d6ae9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b90f273-e42e-4aa1-8173-841d164482b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5f148ecd-685c-4b8a-a043-3746812ca221"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36952dfd-57d5-438a-a8e6-082cb237af4c",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85020f3e-aa84-40d9-8984-c2bbfd3ed1de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "196a7b0b-bc53-409a-8c66-a823e5d7883e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38183af7-2f78-4816-8498-f82277bcf95a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ef502abc-3667-4dcf-a7fe-dd3d9749783c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9329587b-8a3b-44e8-b8aa-8a840f468834",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "707332f7-4593-4abc-b9ad-950b729476d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36def2e5-497a-4bc9-87a2-5c83dd1490da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31f654aa-aa9d-4df5-8c33-1bc425697adb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "627f2b2b-3751-4e59-9564-b75488b79ec7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc36f4a9-6898-4418-9752-a08792d1098a",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4150b25-a9c9-43bf-9573-88d10f90e53c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7cc12126-3109-4f0f-aa08-3ecab685165f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e0e5d2a-ddab-44e3-b9dd-9bd93b5074e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "61b695d7-0837-4763-91af-1b3e11300384"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64ca56c5-5de2-4305-9a9d-7c6d70157323",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a2aef9e-05f7-4c74-b0e1-2c3edb967854",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e488b077-46be-47ea-a38e-40d24316c21e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e593cda-0e86-41f1-b3b6-36bd6919ab5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fa4fc38d-bb23-4766-aa38-4d9baadaf437"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6850d8f6-0ca8-4a71-8de0-2fc327723b97",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1532aef6-74f1-408a-a0ba-c5782bb198ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fc05087-481a-4693-9d70-20cc92c487e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf73ea7f-4a65-44c3-acc6-645462fe7e3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "52474d33-6278-4bae-adf6-983edc2f209e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8abcabbe-df56-4423-9de9-15b4fdd1b699",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c008400-60d5-4b42-9394-297a4a39bbe7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a42bc3ab-6377-4f77-a568-b769c6455f92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6abe64d9-ecef-47ac-8414-3f83c49067be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "5cd3e8cf-9430-4390-9f15-1ba01004e473"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88258685-dc67-4fac-90ee-ccb791bb076a",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc93c763-f3d8-4dd0-9484-aa6d2b49bbed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c71bbd9-4640-4a03-af49-ff7bdcc9adeb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ae9e76c-9b08-46ae-bb58-c5546873ed30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "dac90495-ca16-4c5f-a05e-1a1cab859442"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f845c207-48e6-40f1-ba31-24f59b5250ab",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e81b88c7-0aca-48a7-93ee-8d52bc276014",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bdffeb6e-0c91-44dc-8f01-6c8c058ec3fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8480cdb7-df43-4695-9efe-217831eaca55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "cb6a755b-212d-45af-8b9d-193e918de454"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fae6e4b-a82b-4ca3-8bfd-56313f3b1a99",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc3f6a24-8d39-404a-a0b0-7792750c0687",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "711e0a02-a603-43a3-b3ca-ef3000a2e4a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebb074ac-ac88-4afc-b7a6-981119eb016f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "383f77bc-39c3-4711-9fd3-5e24c99e493f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2c45bce-923d-4f30-a762-59e9e4ad5867",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f7e8217-fa03-414b-9465-7d3c264474c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b46d8fe4-4eac-4a62-93d2-70756c785922"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f3eff49-90b6-4f70-8154-e96178a206c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "9b103084-1f93-4f11-ae92-1cac47092a40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b3ba43d-84c7-4d6c-83d3-9c3d57725de8",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f685f363-307f-4da9-8da5-fc98c31123ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9149b26f-8cde-4d6d-ad31-0b96a8055d5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c6f83df-fd70-4c12-96b2-aaeca10ebc30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "64b58c11-2ca6-487f-be8b-10daf194f70e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c7bbe70-bde1-4706-b113-f9e6840d6d60",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f506bdfa-2fb3-4310-a960-7bc8195ba05b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ed002d0-0115-4e50-9b6c-fb32350f1b37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f55ddd6e-20b2-4f4c-a090-64ed92efb415",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "773387fd-33de-4f7b-9b66-62e4ab8e4cff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ff3ddd9-f9be-46cd-aaca-cc4594412251",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63ba5b2b-d4cb-463d-9545-63eeb1cb2338",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0eede522-5718-4615-9663-f9b688fa33a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b56bc506-7560-41e5-b7ff-c165a7b8088e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "c87c9364-5666-44aa-9721-c9d85f542cb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e03a3ca8-9d5d-4553-a174-9042b4636328",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd7a503a-0fec-4f54-b382-eda59e10c414",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e976eab3-0006-465b-986c-63114e788887"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8165a8b4-f9e4-480b-9d6e-3a9e1db04ee9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "3fc4924f-604b-4c06-8c13-c2c7c284ae1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ab723c1-46dd-4e9d-82b5-849073e733ca",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52666c3b-1e40-4565-a4ed-26268ca3c9be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7009c32d-5d0a-4ef8-a2f9-0f5418538af8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbb6029c-a608-4e26-a644-74870cbbb011",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "cc4dc47a-fa6e-4059-97b9-be9f43ecc482"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cc1d242-4dd8-4f17-a71a-8f189a972af3",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26796c94-7de6-4313-9ca2-703bb9e09209",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83716c0d-15f1-4896-93a5-32d394dae9e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2dc51c8c-5bd7-4f3e-ab97-96551bc96f67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "88046587-f658-4ef0-99a3-31cf562d892b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "239f524f-9cfa-46af-b944-1bb72a106131",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc39dae8-017e-4360-acc0-f9be44f631d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fef9b389-d981-4d22-905f-fb21a598f297"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb6f0c58-1e94-4296-be75-5938ad36bcd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "a6893e01-66e0-4b7f-a251-2381f87765ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06b847b9-cd0d-404a-8d25-6cdcdf3e9233",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0968ebcb-c441-4922-8d30-ff7ab4d7266d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6eed819d-45a7-46fe-a844-a6b54e8a9ee5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78fd6e5a-ef40-426a-9e98-6a6f53911ee2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c554292e-16ff-42c4-87bf-cf57cb28735a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3970e3a-cef0-4fb9-a7fc-af1bb7e44cbd",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfe17e29-d2fb-42c1-aa89-cf645796bf53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9de5f81c-13e6-44e7-bf5f-b6ba2b02d1e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "740bb5bc-93d3-46f3-b79b-cd37fb759495",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "63ed9be9-5a4a-4524-bd42-6148c5236c09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3eb3f27-8411-4837-b7dd-d9cb89cf1c89",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dc58ab9-58ee-4a72-8226-18f79b845991",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11acd8df-5dc5-4b70-bee0-fd882c9f1246"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e104984e-29f6-4e6f-b0d6-f79972e55c1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "81c691bd-0d0e-4846-ae00-af4d5da89eb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "730ec0d1-6e57-485a-ad17-a3dc5dc2c74f",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2df3ca6-b631-4778-ae04-806652b79164",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d88020d-f270-4c7f-9eea-5b7a141b8a69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ea52fa0-6917-4ee9-82bf-57d975827301",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "23a5d042-4adc-4552-b04c-e52cf08840d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c13b16f-1e68-4824-b97e-41d85c3d3f5e",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd544063-c9af-4796-9420-1fcd58797bc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80af368b-fef6-4787-b085-21f1cbb475e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38f45b23-2350-4d9c-8905-1812b251554a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "7c180805-cd0c-4d07-af8b-5e26b7ec9c80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d796c6c-5022-4a81-bee6-9beb480e0ce3",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31ef5472-3ffe-44cf-a687-328b76ad7b9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9d09a23-5986-45eb-8385-c07352924848"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c157cc2-38e3-4185-984e-0c12dbceafd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "45a25c65-16e4-4014-a950-e41691375e91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f917e13a-cf99-46e8-946e-7045df2b0840",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33140af2-35ad-45e4-a0ce-a47642dce714",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86f2bb66-d5fc-411a-9c7c-966c02ec7993"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51874790-6134-4258-849e-474715e501f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "055bd2d1-c8e9-43fb-aab1-cca9027e0b40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32f702ad-ef6e-4f46-8630-965905aefc3a",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d95a18e9-330a-48de-9901-2f9ea8a86bef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65a2e25b-ff1f-4f8c-b869-f1767593afb4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ce44f06-56ad-4906-a7aa-fad06ac02452",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b2e4d3d9-e998-4fc7-b5f2-f9fb18d2f186"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12d47480-f27f-4019-b123-6fbccac490b6",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3d6943e-e752-4bfd-a817-42a2c0120acd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5010418e-a8ff-46f5-84f0-9c6e68db8fb8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d574425e-51fe-4152-aef9-573c366491fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "96882df9-b119-41ff-accc-18222d6b280b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59128f13-a003-435f-a4eb-6dc5d30a08be",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c7d07b1-896d-462b-845a-bf7189cc75ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10b54cb1-12ca-499f-8c3c-29afb0781808"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ea31c47-48da-4f10-94b3-076f5b4a28f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7c8bfaa8-3c70-4b07-a08a-6d0c6fd9cdf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb108ae2-6c01-41b3-b10c-f1a60f80a61f",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aca70462-02d8-4379-9de4-7b32b841f270",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9013d197-e075-44ef-8fd5-111b8e3c5eb4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80c07484-672a-4900-9598-080db9fe5b5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "bbc7d2ac-d2ca-4380-bc87-775b04c2d26b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5637499a-b655-4c7d-a995-5afd477cf8b6",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ea6ba11-ecee-45ba-8c70-f9da2677087a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "578a9365-2f98-4925-a941-270881bc723e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8f1dbae-f110-47e2-9445-ad63cd765cfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "d7c1c121-82c4-49ab-9d0c-c0a449fa4bf6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21762113-247e-413f-8a5a-d485dd8f9b40",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb44814e-b9f6-4a53-955f-b986a346c538",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0de219b-6582-4c38-94be-32390f8e07b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f71858f-ed03-4c3e-bae7-854b15292866",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1c45250f-8009-44c2-8460-c0d432b2f4da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "629dfd69-cc53-4f00-94ef-8db3c57d58c1",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0d149f3-eada-4421-9080-cbaf96604f70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4fbb02d-7238-4f77-b176-ae0b61a2f54e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f5826e8-7fa3-494d-916d-e3fd04048e9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7842a6bb-1620-41fa-ae13-d23372989e02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdcf3878-e432-4e67-88d8-402b1c97148e",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdc35ae2-5f29-4434-b5af-c44568792aca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab97fe6d-c1ef-46a8-8449-7891cc66dac8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5391be69-43bc-492e-9b93-48a8a42c5e39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "db6f6e5c-8237-43f2-ad5c-7b424b269f07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "343df8b3-f009-4c38-81c3-14e7a5b079d5",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "065c0a06-f16b-414e-88d1-8e737d08baee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bad589cb-e74c-4b11-a56a-ce13de79d6a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b999b17-b7f9-41a6-b770-4950b421bd3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4a336be8-e140-49cb-94f6-c234de0a8875"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7ffcc1d-7d35-421c-bc5a-0dd07d0e8b90",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be9f0a04-e627-44a9-9ebe-118d6483fb77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c48982e-9041-46c4-ad69-aa84160064d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62127004-81ff-47f3-bc7b-02692d04962c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "698c03fe-1dde-4ce4-bf47-db4546b9057d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2729eb9f-f8a8-494c-963a-8f1501a22775",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4d9265f-1824-42f9-a83c-b83be617f748",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66e3a291-9877-4a71-9bec-37eee400eaa1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "217f1ea7-3631-4b89-8476-ef8a151a0cce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "fc61921c-6b7d-41e1-ab01-535f8de9639f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f0aaf8c-e7ab-4874-aa61-e24d207567ee",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8437504-6d8f-471f-a421-352accc682da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85860cf7-258b-4302-84e5-9b4b7954bbd8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3826cd14-bc74-4d8d-85c0-2d4dc3aae3e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "cc033838-10bc-47fd-adf5-01ea7454cd6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b91da22-4544-4cda-866e-790883332cb0",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c25ac5fe-0bd3-4063-be64-34c76e41f05a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eaddb636-e10d-491d-bdfd-a752d64c0825"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05e5e0b5-c76d-4125-bafa-4b48e0dc5e42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "f3d30b92-2785-4ecb-a4ba-159148d56d51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b3d1933-7d81-442c-b275-1df32e3557cb",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b6a642a-8073-437b-8884-51eee17d8cfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94f8a1d3-03ad-4eeb-8a0b-dd4914e6ec48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9eeeb912-a23a-4a22-9f89-3184f75803ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "03672ffa-a07a-4690-a42e-77451b2f5fb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4d89d62-3695-48e1-906d-6c9b0b67375e",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e86af46c-9d69-458c-b36f-b77bc8c5c9e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fef8ec22-56d2-4c44-8564-9f97ff7d6f5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62abff66-9663-4ccf-9645-f138cf8741f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "0aabc51a-a601-484e-bd1b-670a5e9cde25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2941cbf5-d4e4-4416-bdfb-a89aa6d0f91e",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0c1cab0-623b-4502-a4bc-18184f21c938",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "99bbbde5-2fe1-410a-b42a-80f3ab9991dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37ba81f0-17e1-4b78-9b38-47fab429ae52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "6db169f0-2982-4a71-a4be-3bb5817b0e04"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "61f672a1-bdbf-475a-a696-78344f5961dc",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "346542cd-4436-4923-9e32-69681d18a92d",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c0e2c53-3de0-41e3-a901-f83401481ba7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "111bcdf0-4df2-4df9-be46-6f25e21dafbc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ef31f9b-e39c-418f-8e09-b4ebcf5f8f78",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "1cf1fc87-0c80-496c-9569-68673408f550"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8709f2a-8e79-4ed4-99e2-077f2c207e7a",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e3c55a8-c533-40fe-b329-8d5f9109ec2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "48e879fc-0920-4f02-b75c-5d7bec3bf528"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17d4d12f-3daa-4739-a569-c7e79abbc9eb",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "13c3acbd-5f5f-469b-b55a-c335be9ccf34"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f15cc05e-bd45-4db9-a903-74ebc0630085",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d0535b68-af94-4f65-a200-077c8ebaeb56"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ba72b0cb-46c5-45a5-8e42-193281405096",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1c984560-7a8e-4719-bfcb-7dedd0004443"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "745027dc-c3fe-4b0a-a7b6-d97cf2c6932a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "667b9d6c-5adf-4488-a46f-385adbb340bc"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "0f376f09-e628-429f-b609-62393a794166",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7ee5199c-72d1-4500-b1b0-a1ab66976ceb"
                }
              }
            ]
          },
          {
            "id": "138e653a-5513-414a-9494-c8af3fbe02b9",
            "name": "Positive Testing",
            "item": [
              {
                "id": "86bf18b7-be87-4346-8c5d-023c8292a1db",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "eeadd422-90e8-41cb-a76d-bbd5daa66751",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json();",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json();",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuance_date\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json();",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "497d63e5-5e61-44dc-90b6-d70f52f132af"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "545ce7f9-133e-47aa-9706-198d703948bd",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "41d27458-b778-4725-a1e1-ff6f16fdda20"
                    }
                  }
                ]
              },
              {
                "id": "7ebdd8c2-c1bc-41d2-bc9c-8c2090be2b9d",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3f08146e-7345-49a1-bb44-74224e03fa10",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c89ed4f1-ac21-4c84-8a31-949be5f5c8f0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "45b8d367-f6f9-4ab6-958f-a811de4201f4",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.id is optional",
                        "rawBody.credential.id = pm.variables.get(\"credential_id\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "beff0497-9042-4ca2-910c-359d6a3388a7"
                    }
                  }
                ]
              },
              {
                "id": "c27d1742-4628-41eb-bf41-9fdfe0358072",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2339e94b-7a36-4e41-8a36-5c5744adf81e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a13c84ab-f0ea-444e-9617-da5475b469d0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cdb1abd6-ee66-4acc-a4e7-09f3701311c4",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.issuer can be an object with required 'id' element",
                        "rawBody.credential.issuer = {\"id\": pm.variables.get(\"credential_issuer_id\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "558efd52-3aa3-4823-8844-70190c176695"
                    }
                  }
                ]
              },
              {
                "id": "2d101dfe-b87b-4884-bafa-3d57889f3012",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6d10c023-13d5-4706-a29e-a72bbc45eaf1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credential_subject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b2e07d4f-3de3-458e-ac6b-fe6defc574b5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "53643a2e-d7ac-4dee-9627-571e7cc12c4a",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.credentialSubject can be an object with optional 'id' element",
                        "rawBody.credential.credentialSubject = {\"id\": pm.variables.get(\"credential_subject\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "3e8b7376-3b53-4e59-951a-f8d1844d9dfb"
                    }
                  }
                ]
              },
              {
                "id": "4ddc7dba-b8f7-4586-b20f-a570394b8536",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "abf9f47c-f241-4f48-8882-39318ed9e903",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "cec43b4e-3eca-4f03-ad90-d6f23d1e52db"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5b584a9b-c054-4a8a-9809-2eeb4751a59f",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.created can be an optional string value",
                        "rawBody.options.created = \"an arbitrary string\";",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "145addda-3f62-4b1c-829f-f4cb704ae020"
                    }
                  }
                ]
              },
              {
                "id": "3a2503ba-3c0c-420e-b102-420026186f1d",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e495522a-1605-4a17-a4f0-0b2c96bbe100",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "857458c4-8e4c-46bb-b125-09bfa586e600"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0551e597-4afb-4d08-a42b-dd5e40c24857",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus can be an optional object",
                        "rawBody.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "a11d5a37-7f23-4681-b5ee-7150bda2bc65"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "575ed62a-ca26-447f-9bd8-f28ddb462e89",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e130623e-4dd8-4811-8d43-80b049295fa8"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "afdf8fd8-24a6-4b7d-bb9c-c390b913f3ce",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c7ba48f7-b45b-4a94-b5e8-7900530fbb5a"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5cc2ca4b-ec24-4d4d-96cb-da435fce9a16",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "6a2f41c7-63c6-4339-8c6a-a97e0ed58f76"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "88795cbd-badf-4301-84f3-48d7f8fec91d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8ef8bfdd-dc43-48e1-ba6f-86c7cd0b628e"
            }
          }
        ]
      },
      {
        "id": "5460a0e3-04fd-4ceb-a6ee-6c53a881fa31",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "dcdbed4a-2451-4bf7-8dbc-5d9b9bd24700",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9467a900-0812-4537-94a3-0e0c502b20ad",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "3adcbb7d-57fb-4ff5-91cf-d30c092c173c",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "356e5e36-0147-41f2-864b-84610aae9674",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "379efd19-0fe3-4aa2-845d-f4ed708e8904"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52c4c934-0fc7-4a6d-b9df-6fc760e57d15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "8e92838a-17e6-414c-a9dc-20edd69f8320"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f027ffe-1008-44a1-8f2a-1110d0448957",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbb8de38-13b5-4552-ada2-34793c0e255b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "823643ac-d63a-4b0c-9fe1-56b1917f17dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89ef55e5-eefc-4752-87bd-2072fdd3a521",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "46b3f255-1ecc-44f1-b4a0-a876d3f5a0e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eeff41bb-1fb3-4267-bd31-8cfec02a08f1",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1209d046-8ca7-4cc4-b75a-36e7c98dd49f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f52f7b9-9681-4e6f-9a26-831281343749"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19440eac-726a-47c5-92aa-ab00167cf5a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1e93443e-ef26-4e21-8a6c-3cff48e4102b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1970f5de-da74-4d7b-8d7e-278c1888ba07",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91b96695-c6dd-4cc8-82c9-d5da6493ab36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e1157d4-cf96-4007-88b1-3181dfbee653"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d9f0cde-272d-4033-9f57-8ef1bcfa7d22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b41a77b0-fa4c-4e4f-a2da-cc7b225bccd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f1a2f07-419c-409a-8d0b-1ceda2200a75",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b91695a3-a5de-4a20-88ea-a7ae2994b873",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "642ee8ef-b7a5-4e31-a4a6-d46095d87486"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48875b4b-d5e9-4890-96ea-b7b290497c2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "656af78b-00c7-4d9c-8d86-cd3a13bbef84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa3b0a70-4164-402d-a77d-07d17d2226d4",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efe6dc6f-4612-48fb-be89-d7cdcfbf6f82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d61b0218-1076-4a7c-bdbc-2b255da6658a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92b5077d-1bb4-4325-96f4-a809f354679f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d5e145e5-746c-4207-bd24-ea63a14c4797"
                        }
                      }
                    ]
                  },
                  {
                    "id": "746fb200-5519-43c8-a66d-4bb80ac23dee",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "630689b2-21bd-47e2-a3de-d60d5f96839d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8004ffe-cf3f-4d4d-bdf1-ef26a1794daa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92be039b-a253-47c5-9925-ac7f01c36b90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "ad6a81de-afd0-48c1-9a85-24d1c2ac9f08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af434884-c295-49fd-ad0a-82960bec5ab8",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52efbf9e-d0c2-416d-8d52-f4c0c3ff4d14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b66c823f-9b11-4f11-bfe8-5449e2bba642"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec056dcc-7ab2-40ae-82e8-9b4553896e77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e50f8779-2ca1-4a5f-8cc3-73775f65961b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67800616-6004-43c8-b133-54572e8355a0",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48ceb4ac-2f55-45d5-b698-d4b9c38d9316",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f364db0-3895-46a2-9230-373f3ad6d5b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b44a3f5-6c51-4d80-978a-12a801cf1a2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "22e3075f-f3e8-4212-84bd-d7baf466caea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c490d68-5c1a-4f2f-8396-301b51a5b2e0",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0c7dc4a-acf6-4a48-beec-6dbe5e85be14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12eabe96-8629-4d96-863d-94c10177733c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "432edd71-ca2f-46c4-9e72-15a75538af36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6a45eb8f-5753-41a1-bd22-0367599dc2d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f33ea545-723b-483b-bc5b-bf3dec20dbaf",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31852cf7-c880-4f87-98e6-10f306717466",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbd89bc8-eb63-495e-9971-e31c93cc31f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5d928c7-3d95-47b6-8002-e038d8a7782f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "4b592906-8780-473f-b0c0-b50f9283842f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7361c40-ff56-4b91-9e86-60c8d05d322e",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51b841cf-dc6f-4a4f-bc57-2870d6f1d8ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2c1f08b-b50a-4bc8-9f91-c8822aab277e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6dbde2a-190c-40cd-b82e-d3ed87adeb6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "980bd534-8269-4e06-9d6a-6c51734f045f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b9f6f81-dbb4-4cbc-aa77-9789d799565b",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e474542-052c-4707-be07-bcb17eb2aa5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55a2c042-41f5-486b-ae1b-8917c4632150"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de5a81ac-7b21-49f8-8fda-92eb10bb4157",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4a624a8b-3a45-47c0-964a-666f847c7e93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5a669e2-da03-40be-a905-aa8b93400205",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "344c20b5-f1d2-4203-baa5-b7c00e494d14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2dada304-e43e-4005-b3d8-9d9713963dce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2aa60d3e-4d1e-4f89-88ea-beedaeb4ae8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "de0474c6-8854-405c-9004-5a3b61554663"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c16bc17-a82a-4912-84cf-16ea9e389bb4",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13de5ef5-9a1e-43f8-b69e-e13c71f010ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72bc6f05-8f53-4ce1-9516-ea702745cef0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee5208f2-46fc-4572-a992-71da8fed7d37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "0999b1b7-2d1d-41bf-b7bf-d47496be9a94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b173e0cc-6b3f-4676-a5c3-b617d14a9196",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92b2e0d6-6dba-4da9-b2fb-39725fc5751f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49f9ecbd-267a-46c6-ae9d-6b47fcb9f60d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5298a58c-e8a0-4cd2-a69b-e2355e0504fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "6d3ebe36-d359-4811-a1a1-9bef2d64e089"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15a439f1-b6a1-48ac-9048-32f32d63943d",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "229f256f-9f9f-4b50-9577-d17b11da1bb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76a2d3d9-3520-444b-b03b-4bfd2c7ef650"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9d83870-9c76-4529-b245-b4f7def0a74d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "06bfd134-d2d1-4ba2-be22-dbb1bec99666"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a03fb0ca-18ff-4d4a-93ca-bc16b5f57a71",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fa598af-24b5-409d-b399-1ad3e4a4dd45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd364674-ece0-47d4-a34b-2dc9b8e065f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83198b78-2f79-445a-806c-28de85677a2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "5cffe16b-4ab1-4d50-96e6-6e99c4142381"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12a4dba5-f754-4a00-8461-08b62e8166c7",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e246e086-2808-47f4-986f-2db7975fe8e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a4c9322-a31c-46c3-8d49-d2077c9c58fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70a32b87-19e9-4f1b-925c-61a696d62440",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5101b28e-eb1d-4445-8363-cfbe2b541ce2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23135d78-5724-48ed-b05d-3738be733560",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70061ed8-aecb-4db7-98ab-21ae58b5e3d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53c5b2b9-8d72-4c1b-97f9-d266de6cb239"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2c72b26-4fb2-4397-b4dd-1f114f6f1601",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "494f91a9-c1ca-4091-8a85-8684ebae0d00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ff20af7-0d81-4802-aafc-f4d905fe544a",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9da345d0-d8e1-4c9f-b9b9-735b5c78296c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20ea3d8b-6689-4258-8b1d-ea38c0ee9c3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f219041c-a47d-4648-9d13-f0f95330d0ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "aff35add-7c8a-4e47-842b-622d0a13c842"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89702f6e-bd21-4f07-93a6-376eedcf739e",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d185b9de-d7c4-4bb7-aa80-00577503ffe6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8ba79ad-a08e-4e6d-b210-fc320f3bcb75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "584970eb-63f8-4dde-aabf-ddaffd7b1ecf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "031060d3-f299-4e95-bbc9-cca7240dcbb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff99cde0-9e70-44c9-b037-4892f48e430d",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b772f97f-7383-4c9a-8249-821817d47fcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6d84866-ca91-4958-a236-eb08652aab3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26eb4a84-0e4e-4970-bc83-9bf9730218f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "06d6aae2-b17d-41ef-8a76-429cef049750"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31e5d26a-6545-4e4a-9ab8-71fc5fc52bdf",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44f1084c-6f13-4ec0-bfb5-bb3f0b71b21e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec458eff-a6ab-4ade-b7d8-9f27b31498d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b664f15f-9040-467c-921a-033717488996",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ab658c81-3600-4a06-be07-f8b0da4a3469"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04b5c09a-9963-4bd3-9d73-7133a32d62f6",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d59724ff-dce6-4535-a285-8112a37318dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e4420d5-1021-4aa0-8cd4-7a811e3833f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f883ce4-e545-444e-9325-82d668f31a60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c8216ccb-843d-4ee1-85b6-e278fb261b99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e200095-e746-4710-89a0-3c85c06a61e6",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a71f1134-74e8-43f2-87af-bf44f73b2037",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4925c9d3-73d8-424a-b93c-b0d95fa33d9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcdcd07c-507a-4699-b695-f80e22a53ede",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fcd224b0-086f-4f4c-a391-a93b03b671b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51836300-aa35-459d-8e06-48687a6dc606",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58bfbdaf-dfea-4ae0-8eac-89e84a0b1373",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a8b43a7-908e-4a09-ba03-8ffde50130a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5683dfcc-b0cc-4d79-9c3b-6b376b93e0ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e9fbe777-f12a-4aef-8795-8ed62a75738c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f8f15f8-74a8-42fb-8d97-d8c1298b55bb",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf355af1-d962-42ca-86be-34a7e8be71fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7fd7bb18-7863-4541-8d8d-5a875693619c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbf7dbf1-5c1f-45ba-9efc-b50cb3001e18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4b88fd8b-5647-4e6a-a9b1-e5f48f06d262"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d63078b-10ab-45c2-aa12-66a8fcfb9a6e",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64ad2df7-62a6-449b-921d-48cc66bd5db4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56851987-18e6-4f3e-8aee-7a274a774cf8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c188560-454c-4960-bb64-961a85dd5911",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0d3b5015-2ae5-4a69-a291-d4d1be0f98e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c5b8042-d779-4676-a932-a569e732662d",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "059e8fb8-c0c4-42cb-8c08-1ed40a840356",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72222641-abc6-4328-8dfe-4f91056d9c33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "042ae76b-c3ce-40c0-a716-d71f2d6c422f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "704fe0e7-304e-4ae7-91a4-2eb7d092d743"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16789499-e593-45dd-9868-5663f1dad752",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b66f5a4-67c6-4f18-a15a-3c5474549217",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c27e37c-b334-4a83-80d0-a29a17366f31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76913f52-4cf5-4ed9-bdd8-11115f0315ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e9ca6cc2-28a0-4c67-93a8-f25bf8393f26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e11dc014-34fd-4fa8-9a62-14187d444d20",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fabcef8f-a61e-47df-8561-fcfa62d50587",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbd2a99d-e4f7-4b5d-b0f5-0e26e97a9830"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "facf78d9-12c4-4b61-8224-7e210b41daa6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f78f185f-6c52-4cf6-a43a-70e74eb47811"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "cd183929-257a-45c1-bc4e-c9aec25c3900",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2de86286-0ab6-4948-898d-53b85cda74f9",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "723521b5-8950-4408-b615-7cb083a1be95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4aa37fb5-a48a-4fa0-9422-4713a15807fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25029a6e-7551-4d80-92d7-0dc4a0f4f496",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "62342d80-e15b-448d-a17d-55bb17e33f1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4980dce-ec35-466a-b422-3b8d3e8cd38a",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b664753-710f-4da9-b69e-b83826bd44be",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "5bea6908-7fcb-48c1-bc81-697444d6b033"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b898441-dc4c-4dbc-a0da-7ee65725eb71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0ea9d8e4-9c59-49f8-affc-91ce0b05efe4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0e56a3db-f9b2-469a-9136-988a5f5024a1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5d2646f4-1202-478b-bb3c-b70197a83517"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7001d355-b664-47ca-afe8-76b4d70302a5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dce69065-dcda-4a8f-bcb8-4e175bd01ed3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "45e98e69-1bdd-4e1a-85a9-da1722cc60a9",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "78df16d5-5c23-4760-aa99-f834363ddc1d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a7480d3c-eeac-49df-af16-fff60176910f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "60a4b002-28ac-423e-a8df-84907d7f0e8b"
            }
          }
        ]
      },
      {
        "id": "c6618787-222e-403f-a95b-29bcba742a7d",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "e29c82b9-b83a-41fd-b2a8-4e52d18bb441",
            "name": "Negative Testing",
            "item": [
              {
                "id": "924eaa36-bb6d-404d-972b-6240402f3e0c",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "39347d89-ea5f-42c6-b970-7d086a5fc36a",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6cb5a47-bd1d-4e22-99f1-3d9832be4ec4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a5d78a0-3513-4fae-928d-9090610efe20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37a4c0a9-8584-4441-a400-8422903a3a44",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d501f83-9dce-4f29-beb2-746e509bc339",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f0d51af-613a-4fff-9d7d-6b73b91f0fa6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf84548a-e20b-48b3-aff6-3420372fe20f",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8caa073-1975-4bb5-b2ec-443e111a4af9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e0a73ea-87a8-4631-af19-6bddab453ecb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f2ba8c9-bedf-481a-802f-e6c1ed2196ce",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2082fc28-0bd2-46d0-b625-424c20892d1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e95d32e4-89bb-498a-bf0a-f0fdb42e30b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5797589-04a0-4896-b888-44b9213297b4",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcbc2ba3-3fe6-421e-a7e3-61e23a637bda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a17a7a3d-f68e-4a44-9894-5b3470d5dd86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b957556-ea3d-47aa-aee3-6660e1a54d24",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "265bf617-5898-4c56-a32d-7db98b2d7ab4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5a67cd1-9988-4069-99d7-a99816e8c6f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fea79ed9-a4e2-4d95-87be-5b6950ecefb1",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d93e821-e1d0-4869-8891-2a6e5f34556e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7adae13-213c-40c0-85cb-b32a8dc54dda"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "967ab8f6-7cb4-4300-9e95-59048304730a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6592824c-d6dc-41ea-bcb0-1c008b3a2bff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8c7a0c0-11e2-4b54-9030-e6fdef9036e7",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0fe8595-f6e5-49dc-b72e-3f19f12772bf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "04f38bdd-7b25-4e4c-b4b5-16b47202d4f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53f51f1e-1351-49cb-a094-75eb860eb124",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8665feb-018a-488d-9753-def64bf20398"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d64f8694-34fb-45ae-87d3-2d11b9b8b27c",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c5a1211-e237-4346-ad9e-ceb84862a507",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f7e9b24d-d040-47db-af47-e7ada21a9584"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "258107f5-3e71-460d-bd0e-be65c6641005",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40805d3a-13e1-401f-af09-b07ef4521ef0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6a2ecdf-f87b-45d9-86b8-06d2cab8d8c0",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "539b7d20-1ac5-451f-817b-82b831b99a67",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e4a00da4-a55e-4c78-8541-39013dbfc537"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5033f7d8-5b4c-497d-b942-eaf46dd79860",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87d318cd-366b-4519-b7f5-cdde0d10ba43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80f9fcc3-d869-4949-955c-d492ae60f744",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..zF1sQbNclnV5pE5MfuXqMaTVBquwie4ctwzSdbC_LJ1Lx5qRK6V-y9wl5oTvN_GpuOvMIvlG3kQdjgqL3GBKDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2f35388-ec09-4c22-92f2-8cf818007340",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e943997-b49d-4987-b1e3-99f367cc3b6a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81c4245d-e747-4732-a73f-b0703124cb6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1547522-ce20-465a-a475-caa3b84729f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf79ce42-2765-4921-b2ff-8b905d575ea2",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ec135e9-0fb8-4375-abd4-3b9a953c56ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfc09dc8-b5c0-433e-af55-a73a11ad622e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f855c96-25b1-41c7-801b-2aea033a36ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26c1b24f-f203-4978-8f37-eadde5b8e78f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04f2b49a-bdd3-497b-88da-7b8ef07483e5",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f08b1997-ba13-4e61-979a-2a0803073f93",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ea669022-9b9e-4b69-96ef-b3509b971299"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b185115-7cc2-48e3-9f68-7108d4e29880",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71f7f049-8e29-495a-869b-98d09f99a0f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c357cd34-2085-4bfa-87d7-6fef6115e5dd",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cfa5925-5155-438d-b376-0f6ed90a006a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "462be91b-6041-4f5b-b592-4bbf10eb936e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17a5a8a0-44dc-48a3-9e71-94ee9b43b843",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "174bca96-f486-4d65-a22c-d2567619d07f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01fb65e9-7b5a-4e1d-bf3d-f98e0afecc6d",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8da30eeb-3955-4897-b7d7-a1400b35a125",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "54d2528d-c029-4506-9b00-70acfb7a4bc4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b604a82-ef1f-4ea2-97c5-d39a393b2490",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d830d696-753a-4f54-b439-842b6a01bf45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b072038-0e33-427b-8cc5-20fb80c75e82",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9e8abb6-546b-4ba8-8fba-a8e655dfb58d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b490cd6d-6d98-4ec9-bb8b-4bb452920188"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d4671b8-c9cc-41fd-9595-b4b6a3076624",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84a26fa7-a551-434d-b298-a105d754be6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bd2942a-9974-4d7b-b1dd-6d801af92e0b",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b3c5df0-9cdd-4209-bf22-ad533817dc5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c95acc16-4b49-4035-9218-76fba7e49e75"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70d9b82c-1126-4d5b-b807-8afbc16e47a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6fb3910b-783c-4d76-bb7a-8317580187de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b81a6c4f-aaa1-4f83-8e3f-bd1937883a8f",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1b28e6c-049f-4dcc-8c6e-0b1b69793844",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c855f5e5-9369-412d-b221-c95b691464dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b312c49d-a4df-4faa-a848-e553e4e55149",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d695e6c6-95c1-44c0-ad35-ef2943819cc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f137a490-6238-4a02-ad37-900fed3cd378",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": false,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1578b9b-dcd9-41e6-8a4a-54b6149781d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41545a17-be07-4bbf-b741-519e57603150"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d03c888-574c-4096-ad58-e05c65c6874d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b756006-c200-46e5-8ab4-d5190faa37e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "178a2fcb-47c8-4ba7-a03d-7bfed79da36c",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": 123,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea4fac68-aff2-40d5-ba19-0fa38c21b9a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f35e042-e8e3-4d54-b5a5-9a7db06d7cda"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ab1751b-5c1a-48b0-a931-46378dc87dee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d97b7efa-c2f5-4213-8f4c-8133e05c2b0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09b6cbe2-4208-4fbb-83aa-95d4a8b736f6",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": null,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f804b40-28e9-4be3-b74c-81c11c36bb0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "beadd853-9cf8-4e50-bf68-4bf04fa295f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b8631cf-69ae-4163-b65e-b20714784b56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43abef30-7348-4ad2-b3ca-ef22f1c2a3d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "126ef75a-1258-481a-b84d-9463cad4076f",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..5J-iTBtI5WNIe9L3kLF22cjjDx6iQuJAgl6yYYoIGMC-X_crKNlSlB5bRJsrb2MV-NDlWMtHe0grtMqRG1N0Bw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da8a85e1-d035-4000-92f1-e9c7e15e3c9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1109df6d-14eb-4dfe-8cb7-6920475695d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20c0ee5f-4950-4992-b43d-57a3c47d19b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64b0d0bd-d271-4295-b14e-1fee4a3965fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66956b66-a502-4d88-9750-8c45d89071d3",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f47974f-e0d9-4d4d-b374-233beafebb6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24c746dd-d90b-4431-98dd-f87e917d2d3c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0b9327e-f2ae-4e30-9b3f-0920fdde5ee7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3383c51d-3df3-4ea0-b289-9198f1f38adc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fd0a270-1c14-41c2-b1bc-09a1bec5ffe3",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9e0e72f-72f8-46b4-83c9-46b4b2059736",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aecbc90d-5035-4928-9d2b-7dc5efc1193b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6f2c6dd-6357-47b0-a0b9-c0699186e208",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a829b09f-cd4c-4d92-a0ef-edc1041f2f56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c00b6b4-d2de-436d-af6e-a2353a96e6c0",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f44ce48b-5eab-4c96-9071-03491d8c7670",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8db3b445-cec3-4913-a6b8-67d420693192"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ef5df8e-514d-47cd-b69b-ecf9dfe58a36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32cb1a11-b731-4ea5-b460-da6e8e25f64e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53819e9a-f867-4180-a4c4-bbfa8c04fa9d",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9aa5b56-b855-4de6-8e67-664679bd58c6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5b7b4262-941c-498d-8013-4477f9efd7b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "baf6234a-2fd1-40e4-b8f9-abdef4238b61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee8bce9c-ddeb-4e11-a0d9-214b5ebdbec5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14ebafc0-3b9c-4c9e-ac32-67546b766888",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b545e88-2b37-4646-a000-b98ff6ca4dfc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "43dcb2cd-eed3-48de-885b-6f8900b7298e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4609bd98-e20b-4e67-93a5-62faac21fa32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c583bcdb-b950-448d-bbe7-9d1dcea18e61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2eb3d0af-71b1-4e29-9da2-01b22418137d",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b14655ea-78db-4c9a-92dc-f625874e8cc8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2456e31f-97e5-4f08-8ef2-a1fdd32b282a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58a0774e-d61d-4de1-b63b-fed62213d7f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d34fce5-6486-4863-9b05-bade274e0228"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b74381bd-a55b-42f5-8dd5-67c5a29669ff",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61c3aecf-6c6a-4570-8936-00809bcf21df",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "21fd36c7-34cb-4eb5-86f6-6ccfefa2ec97"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd7071a9-db2c-4f50-8f99-c31c88d83e13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "207222b9-c89f-49fc-8ca2-42117fa3533f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "010166a9-de5b-4f97-9318-532edb9e877f",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94794234-3bd8-4512-9023-0bb097564b7b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bbb61035-1feb-4b03-a5a4-68c22aa10aa2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1635e3c6-04a0-47e9-a674-3cfc59464891",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "209556bb-76f1-4cb9-a02a-57d53038c5a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb14b194-da88-4361-909d-ed114a420c7d",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "733d4ec0-623c-4d38-b565-fd0b75c1e0c8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "71d2b20f-8a8d-42d4-90e8-3132767dc22b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5943dfb2-a50b-4a25-a81e-28d50d7d2f8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79026cab-1e56-4b4b-a75f-53a6f53e71f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ad0bf21-01f4-41ff-9450-7a88939f4b09",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a3382ec-54aa-4c55-a4d3-041c82148161",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fe37f1d8-0ea6-42c0-a74e-3678b760c786"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e188b898-a698-44d6-bb85-86d2f7ff57c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af92dc44-8fb0-4b91-80ed-d0b3f1a1755e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "907daf07-d511-4795-ac32-77a39590e3fd",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "721546ef-c119-4d85-96ef-59a8b7b4a0b3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7ff49bb7-3eff-43ee-a6a9-abc4a0f945c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "026fad91-c088-417b-97a7-8b3aea85ec0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a8111fe-2904-4b3b-b6bb-7a8ee1783095"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1cdb86d-4129-4b45-ad45-2c68aced2947",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41690d62-3f81-49a7-84c2-82569ed4e352",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "34de7f63-4256-4b6d-80eb-74f1fcafee2f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fb21165-f107-4cc1-9dab-d35dec0a75bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4138dcce-46ee-490c-9515-653b857bf2f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ba79842-bf16-4dea-af1f-2b109d9e7c25",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2170e2be-26f4-4c23-b890-74e320cb7d03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "402788ad-0d4d-47f1-b009-d264fc546a9d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c469ee0-a3dc-4355-81f6-3181e518203e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e1b5b93-7cf6-40f7-92f1-4a0be6f7bfba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f0baf9c-10e4-4a6f-b492-6d8bef05a905",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x7a3s_8HfmUqGT6SDkktN-jeRmBR2xQ_9tOhJx4kEG3SCsRTySfDxya9yy57LNv__qbY1eMkm9SNrwdYiqlBAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "203aefd9-f7d0-4490-b382-1a454703c0f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ce93c87-ebb4-40c6-a8bd-a1a536be363b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73a6698b-f7ff-4788-b1ae-351e8743db86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b02bb87d-5c19-4eda-8684-95ab921337da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efba19a4-0945-4eba-9975-c14f5151432f",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mMaPSvG48oEf3bv0t-6eLR3zvU3_BKoRIkgzkuZfm8zvjqbI7iy05D8k1mTeoSZEw3xYV-_sH1rChqGmmp7KDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e226b63-0716-42ff-aebe-2e053e9dd3a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15346bfb-3942-422d-a4e9-da826d0c532b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb90fdd4-cf43-4573-afb3-4d9efeb0052c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da41c183-65a9-466e-9b17-603fb1ec4f88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "399a5759-9265-4f16-9f19-147be0cdd47e",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..rAVfo-Gnj0vUX6yDAr7pslI6XAAyF2LHTXpiZEmnH5Hb4RsKcmDZZawaLSCg931y1cBUgZ1PQvGbJEdb094ZDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b560a082-abd6-4e38-bbb2-59be66974603",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2257e970-2aee-41ce-a3e0-296e685cf91f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "387495f0-3749-48ac-bb44-babe1a4c5c6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0503c294-353f-472c-af2b-da5829fc2505"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a7a5080-065c-4e73-a093-ce88e7d8430f",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "415c8ce2-1f60-4991-b533-fcc6b848fab6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51615cd0-f20b-4d72-a11e-720e63b1baeb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9da1273d-42b3-4cc1-ab4c-32bf32d8aecf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10c0b647-6c2e-4871-94db-a6899092009e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5a5abd0-f738-4f8c-931e-e54b9bc13a15",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62e5a07e-99db-4f97-a642-2768c4fb65e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6963c7a-0f87-4b58-9ccd-73368cd416a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7abb4e9-dad2-4ff4-95cd-85ad83cdae20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1dfe171c-724f-4bf8-b2f4-ba4415011376"
                        }
                      }
                    ]
                  },
                  {
                    "id": "876a7808-26bf-42d0-bcf8-0f360bf91fda",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..vv4qa5LGRlgeMxW5G5VjEKDfjKKosQnvpx6oapYDlfUSWVagQsDoDcRmkotKzFHDcTh-opjGLp__agL6_d4OCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d82a69c-d869-492d-a11d-67aa17822631",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f5d7679-9384-4d4e-8ab1-2217a26d3bd1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e720ccd2-6df1-4ec0-b867-f1be42375a0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "489a8983-3532-4b62-9d07-259e8c8b8e08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cf72541-6ca2-4c87-803a-9257c2d7d944",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TTwcmWS6_0_t8XPlAGXbzWVSL_dL7OeYojY0FZz1WXCFvDfeAQtMh3dcIxuCeDqON6St3PODGfxluO_q1vWCDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ac0ff28-a26f-438d-ba28-81faad54f480",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0247ad0a-ee34-4779-bbda-a9452447b91e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb378bbf-f07b-41bf-85dc-316125f15e65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "383db811-db2e-4e6f-a707-c208493faf77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6152e231-56a8-468f-b098-43b15b80b371",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..wpkNYYEOCjKMWm9xTYNn0J7IgXZQbbkEoohMQbloz_Zxb15UVu6DqiqsENotAeHvlRWd7RH2O9v4FwWBeqvPDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b02d4d0-4b77-4938-ad35-95f36355d149",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74aafa8d-bde0-4ce4-80e0-adeb0202bf78"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f164e7b-21b3-49fe-81bc-4efbae9e8a8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58176073-822d-4bb8-93ba-36d6c5bcf942"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a35b5ac0-1119-46be-9118-37012f9884ea",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6273ad5a-20b1-4a0f-ba85-56fe89fcda03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19bcd8ea-128e-49ff-8315-0d08424cff8b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "167af806-575c-437a-87bb-1d4554180b87",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a57e6c3-9185-4a3d-bea5-41c3b98bb2a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bd67b2b-a55e-4ba0-afed-84931407e594",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHJmwuqqXWMdd298m7RCTGyGoAzsCx1y9tewaHukqaJJoPn2-TLDCQuXvlnFeAYAE_Cy3j1UScfoVx5k-eclAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d726474c-8c9a-411a-948e-be4de2cdd659",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb363c8d-d693-4042-ba61-79734f6aec1b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec890944-7d0a-4ac5-b156-0a0169854c42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8aba50c-9892-4552-8e32-098ab2e3c08a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15dd7f15-1f3e-4dea-9558-bb693a7ee366",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80f1919e-ee90-448f-be88-bccb84dc692b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05118aa1-8718-44e3-b6f2-be31c0655ac9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4ce26da-573c-4a1d-a9e8-9d2638f7cf95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "363e2928-43d0-4bd6-b9db-372bed881acc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61289c0f-5939-4454-be90-23b06bce0bd7",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..OzKfWk00QpV3_FJru3xJ3_ktwlU4O68prZWWCmdy3mQTbCz2lPFRl2sB4AkdD3AZUFMAnwxhscd9B0UnqxTZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38b98b8c-d49c-4b64-a33e-a59c40f123b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e12d5335-5d12-4201-a817-21f47bde7df2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ff87b2f-9c7e-4565-985c-1245d40703a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97d83ce7-8ce7-491b-8add-1a377c8d8d63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad7e1160-3780-448a-8d1e-fdf95a510729",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1W7WM5cXb0daWooGxEOYn_zm72mkmpF_tu8Fij39luQwNGDgK7h4nZGBFcS80HTVqiBKxzlhGq1yNnpUlLG-Ag\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c310687-3343-47ec-8954-f8448c03f8de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04bfe3e7-7350-4bfd-a398-49026eaf9d26"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f58e7d8b-5881-40db-8899-53eb007371bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93e30d54-27dc-448d-a1d1-07bff0b86381"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac9de52b-c11e-49a6-b504-1479096e312c",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dkiU2sStrvQWiNFK8cKmCbAcRGsC9kbDdKyr-NRlPc9ORQczitwUEymjviemIi1Oot23VohpyMcSFvgFIKIFDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "865b86e0-507c-4217-b451-80f73eebaf3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd634430-8e70-4ffd-b2b2-20123548817a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1a5655d-1e12-42fd-8ad2-fb027c06054f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "648e7828-f11c-49fb-9ddf-fbdc96907267"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1befa12-da1d-493d-859d-bb2a061bb247",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dd4f75c-5f93-42c2-87b6-5a67ace0c74a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d5402b4-b62d-4024-9994-6dd938ecf8c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01ca0c95-ff9c-4d64-8f78-763f11992913",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "acc65a57-2533-4846-b3d3-bbaa209cedc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6b5d56c-2433-4bc0-907f-440a79e4d099",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pNIbeUn6DL71QxEWTF1wQTqKfAJET5JB9FlmoLXk4-rv1owG68DqQY6qwcPx6fUbMijsWsXlvaFvzND0jAg1AA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1de5c16-108c-4599-971f-b5d748e93d57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a312ec08-0ad8-45cc-86b9-e0896b317324"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4489253-0b75-4c91-82a6-21ce3ca17bdc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f643e81c-3ccc-4b73-906a-3b1eba6db9bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e44f6f7f-b94a-4e5d-b57d-8bd889fefc9b",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z0P0ndVABJRB7mCsv4C-EgB-1SxgnfrU2uQBDSwKm2KfB1jBnzsEzY9enxOn7V1lBAPNxELTEaxPCAK7_n3bBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4600f6e8-7d43-4962-8432-833649fa50d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "857f502b-f2c2-4a93-bd40-e89500398229"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9b55413-d3bb-478e-a1d9-03aaa10d3321",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3591cf56-a6cc-4aed-ab86-6d1f99b8eb64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8c75428-eb38-4486-bf70-d733cc87cae2",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcd69d91-def6-47ac-aa79-2793758f8184",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13465db6-b4b1-4e37-92d9-777e57b6ebdb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bc77a62-89f0-4453-86eb-b9a631931350",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4c98848-543e-48f1-9e53-d8abdfc54f52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d1ee8f6-c590-4a8e-86f1-6a6ff775d14b",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7dd5da4-ffdb-4224-bf50-491d21ab51bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5bb52d8b-9174-41ae-83a0-f7597659a522"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84b576a8-e4ac-4971-aca2-f24f01351b55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f635233-e7c8-48c6-8860-822fb5edca2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0894c1f7-6487-4ff0-925d-979ac66ef948",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..IXaPbANtKFiA3Sh28esCkg9kdwpHScJg3bOCF7Phmb5n9RC981EeIobgDnMzWIjP4v0S92FDEcZqA_XbW43GDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52234f87-db65-4869-bc80-24984fafe99a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2d276df-cbc4-4951-8f2f-3dd5e2a67673"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3579ac85-b8b5-4d93-ab4e-260394436187",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2b8decb-f7b2-4eb1-916f-3b0793b56cdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70fa2e10-1912-4232-9232-4fa24b7a97fe",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iM5Xr2lBqwFIQhq9RI7Dv4K0dzdQ0z7i5YN4ELsstv9vDC9xA-GY2Ft-PsfubsbgVyQsQYjchCv23GULmhauCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "172cb06d-48b0-40d7-947a-3f4728ba51ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "079b54fb-f5fe-45a2-b6af-e5ef9ba38a6f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "406a1a17-10de-41c3-93fd-e8df4e43dcda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6394c78a-8918-4603-b115-ab89c4eb3844"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b731c7c-ee0a-4d69-98e4-e44c37c290ec",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6182db97-c294-4969-9bed-30cac0e4656f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79a12e77-322d-4742-a92f-56a1d107537e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b03dcc50-3def-4619-9262-ba994f2d8803",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a057200a-8a5b-4917-b84d-644d20fd4b45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f0a3bc2-8b3c-4107-b447-a19e10dec6af",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57350d68-ff72-47e1-b120-69c8e6bb486a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f77b7e0-f73a-4d6b-9e44-2bc4d0f7d3a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dabeb1b5-0d34-4d9c-baf2-8f9738c89574",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2017ad12-5116-4745-9b7e-1d8e89933b6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "333df7b2-4fde-4216-a199-aee7c544aa21",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..GBcSurXcOJcVinhthkmqvV40OS1rN2fY57Kad0HMLUuykp14JJCtNw_gmtf6SwZxhB860OVsUmuNbZXsMCi-DQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8acf6e2-6e31-4be8-b53c-9455bc5b5d3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0c14520-e808-47c2-94ed-79482e89f404"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e6e4d49-508f-477b-b1e4-686f1754eb57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4c5d180-dcdc-4b6c-a599-c9ba95379440"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e8c8fae-2c18-47e7-a1a7-681afd12ca40",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VWowmcXQAjabeJENG3aOcLzQ9HrvmSIs2pOWcaEMLdJtvJfP7oWohIBiqp94-eo1pd4Ocgk3hT0cLvS5qKBYAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f090ba6-3b78-4a32-9dae-82e59735e072",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc120ff1-ab5b-41ba-a4f6-d3f0a117615f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "541f41b0-679f-411b-afcb-7f5e9d13f20b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29806089-8b7a-4e5f-a3ab-5b82f55ccfdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb87c997-f0eb-4743-85cc-e3eb2148e545",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..-awe55AAvkjymZEpagD4fdSQk0uCGFfjyFwg7upmg_CISWk12JfezKe-N3hjTwYKCSCjScynLGvlH2x4iSgbDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43a9d6d5-7646-4173-bd0e-b733560f3dae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa631aca-c96e-437e-8a3a-a55375b3aae2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63ef9b6f-b201-44d3-bfa1-4d4e6e2b6ca1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f7ccf78-9c40-419d-a3df-9752f976b47d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cce517d-5017-44c6-b696-be2fdbe97244",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..NDwZvVUWw-xG0zU8VsWhiXPWrYycgK_zwN8zZts05DTw23rOTd9IOXQxqhEMzo_X0c25jzowIbpDfEFxqfmnAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ad02acc-9e3a-4294-8576-ab81f69e949c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a74d1fc-0823-46b0-88a0-a51f2067f6e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60a391bb-0f3f-4304-84f4-4cec887891f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "852d191d-31ba-4708-9f50-983dd1614cc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10f98e4f-f950-4d79-8bc1-902449340b4e",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..y_7VEjN1ENYoedOrj2jsIqgL7FSYelxGgFZD5ckqKvSDM5BVEWiEctD24BWppCndRR7WR9_1ByBm2F1yBSaoCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ee8ed7d-f75a-40d5-948c-39ef3b80ebfd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c66e8516-84f1-45e4-9732-7fdf01ffd6b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cd001ce-c4ce-4668-9a92-ae8cef8a6968",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d71d3f2-58c2-4f0e-9b92-c56d8195b395"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37cd2f13-4b45-4d72-94b7-7a00430a10b6",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ce9c50d-d4cd-4558-93ff-f066ad21c3e3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fbec10fe-d402-450c-bc0f-dfd56d988253"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2f6ff4c-214c-4ef5-873b-af3827470fa2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9336320-2662-4011-a75b-00cf509343fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59c5b217-6721-4402-ac17-820555360067",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69b6cd49-d705-4507-a5f8-16ce052f3080",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "03e5c211-fcbd-46ff-81cd-c4cb92f342d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "817edd65-b600-46fa-9647-fdef144fcd92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25f22a7a-af3e-454b-af95-120c47e265ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bb2aea1-c568-42b7-995a-902a66e36b21",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dc0ff53-756e-480d-9f93-59db84bc04c1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7b28c2f6-4876-45cd-8a7e-9cb56fbd68dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c684a01-20ca-422a-86e6-8b78586caba3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47b2761c-1d9d-4a1e-a90b-5a070ed32259"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d41ce48-6e86-43e4-b10e-7b8dbffcd288",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d40bbcf-2f6e-42e7-9041-c7fa0f6f572a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1e73fe56-0a93-4fa3-b8e1-864fc7f176fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3de6b899-25ba-4df7-8865-84a9d7f71cc6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "424db125-802c-424c-b664-e01d1a27eec0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b9545a0-222d-499b-931a-66c385c4a96d",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03279438-f6eb-4ebd-b58d-9ddcdadf8921",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d9f9592c-bed0-4cdf-83c1-8c436c0cdbc2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "012702c6-0f15-49a3-a08b-640978e27d44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42070811-daa5-4b2b-b378-2838c48acc4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "324011ec-42ef-46ce-824b-95b75ca26994",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afe0d7d1-f5b1-46c9-8ebb-8d96c9a87b4e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e55b59f9-aeb7-4062-95d7-5b7d49a5a141"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f63fec7f-ccb0-43a1-b9d4-f635591bdb4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb374aed-4f8e-4b92-aba9-39b82cb70d0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "948bfdf6-ecba-4bc3-a7a1-a251772ff429",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d78bed98-0a2f-489f-ab0a-ab391045160f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3694df99-e427-40bb-b407-f8e05428f1a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1eee2608-4161-4d04-a0b3-d61948ce9428",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d6e2410-74e8-4732-bc5f-0afc6eb5ae50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86d98f5e-c3db-42a3-8c0e-de3c8ddad280",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49bf2d17-b4e8-46d7-a8ea-1598a70ec2dd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "017f26dc-f7de-4ff5-a5af-38ba04d1fc43"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07d9a23c-a24f-41bc-afa0-c70ea363500c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4d7f324-f2c1-4ea1-8d22-67157da136b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "511f56a1-055b-4d28-b027-56544b234555",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef28bf5d-1da6-42e5-9960-527cfc45b47d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "474d92ca-dcad-4755-b762-3f77daad521f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81310b74-beff-4948-a196-d87b2f6e11ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00287c8f-74a0-47ea-9a6f-bc444b6fd1e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "326e7757-436b-449a-a031-b36c2176eb11",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "753b68e6-b9d6-4bf6-a3c8-ed6d76fe2ee9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a13e0bbb-39d5-4939-b773-47c5ee2d17fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b89c52c9-0c3e-4d98-a462-4c30ddecab69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5501e210-dd4c-421c-a374-a8b3260e989e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d438304a-bb00-4371-8d5b-25cc17d12a90",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "591a4ff7-07c0-447c-980b-ff14b71ae23a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fcb98224-7bac-4923-8b6e-006cc77ff791"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c76d20f7-1835-4b1f-92b7-c33e7a810c90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c675f4d-7c16-4919-9985-193eda22c7f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebe81d9e-c4ac-4ae3-a5ba-9500d4bd9194",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75781200-1bf6-4496-9dac-9b76f3f31f6c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "606fe6b3-6495-462d-9c7f-abbfdff1c982"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bc888d2-f098-44f2-b8e8-a394435587a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbf6fc54-b0a2-42b7-b33c-2ba23b681a41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f33bdde-9988-4864-906b-8cb08795a844",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bd93b4b-b47c-4919-89aa-cbeeaed80e05",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "132b2d70-2510-463f-8165-b336cef3991b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "adcc0979-3db5-4331-bafc-177c6edf835c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "803e4a68-3ade-4ae7-831c-76f3d493ec33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a37dd38a-cae9-40b1-9b8c-eacdebe41012",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2acad92-e94c-4e5f-8f7b-f55806499762",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fa66cda3-ad78-4ff9-8c59-a9f029b63fa2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f729a79-dcaf-473a-83d6-b91facc11639",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a91530e8-0c62-4630-b0b5-38d9ccb166bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7785614a-7bef-428c-947d-30aa0bffa607",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09bb41f2-873f-46c9-9d50-2ccdaa46f1d6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9d0fd85d-1e84-4a13-9aea-3e77c2eda2be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0046efd-c8cb-4395-be58-8bd9d56d149a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c11b68fe-fd73-4467-8fdb-08ec719c5529"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f914c939-ce5b-4aa6-b166-885df1af57cd",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c74cb82f-1b12-4b46-91a2-6cccab2edbdb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c2c0a7ec-a25d-44dd-8ba1-c27f080b5ba9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a9228f2-83f4-4a1b-8698-ae2aa630a1f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5769d6df-e158-44b7-858f-b741ebc655a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40f004bd-6ac7-4413-97b1-f306689a0751",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c75fad7-86f2-4aa6-a51d-7dc96ed9cc80",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f471b879-9755-4d1a-8c00-63c51b2711af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fccf6769-b2aa-4049-a4c9-f966e8b75cfe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13015428-98e7-444e-9fb4-fb49320b386d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd7c9cd9-91d8-49bc-96df-dcc626a8884b",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f6b0b00-c7cd-4e5d-8cdb-3b639c4374c1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9cee1818-7351-4f9e-a76e-f095d312e10f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1c1b28f-48bb-48f7-bd5e-29d15745ed6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53fa0eeb-45a3-4f94-bee5-97fda97daa32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9544c777-e848-4f07-a32f-2c819f0fbee1",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bf2ae6c-15ef-412e-9e11-43b5236466a5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b8579a7b-e3fe-4f2f-9cb2-41d6ebc26071"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6dccdff3-3426-44ee-8770-74f559fb4e56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b30cfa8-3173-490d-b9f4-9328bddcb717"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f62705c9-d139-41d4-84c4-b47dcaa6c34f",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02f56c3b-7bfb-484a-ac23-5ebfa8143381",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fc9fb88f-bb63-4878-b7b8-d5cb616c9e28"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce80b5fa-77c5-46c1-a233-cdcb65966a93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c41b5fba-a42e-477f-84f7-5e80769939f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d796b41-f7d0-414e-b571-0db4e98b4ee7",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "780d7132-cde0-4bca-a519-5b6e4da6b163",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0c3c127d-471a-46fb-be87-66b5e732ad17"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "635235c0-777f-4dda-bdf1-a5b26ed0fb66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "819d7f08-52d3-4574-bd5a-1da7e9024103"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72074613-eab9-45d3-9819-1ddc7af1c0a7",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3d76195-fcd0-42e9-9c17-40e0352449e1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "11c7d073-0354-47b8-bf72-c363c4f77abf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e09d1f8-23bb-46ff-8bde-2e42d762f02e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd8b26b6-3ec5-423d-8808-3d1047aab02b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a1c701a-1e23-43a4-8ebc-27dd863ff646",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f33e3ad-2c99-40f4-b202-9c49ab87b705",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b401b63f-41c0-4111-a31a-322d8e545472"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "170fed51-ebb2-4c47-8a6f-a03b6c607d6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0199132a-8eec-4799-803e-a9e7ce0a2c21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0c7bdea-65ec-45de-8df8-6de41248aaff",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f217f0f2-1414-4f5b-b6ee-71f68c5c7b94",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "704817cc-61f8-43f7-bd70-1396f054397c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34fd7995-1f1c-40bc-b222-4336f99f794e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e81ba80d-1325-4da8-a7cf-10e7c4be78c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cbbc2cd-ac3b-40fb-92fc-10be1c67d9a8",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e1630df-3e16-4066-a247-015b2aad0029",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6ee67313-c536-43fc-9c3d-158caa625a89"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dc85df2-9b2f-4909-9a49-de44d8732c00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "208f9934-e12c-4f03-b89c-731bedc5adad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "373c324d-5357-4a00-8c91-bd778d886093",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "574ab143-0677-4866-a956-21028c7df600",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "003989f1-d4f2-4077-b002-f3675766c862"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37058f72-1bc6-4b5c-9f62-2ab5d752b332",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f035176-3077-4d3c-a665-96cdf3123987"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01dfdfc9-16fd-426e-9d7d-8709548d5cab",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84efd3e5-f093-4921-b752-c187612e205c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6b1568a3-839c-4e56-a21d-8be1657c2022"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9da849e3-8951-4da8-9e4a-04dfc6c25fbf",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abf2b7d6-b29e-4187-962b-1df8e33d94e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d74a15b5-28e1-4f3d-b941-8b457fcfed68",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c946c0c-12cd-40ed-8b8b-2bc87d109f06",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ed733a87-7fd0-49ca-ae34-35e6cbf7ba2f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c1d5e7f-5130-40d4-a44c-6bee6a2572e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83b6b008-78eb-4174-99d0-589fd8ad23db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bb48027-1071-474f-9a6d-9ab366519ce2",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3be2269a-a9ad-4624-b002-6a893a089bd7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "05c6962b-69f2-4438-a2d6-dbb5af6bcc42"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc895f6b-e52c-4e76-8cda-2000a203ed32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6ad81ad-f25f-4c8a-a56b-b3ff8266ff47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8af79d1-eba4-4bf8-a523-04d847875cff",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7baaa5bc-fefe-409e-a7bb-f4d26f1d8c1b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e161ee82-ede9-4584-a287-d18785f12665"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a7ea1b0-0760-4f9a-9cc2-828ff7eeb010",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3edb5c1b-b796-4221-bd91-9bf6c1590e79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e0363c9-cd8d-402c-bd4c-9138a72b8e54",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1a86163-c72b-48c5-9a8e-d9bc6bde44dc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5144ba4c-b6bd-463e-9aa7-915d0bb0f955"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f43e9d7-551c-4b61-8175-dc628a8ea9a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c528ff77-5040-44bc-bb90-529e7a0526ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f433fb8-37d4-408a-99c3-00d764bc58f4",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f45f7b39-705c-4fe7-91f5-a1b498a5b2f9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fef2226c-3e90-4d26-9a72-3baeb48b559f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14f03392-a3bf-4151-b048-dd4d5ba9ccd6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e59be88-e3ec-4933-8d79-937b2314e69a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09b64235-3b6e-4d28-ba54-76c098f942d3",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d578b736-bb94-4792-bee5-2863e97b3f97",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "47f9883b-ff39-4604-a3de-b86807f1b82e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d60e0aa-af78-412d-8faa-03b7a6cbb48c",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f385cd45-23e4-4b6e-ae64-bef56b110a53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86d5c07d-397f-4b8d-a2ae-82b9eded9f61",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34134cc5-d744-48bb-81da-0bf33a1741f4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d0efe11f-0bb3-4097-9818-3cf72b6e791e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8cf181a-8d6b-4c12-9a5f-1302966dc65d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7640fa6-be5a-4b41-b7ee-f025b546ded3"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f16fdac3-4db3-493d-9228-6058ac162914",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "81c42c9f-e11c-4eae-921a-abfa5c0c477b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "bfb7baf1-fb19-4a37-a935-c42bc1502e3a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b81c0d9a-1b7d-4e80-a58e-3637b4f0ba04"
                    }
                  }
                ]
              },
              {
                "id": "5eecad13-7da5-449e-89a6-746599c39b43",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "eb396dfe-1434-454a-b2e2-5fe8888db56e",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a17e927-05bc-4dfd-8405-5ea3dc5aa7cd",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "eacf6a65-7479-473a-9c04-9a1aa654b941"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3f15e47-5dee-4478-ab9c-0526c5d1ad3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "60339203-abad-4325-a7d2-508146f0bb01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef07e48f-c498-4a03-a068-36fb3a5b3337",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f77eff5-2c10-40e6-b969-e6c60a6f2972",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "ca6ac500-d02e-4ea1-9e4b-897a5effef95"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd4e3cd5-e0f6-44bc-81fa-0acb0e1c9f43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ebc501f9-2488-4cbe-b8ce-01d479ef09a1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e06cae10-869a-4c68-abaa-ee6d71084787",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1cc23b0d-b4b8-4177-927e-735bbe3d0bbc"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "98087a35-3009-4d95-8e97-24563d0bd593",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6e5bbcdf-da69-443d-b74a-28ec2d4446e8"
                    }
                  }
                ]
              }
            ],
            "event": []
          },
          {
            "id": "743a2cce-cb0c-4b19-a061-210845910820",
            "name": "Positive Testing",
            "item": [
              {
                "id": "62439cee-103b-4deb-a22c-a9d4854a18f8",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d0723ec3-842c-4f61-9685-0f73758a1ae9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "020252c3-c603-494a-9e1b-051a14634539"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a9b36088-1e2b-40ba-b8d9-7080069fe26e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d6efa230-58b8-4956-bd20-94b7f4d9947b"
                    }
                  }
                ]
              },
              {
                "id": "4d683ab5-4553-4890-ba85-a244f16bc7ac",
                "name": "credentials_verify:id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a6041802-2316-4cd7-be4e-a655ea6ed851",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "98e95332-1a7b-4384-bffa-25d867fb0366"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c75f3320-dd0c-4096-a039-ce9960c47442",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6cdf5e27-3f3c-4341-83e0-524618a2d7d2"
                    }
                  }
                ]
              },
              {
                "id": "d4be4773-7b4a-410f-89ef-04a8e2566c29",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "11ff2163-46d4-42b8-a9f6-aa4bfb4d04f0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8e67fc0f-e4bb-4a12-ba3f-1c1730db94ec"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7921a868-5407-4877-81e7-6eb3ceb14f2d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d383b9bf-ba6b-402c-a2ea-05429826ed1d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "66686422-85b9-4a44-adc5-c5c326480962",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "89ac4f5d-252b-44d9-8747-de33d0193ed6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "87486f94-2990-4a64-a408-4fd03e4b8502",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a3ec305b-6fa8-4c44-8d59-ec735d8235dc"
            }
          }
        ]
      },
      {
        "id": "069399c1-a6b6-4f69-bca0-1bd470168a25",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "8c78c0d4-2d4b-496e-8dd0-22294ae98b54",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1c599577-bc89-4cef-9f3f-5114a5d558c3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b40272e3-7b46-4aee-b047-9d459935b1a4",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ceba0a51-ee8a-4af1-9ab2-c0ab0948e986",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "118e4854-89f0-4aa7-a1cb-9c3fcf1b3410"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9912b62-88c5-43cc-97a8-c0dd79bb0cb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a974e933-26f7-4210-a2b2-03997fc6b5bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f34e568-ee51-448d-9990-fec13d865c9e",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61d2257f-e7c8-4d02-b92d-59068dfa2e16",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "7cfe49e1-6a8e-40d2-aed9-e8b4d5ba1be8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0f79bc1-4bd7-4172-894d-97298a6e0eb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1d2c0cf5-05d9-4519-98a4-53d71ae56ddb"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ed773a25-19f4-4501-88e3-c49988671e3f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1582855f-ac7c-419d-bbd4-188c23739bbd"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0594c279-977e-456c-a97c-29e9ee820570",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f3271a06-d6d6-417f-8c71-a705451e4b76"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1a0cf05d-0fcd-4200-88e3-d6307520f794",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "e6c21510-a0a6-4539-8e03-4538bc8f1a7e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1d03727a-816b-4056-af6a-3b9e80e141be",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c5943b41-befb-4be1-8d7b-9cc0a1cec3a4"
            }
          }
        ]
      },
      {
        "id": "c2c5e8d5-9154-4d39-a6ec-ec5b72f6a057",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "51e3942f-45d2-4321-9fa8-477df823c813",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9908eadd-4fef-4536-b5ed-a5fa6b00a8ac",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "18de1e82-dc8e-4e59-8f1f-4513dc61fd00",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2635bf33-4d49-4f50-9a1a-dd310f3e9550",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "ccdf6bfb-ffff-4905-8ed4-0719d6cca73a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd8c79c1-d32f-461e-bcf9-c1a79df06cf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "dbeda1ad-fb24-4131-b537-af6c0fe3d07f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9ed8cd4-3a48-4c85-8653-a593b9890e6c",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0b53b96-7e1c-4030-9d8a-1b35fb0cceb1",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "334dc9d8-4d7a-4a60-b84f-62ce9c4f403c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a5d38a7-e63b-44cb-aae2-046b226d2a76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "33d7d824-90c2-45a8-8248-fc25faed3794"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "29cf92d9-c9ef-461c-a7ac-a403a92e76e4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0ef8687f-8452-4eed-a72f-8cc6351bbbde"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7915b27c-1d0e-466c-8d54-35a6bed235b3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f29cd51d-f6de-4e52-a320-658e58f6fd5c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d1d84095-664f-4fe0-9b55-c46d55c17b7d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "44c75adc-7332-424f-a063-4781b65f19f4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ce80fa27-1224-4acc-a00a-6c68e77222ac",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "abefec53-d469-4b3d-af09-98b5bd258e80"
            }
          }
        ]
      },
      {
        "id": "6eba6885-f655-44cf-b92d-92dc5c8777f6",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "2fa3f89f-74ad-4e4b-9e64-e3243805a74c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6ef8fe68-4a67-4d2d-bd90-c551dd099a01",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "46b3048c-1e0d-46a0-9414-b0e14d038c24",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8976824a-6f48-4b85-aaff-4763523bca91",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "3a01e9c2-3e21-4a0e-a051-004aba1576a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77e67266-ed44-4fda-a673-07884dcd0074",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "348b0761-2741-4337-99f3-95f016e7ff27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7368920-a4ea-4a39-9b5d-d39d3d7ecc84",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1825a0de-6d28-4ad2-9487-4d1bf70e2bfa",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "82db5d46-3a3e-4f4a-956b-606e980bd483"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bb67680-ddc6-403c-ac1f-368ba084f5f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1511f548-b15b-44a7-881d-de3ff73c7002"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7a515aa9-2b11-44d9-a790-828d5b3f90ae",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d8405e2c-702f-474f-ba0e-f1611069983a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f804f710-b15e-4663-b50e-91a7258e4121",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9abdd3bd-691a-427b-8571-1c09c84d93ba"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b25a9f70-bc69-4268-a103-ef7c64bec76b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "75a3cf7c-c632-4626-8c3a-77b120e88bea"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2d3609f9-f4d8-4c2a-9740-47bac428edc8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "faa69269-9a7f-4930-88c8-10e31f00be5f"
            }
          }
        ]
      },
      {
        "id": "64e976b1-f0ba-45e0-8408-011a2e4c5a27",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "13ed6196-cd03-4931-b07d-dd0d97973f10",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "373a5133-b0e0-43f7-9ff5-486d746a13d1",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "b49d3049-ef2f-4e74-98a0-cb41bc9641c5",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "52bf050d-8777-4748-9db2-74523b1bab38",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d833a61d-cf94-4f98-a557-e53f493952ed",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 243,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1855,
        "pending": 0,
        "failed": 5
      },
      "prerequests": {
        "total": 243,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 243,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 492,
        "pending": 0,
        "failed": 96
      },
      "testScripts": {
        "total": 933,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 922,
        "pending": 0,
        "failed": 5
      }
    },
    "timings": {
      "responseAverage": 174.73809523809535,
      "responseMin": 4,
      "responseMax": 2539,
      "responseSd": 349.0651728516595,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1665709512871,
      "completed": 1665709566917
    },
    "executions": [
      {
        "id": "3927b680-803b-48cf-9238-c852adef1e1f",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 243,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "560b4041-ebdb-4d11-b491-9123495768f2",
          "httpRequestId": "4de70a1f-03c4-4bbd-ad19-0dfdb50e54d7"
        },
        "item": {
          "id": "3927b680-803b-48cf-9238-c852adef1e1f",
          "name": "did_json"
        },
        "response": {
          "id": "1fd211af-9cf8-4ffd-b02e-8c2a4fb85726",
          "status": "OK",
          "code": 200,
          "responseTime": 1759,
          "responseSize": 1369
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b59af37-20dd-40ab-a09e-4f018f2e645f",
        "cursor": {
          "ref": "0603ab37-a704-4839-9652-5e38d3f529a6",
          "length": 243,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "21774d7e-4803-4528-97c5-44482af14849"
        },
        "item": {
          "id": "6b59af37-20dd-40ab-a09e-4f018f2e645f",
          "name": "did:invalid"
        },
        "response": {
          "id": "77134cc0-f058-4da2-a2b4-1e802bbc593d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b59af37-20dd-40ab-a09e-4f018f2e645f",
        "cursor": {
          "ref": "0603ab37-a704-4839-9652-5e38d3f529a6",
          "length": 243,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "21774d7e-4803-4528-97c5-44482af14849"
        },
        "item": {
          "id": "6b59af37-20dd-40ab-a09e-4f018f2e645f",
          "name": "did:invalid"
        },
        "response": {
          "id": "77134cc0-f058-4da2-a2b4-1e802bbc593d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a403bda9-f05a-40d8-badc-9d7970844ac6",
        "cursor": {
          "ref": "71ff0f93-5478-4007-b096-578f05d61ac2",
          "length": 243,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "67199ea6-582d-407c-99e0-d7d89ef69df3"
        },
        "item": {
          "id": "a403bda9-f05a-40d8-badc-9d7970844ac6",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "e00a07af-0406-4070-a82a-815dcb17b31c",
          "status": "Not Found",
          "code": 404,
          "responseTime": 950,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d209803-35b3-466a-be74-ca24f223c5c6",
        "cursor": {
          "ref": "5748212a-a856-4369-8fa5-b9f5f46ff8d7",
          "length": 243,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "02a5e2b2-be82-45f4-b11e-da3c1ca8a6f5"
        },
        "item": {
          "id": "0d209803-35b3-466a-be74-ca24f223c5c6",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "c4cf479f-e29f-40e7-b248-0a2db6ca7ce0",
          "status": "Not Found",
          "code": 404,
          "responseTime": 18,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83b4ac40-bd87-4d26-b558-23dbc1f98576",
        "cursor": {
          "ref": "c1fda858-c21d-4a05-adb0-cef332abcb3c",
          "length": 243,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "47b8a67f-3761-4093-968a-79db56a0d2d4"
        },
        "item": {
          "id": "83b4ac40-bd87-4d26-b558-23dbc1f98576",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "426f4b15-e2be-4421-a8dc-c21ad87a5e7f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 62,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ea9f57a-a64a-41ec-86c4-743d1248e5e0",
        "cursor": {
          "ref": "a53b9875-95bd-4e05-8642-f8892e89c911",
          "length": 243,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "7133da89-a8d8-4cad-9e9f-862139162146"
        },
        "item": {
          "id": "8ea9f57a-a64a-41ec-86c4-743d1248e5e0",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "14140ffc-1d26-4f5d-8ba4-9c5b3b0a5c28",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 44,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ea9f57a-a64a-41ec-86c4-743d1248e5e0",
        "cursor": {
          "ref": "a53b9875-95bd-4e05-8642-f8892e89c911",
          "length": 243,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "7133da89-a8d8-4cad-9e9f-862139162146"
        },
        "item": {
          "id": "8ea9f57a-a64a-41ec-86c4-743d1248e5e0",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "14140ffc-1d26-4f5d-8ba4-9c5b3b0a5c28",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 44,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcd1745f-5da6-4094-848a-00eb75b7bac6",
        "cursor": {
          "ref": "327568ed-0966-4c91-bc10-21f40740d708",
          "length": 243,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "f30226b1-ab9d-421d-93a8-a9a22cbc4a72"
        },
        "item": {
          "id": "fcd1745f-5da6-4094-848a-00eb75b7bac6",
          "name": "identifiers"
        },
        "response": {
          "id": "82fc6353-5c92-4376-b97b-de4bc331a8e6",
          "status": "OK",
          "code": 200,
          "responseTime": 996,
          "responseSize": 1385
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55cd972b-c451-4496-9576-9364065baddc",
        "cursor": {
          "ref": "68b8336e-bb5d-4c02-80df-2fd4bc869dce",
          "length": 243,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "f3f36eeb-5071-4347-bc53-3887c2021dfe"
        },
        "item": {
          "id": "55cd972b-c451-4496-9576-9364065baddc",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "adaf24f0-ddcc-4982-9e53-60ae43928ef8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55cd972b-c451-4496-9576-9364065baddc",
        "cursor": {
          "ref": "68b8336e-bb5d-4c02-80df-2fd4bc869dce",
          "length": 243,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "f3f36eeb-5071-4347-bc53-3887c2021dfe"
        },
        "item": {
          "id": "55cd972b-c451-4496-9576-9364065baddc",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "adaf24f0-ddcc-4982-9e53-60ae43928ef8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d0860ff-ce26-4d76-9c4e-b7a1bb42094e",
        "cursor": {
          "ref": "1b48a949-0327-4503-b870-64b0248bfabc",
          "length": 243,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "f8e42bcc-989c-4269-b0dd-cad4b56ff7d0"
        },
        "item": {
          "id": "7d0860ff-ce26-4d76-9c4e-b7a1bb42094e",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "97aeeb58-5e50-442a-be3a-19bd533c40a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15a959fc-96b2-4122-bd5e-1fb6225112d5",
        "cursor": {
          "ref": "b801e8e4-5f9d-4a17-b1fa-b27d0f11d33b",
          "length": 243,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "e5e3c61d-5d4d-4781-a5e6-c95a3871bc60"
        },
        "item": {
          "id": "15a959fc-96b2-4122-bd5e-1fb6225112d5",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "10094db7-19ac-451f-a86c-32ec9b6e3003",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db3bb8f9-be3b-496c-a333-0a675b064a29",
        "cursor": {
          "ref": "84e81103-7ac6-4e0f-9fae-c9acbac16ca0",
          "length": 243,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "1955d179-6e03-463e-9de8-34b05c84ad82"
        },
        "item": {
          "id": "db3bb8f9-be3b-496c-a333-0a675b064a29",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "7527458e-4f8e-47e0-82e4-2a48f3ca963d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d022c22a-1fc0-4a4c-a236-de02d691bbad",
        "cursor": {
          "ref": "6c03ccd0-47cc-42e8-9d90-d17c39a4b821",
          "length": 243,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "2ad89aa8-4dd2-412a-8d1f-195eb33374f9"
        },
        "item": {
          "id": "d022c22a-1fc0-4a4c-a236-de02d691bbad",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "1c77a7c7-8b87-4759-ba5a-c9741327887f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c6007b1-8e2f-420c-a264-7d277107a8dd",
        "cursor": {
          "ref": "e4444966-6754-411f-b56a-d69d2e793fa6",
          "length": 243,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "e7db6673-bc74-4a57-b922-a1adc85444d3"
        },
        "item": {
          "id": "0c6007b1-8e2f-420c-a264-7d277107a8dd",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "ff9ba011-164e-41c9-918b-a336634006ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "180b39ad-5051-42f7-8fbd-b94695f1c9c6",
        "cursor": {
          "ref": "89027a5a-c18c-4b70-9e4a-8c0ff01ede23",
          "length": 243,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "fbe9962b-b19d-4b0e-8450-aa6d8b110364"
        },
        "item": {
          "id": "180b39ad-5051-42f7-8fbd-b94695f1c9c6",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "0cdd7eb3-189e-4990-8c1c-7e8e981bac1b",
          "status": "Created",
          "code": 201,
          "responseTime": 1734,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "611f0462-2b29-4139-b6b2-f1ff418a2d94",
        "cursor": {
          "ref": "b58d9d37-c100-489f-a255-51d96ad398e4",
          "length": 243,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "65c517f8-073f-4aa6-94cb-160e0a8734ea"
        },
        "item": {
          "id": "611f0462-2b29-4139-b6b2-f1ff418a2d94",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "9d2a278b-e8ff-4fc7-a723-2737b1e9ab55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e65cceac-4106-4e51-a9b6-81cb1b6e2655",
        "cursor": {
          "ref": "8e997dc6-41fd-4d9a-bf12-5084b4d8dba2",
          "length": 243,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "3b75ed22-3510-4b2a-9dfb-d0861ecdaec3"
        },
        "item": {
          "id": "e65cceac-4106-4e51-a9b6-81cb1b6e2655",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "81cc1406-67f8-4f29-81d9-db14746dfc37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6078b450-16e7-44bd-a9b2-0649dd15a16a",
        "cursor": {
          "ref": "80301b6b-cb3a-4772-9d6f-16ed92ca1903",
          "length": 243,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "24bf1b8a-43d1-4929-8af7-f45dafdbf7e4"
        },
        "item": {
          "id": "6078b450-16e7-44bd-a9b2-0649dd15a16a",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "124f80f9-1cdc-4305-a8a7-def35aab4f40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 398,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b988473-9682-43c7-b668-8c7c61da0ac3",
        "cursor": {
          "ref": "e377305e-d759-4b3b-ab8c-7cf78e05c473",
          "length": 243,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "a35ed4b3-cf0d-439a-bb49-6f4d47f70ac2"
        },
        "item": {
          "id": "2b988473-9682-43c7-b668-8c7c61da0ac3",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "d64bc03b-cf60-476d-8a67-5bc7cfee12e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df338451-033d-4f6e-bf18-b2f16ca4cd35",
        "cursor": {
          "ref": "da55a688-69f9-4ede-8ac9-d74fdd44a107",
          "length": 243,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "060305b3-528d-4f61-a27a-9898e574b991"
        },
        "item": {
          "id": "df338451-033d-4f6e-bf18-b2f16ca4cd35",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "97d956da-414b-4fb0-98c1-006f8baf955e",
          "status": "Created",
          "code": 201,
          "responseTime": 686,
          "responseSize": 584
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "9b771293-8edf-450f-bec6-0234f79e2b2e",
        "cursor": {
          "ref": "531569ba-db64-4884-b187-9195c742d754",
          "length": 243,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "40fa6118-464a-4d52-8a85-9b2c28dbc763"
        },
        "item": {
          "id": "9b771293-8edf-450f-bec6-0234f79e2b2e",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "ca614956-b104-4a16-844c-e0a3a1175fe2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "485b6275-7a91-424b-8461-410814227f8d",
        "cursor": {
          "ref": "e7a8381d-115f-4f2c-a8d0-91f360455a56",
          "length": 243,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "d0581d1e-d7ea-47b9-86bf-adc56892aa87"
        },
        "item": {
          "id": "485b6275-7a91-424b-8461-410814227f8d",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "4a8e25db-ab14-4617-bf7d-945b2335ac19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c94ab5e-88c0-4a0b-9d0b-7926eb0d8746",
        "cursor": {
          "ref": "5077dc25-4d9c-4bb1-9e00-a6624d4b6307",
          "length": 243,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "47058ba0-9512-444e-82ac-fc8293810fd3"
        },
        "item": {
          "id": "4c94ab5e-88c0-4a0b-9d0b-7926eb0d8746",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "bbcb30c1-a914-45c1-93af-fbc9b81bd9fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7ce1a40-3112-471d-a8b2-8678ae14a6d8",
        "cursor": {
          "ref": "b5fe4e6b-b14a-41ae-a48b-061c1011e1fd",
          "length": 243,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "2f1cfb4c-3c9a-49cd-900e-4d7a720bdc4e"
        },
        "item": {
          "id": "e7ce1a40-3112-471d-a8b2-8678ae14a6d8",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "8d208959-cdc1-40a5-b261-82225a4f5627",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f724db27-2a65-4fd7-b8ff-eb150cd87e9d",
        "cursor": {
          "ref": "0f402963-1ae0-4f4d-b438-b6a1668cdf75",
          "length": 243,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "72e6d78a-4084-4124-91dc-4a32c7919659"
        },
        "item": {
          "id": "f724db27-2a65-4fd7-b8ff-eb150cd87e9d",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "be086d5d-e672-480f-991e-f36cdc039162",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c39660f2-ebb9-42dd-8b22-13b9609477ed",
        "cursor": {
          "ref": "d74cf045-3b12-402d-b1c8-ef4b0b64666c",
          "length": 243,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "2af0ecec-71f7-43d1-8648-0c5069ddb994"
        },
        "item": {
          "id": "c39660f2-ebb9-42dd-8b22-13b9609477ed",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "a8b0bed0-515e-4e65-880d-69782716fe84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "522d264b-f378-45ce-983b-71847b531bb5",
        "cursor": {
          "ref": "7b671d91-4fe6-443c-97b2-a55dcf9dc6ea",
          "length": 243,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "172e57cd-ec5e-4a85-a6c0-957c456ef247"
        },
        "item": {
          "id": "522d264b-f378-45ce-983b-71847b531bb5",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "44621085-afc3-4b49-bd60-10ee189d7400",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73c903f2-239e-4e19-b20f-2777d5953797",
        "cursor": {
          "ref": "7eefd41a-507e-4312-a94c-4490fb301713",
          "length": 243,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "4f10cb28-c8e7-4cbe-97e0-8116b00416ba"
        },
        "item": {
          "id": "73c903f2-239e-4e19-b20f-2777d5953797",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "045d0a76-f160-4020-b6ed-3b58d9663cb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3074b4ef-77d3-4ae7-bd2b-43d7e8bb4874",
        "cursor": {
          "ref": "ee231b41-ef73-40e4-ac88-c89e9ceddc0f",
          "length": 243,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "40b529c5-b720-43b0-8b5d-862b93a617f0"
        },
        "item": {
          "id": "3074b4ef-77d3-4ae7-bd2b-43d7e8bb4874",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "eb35dc8b-9973-456a-b554-95e6d6917389",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da018fb6-2042-458d-b5f0-eed569974663",
        "cursor": {
          "ref": "295b343d-98e2-486b-85bc-fce80765ffb4",
          "length": 243,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "a3b30d81-ea56-4170-86b4-d1e9050e0e99"
        },
        "item": {
          "id": "da018fb6-2042-458d-b5f0-eed569974663",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "c03fbc13-26d2-4552-b023-456562d06624",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a499daa1-88ef-4bec-b6e1-65f44183d12e",
        "cursor": {
          "ref": "2927b8d3-c94c-48b6-9904-b14191e9bffb",
          "length": 243,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "07832d3a-0834-44cd-976b-384028a3d832"
        },
        "item": {
          "id": "a499daa1-88ef-4bec-b6e1-65f44183d12e",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "f183782c-7752-4746-ad8f-892510d1b35a",
          "status": "Created",
          "code": 201,
          "responseTime": 1167,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "fe5f8005-44bd-4eea-a375-b29568dbf7f0",
        "cursor": {
          "ref": "f48310ca-698c-4439-adf3-d193518ea04a",
          "length": 243,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "b426dc68-4edc-4908-acc1-6ab130f4c9ed"
        },
        "item": {
          "id": "fe5f8005-44bd-4eea-a375-b29568dbf7f0",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "5db23353-c299-4210-81ce-7ab5e5eb2801",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31d2c65a-ef38-439d-a4d0-1395708eaced",
        "cursor": {
          "ref": "2b844721-4853-461a-853a-267f213dd0a6",
          "length": 243,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "72d69617-285d-418d-b83c-a1ce8bbf43d5"
        },
        "item": {
          "id": "31d2c65a-ef38-439d-a4d0-1395708eaced",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "f87ce56e-570c-43bf-8cdc-8b9d559f9587",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf16a1b4-92d3-4970-8cda-ef27f9f7ba3f",
        "cursor": {
          "ref": "bdd0fe97-1481-4eea-a514-cf36717947d5",
          "length": 243,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "06a1fb39-5da3-4479-841b-4260ea631d1a"
        },
        "item": {
          "id": "cf16a1b4-92d3-4970-8cda-ef27f9f7ba3f",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "a56bb63e-f32e-4d79-86da-5524a0bf702c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "123856d5-ed39-44ea-a3de-a99fbced04df",
        "cursor": {
          "ref": "12ce17a6-a4b8-459b-a568-52e970b07ae4",
          "length": 243,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "c9d1403e-479f-4479-8193-9a8087d5ab0b"
        },
        "item": {
          "id": "123856d5-ed39-44ea-a3de-a99fbced04df",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "dff2f58f-37c7-41d3-82e7-bb76ac959669",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93ac595f-1c9a-45e3-bf46-f6e23a1c2cf1",
        "cursor": {
          "ref": "ac8f9a2c-58e4-4c0f-b40e-fdd897623355",
          "length": 243,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "59885799-3983-462c-87db-550e20e4beab"
        },
        "item": {
          "id": "93ac595f-1c9a-45e3-bf46-f6e23a1c2cf1",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "3993b4aa-c18e-4b6c-b1f1-7491bb0720b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a3b5cc8-a9df-404e-bedb-36f3d796fe10",
        "cursor": {
          "ref": "9741cee5-cd0b-4d0a-9426-58f567fd7cdf",
          "length": 243,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "1982f148-e844-40ca-a718-25e5f8911e90"
        },
        "item": {
          "id": "8a3b5cc8-a9df-404e-bedb-36f3d796fe10",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "6d6c2421-91cf-4b82-a183-8b454d919bc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad041616-2d8a-4aaa-9787-c39b3e7f9e38",
        "cursor": {
          "ref": "98771ff0-6ddf-44f6-89ee-96d5ce5e73fa",
          "length": 243,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "4699cfcb-e927-4265-a143-35dc2821195a"
        },
        "item": {
          "id": "ad041616-2d8a-4aaa-9787-c39b3e7f9e38",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "f4fc5e8d-725d-4548-8b0e-8d5d39996cf5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e284eb9-0b69-470d-b1e6-e6049105b314",
        "cursor": {
          "ref": "95f3fd20-e373-4b5f-9463-3fdca01a2bce",
          "length": 243,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "9119e2a1-7209-444c-98a3-8f15a0266d1a"
        },
        "item": {
          "id": "0e284eb9-0b69-470d-b1e6-e6049105b314",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "c2a358cd-67fc-482b-aaf1-42d3a535dd0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07fff1e9-1b20-4105-9767-111040737c85",
        "cursor": {
          "ref": "d3d7d7ce-7146-4fa9-ba03-fe9eab15da66",
          "length": 243,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "e161b439-fa83-46ce-9161-81ee261ed2a6"
        },
        "item": {
          "id": "07fff1e9-1b20-4105-9767-111040737c85",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "6778c5bc-e981-4543-84b4-6bae64c071b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "119c9b01-d884-4aad-96dc-55bf295025e5",
        "cursor": {
          "ref": "f03593ce-77c1-489b-94fa-67843367ebb5",
          "length": 243,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "cdfd8b3c-01e1-4afb-b306-50db3dcf61d5"
        },
        "item": {
          "id": "119c9b01-d884-4aad-96dc-55bf295025e5",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "e25de354-1e76-42d2-a60c-8ec594d37c1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 174,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e37d330-e5b9-4577-9769-a247a442aa87",
        "cursor": {
          "ref": "ea1afa9d-369e-4cf1-bbcd-1f7b79a01da5",
          "length": 243,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "fae2ffe5-ee98-42a7-8161-cd2ba4ca0eea"
        },
        "item": {
          "id": "5e37d330-e5b9-4577-9769-a247a442aa87",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "b3bc2e10-eaf3-4378-867b-4a153a142dea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b7b31ed-cc89-47c7-8d13-933d9ad9895e",
        "cursor": {
          "ref": "e1a368e7-b9e5-46ad-8b20-7b57173cb244",
          "length": 243,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "8a627b78-c7ce-422d-b7fc-82f35cb32242"
        },
        "item": {
          "id": "2b7b31ed-cc89-47c7-8d13-933d9ad9895e",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "34bf0195-9d96-4a24-9942-3781ce070c78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21570449-6bcb-4094-8676-dc8b56b28725",
        "cursor": {
          "ref": "998c4cce-5eaa-4c47-95e8-d5a42fc04c2a",
          "length": 243,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "8d52d651-73be-4718-9dae-079159ebc041"
        },
        "item": {
          "id": "21570449-6bcb-4094-8676-dc8b56b28725",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "b9ee4016-06e7-4b65-a23a-9e245bcf8172",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 412,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1da28e6-28c0-4da9-8201-ad436d4577ab",
        "cursor": {
          "ref": "7717c492-0c84-4987-90b4-f3285774a5b1",
          "length": 243,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "4cde9c63-4158-4768-822d-90882092d0ad"
        },
        "item": {
          "id": "b1da28e6-28c0-4da9-8201-ad436d4577ab",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "32a6f9e5-d367-4822-9f67-e14443c3d36f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c85a4f15-21f5-4e35-ae2c-0039b3fd6e13",
        "cursor": {
          "ref": "5644074c-dcf3-445d-9549-a146b173c482",
          "length": 243,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "82f907d6-e016-4024-b91a-2d621f53eb0d"
        },
        "item": {
          "id": "c85a4f15-21f5-4e35-ae2c-0039b3fd6e13",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "62d70bac-feba-4fe6-820c-b3e169f8e383",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0171d7e8-d1a4-4cd4-b2f2-70331145083b",
        "cursor": {
          "ref": "f5c89ff5-4705-4cdc-9c2c-c2b89011ef92",
          "length": 243,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "45378480-c942-4a1d-b549-5b956ea1a8fb"
        },
        "item": {
          "id": "0171d7e8-d1a4-4cd4-b2f2-70331145083b",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "de5b4923-d1ea-41e4-8367-053c3430deeb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4053f6ca-6d04-4f9e-89ad-4e158eb9abb5",
        "cursor": {
          "ref": "31c1ebd0-fab4-48ca-b956-0fa3d00149ca",
          "length": 243,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "6fe57fdd-ad54-4aab-b3c1-e1405735f253"
        },
        "item": {
          "id": "4053f6ca-6d04-4f9e-89ad-4e158eb9abb5",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "6849b6c2-4bf9-4e5c-8354-c242150f755f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6e57af6-bef8-41f2-9d2b-6ff6fdf26bb0",
        "cursor": {
          "ref": "8a21715d-5388-46a9-86f4-b057716f43cb",
          "length": 243,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "cfb3d1e0-4d28-42b6-b85d-cb6d94676ad3"
        },
        "item": {
          "id": "f6e57af6-bef8-41f2-9d2b-6ff6fdf26bb0",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "790a6948-605a-45b5-ad0a-119a9ab06bf4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ace54d80-7b74-4c86-b35f-6daf18e632dc",
        "cursor": {
          "ref": "eb8acf57-83ff-4ad7-b6f6-8e977d93857d",
          "length": 243,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "45a692b9-492c-4549-a87a-514e5018e4ca"
        },
        "item": {
          "id": "ace54d80-7b74-4c86-b35f-6daf18e632dc",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "0c193e5b-1838-457d-873c-402ad86b8fd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0257a3b9-8dcf-4cc3-af53-8e1211935832",
        "cursor": {
          "ref": "53589c9d-3a38-491d-a156-4e8630e22387",
          "length": 243,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "68c21363-2fb5-46df-82b4-6f91a43c802a"
        },
        "item": {
          "id": "0257a3b9-8dcf-4cc3-af53-8e1211935832",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "59414518-c2c9-43e1-98af-0ff25aaf2737",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 243,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0280a1a7-544a-4f3d-b873-ecbd27be9bd1",
        "cursor": {
          "ref": "cfb4d1db-407a-414a-be72-571432993d9c",
          "length": 243,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "94249bf8-fcfe-4ee6-b622-d41dc8625985"
        },
        "item": {
          "id": "0280a1a7-544a-4f3d-b873-ecbd27be9bd1",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "9583b353-a675-4453-a513-06ef4e8da546",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "135d5871-615a-4c10-8dd9-d158a47af30f",
        "cursor": {
          "ref": "dff9f992-4baa-4387-8183-d086846517a5",
          "length": 243,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "5d94a9ea-8bee-4a0d-bac5-c0d03a045de3"
        },
        "item": {
          "id": "135d5871-615a-4c10-8dd9-d158a47af30f",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "5d58edfd-23c7-434b-9941-caf1d859a7fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59dcf7b4-d1cd-493e-a3f3-b5217ab564f9",
        "cursor": {
          "ref": "84ad5d16-bd00-4bb9-bd52-6d50e3b3fe46",
          "length": 243,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "762f81bc-17e1-4196-95cb-9d63f19bf04e"
        },
        "item": {
          "id": "59dcf7b4-d1cd-493e-a3f3-b5217ab564f9",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "9ac3093b-03fd-4ea6-b6f6-148523c43bc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36952dfd-57d5-438a-a8e6-082cb237af4c",
        "cursor": {
          "ref": "e85855c3-38c9-4212-a759-9908cc285483",
          "length": 243,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "83b8c70e-cacc-4267-976c-73906d3eaa47"
        },
        "item": {
          "id": "36952dfd-57d5-438a-a8e6-082cb237af4c",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "7cfaca90-eecf-4f45-b925-026d797b0625",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9329587b-8a3b-44e8-b8aa-8a840f468834",
        "cursor": {
          "ref": "6b1945c0-78d2-440b-a0d2-d0ba30f2d8b8",
          "length": 243,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "50094c9a-5654-4d56-af41-5f56ba368337"
        },
        "item": {
          "id": "9329587b-8a3b-44e8-b8aa-8a840f468834",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "67d0f1d3-06cb-4801-93ee-5f7d9946692d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc36f4a9-6898-4418-9752-a08792d1098a",
        "cursor": {
          "ref": "f21eba72-914e-4cd1-89c6-5957b61d6937",
          "length": 243,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "074a1feb-7c72-4ac7-9385-4d337bbfbba0"
        },
        "item": {
          "id": "dc36f4a9-6898-4418-9752-a08792d1098a",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "7632dcf7-0ec1-4718-b958-3c1e0f852ea2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 161,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64ca56c5-5de2-4305-9a9d-7c6d70157323",
        "cursor": {
          "ref": "26ed5253-af90-473d-8181-12c113c6a499",
          "length": 243,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "d70bfa7d-4e16-4372-b6cf-a5fc4c1e0fdf"
        },
        "item": {
          "id": "64ca56c5-5de2-4305-9a9d-7c6d70157323",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "4c17dc92-2098-4da3-96fd-d41add3805e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6850d8f6-0ca8-4a71-8de0-2fc327723b97",
        "cursor": {
          "ref": "c0f47e37-b2a6-4cea-a512-6c5059849b3c",
          "length": 243,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "2a428753-b61f-4fe6-9369-039d3f0a8cf8"
        },
        "item": {
          "id": "6850d8f6-0ca8-4a71-8de0-2fc327723b97",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "e45bb7f5-21d2-4549-9396-6619181df1e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 158,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8abcabbe-df56-4423-9de9-15b4fdd1b699",
        "cursor": {
          "ref": "460af8db-2e76-4fe3-a338-dfd49f650f2b",
          "length": 243,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "9d846bec-17ce-4a6c-89ca-eb45179f4c15"
        },
        "item": {
          "id": "8abcabbe-df56-4423-9de9-15b4fdd1b699",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "0014c7c7-5584-41bd-b13d-dc875e6b8dfa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88258685-dc67-4fac-90ee-ccb791bb076a",
        "cursor": {
          "ref": "af836ebb-bbc0-4cbc-95a4-e881be14b05e",
          "length": 243,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "9786f4d1-8d57-4bbd-8550-13a1c01059e5"
        },
        "item": {
          "id": "88258685-dc67-4fac-90ee-ccb791bb076a",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "d067a003-b5ec-4d20-aa67-da65d34260c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f845c207-48e6-40f1-ba31-24f59b5250ab",
        "cursor": {
          "ref": "16bab150-377e-4e86-b09c-075ce1bb3cf1",
          "length": 243,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "654bbe29-0281-4b2e-9331-b2e38d19b5b1"
        },
        "item": {
          "id": "f845c207-48e6-40f1-ba31-24f59b5250ab",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "af52ce96-a9e4-4486-a854-0c953e8f20d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fae6e4b-a82b-4ca3-8bfd-56313f3b1a99",
        "cursor": {
          "ref": "9b6d473f-6588-4cf6-a56a-24979f0af939",
          "length": 243,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "bef2d8ab-d31d-4e0d-a8c1-71984d491cb4"
        },
        "item": {
          "id": "2fae6e4b-a82b-4ca3-8bfd-56313f3b1a99",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "9c5e0d47-da8c-4bb8-a28c-b44d2eefc258",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2c45bce-923d-4f30-a762-59e9e4ad5867",
        "cursor": {
          "ref": "1528897d-26f8-4aa4-8cfd-873a32a4c449",
          "length": 243,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "f172b2aa-b16e-40e0-83b7-862f41e7f6ce"
        },
        "item": {
          "id": "b2c45bce-923d-4f30-a762-59e9e4ad5867",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "aae4fa95-e9e7-4a9e-9c2c-6a918b83ea8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 112,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b3ba43d-84c7-4d6c-83d3-9c3d57725de8",
        "cursor": {
          "ref": "c211f3e2-bb6a-4503-95a8-744009da2e15",
          "length": 243,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "58e843bc-4068-440f-950c-dbbc157719d4"
        },
        "item": {
          "id": "8b3ba43d-84c7-4d6c-83d3-9c3d57725de8",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "e7f75b29-9f2c-4d43-9d02-9ea3b99d0e4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c7bbe70-bde1-4706-b113-f9e6840d6d60",
        "cursor": {
          "ref": "6d7080ac-ad66-4d3c-bfa4-2a85ccc74e19",
          "length": 243,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "307abcae-9348-4787-9813-676d16ffc3ff"
        },
        "item": {
          "id": "6c7bbe70-bde1-4706-b113-f9e6840d6d60",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "8d663727-380b-4589-a4ed-d239a53303a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 118,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ff3ddd9-f9be-46cd-aaca-cc4594412251",
        "cursor": {
          "ref": "10d218ab-e832-4d64-ab31-c994c99cc178",
          "length": 243,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "b96a25fe-78fc-4410-ab59-f459840c5ffa"
        },
        "item": {
          "id": "5ff3ddd9-f9be-46cd-aaca-cc4594412251",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "9e90d635-28c9-4a52-9660-7838007d8169",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 126,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e03a3ca8-9d5d-4553-a174-9042b4636328",
        "cursor": {
          "ref": "4c688b3a-c07d-49fb-bad4-91af763fecd8",
          "length": 243,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "50605cd9-5602-4b20-b943-f2d1eb142903"
        },
        "item": {
          "id": "e03a3ca8-9d5d-4553-a174-9042b4636328",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "e707618c-a7a9-464d-a526-0b72992f8028",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 529,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ab723c1-46dd-4e9d-82b5-849073e733ca",
        "cursor": {
          "ref": "f570e94e-7c00-4d04-8c06-8e5af8b9afd2",
          "length": 243,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "20b0b060-42ca-48a3-a689-f65ed04c626c"
        },
        "item": {
          "id": "8ab723c1-46dd-4e9d-82b5-849073e733ca",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "5f58df0e-6905-46f2-a647-cd9a0f2947c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cc1d242-4dd8-4f17-a71a-8f189a972af3",
        "cursor": {
          "ref": "cc1220b4-0b98-493d-96dd-3e9ccf3ef7e5",
          "length": 243,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "d8a5efd8-1a9b-41ea-bc51-68cc7119898f"
        },
        "item": {
          "id": "0cc1d242-4dd8-4f17-a71a-8f189a972af3",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "6a297ac0-6948-4fd1-b0cf-10042e228c91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 140,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "239f524f-9cfa-46af-b944-1bb72a106131",
        "cursor": {
          "ref": "c520e943-5db7-4b17-a270-8356066210ad",
          "length": 243,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "40bc91cf-896c-4c4f-a102-6e145ad327b1"
        },
        "item": {
          "id": "239f524f-9cfa-46af-b944-1bb72a106131",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "a13a15d7-2e4b-4c9e-81ab-12bd475fe6e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06b847b9-cd0d-404a-8d25-6cdcdf3e9233",
        "cursor": {
          "ref": "2d442d78-45ca-4fe0-9b99-ed517764bcef",
          "length": 243,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "22dc1206-9745-468a-9aaf-62ae4d66f495"
        },
        "item": {
          "id": "06b847b9-cd0d-404a-8d25-6cdcdf3e9233",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "3b8c09d0-3226-4446-a839-86060108ce62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 557
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3970e3a-cef0-4fb9-a7fc-af1bb7e44cbd",
        "cursor": {
          "ref": "69ec1666-b6f6-4f6c-8e2e-3321ca7f2f38",
          "length": 243,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "1fb6ebd9-8802-46b1-ab4b-8e597f85c009"
        },
        "item": {
          "id": "c3970e3a-cef0-4fb9-a7fc-af1bb7e44cbd",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "6b27e7d5-1e5c-4b81-b034-8bed78c72049",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3eb3f27-8411-4837-b7dd-d9cb89cf1c89",
        "cursor": {
          "ref": "f781c63e-f815-4baf-9c4b-afc99b639bfb",
          "length": 243,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "403f8a6d-c22f-47dc-a7e3-84872c66352e"
        },
        "item": {
          "id": "f3eb3f27-8411-4837-b7dd-d9cb89cf1c89",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "a16dc78b-265e-40fe-a9e1-62b6ad23b07f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 292,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "730ec0d1-6e57-485a-ad17-a3dc5dc2c74f",
        "cursor": {
          "ref": "8eff8f3e-1d53-4bc7-9f7d-833e751ea416",
          "length": 243,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "29a5749f-82af-47e5-83ad-27122ea53cc1"
        },
        "item": {
          "id": "730ec0d1-6e57-485a-ad17-a3dc5dc2c74f",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "9305e7a8-af9c-4d7d-934f-085dc04e4b4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c13b16f-1e68-4824-b97e-41d85c3d3f5e",
        "cursor": {
          "ref": "66fddd25-ae23-473e-922f-8d371d295555",
          "length": 243,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "8188ce4b-0697-46e6-888a-b447bb445ea9"
        },
        "item": {
          "id": "9c13b16f-1e68-4824-b97e-41d85c3d3f5e",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "7c96c177-3fd2-47d6-ab91-6267c7c1f54e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 117,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d796c6c-5022-4a81-bee6-9beb480e0ce3",
        "cursor": {
          "ref": "bce5a5c5-054e-4197-8e2e-a37a9a9c5934",
          "length": 243,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "a97f3ef0-6331-463f-bd85-b181d2c6776e"
        },
        "item": {
          "id": "9d796c6c-5022-4a81-bee6-9beb480e0ce3",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "d5a267ee-de2b-41f0-ad88-7e78431072fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f917e13a-cf99-46e8-946e-7045df2b0840",
        "cursor": {
          "ref": "c5362122-c046-4231-b041-8da45aa072e5",
          "length": 243,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "3d6f0c4b-ad1d-46db-8016-7930b2a28d21"
        },
        "item": {
          "id": "f917e13a-cf99-46e8-946e-7045df2b0840",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "4585f56a-f1d2-48de-ae7a-057953b28161",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32f702ad-ef6e-4f46-8630-965905aefc3a",
        "cursor": {
          "ref": "d784cd89-7e58-45fd-9d0a-dc42efe429e0",
          "length": 243,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "95b45dac-d468-4f9f-8ac6-c90ebea59079"
        },
        "item": {
          "id": "32f702ad-ef6e-4f46-8630-965905aefc3a",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "a4410be2-1618-4255-a1d7-15e4a10f44b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12d47480-f27f-4019-b123-6fbccac490b6",
        "cursor": {
          "ref": "33e8b85f-67fd-43ca-9367-ad05c5ff358e",
          "length": 243,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "325f8261-16ac-40dd-a1cb-0b091098f0ef"
        },
        "item": {
          "id": "12d47480-f27f-4019-b123-6fbccac490b6",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "c9a03420-8437-43bd-aa60-5d878e4e5a2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59128f13-a003-435f-a4eb-6dc5d30a08be",
        "cursor": {
          "ref": "af39adfe-15aa-424c-add1-937f13eac19b",
          "length": 243,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "fde1a651-96dc-403f-8a46-40d4a27b1539"
        },
        "item": {
          "id": "59128f13-a003-435f-a4eb-6dc5d30a08be",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "3234becf-ba9d-4a2e-a096-e3866ac7855c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb108ae2-6c01-41b3-b10c-f1a60f80a61f",
        "cursor": {
          "ref": "4790e954-6881-480f-858b-55412846e496",
          "length": 243,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "2ca1149c-95b2-4573-95ad-5b081c45e576"
        },
        "item": {
          "id": "fb108ae2-6c01-41b3-b10c-f1a60f80a61f",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "fe78fef8-2727-49fe-94ca-a7a12234bd46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 402,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5637499a-b655-4c7d-a995-5afd477cf8b6",
        "cursor": {
          "ref": "0c73b1e3-ab2c-4e51-8b43-f7ef3e9de74c",
          "length": 243,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "fc6a481c-6086-4ae5-8c3f-b13bd1bfd840"
        },
        "item": {
          "id": "5637499a-b655-4c7d-a995-5afd477cf8b6",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "7cf2b781-ee93-49a6-8863-d58973b5faa3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 389
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21762113-247e-413f-8a5a-d485dd8f9b40",
        "cursor": {
          "ref": "b9f41c4e-4aa2-4881-a1f3-0938bd31f8ca",
          "length": 243,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "1560e921-abfb-4384-8a86-97e368322bf0"
        },
        "item": {
          "id": "21762113-247e-413f-8a5a-d485dd8f9b40",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "156e0f6a-7c71-4bb2-80bc-c7612f2b1f33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 388
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "629dfd69-cc53-4f00-94ef-8db3c57d58c1",
        "cursor": {
          "ref": "67468f24-f925-4ab8-a08e-d0e34768c27d",
          "length": 243,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "ad6f95f7-3069-4590-bf8d-0757b80e5262"
        },
        "item": {
          "id": "629dfd69-cc53-4f00-94ef-8db3c57d58c1",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "780ea1d5-53f8-4a9a-8403-88a2ac5c4c3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdcf3878-e432-4e67-88d8-402b1c97148e",
        "cursor": {
          "ref": "29969462-a6a8-4b80-9a2c-500c4bb1e718",
          "length": 243,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "1a7dfa28-d5a5-4b75-96fd-f5ff17a4585a"
        },
        "item": {
          "id": "fdcf3878-e432-4e67-88d8-402b1c97148e",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "d5c9cc23-ab78-40d4-ac56-e67d627e2159",
          "status": "Created",
          "code": 201,
          "responseTime": 734,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:85)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:85)"
            }
          }
        ]
      },
      {
        "id": "343df8b3-f009-4c38-81c3-14e7a5b079d5",
        "cursor": {
          "ref": "d066099e-6dd0-4ad9-a95e-a3f63575b028",
          "length": 243,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "823f3796-06ac-4045-a74f-e5ebb1172669"
        },
        "item": {
          "id": "343df8b3-f009-4c38-81c3-14e7a5b079d5",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "cb8053ef-434d-4433-8275-a33999d687a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7ffcc1d-7d35-421c-bc5a-0dd07d0e8b90",
        "cursor": {
          "ref": "3836a1a1-6b50-4fee-ac1a-e3fefff6e6e5",
          "length": 243,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "b2f4db10-6339-48eb-b061-61067e704697"
        },
        "item": {
          "id": "c7ffcc1d-7d35-421c-bc5a-0dd07d0e8b90",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "8713396c-f604-436e-b75f-ea325110687d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2729eb9f-f8a8-494c-963a-8f1501a22775",
        "cursor": {
          "ref": "a4d4ee5b-cc30-4a0b-a469-1de9a9b829b9",
          "length": 243,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "ecf6a148-8557-48aa-ba86-47edbcbcd09a"
        },
        "item": {
          "id": "2729eb9f-f8a8-494c-963a-8f1501a22775",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "01b3da87-8e12-4bb9-a21e-5a5d0d5af9d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f0aaf8c-e7ab-4874-aa61-e24d207567ee",
        "cursor": {
          "ref": "cb4f6290-57cd-4ea4-8357-997fc1083328",
          "length": 243,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "2237decf-4390-4134-837b-724ee54c1931"
        },
        "item": {
          "id": "2f0aaf8c-e7ab-4874-aa61-e24d207567ee",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "3576c48b-4cea-49d9-8222-e9643120c371",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b91da22-4544-4cda-866e-790883332cb0",
        "cursor": {
          "ref": "18db95c8-98b5-4825-af52-def4d5566dfc",
          "length": 243,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "05690a3f-c5b2-46ec-ace3-8023041812b4"
        },
        "item": {
          "id": "7b91da22-4544-4cda-866e-790883332cb0",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "fd1e4eb8-8911-4be6-b367-a371d1806b8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b3d1933-7d81-442c-b275-1df32e3557cb",
        "cursor": {
          "ref": "d80f539e-1753-487d-b0c1-d671279b130e",
          "length": 243,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "707aab23-b032-41e6-9f9a-6abfa4e299ce"
        },
        "item": {
          "id": "2b3d1933-7d81-442c-b275-1df32e3557cb",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "69e0b568-780a-4edf-8924-dde9d8f33baf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4d89d62-3695-48e1-906d-6c9b0b67375e",
        "cursor": {
          "ref": "b802bd5b-2e18-4ac3-8c1f-b1a11d8dca95",
          "length": 243,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "eafd32de-2ba0-4b4a-96d8-7cc63e96f6b2"
        },
        "item": {
          "id": "a4d89d62-3695-48e1-906d-6c9b0b67375e",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "068a41a3-5558-4b96-b525-a698d9888098",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2941cbf5-d4e4-4416-bdfb-a89aa6d0f91e",
        "cursor": {
          "ref": "b1721870-f33b-4fb4-9b3e-4395cac8c784",
          "length": 243,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "f5fdebab-6d6a-4fe0-a227-c6bb14045232"
        },
        "item": {
          "id": "2941cbf5-d4e4-4416-bdfb-a89aa6d0f91e",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "02d5560d-bac7-4578-a8c4-4fc1c78505d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 270,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "346542cd-4436-4923-9e32-69681d18a92d",
        "cursor": {
          "ref": "8e797682-b5bb-42f4-8962-05d38bc821e2",
          "length": 243,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "5ea46720-312b-43a0-b1ea-57deb0f5cd8c"
        },
        "item": {
          "id": "346542cd-4436-4923-9e32-69681d18a92d",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "a8992443-b99c-47f6-be45-dcc0996ed824",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:94)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:94)"
            }
          }
        ]
      },
      {
        "id": "c8709f2a-8e79-4ed4-99e2-077f2c207e7a",
        "cursor": {
          "ref": "7010dfed-eed5-423d-9f18-c2ab1f93bc6e",
          "length": 243,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "163c1b90-713f-450d-9132-6e9184967622"
        },
        "item": {
          "id": "c8709f2a-8e79-4ed4-99e2-077f2c207e7a",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "c040b9b5-c9ec-43d7-995d-c9de3959ba88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "86bf18b7-be87-4346-8c5d-023c8292a1db",
        "cursor": {
          "ref": "ad2a81cb-8df9-4ec5-92c1-11cc277931e9",
          "length": 243,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "bd24b26f-3e0f-4e7e-b079-564ae16e944c"
        },
        "item": {
          "id": "86bf18b7-be87-4346-8c5d-023c8292a1db",
          "name": "credentials_issue"
        },
        "response": {
          "id": "4121e0e0-69e9-4dbd-97f2-b79d14b83d99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:96)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:96)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 3,
              "test": "response credentialSubject matches request credential.credentialSubject",
              "message": ".empty was passed non-string primitive undefined",
              "stack": "AssertionError: .empty was passed non-string primitive undefined\n   at Object.eval sandbox-script.js:4:96)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 5,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot read properties of undefined (reading 'created')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'created')\n   at Object.eval sandbox-script.js:6:96)"
            }
          }
        ]
      },
      {
        "id": "7ebdd8c2-c1bc-41d2-bc9c-8c2090be2b9d",
        "cursor": {
          "ref": "2d4fa9f2-ac7b-4553-b4bf-3b37fc13e716",
          "length": 243,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "1fb990f9-21c8-4b44-8297-02b870a7589c"
        },
        "item": {
          "id": "7ebdd8c2-c1bc-41d2-bc9c-8c2090be2b9d",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "7f3fe0bc-e06d-4cf7-92eb-a963009679e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:97)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:97)"
            }
          }
        ]
      },
      {
        "id": "c27d1742-4628-41eb-bf41-9fdfe0358072",
        "cursor": {
          "ref": "e1bf7b69-5346-4879-a3ae-6e4377c5ff54",
          "length": 243,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "6949a912-7be0-4dd9-8d80-edbe62661214"
        },
        "item": {
          "id": "c27d1742-4628-41eb-bf41-9fdfe0358072",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "9d596b36-8837-4d6c-bf04-89be0d326474",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:98)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:98)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:98)"
            }
          }
        ]
      },
      {
        "id": "2d101dfe-b87b-4884-bafa-3d57889f3012",
        "cursor": {
          "ref": "d973c97a-0ca7-4557-bae5-e657223dff19",
          "length": 243,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "1a2fc133-189f-4f47-92ff-fcc77e8668bd"
        },
        "item": {
          "id": "2d101dfe-b87b-4884-bafa-3d57889f3012",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "b9266510-ecb0-42a9-9867-0b5fd8b610b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:99)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:99)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:99)"
            }
          }
        ]
      },
      {
        "id": "4ddc7dba-b8f7-4586-b20f-a570394b8536",
        "cursor": {
          "ref": "4184d416-b9fd-42f9-b71b-1ec98f994b9d",
          "length": 243,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "6d8e07ab-c112-4007-9c60-2a8bf72b8cff"
        },
        "item": {
          "id": "4ddc7dba-b8f7-4586-b20f-a570394b8536",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "c8af9bd4-27cb-492e-b144-95fe6fe36053",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:100)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:100)"
            }
          }
        ]
      },
      {
        "id": "3a2503ba-3c0c-420e-b102-420026186f1d",
        "cursor": {
          "ref": "74b4a950-12f1-4782-a9ff-b91d8463b026",
          "length": 243,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "7bf110fe-19d2-4ca5-87ea-83bff0ee8aaf"
        },
        "item": {
          "id": "3a2503ba-3c0c-420e-b102-420026186f1d",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "5103976c-7241-4001-8e89-7a3e663ca731",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 113,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:101)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:101)"
            }
          }
        ]
      },
      {
        "id": "3adcbb7d-57fb-4ff5-91cf-d30c092c173c",
        "cursor": {
          "ref": "1e701147-b730-48fe-a827-defa591c2a35",
          "length": 243,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "d066d75d-7aa4-450b-a9a1-7192a3a3719f"
        },
        "item": {
          "id": "3adcbb7d-57fb-4ff5-91cf-d30c092c173c",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "ff16e542-56f3-46a9-afbd-cfa05a1b2667",
          "status": "OK",
          "code": 200,
          "responseTime": 46,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "3adcbb7d-57fb-4ff5-91cf-d30c092c173c",
        "cursor": {
          "ref": "1e701147-b730-48fe-a827-defa591c2a35",
          "length": 243,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "d066d75d-7aa4-450b-a9a1-7192a3a3719f"
        },
        "item": {
          "id": "3adcbb7d-57fb-4ff5-91cf-d30c092c173c",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "ff16e542-56f3-46a9-afbd-cfa05a1b2667",
          "status": "OK",
          "code": 200,
          "responseTime": 46,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "0f027ffe-1008-44a1-8f2a-1110d0448957",
        "cursor": {
          "ref": "188d3e9c-b7f7-4d44-a77c-49c2277fe0d8",
          "length": 243,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "593895ce-a65e-426a-81e0-a91f294ae028"
        },
        "item": {
          "id": "0f027ffe-1008-44a1-8f2a-1110d0448957",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "cf5fee85-4b0b-41eb-9e2c-be506efe3d47",
          "status": "OK",
          "code": 200,
          "responseTime": 37,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "eeff41bb-1fb3-4267-bd31-8cfec02a08f1",
        "cursor": {
          "ref": "a319b41b-e7fa-41f1-a33a-364489c874d5",
          "length": 243,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "e8df6178-472b-4fba-98d1-4c2c0b95cea8"
        },
        "item": {
          "id": "eeff41bb-1fb3-4267-bd31-8cfec02a08f1",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "7f2dafcd-d767-4e89-95af-b685a5982d33",
          "status": "OK",
          "code": 200,
          "responseTime": 43,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:104)"
            }
          }
        ]
      },
      {
        "id": "1970f5de-da74-4d7b-8d7e-278c1888ba07",
        "cursor": {
          "ref": "74a10220-cc16-4853-8007-c27cea66b33b",
          "length": 243,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "b5486851-6096-4e2d-9967-dacb54c0acbb"
        },
        "item": {
          "id": "1970f5de-da74-4d7b-8d7e-278c1888ba07",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "bacf45b1-7470-402e-b931-d6d8e01e7a9d",
          "status": "OK",
          "code": 200,
          "responseTime": 128,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:105)"
            }
          }
        ]
      },
      {
        "id": "8f1a2f07-419c-409a-8d0b-1ceda2200a75",
        "cursor": {
          "ref": "1878991c-56ba-40bf-83fe-6370d4f8f524",
          "length": 243,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "3b414173-c6c7-4b98-8ca9-b5f88dc51dee"
        },
        "item": {
          "id": "8f1a2f07-419c-409a-8d0b-1ceda2200a75",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "4ad230d6-e2cc-476d-9f8f-b61a405c2326",
          "status": "OK",
          "code": 200,
          "responseTime": 51,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:106)"
            }
          }
        ]
      },
      {
        "id": "aa3b0a70-4164-402d-a77d-07d17d2226d4",
        "cursor": {
          "ref": "32cc45c9-45b5-4809-b912-a02ec01f1f8f",
          "length": 243,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "1ed390b8-c9c5-4457-9483-9a3e7c96e99f"
        },
        "item": {
          "id": "aa3b0a70-4164-402d-a77d-07d17d2226d4",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "f8a6e20d-cb65-4e14-889f-da024a40a42e",
          "status": "OK",
          "code": 200,
          "responseTime": 27,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:107)"
            }
          }
        ]
      },
      {
        "id": "746fb200-5519-43c8-a66d-4bb80ac23dee",
        "cursor": {
          "ref": "b4b1a080-ea73-41d4-89a7-03ac01e61f07",
          "length": 243,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "953707ec-bdc5-4981-ae3f-9ff0920f5ec6"
        },
        "item": {
          "id": "746fb200-5519-43c8-a66d-4bb80ac23dee",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "e1173153-6d13-4636-8055-9dc1e05fc179",
          "status": "OK",
          "code": 200,
          "responseTime": 8,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:108)"
            }
          }
        ]
      },
      {
        "id": "af434884-c295-49fd-ad0a-82960bec5ab8",
        "cursor": {
          "ref": "6b1f6cd1-0d4a-4b0f-891b-00862bd6decc",
          "length": 243,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "424c0811-b515-4b44-a7a7-f9289a30f046"
        },
        "item": {
          "id": "af434884-c295-49fd-ad0a-82960bec5ab8",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "7509ec2e-b1e8-4e49-9fe6-4ab65e2400cc",
          "status": "OK",
          "code": 200,
          "responseTime": 29,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:109)"
            }
          }
        ]
      },
      {
        "id": "67800616-6004-43c8-b133-54572e8355a0",
        "cursor": {
          "ref": "49bd79fe-4182-4d49-9464-995dd500e133",
          "length": 243,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "f0229be7-b4d3-406c-b812-4bac97c1e64d"
        },
        "item": {
          "id": "67800616-6004-43c8-b133-54572e8355a0",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "d5e3e197-4611-446c-9ba1-ede3005ef8db",
          "status": "OK",
          "code": 200,
          "responseTime": 39,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "9c490d68-5c1a-4f2f-8396-301b51a5b2e0",
        "cursor": {
          "ref": "ae2cb0d5-07cb-49ef-a53f-ddbacab8c174",
          "length": 243,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "f1c0b920-4dda-4cda-b1e4-65f0149a2415"
        },
        "item": {
          "id": "9c490d68-5c1a-4f2f-8396-301b51a5b2e0",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "af0faeeb-e7be-444d-a5b5-8172f819b5e7",
          "status": "OK",
          "code": 200,
          "responseTime": 24,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "f33ea545-723b-483b-bc5b-bf3dec20dbaf",
        "cursor": {
          "ref": "2662d5b0-3f8f-4609-85c3-88204e98379e",
          "length": 243,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "ca6906c7-eb48-4c1b-8539-3a2fe58349ae"
        },
        "item": {
          "id": "f33ea545-723b-483b-bc5b-bf3dec20dbaf",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "37ef454b-e385-4627-924b-85280c8f194c",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "a7361c40-ff56-4b91-9e86-60c8d05d322e",
        "cursor": {
          "ref": "dd6a56b8-34bb-44fb-8b52-fdd59ecfeafb",
          "length": 243,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "2950b375-615c-4907-9d9f-b884b2b2f656"
        },
        "item": {
          "id": "a7361c40-ff56-4b91-9e86-60c8d05d322e",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "b59fc96e-95da-40b2-9544-9ab447ffd018",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "8b9f6f81-dbb4-4cbc-aa77-9789d799565b",
        "cursor": {
          "ref": "a51e64b2-ef2c-440d-b468-fa37446f6652",
          "length": 243,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "4d5c4510-5fd0-4da1-ad01-1d208bde69d3"
        },
        "item": {
          "id": "8b9f6f81-dbb4-4cbc-aa77-9789d799565b",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "7cf2c98b-f01b-4f70-a4ec-33913c505eab",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "b5a669e2-da03-40be-a905-aa8b93400205",
        "cursor": {
          "ref": "8cc4dc1d-59f6-4a11-b2bb-5d8d65f68d73",
          "length": 243,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "f763c0fa-7a80-47a6-b4bd-73b5ef4878f9"
        },
        "item": {
          "id": "b5a669e2-da03-40be-a905-aa8b93400205",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "f2e6aad9-803c-4648-b7fc-a749fe7fd0f5",
          "status": "OK",
          "code": 200,
          "responseTime": 35,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "0c16bc17-a82a-4912-84cf-16ea9e389bb4",
        "cursor": {
          "ref": "4f011596-6521-4faa-a93e-ccac6d2b0ac0",
          "length": 243,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "573e5745-a646-447e-b01e-76145f0326d3"
        },
        "item": {
          "id": "0c16bc17-a82a-4912-84cf-16ea9e389bb4",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "17757537-16de-432d-ac0d-3f35f48be34d",
          "status": "OK",
          "code": 200,
          "responseTime": 14,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "b173e0cc-6b3f-4676-a5c3-b617d14a9196",
        "cursor": {
          "ref": "b7151062-c4a9-44b8-a140-f09a5664a30f",
          "length": 243,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "62bb73c6-f315-43e9-be65-5de63b96c361"
        },
        "item": {
          "id": "b173e0cc-6b3f-4676-a5c3-b617d14a9196",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "6f41d287-47c3-4838-9ad9-87d12f827bc6",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "15a439f1-b6a1-48ac-9048-32f32d63943d",
        "cursor": {
          "ref": "15f9299b-660d-4051-b067-bffc79ff95e7",
          "length": 243,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "d85fa41e-94ce-4575-938e-131dbc10d736"
        },
        "item": {
          "id": "15a439f1-b6a1-48ac-9048-32f32d63943d",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "e948a351-0946-41c4-b72c-f93cf971a0c0",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "a03fb0ca-18ff-4d4a-93ca-bc16b5f57a71",
        "cursor": {
          "ref": "f0bd6d35-9e55-4639-942f-a652246144ac",
          "length": 243,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "4c782015-817a-427d-87dc-73e4a6b563cb"
        },
        "item": {
          "id": "a03fb0ca-18ff-4d4a-93ca-bc16b5f57a71",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "18902411-da83-425b-b726-b1a0fcd7f3b0",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "12a4dba5-f754-4a00-8461-08b62e8166c7",
        "cursor": {
          "ref": "4f585951-4866-44ce-8717-a4f0ff1e989d",
          "length": 243,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "e35f675c-6813-4164-867b-a93926355900"
        },
        "item": {
          "id": "12a4dba5-f754-4a00-8461-08b62e8166c7",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "a967d996-fdf9-4362-8970-03234fd97fd9",
          "status": "OK",
          "code": 200,
          "responseTime": 25,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "23135d78-5724-48ed-b05d-3738be733560",
        "cursor": {
          "ref": "75020fca-5917-493b-8144-ba46899063bd",
          "length": 243,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "22aede88-c724-4fb2-a9d0-798c2d9a142b"
        },
        "item": {
          "id": "23135d78-5724-48ed-b05d-3738be733560",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "30bf29ec-5ca3-4e5e-926f-3505139c44bc",
          "status": "OK",
          "code": 200,
          "responseTime": 14,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "3ff20af7-0d81-4802-aafc-f4d905fe544a",
        "cursor": {
          "ref": "6338aa52-4d80-4dc6-baa1-d91dbd543fb3",
          "length": 243,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "013b000e-3e89-4178-9aff-2bcdc9e3a0b4"
        },
        "item": {
          "id": "3ff20af7-0d81-4802-aafc-f4d905fe544a",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "17fa0ba0-d2e2-4cfa-aec0-32216e9c607c",
          "status": "OK",
          "code": 200,
          "responseTime": 34,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "89702f6e-bd21-4f07-93a6-376eedcf739e",
        "cursor": {
          "ref": "6c2b771d-e3bb-4f63-9348-54635bac28ea",
          "length": 243,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "f3801574-91aa-483a-879a-83e681971ec6"
        },
        "item": {
          "id": "89702f6e-bd21-4f07-93a6-376eedcf739e",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "79151ff6-eb07-4baa-8cc3-ca682cccecdc",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "ff99cde0-9e70-44c9-b037-4892f48e430d",
        "cursor": {
          "ref": "225a1d0b-e5c8-48d7-8ff1-6cded83fc3cc",
          "length": 243,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "2513a441-d5f8-4a77-af97-3b4eb56f7483"
        },
        "item": {
          "id": "ff99cde0-9e70-44c9-b037-4892f48e430d",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "62fb704a-2e42-4bbf-b342-5c9c55a6ebc3",
          "status": "OK",
          "code": 200,
          "responseTime": 15,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "31e5d26a-6545-4e4a-9ab8-71fc5fc52bdf",
        "cursor": {
          "ref": "089eb481-4700-4b8e-939e-145c2f7d568c",
          "length": 243,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "16623f0e-0cd8-415c-9dc2-98862eed4072"
        },
        "item": {
          "id": "31e5d26a-6545-4e4a-9ab8-71fc5fc52bdf",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "8505128e-4c76-4bd3-b3a1-3986ab6555f0",
          "status": "OK",
          "code": 200,
          "responseTime": 14,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "04b5c09a-9963-4bd3-9d73-7133a32d62f6",
        "cursor": {
          "ref": "e289555b-7b31-47c0-a282-5f206128db41",
          "length": 243,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "461e1822-0060-4736-ad00-415d32e5bc18"
        },
        "item": {
          "id": "04b5c09a-9963-4bd3-9d73-7133a32d62f6",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "e81d0ee2-def4-45d3-984c-8cb3b90d80e1",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "3e200095-e746-4710-89a0-3c85c06a61e6",
        "cursor": {
          "ref": "6fbf8348-8065-494a-a936-0b6104256d9c",
          "length": 243,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "18ddf28c-a7ac-40c2-b3af-43ba682809ce"
        },
        "item": {
          "id": "3e200095-e746-4710-89a0-3c85c06a61e6",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "1784fb4e-59d1-4c91-bc68-30ce31a91b5e",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "51836300-aa35-459d-8e06-48687a6dc606",
        "cursor": {
          "ref": "d432f838-6e97-4508-815f-412417bfa40d",
          "length": 243,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "94f7092e-0c85-40aa-a974-7c940c44aed4"
        },
        "item": {
          "id": "51836300-aa35-459d-8e06-48687a6dc606",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "aad19185-1747-4759-b893-1bc9dd1db42e",
          "status": "OK",
          "code": 200,
          "responseTime": 23,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "2f8f15f8-74a8-42fb-8d97-d8c1298b55bb",
        "cursor": {
          "ref": "c7b249bd-7ea5-4c4c-8881-b1a7d96306ec",
          "length": 243,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "35cc8f2c-ca3c-41aa-900a-b75d3c95a6fc"
        },
        "item": {
          "id": "2f8f15f8-74a8-42fb-8d97-d8c1298b55bb",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "a3316677-d9e0-4a92-b3bb-64a05bc3d83f",
          "status": "OK",
          "code": 200,
          "responseTime": 43,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "7d63078b-10ab-45c2-aa12-66a8fcfb9a6e",
        "cursor": {
          "ref": "defba187-22ac-40fc-833e-ef3c024889ca",
          "length": 243,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "0664e565-ed30-419f-bd89-97eb92e9a6f1"
        },
        "item": {
          "id": "7d63078b-10ab-45c2-aa12-66a8fcfb9a6e",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "1c41e50a-7bc9-47e0-8c1d-3e03fe784683",
          "status": "OK",
          "code": 200,
          "responseTime": 41,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "8c5b8042-d779-4676-a932-a569e732662d",
        "cursor": {
          "ref": "47068f5a-221f-4a49-a7b0-c26b82bad689",
          "length": 243,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "7c8c366c-eebd-46e7-9625-4440d4f2d7cd"
        },
        "item": {
          "id": "8c5b8042-d779-4676-a932-a569e732662d",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "fa77c5ac-e7f2-4743-ab2c-863bbc1fab06",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "16789499-e593-45dd-9868-5663f1dad752",
        "cursor": {
          "ref": "fd750c0c-4834-4e7b-8096-18489c5d4054",
          "length": 243,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "abdb2313-647b-4fb4-8a21-c010b0ae1086"
        },
        "item": {
          "id": "16789499-e593-45dd-9868-5663f1dad752",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "214308a0-8022-498f-a6fc-39574fa413cd",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "e11dc014-34fd-4fa8-9a62-14187d444d20",
        "cursor": {
          "ref": "8fc489c1-410d-49ed-8691-bb81ba832990",
          "length": 243,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "59ca82da-4411-4a4d-a944-f8a7581b4d2e"
        },
        "item": {
          "id": "e11dc014-34fd-4fa8-9a62-14187d444d20",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "4fe0435a-724a-4e3c-9749-35581f1fc3bb",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "2de86286-0ab6-4948-898d-53b85cda74f9",
        "cursor": {
          "ref": "d076d5d5-dba8-45f3-9830-c563cc954059",
          "length": 243,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "652e2759-a9ae-488e-a802-4c9e29dd3f73"
        },
        "item": {
          "id": "2de86286-0ab6-4948-898d-53b85cda74f9",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "3afef9f2-6273-495d-a62d-64c5dd9f8d1d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 40,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4980dce-ec35-466a-b422-3b8d3e8cd38a",
        "cursor": {
          "ref": "e60b36d6-f74e-4c4c-8d1d-aec822bf45cf",
          "length": 243,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "d96c7648-fd92-4a69-8bf7-deee5550a530"
        },
        "item": {
          "id": "c4980dce-ec35-466a-b422-3b8d3e8cd38a",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "e3dafa6e-b4ec-492f-97ad-7c3a084709cf",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 19,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39347d89-ea5f-42c6-b970-7d086a5fc36a",
        "cursor": {
          "ref": "fe10eca3-fe7a-431c-8c03-5cbcb7b1f8c5",
          "length": 243,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "43585096-cef1-4a4f-82d9-fd19b7ad0617"
        },
        "item": {
          "id": "39347d89-ea5f-42c6-b970-7d086a5fc36a",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "4464aa00-477a-4a33-8293-86ebf9b0d781",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39347d89-ea5f-42c6-b970-7d086a5fc36a",
        "cursor": {
          "ref": "fe10eca3-fe7a-431c-8c03-5cbcb7b1f8c5",
          "length": 243,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "43585096-cef1-4a4f-82d9-fd19b7ad0617"
        },
        "item": {
          "id": "39347d89-ea5f-42c6-b970-7d086a5fc36a",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "4464aa00-477a-4a33-8293-86ebf9b0d781",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37a4c0a9-8584-4441-a400-8422903a3a44",
        "cursor": {
          "ref": "a9bd31c4-f44e-441e-9a09-63d3c89f64c7",
          "length": 243,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "c3f787bf-0514-499f-a2f2-d25815e284e1"
        },
        "item": {
          "id": "37a4c0a9-8584-4441-a400-8422903a3a44",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "2e504b24-e948-4942-abf7-6fa2ba0af02c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf84548a-e20b-48b3-aff6-3420372fe20f",
        "cursor": {
          "ref": "1823c6a0-4690-4ee3-87e2-af682588c313",
          "length": 243,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "69d5b296-eec3-4fe4-88c4-439fe70dfdf2"
        },
        "item": {
          "id": "cf84548a-e20b-48b3-aff6-3420372fe20f",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "3f5b06f9-9fe5-449b-bfa1-348bee0452ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f2ba8c9-bedf-481a-802f-e6c1ed2196ce",
        "cursor": {
          "ref": "aaa80d1c-0818-4563-bc5f-beb1b3be40d8",
          "length": 243,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "7944b14f-3471-43c9-b2f4-a9c2891aa25d"
        },
        "item": {
          "id": "3f2ba8c9-bedf-481a-802f-e6c1ed2196ce",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "4f495488-1f19-4669-b89f-fb6a613b3426",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5797589-04a0-4896-b888-44b9213297b4",
        "cursor": {
          "ref": "a534d09e-838d-4bfa-9c9a-eef07e689cdb",
          "length": 243,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "159b1bfc-c35a-4e5b-af9d-1a55e4729563"
        },
        "item": {
          "id": "b5797589-04a0-4896-b888-44b9213297b4",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "085436dd-bdfd-41a8-989b-8fe7405c3860",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b957556-ea3d-47aa-aee3-6660e1a54d24",
        "cursor": {
          "ref": "5b52981a-ad4d-4a73-ab8f-d3bffd708917",
          "length": 243,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "6959ed4a-37fe-4138-9545-268006841098"
        },
        "item": {
          "id": "3b957556-ea3d-47aa-aee3-6660e1a54d24",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "6c154f28-2361-4b00-a7b2-264a4c9f7d4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fea79ed9-a4e2-4d95-87be-5b6950ecefb1",
        "cursor": {
          "ref": "a4a2f2e9-daff-46b2-b3dc-d65a9f30af99",
          "length": 243,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "54bbc546-eff6-49be-8320-5a302eb83b93"
        },
        "item": {
          "id": "fea79ed9-a4e2-4d95-87be-5b6950ecefb1",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "208cd6be-61bc-4e5a-91cf-d680b3658765",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 999,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8c7a0c0-11e2-4b54-9030-e6fdef9036e7",
        "cursor": {
          "ref": "be9daaea-1333-42d7-a3ff-a04eb76934eb",
          "length": 243,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "363abd78-07f5-4d4b-a0e4-9d57c120ea4f"
        },
        "item": {
          "id": "b8c7a0c0-11e2-4b54-9030-e6fdef9036e7",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "4cf7955c-2bcd-4eed-8bf9-6b9498f6d8ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d64f8694-34fb-45ae-87d3-2d11b9b8b27c",
        "cursor": {
          "ref": "148b0c44-28e2-447b-b06e-7e6556f617d4",
          "length": 243,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "f8b8913d-e6a7-477c-a4a4-d87f8df15261"
        },
        "item": {
          "id": "d64f8694-34fb-45ae-87d3-2d11b9b8b27c",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "81d28ec6-a47f-4938-97a1-38d2dc06ffae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6a2ecdf-f87b-45d9-86b8-06d2cab8d8c0",
        "cursor": {
          "ref": "7f5615bb-a289-4b34-a56b-7aa0668c8dda",
          "length": 243,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "5d5d664d-aea1-48bc-a2ca-aecdc69b536b"
        },
        "item": {
          "id": "e6a2ecdf-f87b-45d9-86b8-06d2cab8d8c0",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "c53a55cf-837e-441f-a266-fa5e5ad4678b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80f9fcc3-d869-4949-955c-d492ae60f744",
        "cursor": {
          "ref": "cf2ab9c6-0d57-4aa4-b2f6-e188293c49a4",
          "length": 243,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "26ce622b-10f2-49a1-86ce-d41962856cf7"
        },
        "item": {
          "id": "80f9fcc3-d869-4949-955c-d492ae60f744",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "9d415980-447c-4178-8421-c8cb012ed26c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf79ce42-2765-4921-b2ff-8b905d575ea2",
        "cursor": {
          "ref": "57ae1284-c1aa-4a1e-b1a7-40d60249e856",
          "length": 243,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "ef3f9bc4-5463-4e5f-be95-52357a7ee32a"
        },
        "item": {
          "id": "cf79ce42-2765-4921-b2ff-8b905d575ea2",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "eb0d143c-6d6b-474a-850e-86f5780a5059",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 241,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04f2b49a-bdd3-497b-88da-7b8ef07483e5",
        "cursor": {
          "ref": "960aa05e-25fd-416e-af4e-a87760bdc240",
          "length": 243,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "c22ec536-059f-4590-92bd-8b26465b6240"
        },
        "item": {
          "id": "04f2b49a-bdd3-497b-88da-7b8ef07483e5",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "16ce1bcd-8e7c-43fd-b0e5-ba0aaadc3aff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c357cd34-2085-4bfa-87d7-6fef6115e5dd",
        "cursor": {
          "ref": "eb8da3d3-a550-4378-b8c6-f1c90d57d5e2",
          "length": 243,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "328d6ee6-4bac-498c-8172-0fd41099e0a9"
        },
        "item": {
          "id": "c357cd34-2085-4bfa-87d7-6fef6115e5dd",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "9c3b4fbe-23dd-4397-b00e-d2e8493231fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01fb65e9-7b5a-4e1d-bf3d-f98e0afecc6d",
        "cursor": {
          "ref": "7fb2fed0-2650-4737-ab30-10606b877261",
          "length": 243,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "0e650d0b-4d98-4e66-b886-54509b2eeb1f"
        },
        "item": {
          "id": "01fb65e9-7b5a-4e1d-bf3d-f98e0afecc6d",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "67d2bf79-8d92-4939-b378-a819754b59ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b072038-0e33-427b-8cc5-20fb80c75e82",
        "cursor": {
          "ref": "e087ca71-80c7-48cd-bca7-01ab43695967",
          "length": 243,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "525c7894-4511-432a-be62-30ec59d12009"
        },
        "item": {
          "id": "4b072038-0e33-427b-8cc5-20fb80c75e82",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "e6f06b62-3767-4ad2-967a-2e45f5b9f813",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bd2942a-9974-4d7b-b1dd-6d801af92e0b",
        "cursor": {
          "ref": "9dafc97b-9c54-4729-8b45-11b83ee5ec81",
          "length": 243,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "e06e2035-051f-4efb-81a9-09db42b6f137"
        },
        "item": {
          "id": "3bd2942a-9974-4d7b-b1dd-6d801af92e0b",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "b00ba6d2-3a2f-4a68-b9e6-567bbba49f7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b81a6c4f-aaa1-4f83-8e3f-bd1937883a8f",
        "cursor": {
          "ref": "650f72ac-350b-400d-9662-9eab1cf4026c",
          "length": 243,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "44dde061-944d-4651-8602-d76d64ec9a12"
        },
        "item": {
          "id": "b81a6c4f-aaa1-4f83-8e3f-bd1937883a8f",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "362d4d20-4a10-4c1b-9efb-b094baa405e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 454,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f137a490-6238-4a02-ad37-900fed3cd378",
        "cursor": {
          "ref": "f2334957-bdbf-40e0-bd21-e4280e07d48b",
          "length": 243,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "40bdd180-843e-4065-8a0e-fac0c1493566"
        },
        "item": {
          "id": "f137a490-6238-4a02-ad37-900fed3cd378",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "dd05afbf-50e2-48b1-8852-d3691324e4c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 303,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "178a2fcb-47c8-4ba7-a03d-7bfed79da36c",
        "cursor": {
          "ref": "76c40a33-4da6-47f5-a6df-097b4018031b",
          "length": 243,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "062f4384-5937-4808-b85c-5094453cd5f1"
        },
        "item": {
          "id": "178a2fcb-47c8-4ba7-a03d-7bfed79da36c",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "89d8b4ea-d73e-4803-9e0e-fae669c9c37e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 835,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09b6cbe2-4208-4fbb-83aa-95d4a8b736f6",
        "cursor": {
          "ref": "27ee3333-a893-44d8-940f-cfbc19bef80d",
          "length": 243,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "0a068483-32a9-4f11-bbba-574f3d09b400"
        },
        "item": {
          "id": "09b6cbe2-4208-4fbb-83aa-95d4a8b736f6",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "aade6edd-ba4a-4ee2-98d1-54e6307079df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 500,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "126ef75a-1258-481a-b84d-9463cad4076f",
        "cursor": {
          "ref": "113f3164-420e-4171-ab28-83105b594ade",
          "length": 243,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "5f18abf2-864e-4f5f-9982-335586215458"
        },
        "item": {
          "id": "126ef75a-1258-481a-b84d-9463cad4076f",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "a68b1076-06bb-4d29-bc9b-15f48151a670",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 636,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66956b66-a502-4d88-9750-8c45d89071d3",
        "cursor": {
          "ref": "091c8047-336f-4c2b-9b76-a6cbff10b772",
          "length": 243,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "205f9d27-ab1b-4262-b659-af9784b13be6"
        },
        "item": {
          "id": "66956b66-a502-4d88-9750-8c45d89071d3",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "41edf425-cdd6-4ba8-b6c7-6f3fab63e873",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 420,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fd0a270-1c14-41c2-b1bc-09a1bec5ffe3",
        "cursor": {
          "ref": "07134b59-7094-49f7-9f89-870fc0c91b37",
          "length": 243,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "49e65904-8b8d-445c-9b54-a24194c572e7"
        },
        "item": {
          "id": "7fd0a270-1c14-41c2-b1bc-09a1bec5ffe3",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "a8adc876-cf5d-47f0-9cc6-0855a1e7df1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c00b6b4-d2de-436d-af6e-a2353a96e6c0",
        "cursor": {
          "ref": "2a287271-4341-4293-b14a-a577c0a9f7bb",
          "length": 243,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "5bfe2199-0623-4650-902c-e200da2d2640"
        },
        "item": {
          "id": "9c00b6b4-d2de-436d-af6e-a2353a96e6c0",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "4dec1637-d6d4-4e77-b616-d46b3798e439",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53819e9a-f867-4180-a4c4-bbfa8c04fa9d",
        "cursor": {
          "ref": "c02e5b16-d6aa-49d1-9bab-9961cd8c75a0",
          "length": 243,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "e84dc155-7a48-40f4-9498-5a34241f66af"
        },
        "item": {
          "id": "53819e9a-f867-4180-a4c4-bbfa8c04fa9d",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "86130eef-35c2-4bae-ae8d-87bd64bb9ad6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 637,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14ebafc0-3b9c-4c9e-ac32-67546b766888",
        "cursor": {
          "ref": "588ed348-963a-4aaf-93ac-28d5422482a5",
          "length": 243,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "e79efc7b-8ff4-4b29-8381-9a7ce6020f24"
        },
        "item": {
          "id": "14ebafc0-3b9c-4c9e-ac32-67546b766888",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "0a76776d-47e5-4655-9eb2-626fb371e032",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2eb3d0af-71b1-4e29-9da2-01b22418137d",
        "cursor": {
          "ref": "41c467f1-328b-43e4-8d56-5a350534463b",
          "length": 243,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "75fc4e90-9689-4d62-936b-0e49b47c1c39"
        },
        "item": {
          "id": "2eb3d0af-71b1-4e29-9da2-01b22418137d",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "d68a6c76-6f8e-48bc-8d87-4977245246ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b74381bd-a55b-42f5-8dd5-67c5a29669ff",
        "cursor": {
          "ref": "33bcdf82-fb4f-46cc-b392-eb672af2afbf",
          "length": 243,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "ada8172b-6075-410c-b6ad-38e7f436db7e"
        },
        "item": {
          "id": "b74381bd-a55b-42f5-8dd5-67c5a29669ff",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "152e799e-6af9-4bd9-a04a-7dccb98364d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 361,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "010166a9-de5b-4f97-9318-532edb9e877f",
        "cursor": {
          "ref": "5608fb97-61be-4857-8c6e-357f72048db1",
          "length": 243,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "1fa102cc-8391-405c-9353-f3ccc12a92fa"
        },
        "item": {
          "id": "010166a9-de5b-4f97-9318-532edb9e877f",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "2020d30e-edb2-4251-adcc-21a6d263ce73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb14b194-da88-4361-909d-ed114a420c7d",
        "cursor": {
          "ref": "5355c5d7-a06a-446e-9512-27604bc3b582",
          "length": 243,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "d2acf1b8-7cd4-49d3-9bc8-2fc7336fa584"
        },
        "item": {
          "id": "bb14b194-da88-4361-909d-ed114a420c7d",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "55b65d4c-faae-4b39-a31d-b4ec10c1f228",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ad0bf21-01f4-41ff-9450-7a88939f4b09",
        "cursor": {
          "ref": "d08f31bd-e7d1-4cd6-9afa-041f214a45c3",
          "length": 243,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "94443bed-94a7-494e-9428-6c14f0b693ca"
        },
        "item": {
          "id": "4ad0bf21-01f4-41ff-9450-7a88939f4b09",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "cb0b3b3c-8615-409f-a423-de9fc2cd1fe9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "907daf07-d511-4795-ac32-77a39590e3fd",
        "cursor": {
          "ref": "ca607b86-c340-4fb7-933c-a1647a2bf060",
          "length": 243,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "45eafce4-852e-44e3-9693-38e1932e9c41"
        },
        "item": {
          "id": "907daf07-d511-4795-ac32-77a39590e3fd",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "51485fbd-45a6-4afc-8b8e-7ee110935b01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 395,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1cdb86d-4129-4b45-ad45-2c68aced2947",
        "cursor": {
          "ref": "7559f60b-376e-4881-8f2c-86df0264a6d3",
          "length": 243,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "2554aff2-3c22-4d9b-b325-1d8e5406f5a2"
        },
        "item": {
          "id": "e1cdb86d-4129-4b45-ad45-2c68aced2947",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "0a4ca4ae-7eb0-47a7-bb4f-c1e2fea73505",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ba79842-bf16-4dea-af1f-2b109d9e7c25",
        "cursor": {
          "ref": "75e9d96b-8e2a-4d0b-8597-185c8d8d4949",
          "length": 243,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "26b8228f-4a74-4279-962e-12375a2620e6"
        },
        "item": {
          "id": "8ba79842-bf16-4dea-af1f-2b109d9e7c25",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "dd3886e6-641d-4c2f-bd5c-3cb36b0f53df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1023,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f0baf9c-10e4-4a6f-b492-6d8bef05a905",
        "cursor": {
          "ref": "cbe10a0e-91c6-4856-a4e4-922770ea6065",
          "length": 243,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "b54a6c23-7a7e-42b1-8fe3-f49eacc8618d"
        },
        "item": {
          "id": "9f0baf9c-10e4-4a6f-b492-6d8bef05a905",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "cec645bd-2b6c-4404-9e80-9387a4a5883f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1662,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efba19a4-0945-4eba-9975-c14f5151432f",
        "cursor": {
          "ref": "5e93f6ca-7b02-4797-9637-9e2a169719e0",
          "length": 243,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "cb7dae78-c6fb-4496-ad00-92907d4bc5e0"
        },
        "item": {
          "id": "efba19a4-0945-4eba-9975-c14f5151432f",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "baa3ea2e-3318-4b86-bd60-e0a6df040ecb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 447,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "399a5759-9265-4f16-9f19-147be0cdd47e",
        "cursor": {
          "ref": "f2c8386e-094c-4bf3-b940-2182e87c2996",
          "length": 243,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "f4040e90-c675-4be9-9430-c03aadda3a61"
        },
        "item": {
          "id": "399a5759-9265-4f16-9f19-147be0cdd47e",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "95dce224-3c46-4b79-b863-4a68ad397d1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 343,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a7a5080-065c-4e73-a093-ce88e7d8430f",
        "cursor": {
          "ref": "428ac88f-9324-4438-b7f6-3c2892d62327",
          "length": 243,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "e5c9e168-e7c0-40fc-a070-42315c965004"
        },
        "item": {
          "id": "5a7a5080-065c-4e73-a093-ce88e7d8430f",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "eb405f22-93cf-4a09-8b82-bdb0c8389208",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 296,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5a5abd0-f738-4f8c-931e-e54b9bc13a15",
        "cursor": {
          "ref": "2fee0b8c-6531-432f-b1f4-a413845c7196",
          "length": 243,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "196581a2-2346-43ee-9f2f-01d4b5d17e3c"
        },
        "item": {
          "id": "f5a5abd0-f738-4f8c-931e-e54b9bc13a15",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "9da21b93-3df1-4464-b5c4-c10f168d599d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 632,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "876a7808-26bf-42d0-bcf8-0f360bf91fda",
        "cursor": {
          "ref": "4dbbaa97-99d4-43ba-9b53-3f0858d923c9",
          "length": 243,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "a22cff63-5b98-4a9e-a2ed-b207a0cb660a"
        },
        "item": {
          "id": "876a7808-26bf-42d0-bcf8-0f360bf91fda",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "1fd47656-e8c9-407f-ba94-6b9dd1ce4141",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 298,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cf72541-6ca2-4c87-803a-9257c2d7d944",
        "cursor": {
          "ref": "e3fc7ede-75ef-4f54-bf2e-7d38e72abaf2",
          "length": 243,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "21816703-e3c2-4fe1-b44c-a6fa2955a34f"
        },
        "item": {
          "id": "4cf72541-6ca2-4c87-803a-9257c2d7d944",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "5a29a2f9-c3d6-4643-af1d-d5565c2103b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 269,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6152e231-56a8-468f-b098-43b15b80b371",
        "cursor": {
          "ref": "577c3a4e-b647-4084-8e51-3ec503ed0953",
          "length": 243,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "b92d8894-4b2d-4446-be95-69264afff545"
        },
        "item": {
          "id": "6152e231-56a8-468f-b098-43b15b80b371",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "72dcbf8a-c3f6-476a-a7c2-b16ae69d22f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 365,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a35b5ac0-1119-46be-9118-37012f9884ea",
        "cursor": {
          "ref": "dac43070-586a-4940-8ca0-b03df0db330a",
          "length": 243,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "ba5c03ac-d253-4fba-b79c-1b8626bb113f"
        },
        "item": {
          "id": "a35b5ac0-1119-46be-9118-37012f9884ea",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "c1c432b4-685e-4640-ba6c-3ffbc12276c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 980,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bd67b2b-a55e-4ba0-afed-84931407e594",
        "cursor": {
          "ref": "7f759b6d-399d-4e28-96a3-2a859e6b99e8",
          "length": 243,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "183c1319-36f8-414c-a966-fb5bb0fc9eaf"
        },
        "item": {
          "id": "1bd67b2b-a55e-4ba0-afed-84931407e594",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "8384a8fb-7003-4447-93dd-521accc46b70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 373,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15dd7f15-1f3e-4dea-9558-bb693a7ee366",
        "cursor": {
          "ref": "afff958c-f200-40ff-a165-737fbac4a506",
          "length": 243,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "69971484-00e5-45f0-93ab-52367c21f768"
        },
        "item": {
          "id": "15dd7f15-1f3e-4dea-9558-bb693a7ee366",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "7ca5257f-cdae-48cf-b0e6-f327827aff3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 363,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61289c0f-5939-4454-be90-23b06bce0bd7",
        "cursor": {
          "ref": "60d06a8e-c00f-4c67-9666-e436bc455598",
          "length": 243,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "ad754a63-5978-455c-a223-cb5ccacfb7bc"
        },
        "item": {
          "id": "61289c0f-5939-4454-be90-23b06bce0bd7",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "05c00ed0-4b08-424b-9923-4cd2d24fc21e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 391,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad7e1160-3780-448a-8d1e-fdf95a510729",
        "cursor": {
          "ref": "24a7050d-7eb0-4972-ab0a-21e7e0690bfe",
          "length": 243,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "16121e36-cc5e-47ac-ae49-985e702c4ff3"
        },
        "item": {
          "id": "ad7e1160-3780-448a-8d1e-fdf95a510729",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "d78cc7b8-b360-4ff3-b702-1be4362dd55f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 945,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac9de52b-c11e-49a6-b504-1479096e312c",
        "cursor": {
          "ref": "3538340f-825f-4a10-9a8b-bb7945aefaae",
          "length": 243,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "cb952d7b-2838-454a-bdc3-51bb0f24f1da"
        },
        "item": {
          "id": "ac9de52b-c11e-49a6-b504-1479096e312c",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "66f26777-7e92-441d-9622-d4721e3c6b1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 548,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1befa12-da1d-493d-859d-bb2a061bb247",
        "cursor": {
          "ref": "77324c52-1f23-40ce-9890-82e64ca4b8a0",
          "length": 243,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "08c6fec7-6d64-4e1e-90f1-f86c4071d09b"
        },
        "item": {
          "id": "e1befa12-da1d-493d-859d-bb2a061bb247",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "b9b562b5-10f8-4074-b104-ab7a4e08a4ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 853,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6b5d56c-2433-4bc0-907f-440a79e4d099",
        "cursor": {
          "ref": "d40c41dc-a659-4bf5-a2b6-1bd2edbc3612",
          "length": 243,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "ecad189b-6876-40bd-9785-f889af0f4adf"
        },
        "item": {
          "id": "c6b5d56c-2433-4bc0-907f-440a79e4d099",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "88c63f44-d204-46ea-b585-a5325b6bc528",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1040,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e44f6f7f-b94a-4e5d-b57d-8bd889fefc9b",
        "cursor": {
          "ref": "ce14b22f-a9c7-4c71-bf2e-927507cce97c",
          "length": 243,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "1fd4cf2b-83d5-4f96-9dae-70a55073c521"
        },
        "item": {
          "id": "e44f6f7f-b94a-4e5d-b57d-8bd889fefc9b",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "4b5fb7c4-7a1c-4f2b-9f5a-1d5212083d29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 379,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8c75428-eb38-4486-bf70-d733cc87cae2",
        "cursor": {
          "ref": "66459e14-08fc-4237-86d4-d4a380b12f23",
          "length": 243,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "3c3bc296-b445-4a9e-b52f-f6742aa3021d"
        },
        "item": {
          "id": "e8c75428-eb38-4486-bf70-d733cc87cae2",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "4a1b776c-3df6-4990-8507-695ba566ad41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 2045,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d1ee8f6-c590-4a8e-86f1-6a6ff775d14b",
        "cursor": {
          "ref": "f7f998b5-6e46-4e2b-b607-697f2a4fe74b",
          "length": 243,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "0fca1340-343d-4aaa-9615-895e73facc21"
        },
        "item": {
          "id": "3d1ee8f6-c590-4a8e-86f1-6a6ff775d14b",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "caec9570-502b-47ed-bfbd-eb133905e72a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0894c1f7-6487-4ff0-925d-979ac66ef948",
        "cursor": {
          "ref": "04ffefd8-656b-4fd5-a394-d00edd1e54b8",
          "length": 243,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "e0abce78-bb89-4fb8-8803-ea1d441aef28"
        },
        "item": {
          "id": "0894c1f7-6487-4ff0-925d-979ac66ef948",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "245004a5-1d4a-41d3-9668-eda2067c986c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70fa2e10-1912-4232-9232-4fa24b7a97fe",
        "cursor": {
          "ref": "6daaf425-7227-4337-9041-1a5ee12b1159",
          "length": 243,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "83629859-2cf2-4ebe-a8f5-45328cf264c9"
        },
        "item": {
          "id": "70fa2e10-1912-4232-9232-4fa24b7a97fe",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "ef044694-f60d-406f-93db-0c3ac308b1b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b731c7c-ee0a-4d69-98e4-e44c37c290ec",
        "cursor": {
          "ref": "3c723f3c-64ac-47e8-b310-91d247870260",
          "length": 243,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "9435b3e4-8e6a-430c-af93-5d4869d14f5e"
        },
        "item": {
          "id": "5b731c7c-ee0a-4d69-98e4-e44c37c290ec",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "cd313056-1943-44a8-956e-e48146e5888c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 443,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f0a3bc2-8b3c-4107-b447-a19e10dec6af",
        "cursor": {
          "ref": "92f48d76-6c48-484d-8263-57ba9d726609",
          "length": 243,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "262fc84a-6b19-4e8e-8e61-9e39b41d21db"
        },
        "item": {
          "id": "4f0a3bc2-8b3c-4107-b447-a19e10dec6af",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "a5504401-16af-4d1b-99a6-b88cc4cd68e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "333df7b2-4fde-4216-a199-aee7c544aa21",
        "cursor": {
          "ref": "362273f0-909e-4d3f-9f0c-95c695e71104",
          "length": 243,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "9b9afca1-f596-4a57-a59d-0a80a9838330"
        },
        "item": {
          "id": "333df7b2-4fde-4216-a199-aee7c544aa21",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "8e02779d-876a-47e5-b236-43b93f996552",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e8c8fae-2c18-47e7-a1a7-681afd12ca40",
        "cursor": {
          "ref": "18c4aff6-e252-4bcb-914f-8f6e28715dc5",
          "length": 243,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "5441221b-d594-477d-864e-b19a343ab660"
        },
        "item": {
          "id": "4e8c8fae-2c18-47e7-a1a7-681afd12ca40",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "4461c7a5-800f-43af-9171-7bd5860f4391",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb87c997-f0eb-4743-85cc-e3eb2148e545",
        "cursor": {
          "ref": "0310ed4a-07ac-4d68-b7a3-a6584c9f4c92",
          "length": 243,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "14e13ac4-3c55-4135-83c8-a030a2c0426b"
        },
        "item": {
          "id": "fb87c997-f0eb-4743-85cc-e3eb2148e545",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "090d5703-b3a8-4b68-824f-74b7024c0e55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cce517d-5017-44c6-b696-be2fdbe97244",
        "cursor": {
          "ref": "aa28739b-d16e-4354-821c-65947d52deda",
          "length": 243,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "61596f48-96e6-428c-8326-678d1a182ae7"
        },
        "item": {
          "id": "6cce517d-5017-44c6-b696-be2fdbe97244",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "4846c7bc-1396-4cdd-b0d3-85fa6f60724f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1109,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10f98e4f-f950-4d79-8bc1-902449340b4e",
        "cursor": {
          "ref": "5341f4ba-a3f7-47bf-8893-afb3ac5ae305",
          "length": 243,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "ccbf01e1-8bbd-4d69-a553-4e7a71020ea9"
        },
        "item": {
          "id": "10f98e4f-f950-4d79-8bc1-902449340b4e",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "52c18cb5-5416-4883-b963-c64dba1e8e90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37cd2f13-4b45-4d72-94b7-7a00430a10b6",
        "cursor": {
          "ref": "63d6c9cf-35fe-46b2-ba74-aedfae037c4a",
          "length": 243,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "5e321d7f-fbc6-4067-b021-01989ad679b3"
        },
        "item": {
          "id": "37cd2f13-4b45-4d72-94b7-7a00430a10b6",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "d4e63655-eefa-43e2-9399-8087818b3ee3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59c5b217-6721-4402-ac17-820555360067",
        "cursor": {
          "ref": "f9228229-aea0-48f8-b9da-61ab64ac2bff",
          "length": 243,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "16279873-cd1b-4409-8e16-d8a8afa7dc31"
        },
        "item": {
          "id": "59c5b217-6721-4402-ac17-820555360067",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "237185fa-542d-4e92-8d33-ffffae827503",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bb2aea1-c568-42b7-995a-902a66e36b21",
        "cursor": {
          "ref": "b46a3176-cd1b-4943-a93f-94647e85e9fa",
          "length": 243,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "226d5be2-a43d-4bb9-b8ea-9511a25387a5"
        },
        "item": {
          "id": "7bb2aea1-c568-42b7-995a-902a66e36b21",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "94cab516-3e83-49e5-915d-fcf3b7a476c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d41ce48-6e86-43e4-b10e-7b8dbffcd288",
        "cursor": {
          "ref": "f7814833-e049-490d-ad58-2eb182ff1666",
          "length": 243,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "abe555f5-437f-42a7-9131-347bd2b56fae"
        },
        "item": {
          "id": "6d41ce48-6e86-43e4-b10e-7b8dbffcd288",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "83b4d781-9c53-486c-8f49-7fb2ce6058c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b9545a0-222d-499b-931a-66c385c4a96d",
        "cursor": {
          "ref": "91bca07f-2fa9-451b-9457-116d74d850f0",
          "length": 243,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "21ebb0d6-c4e2-4aa8-9993-a6c85cff26a7"
        },
        "item": {
          "id": "2b9545a0-222d-499b-931a-66c385c4a96d",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "58806aaf-fe56-449a-89bc-e8f6b286e57a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "324011ec-42ef-46ce-824b-95b75ca26994",
        "cursor": {
          "ref": "c68a36c8-e151-4189-9824-e2a06b1ec0ff",
          "length": 243,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "f1040a2e-5736-4cc6-873a-548346315170"
        },
        "item": {
          "id": "324011ec-42ef-46ce-824b-95b75ca26994",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "ac5d7dde-3138-4b30-9719-71ce4ac60f0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "948bfdf6-ecba-4bc3-a7a1-a251772ff429",
        "cursor": {
          "ref": "2a9b1c15-e026-4c46-9d38-2c351887d2c6",
          "length": 243,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "0600fd2c-de5e-408d-886f-209227e3fc32"
        },
        "item": {
          "id": "948bfdf6-ecba-4bc3-a7a1-a251772ff429",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "9d3fc54a-46e8-4075-a461-75b8009922f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86d98f5e-c3db-42a3-8c0e-de3c8ddad280",
        "cursor": {
          "ref": "1ca8cd4f-d6ae-45f8-a0ac-04ffdaa9e0e1",
          "length": 243,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "8a6ad171-6c04-48c9-8356-8e52f49629e9"
        },
        "item": {
          "id": "86d98f5e-c3db-42a3-8c0e-de3c8ddad280",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "95b6cd42-3ad9-4f52-a137-ed6158738f9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "511f56a1-055b-4d28-b027-56544b234555",
        "cursor": {
          "ref": "fa9fd7ba-0631-4184-a054-33328e988d1d",
          "length": 243,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "6953412c-d39d-408a-9e6f-63a12a0ba9af"
        },
        "item": {
          "id": "511f56a1-055b-4d28-b027-56544b234555",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "420ba190-0b88-458b-8141-340d570e1cf1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "326e7757-436b-449a-a031-b36c2176eb11",
        "cursor": {
          "ref": "a06f9f31-2332-43df-a399-fc090057dccb",
          "length": 243,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "22b8de45-0fe0-43b3-aa05-e67ecb47512d"
        },
        "item": {
          "id": "326e7757-436b-449a-a031-b36c2176eb11",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "844b3344-1799-41c4-bc48-7b8550886e3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d438304a-bb00-4371-8d5b-25cc17d12a90",
        "cursor": {
          "ref": "d8ec2d0e-f773-4dca-bcdd-785323038a0b",
          "length": 243,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "bc921f72-ec05-4557-9afc-e28e666cdc2e"
        },
        "item": {
          "id": "d438304a-bb00-4371-8d5b-25cc17d12a90",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "f41cf0ed-3e26-41ad-9612-7e4aca7e8431",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebe81d9e-c4ac-4ae3-a5ba-9500d4bd9194",
        "cursor": {
          "ref": "c85d806e-3c5e-420b-ae9d-15fe799c00da",
          "length": 243,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "383d7e4f-b578-41ec-b82c-f18419cb67d6"
        },
        "item": {
          "id": "ebe81d9e-c4ac-4ae3-a5ba-9500d4bd9194",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "725c32f0-f98c-4ad8-bbc7-a5eebf91a9af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f33bdde-9988-4864-906b-8cb08795a844",
        "cursor": {
          "ref": "e69ed3e5-8538-4a93-8708-6c75edc5683a",
          "length": 243,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "0746a4c3-5b9f-495a-a3d8-2b8e9e9c0702"
        },
        "item": {
          "id": "0f33bdde-9988-4864-906b-8cb08795a844",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "2e6b1dfe-0cfc-44fb-b6c7-36e80adbfa5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a37dd38a-cae9-40b1-9b8c-eacdebe41012",
        "cursor": {
          "ref": "ba83f83a-baa0-4d68-a722-19b25638e65f",
          "length": 243,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "af242a69-19a8-4ae8-b042-e5befba52df9"
        },
        "item": {
          "id": "a37dd38a-cae9-40b1-9b8c-eacdebe41012",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "a7e40526-afa4-4a99-a86d-03eaaeb5d145",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7785614a-7bef-428c-947d-30aa0bffa607",
        "cursor": {
          "ref": "7fdbea54-bcaf-4e38-9d97-146698792abd",
          "length": 243,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "d1e32e81-f5eb-4aa0-9da9-572afdcbf81c"
        },
        "item": {
          "id": "7785614a-7bef-428c-947d-30aa0bffa607",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "a6cf3c44-289c-40e4-95a1-a71da7d10a7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f914c939-ce5b-4aa6-b166-885df1af57cd",
        "cursor": {
          "ref": "113a11bb-5317-4692-a6d5-54f22e9477ba",
          "length": 243,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "c93a51c7-a87a-4377-a32e-58ac438eff41"
        },
        "item": {
          "id": "f914c939-ce5b-4aa6-b166-885df1af57cd",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "da18f3e3-dbd2-44fd-ad94-df1c9e4a0f44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40f004bd-6ac7-4413-97b1-f306689a0751",
        "cursor": {
          "ref": "b4b5cfe4-5ee7-4ede-b3b2-17d90ed68cb3",
          "length": 243,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "47514d54-4e9d-4e47-9c29-1992f37563b7"
        },
        "item": {
          "id": "40f004bd-6ac7-4413-97b1-f306689a0751",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "16102fdd-60cc-446f-bde7-263bc0c1dc0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd7c9cd9-91d8-49bc-96df-dcc626a8884b",
        "cursor": {
          "ref": "07cf1b03-20da-48da-bdd4-8f16e8c44142",
          "length": 243,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "a0072494-2651-4730-9a52-86fdb37ff009"
        },
        "item": {
          "id": "dd7c9cd9-91d8-49bc-96df-dcc626a8884b",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "bf49ae98-76b1-4b40-b135-e624f2dda9b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9544c777-e848-4f07-a32f-2c819f0fbee1",
        "cursor": {
          "ref": "f37d15d5-d417-4382-a338-1581106bd780",
          "length": 243,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "54038b4c-efa5-4095-a251-a1a0c3966c2e"
        },
        "item": {
          "id": "9544c777-e848-4f07-a32f-2c819f0fbee1",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "afdfb9bd-9cfa-4ada-8c31-a62a5bf19f1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f62705c9-d139-41d4-84c4-b47dcaa6c34f",
        "cursor": {
          "ref": "d1536e88-3d32-4a7d-90b0-523bdd108c8c",
          "length": 243,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "233896c3-d2b7-4c70-99f2-6310b0ae3f6b"
        },
        "item": {
          "id": "f62705c9-d139-41d4-84c4-b47dcaa6c34f",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "d10b18ec-98a9-4bba-afae-c18eee4640da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d796b41-f7d0-414e-b571-0db4e98b4ee7",
        "cursor": {
          "ref": "00eb2ced-e0c2-4ae5-89e3-c2076273cc3c",
          "length": 243,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "45aa17ad-c836-4c3c-83ad-d27dd0531e64"
        },
        "item": {
          "id": "8d796b41-f7d0-414e-b571-0db4e98b4ee7",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "73b2ce08-c795-42b3-b626-70cb2c6e2bd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72074613-eab9-45d3-9819-1ddc7af1c0a7",
        "cursor": {
          "ref": "988a2afa-fc5b-4acc-bab0-ccb3ed581e73",
          "length": 243,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "2c367cbc-f07f-4115-95f8-ad02a22fd749"
        },
        "item": {
          "id": "72074613-eab9-45d3-9819-1ddc7af1c0a7",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "86df9053-6e51-49c4-a51d-ad82f91d294e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a1c701a-1e23-43a4-8ebc-27dd863ff646",
        "cursor": {
          "ref": "bc5206a1-0374-4897-a9ea-a7a774895409",
          "length": 243,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "497a706d-8183-4ccf-8323-ba2d1a8807f9"
        },
        "item": {
          "id": "5a1c701a-1e23-43a4-8ebc-27dd863ff646",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "09d70bee-fe9c-4740-9f39-11109513cd87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0c7bdea-65ec-45de-8df8-6de41248aaff",
        "cursor": {
          "ref": "e03497db-1ecd-4c68-b0ff-258f923dfd72",
          "length": 243,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "43e05226-5e97-4225-947f-0155d0358b4a"
        },
        "item": {
          "id": "a0c7bdea-65ec-45de-8df8-6de41248aaff",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "0aec355f-75f4-4d1f-8830-fda31c9e27f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cbbc2cd-ac3b-40fb-92fc-10be1c67d9a8",
        "cursor": {
          "ref": "7afed38a-9a44-4ccd-943d-7d74ebbec1a6",
          "length": 243,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "abc55c0e-842f-4168-ab73-878f0c34a732"
        },
        "item": {
          "id": "9cbbc2cd-ac3b-40fb-92fc-10be1c67d9a8",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "cf4fffb0-149e-4c63-bfa7-4d42cd24590d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "373c324d-5357-4a00-8c91-bd778d886093",
        "cursor": {
          "ref": "d182ed95-29e5-45cd-be3b-8e84974960e0",
          "length": 243,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "90ed4fec-3cc8-4ca7-9d5c-988bf3fbfbd8"
        },
        "item": {
          "id": "373c324d-5357-4a00-8c91-bd778d886093",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "e378f50f-1195-4d10-bb48-32bc1a0c84d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01dfdfc9-16fd-426e-9d7d-8709548d5cab",
        "cursor": {
          "ref": "cc62e98f-7932-424e-81ec-e21420b34775",
          "length": 243,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "99d58d8f-5d67-4f1d-afbd-f07734405df9"
        },
        "item": {
          "id": "01dfdfc9-16fd-426e-9d7d-8709548d5cab",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "b2d695ec-b6f7-43da-8110-0a2c826eeed5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d74a15b5-28e1-4f3d-b941-8b457fcfed68",
        "cursor": {
          "ref": "9fa3b50f-54f9-4cff-8c5b-8b2fb78d93dd",
          "length": 243,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "1c9c5ee8-11a7-4e8e-bd7b-9a004039191e"
        },
        "item": {
          "id": "d74a15b5-28e1-4f3d-b941-8b457fcfed68",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "6e0ccaa5-b742-4aae-bede-11bd448f3d52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bb48027-1071-474f-9a6d-9ab366519ce2",
        "cursor": {
          "ref": "2646bfd7-0c2c-4e3d-b095-4ee1a00d7427",
          "length": 243,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "7357dc3f-2031-48da-a9f9-2e710c4a44b0"
        },
        "item": {
          "id": "5bb48027-1071-474f-9a6d-9ab366519ce2",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "a7cf2a5b-60cc-4a6c-8ffc-272f1c367f98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8af79d1-eba4-4bf8-a523-04d847875cff",
        "cursor": {
          "ref": "571b69ee-36c1-46a5-bb94-3ee6e2e90564",
          "length": 243,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "2df17831-dfcf-48b8-a038-98361b8960c7"
        },
        "item": {
          "id": "f8af79d1-eba4-4bf8-a523-04d847875cff",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "1a552a65-7f56-4fa5-8649-ab3b7e96b0da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e0363c9-cd8d-402c-bd4c-9138a72b8e54",
        "cursor": {
          "ref": "9492f6d2-ecee-4410-af69-85b9f4b2382f",
          "length": 243,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "c8edfb79-ca4f-4d35-a9b7-f4bfd132f820"
        },
        "item": {
          "id": "9e0363c9-cd8d-402c-bd4c-9138a72b8e54",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "0873990e-def1-4e87-8ad4-8acdd7d1e12d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f433fb8-37d4-408a-99c3-00d764bc58f4",
        "cursor": {
          "ref": "384a95f6-3ee2-48a5-9d62-c925e05294d3",
          "length": 243,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "acc215b7-17bc-47c0-9afd-4d0b74e10fde"
        },
        "item": {
          "id": "6f433fb8-37d4-408a-99c3-00d764bc58f4",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "99b68cef-e847-4db0-87c1-2dbbcbafbbe3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09b64235-3b6e-4d28-ba54-76c098f942d3",
        "cursor": {
          "ref": "09d2f8cb-49bf-446c-ab99-0e06e80b9d30",
          "length": 243,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "5d466501-110b-4030-94f8-a000f4a46f97"
        },
        "item": {
          "id": "09b64235-3b6e-4d28-ba54-76c098f942d3",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "0fd2d902-6076-4a18-8b8d-7f3898368b00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86d5c07d-397f-4b8d-a2ae-82b9eded9f61",
        "cursor": {
          "ref": "7b919c3f-ab6a-4775-9ad3-210d47a6a1f7",
          "length": 243,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "7f727d25-b965-480b-810f-9056ac53d062"
        },
        "item": {
          "id": "86d5c07d-397f-4b8d-a2ae-82b9eded9f61",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "176d1b4a-7187-44db-b591-9b0d5d451717",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb396dfe-1434-454a-b2e2-5fe8888db56e",
        "cursor": {
          "ref": "fdbb4098-6ae9-470b-906d-2b5db1cd1d96",
          "length": 243,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "16a4b2ae-710e-4b35-85f6-a82d98e42580"
        },
        "item": {
          "id": "eb396dfe-1434-454a-b2e2-5fe8888db56e",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "22d0877c-5f05-47a0-948d-0458546c7dcb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 39,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef07e48f-c498-4a03-a068-36fb3a5b3337",
        "cursor": {
          "ref": "7ce54f06-23f3-4952-ab55-3afa9d6a52bc",
          "length": 243,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "bb40dce6-1aa6-47af-8228-a8e6fd7b447e"
        },
        "item": {
          "id": "ef07e48f-c498-4a03-a068-36fb3a5b3337",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "be7a2a1f-8cbe-46bf-b471-9f98052d0ed0",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 50,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62439cee-103b-4deb-a22c-a9d4854a18f8",
        "cursor": {
          "ref": "ae8fd013-7bd7-4729-a0b5-f7970e9a3230",
          "length": 243,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "9d700a2b-20c9-4eb7-99e9-64da724008ac"
        },
        "item": {
          "id": "62439cee-103b-4deb-a22c-a9d4854a18f8",
          "name": "credentials_verify"
        },
        "response": {
          "id": "dbce50e1-0566-43b5-99e3-b74a031666fb",
          "status": "OK",
          "code": 200,
          "responseTime": 762,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d683ab5-4553-4890-ba85-a244f16bc7ac",
        "cursor": {
          "ref": "b7ea6e1e-efc1-4a57-b992-1962d66b0030",
          "length": 243,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "ec5f3101-3f31-4e59-9b9b-172a4eb8b47c"
        },
        "item": {
          "id": "4d683ab5-4553-4890-ba85-a244f16bc7ac",
          "name": "credentials_verify:id"
        },
        "response": {
          "id": "67bc1801-9f4b-4abd-ab2a-849464e9ff2f",
          "status": "OK",
          "code": 200,
          "responseTime": 654,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4be4773-7b4a-410f-89ef-04a8e2566c29",
        "cursor": {
          "ref": "e0c95100-6e9f-47f8-9950-cf960789ccbb",
          "length": 243,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "2cdb0ffc-4823-4ce4-854a-611f418ead79"
        },
        "item": {
          "id": "d4be4773-7b4a-410f-89ef-04a8e2566c29",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "9d461b30-07ba-495e-b8de-4be4f74798d8",
          "status": "OK",
          "code": 200,
          "responseTime": 2539,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b40272e3-7b46-4aee-b047-9d459935b1a4",
        "cursor": {
          "ref": "92e01b47-5d4a-49de-a72d-77c23fcb3c99",
          "length": 243,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "710c4ebf-efd9-4c96-82d1-cfb69c9afed2"
        },
        "item": {
          "id": "b40272e3-7b46-4aee-b047-9d459935b1a4",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "8a046abe-cafa-475c-8f63-465f223dcf17",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 142,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b40272e3-7b46-4aee-b047-9d459935b1a4",
        "cursor": {
          "ref": "92e01b47-5d4a-49de-a72d-77c23fcb3c99",
          "length": 243,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "710c4ebf-efd9-4c96-82d1-cfb69c9afed2"
        },
        "item": {
          "id": "b40272e3-7b46-4aee-b047-9d459935b1a4",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "8a046abe-cafa-475c-8f63-465f223dcf17",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 142,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b40272e3-7b46-4aee-b047-9d459935b1a4",
        "cursor": {
          "ref": "92e01b47-5d4a-49de-a72d-77c23fcb3c99",
          "length": 243,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "710c4ebf-efd9-4c96-82d1-cfb69c9afed2"
        },
        "item": {
          "id": "b40272e3-7b46-4aee-b047-9d459935b1a4",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "8a046abe-cafa-475c-8f63-465f223dcf17",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 142,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f34e568-ee51-448d-9990-fec13d865c9e",
        "cursor": {
          "ref": "d61fb8c5-8231-40f5-bed1-c74f3533297c",
          "length": 243,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "7dc1671d-9af6-423f-bdab-353ae91af2cd"
        },
        "item": {
          "id": "7f34e568-ee51-448d-9990-fec13d865c9e",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "30867d51-0c5e-4a11-b944-225ff78b67b1",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 28,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18de1e82-dc8e-4e59-8f1f-4513dc61fd00",
        "cursor": {
          "ref": "8137fff3-e888-449a-8727-1dc6be746e57",
          "length": 243,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "5938bef1-ff71-4aeb-b553-b3f8e95279fc"
        },
        "item": {
          "id": "18de1e82-dc8e-4e59-8f1f-4513dc61fd00",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "9f1aa9a9-507f-4416-9811-c3dc2f010981",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "18de1e82-dc8e-4e59-8f1f-4513dc61fd00",
        "cursor": {
          "ref": "8137fff3-e888-449a-8727-1dc6be746e57",
          "length": 243,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "5938bef1-ff71-4aeb-b553-b3f8e95279fc"
        },
        "item": {
          "id": "18de1e82-dc8e-4e59-8f1f-4513dc61fd00",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "9f1aa9a9-507f-4416-9811-c3dc2f010981",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "f9ed8cd4-3a48-4c85-8653-a593b9890e6c",
        "cursor": {
          "ref": "fc1717af-49e6-44f4-837a-78912255d16b",
          "length": 243,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "8df9c275-5430-4fd3-82d4-44e99e58b427"
        },
        "item": {
          "id": "f9ed8cd4-3a48-4c85-8653-a593b9890e6c",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "0b605c28-9a28-4d94-bac3-9c8483da5eda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "46b3048c-1e0d-46a0-9414-b0e14d038c24",
        "cursor": {
          "ref": "e4085246-6ee7-4a03-b8f9-d332b49f62ed",
          "length": 243,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "bd1a6b3f-ef91-4d88-b497-6916ab24eafb"
        },
        "item": {
          "id": "46b3048c-1e0d-46a0-9414-b0e14d038c24",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "d773538b-030b-4685-a2e9-997435123ad1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46b3048c-1e0d-46a0-9414-b0e14d038c24",
        "cursor": {
          "ref": "e4085246-6ee7-4a03-b8f9-d332b49f62ed",
          "length": 243,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "bd1a6b3f-ef91-4d88-b497-6916ab24eafb"
        },
        "item": {
          "id": "46b3048c-1e0d-46a0-9414-b0e14d038c24",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "d773538b-030b-4685-a2e9-997435123ad1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7368920-a4ea-4a39-9b5d-d39d3d7ecc84",
        "cursor": {
          "ref": "53a2f92b-36b3-42ed-bcf5-94b8e2a46638",
          "length": 243,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "51ee7df5-8e81-455d-9b14-bc8291ee1541"
        },
        "item": {
          "id": "a7368920-a4ea-4a39-9b5d-d39d3d7ecc84",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "4d2c8f6a-a5a4-45ea-b6c8-daaf2755a111",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 48,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}