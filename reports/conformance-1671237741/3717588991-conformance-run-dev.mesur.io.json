{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "7afb4422-39f9-4bf3-9040-4365c04b9c90",
        "name": "Clear Cache",
        "item": [
          {
            "id": "4a544a39-d4d5-4cf7-a13b-9ed348b3ccaf",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "41956107-4d98-4f89-b618-0a5365dae774",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "e314fee9-06cb-4255-9d17-3f8667633262"
                }
              }
            ]
          },
          {
            "id": "0395e6b1-2787-403e-88f7-d1e8dc772fd5",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "96b67422-8403-4cf1-b014-f6cbc43d1d65",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "e5f01903-3add-4f72-ad2a-0da2888acf74"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "e71418b9-4cb6-4c39-a1cc-0768862ede56",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "95a403f7-9557-4cad-b135-2dfc0e80ddf7",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d8b858a6-8b35-41f6-b145-ae718aeee271",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b80684a6-7eca-4826-910c-32c409b4d085",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2ed8faee-ac52-4dac-ba8b-9f141375ceed"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7c95766a-c9de-4139-b36b-e306ab9edfaa",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "cfda98a9-adff-4ab2-9d24-19e1c55ce879"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "8caa01b6-5f70-4051-b956-19280abee592",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d6b87503-cc73-4957-acf1-fc4d4eb90961"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "902e145e-0fe6-498a-8f07-625daf449ee3",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "5ca480a2-c08a-492b-a23d-f0e976bead1d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "55f61f60-6c21-412b-86a8-7cdca514d612",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f4dd108a-8d75-4604-b130-08e1c5ca0f4a"
            }
          }
        ]
      },
      {
        "id": "cc417931-1c26-4ded-9dea-8a5da368af85",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "b732b195-03ac-46e9-84ae-6b62652a7445",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4997333e-1f17-44a0-b249-54ed26b3fb8a",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "c42e0cde-8b29-4348-9d63-acbeedbd616d",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2804c16a-6c42-42ea-82cf-0a4e62860938",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "79b64e03-bbe6-4ee6-8779-af0e3219b3fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0b689ab-8a76-4372-b095-0b494f939778",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89140779-054d-42e7-8551-8f38b4712f94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3443c3d0-c605-4bca-a67b-b968e374e8bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e0af9ef-02a8-4a86-90e8-7c926461566e",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccc46ae2-c3dd-48e5-8b40-b60413108b70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "71271e9c-daca-4d78-957b-2e13ee7d6ab8"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "c0262ec9-ec70-4bbc-bd63-0d43c4498354",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "35546eed-def2-4dfa-902c-e156becfe188",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02bc6525-0f7c-4380-a93e-2ad4b5890c77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "aa3a6fea-647c-46cd-9830-8f93613a772a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1d84b2b-7dcc-4f65-8af0-29914347c41d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e347df5-3a25-441d-9016-f1e4557f01b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd6968d8-26d2-4f2b-8dad-9f6a98a5e87d",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00045f39-db16-4f04-b361-cf5d3aab89e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "943e5b0b-499f-44e3-a006-95420d3f54aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "473822cb-37b1-4b55-98d3-87de73697e55",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "ecb50489-5562-4d15-aef7-e1f1d73336f2"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "cb007919-837f-47fc-b8d1-0a3a69513d69",
            "name": "Positive Testing",
            "item": [
              {
                "id": "1507aaf4-7614-4d2b-89bc-a4bcf0356229",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f1b304e0-2bbc-4d6a-ae77-250f7fcfede4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "b5d42523-0e38-4c7f-b3a4-6d5fc83d3191"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b362aed7-ae76-47ad-9725-9757b71fa551",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "966d2883-804e-4290-88e5-3bfaef4ca0e3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f8601928-c857-4666-b562-7c2a813bd185",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "cef18ada-f81f-47eb-90e6-4f4ef5087165"
            }
          }
        ]
      },
      {
        "id": "d4a2b621-018f-4113-b465-5d478770bf01",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "2ac78ee5-3d86-409f-a1a2-abc620bb4ab7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "bce01838-f2f8-42ba-aced-be4032fd6f42",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "431e94a9-cc67-4cea-9746-a1953e73005e",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2db65c8-c30d-47ec-b5dc-c0b313caf5c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a21b2bd6-e562-474d-9431-5947ee5f7866"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acbb33e9-f713-453b-b335-37d4b7e088bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0ab31ffe-0b23-431d-a60f-82f6fc97e733"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d03483b3-5651-4c97-9cba-7a445ff60c69",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b0181f0-47a0-4dca-9dee-01752ee49d85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3dc34c3-8150-4eda-96f5-07297095d8f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd20106c-823d-4735-b323-4ae8b803335d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0a70783e-d164-49ea-a9b8-b505101679e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c1dd629-dbfa-4563-b35f-abfa5cab2037",
                    "name": "credentials_issue:credential.@context:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15118d31-f288-4a37-9d76-8de9d463d7cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9168517d-7f28-48a8-9780-0ea02683e7dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75853dd9-ef9f-4af9-8ad5-c9360f59b975",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must contain \"https://w3id.org/traceability/v1\"",
                            "    req.credential[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "23e485f5-4e88-4ba8-8a6a-fdee5b361391"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5596e9c-110c-42fc-8307-e683c313b4f8",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2bcaef7-1f12-42c4-af10-6175cb3c5be9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad04edbd-3667-4d3b-bf79-09624e77f3be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f9c8c82-2c26-4a08-8c66-d65557ce84a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0b63a20d-3766-4b62-9fc5-d90d555c1578"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69a0d48e-a10f-48e2-978a-0176b5d6ab0c",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d20f38fe-15f2-4496-a1bb-2f08772b3ba1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1169c98f-27f0-46e9-824e-c35bf48b1dab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de79834b-6d28-44ca-b02b-090a496f227d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1e76df23-9c76-4de7-aec4-d317a7991e3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3447eb6-d2a8-4bb8-83de-10beff3f0ca9",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b794c489-8f8f-4702-99be-25ebb8ecff38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd65418d-3e91-4137-be96-5027d8b400de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a417c0a-474e-4b10-91db-c119ed588b28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9593a09e-f087-4328-a862-52202255541f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f6d833d-b9e8-4f6d-a04f-8a349ac5b76a",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cf4a0b9-d50a-4442-92a0-9d5b7bedb0c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5da6564d-7266-4b01-b49d-b6621a785d8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3b62f4d-effa-417b-9a06-eae0bcaaac35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d6f06925-7d9b-4648-a328-e0d138d1bdc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d66b67d-eeed-4083-ba7e-470ad79ec1c1",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89989e57-02f1-46ac-9093-4bc914f94ca7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "122f0736-e490-4889-953e-b6f0dd94f19e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24a1427f-493a-4ed3-b8f6-aeb3f29d9e37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b7b90474-23f4-4702-a867-2bbd1d925d32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f84012f7-149e-47d5-b9e4-5e77eb930df1",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54361ba8-033a-426a-a548-61cc39a2c76e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "804360b1-f718-48d7-87af-e09444d23756"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05fd5711-4bc8-41df-aa0b-032747109d58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b79dabdd-2eff-4c16-83d6-c9ddd86d902d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "babe3fdb-e143-45cd-a02c-fe1a44add4e6",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad875095-6981-404c-9c0a-10e00913fb0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84ba19c1-0517-4788-90d1-1a5eefafb1e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "635c352e-7fee-4e43-b1f1-be7c8196c501",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b36de7a2-f497-4259-bf51-9b34d80ca53e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b15aaf8-7817-4a22-a20f-096e1575a011",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e57e4fc-2fcb-4cf1-9765-ee693e62540b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6da5c08-1be8-4877-bd0a-7fd7ddc1e571"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "447a8213-55ea-4746-9ca2-952634716eb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dab800e7-3ae2-496e-a035-9b3db5f76c17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85d32f65-2e5b-420c-951c-312c73c139c1",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83f5015c-5f29-40db-9a2e-f994402a6eb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46d25fba-cc37-45a3-98fe-8ab14f1ef882"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be11fe69-1497-49b1-8501-8c70d6b628f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "69803567-fe7c-4a3d-8ed4-1cbecf417ab8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a1b57ee-bc37-4f61-8c39-14cc96101e4d",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25eb0ea8-6ef2-4075-9d03-5c94410af1e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5cd3aad-6f21-4add-9148-4626a62bea85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "156e513f-6bea-4966-bfd4-ca06585e7c3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "98628000-4b8b-4b26-8bd4-a9a8de2467f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a557b163-9ae0-47ac-bd64-6775f5064a37",
                    "name": "credentials_issue:credential.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ce42001-6f5c-45ce-b354-0617338b8e6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a734c50-87f0-4e73-9bd8-72fe47f11d9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e580a680-8f5a-44d0-830c-362e71e589ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.id is a required property",
                            "    delete req.credential.id;",
                            "}));"
                          ],
                          "_lastExecutionId": "e915dde3-05a0-4349-b120-fe633b61a71d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58e0bb6b-7002-4468-9f97-6333b2fd4d03",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8b3a437-f7d9-41af-9b70-d8b28a053bea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6be4774-98fc-4860-a901-e77919b7c0e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f9eb898-0f55-45d4-879e-d698466ca7a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c28e1281-0e65-49a0-89d8-5926ceca8f10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "907aef22-24fc-41e1-82e6-049bb7407c2c",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2e20676-b05b-4b93-abc6-3d6aa3e8eef7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db5ec0e8-b952-47d9-b659-f528313b1221"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70b05283-2dce-416d-8c2c-fe98b80b9c1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "412071bf-db14-4db5-85c4-8a36d28bc008"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b94062f-1584-4e21-8687-a771351fdcfd",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f60fa53-e1aa-4841-9b44-3e9036f40801",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4960d255-0db4-4a97-a278-5e33b920345a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "340e7070-2a36-43ee-8cc1-10f1148b5382",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c992e182-8f8e-481e-be67-d7e4524162bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1153f32-c5c2-4a5b-bcfe-888dd7329a29",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0310404e-e183-43ea-a70f-e43139347f56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48ded917-ab51-4b7d-b805-d6e5b63e0c88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f12b5158-178f-413b-aaa4-c0b591405da7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4124f6d8-af2a-4d61-8763-bf8ed92158c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c64ae1b-bd44-410a-ace0-96e4890bb01e",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a14a8b1-75db-4217-bf84-8ceb21d2188c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "410ca2b5-df5d-40c1-bc01-f7f6a1776a4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "848b0dff-30fc-4c8b-84ad-6f5cfb109614",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8eb2b305-7bb2-4e8f-a41b-b40bfe3b93e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7602f1f4-ae10-4147-9d3a-1f7a9fb7633d",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc31ff57-1450-4612-b7db-e5c4b8b94aad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0dd7224f-7fbb-4808-9140-26968d8429d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89049784-520a-4d29-9522-203ba03de27e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "5f65650d-9f46-45c2-b67b-b4e83fd68d8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33686e00-445c-443c-b7ed-08b0d07b64a3",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ff40ada-dc20-4119-b8db-0dc1148d2ffa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04d43482-ac95-4803-a5a6-1406801c583b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6de2c550-8c61-423d-9628-7ef32b520666",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9b147ee5-ea54-4991-bc5c-201829ba3193"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05d8560f-797a-4615-bc1c-3c962d1a7d6a",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01c67d84-13cb-4385-849f-219034d6fa60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb0a966c-e5d6-4bca-ae53-c3b8160576df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e0c406e-4348-4c5f-9faa-ab535ff7a39b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "73662f9b-d2e2-4ffb-9837-a3f9ba22ea02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44023da2-eaba-40d8-989c-982ec010d649",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ff72a74-ecba-434d-8577-f5e2f05a7ac9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7679a61c-8eba-49fc-8162-63cc97c4548b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37c9c367-adc0-4c51-a620-cd2e193f20ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "076b348c-0141-41bb-bd0c-99d1f4d30b8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "feb121be-df34-4154-90f0-81dfb3546abc",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "470f27db-5bfc-4bbc-a000-f88ed35a842e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0e4d466-2d8a-40dd-8239-6b81e7945474"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e134362a-a168-4c61-a685-e3716dbbef94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "de606707-e62c-4357-a4de-e029fcb7a359"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84103c3d-b719-49a1-b712-fdcc11c151ff",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d960c6a-b1c6-456e-956b-a200ea45fc5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "423c7ebe-286f-4f1a-baab-9ed390cab131"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55ab6ea7-56df-4a11-806e-c0598c1d963d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d1beff02-1f84-4b55-89b8-adb12cb51dec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "591724f4-f097-4ee2-87df-39394ef0aab8",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93009b65-53c2-4bd8-8e32-472c0f392a85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51795f4d-8431-4bbd-83c8-ba6795df317b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92ccc3d3-49db-49b6-85f9-939ad8374f75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "b545e4f0-c519-42f7-9ff9-a82f3918a1b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3e162da-664b-4d2d-8d3a-e0e4d2b88a36",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "510a7fcc-5c67-4fb1-a3ae-8d822e2ea6a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2392a9ec-599a-4a0a-b094-2fe141e75827"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9aa251a-449d-4122-a0ca-0b2856e6472e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c537f73f-dc9d-4e1f-bdab-3f084478e6bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c03c3cad-de1e-45a2-84d4-e138c2488dcc",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39aa0f45-b89c-4dd5-b8aa-baa8e4af96f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4965dbe9-ae83-4735-8321-aafd36735ea2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e02bb2fd-ebc6-427c-a871-910518d9f835",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a0ed175b-8bb4-4de5-aafa-940b51b1c2d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1eb94de9-6b7c-4151-93e1-e936e8cb6f16",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bb90cf7-43b6-4912-8bf5-e6e6559f0885",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e99abdff-9b0d-47f9-9b2d-7799e2ac3a63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9ed0091-c522-4c69-9d92-3d925fa8e865",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e7cb3ade-7879-4094-9f07-beaf034d561e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b336f74c-6df8-49c8-afc7-d38a299e4b44",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a35ba6e-22c3-4ba1-be22-8f0833989c99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a319089-32ef-4ab1-bc8f-e977904ddc96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6537b5e3-1dac-4662-af0f-a326ae8b5670",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "be63a749-f9c4-43b5-be44-54636ce98b09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "117a4799-a867-4bde-a98a-602814b2ea29",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e25696c-6b53-4482-9c74-37c89023c570",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d41e487-2388-4466-af32-05bf53a7d524"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b58c74bf-a8ab-4d8e-9d41-fcb32e060cf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "883ee44c-1509-414d-ad76-38cb0b2fd301"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce0e6dfa-6cd3-490c-a753-a99e03ba2dbd",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb83cb59-45d3-42fb-87fb-68096778de07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9e4a2c1-f19a-4ee4-880d-f336bf91da88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80a1d378-b21e-44a2-b1b0-2f77537b778f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "e95ed457-fc77-4de2-ac0e-cd0f8a3bb094"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a04e7932-4781-4b53-b135-408c535625d7",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62d063be-bb50-427f-bd6a-03f318c6429b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91657cb4-12e6-4564-b685-909fa08327fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41ac05fd-eeb1-491b-b288-f2c5b48b1a89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d9000366-5dde-417d-b098-1b56ee886049"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed938942-9c17-417e-a1db-cd048e5d0973",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc168171-6d96-4c98-aa5e-eabeefd8b00d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4483a87-38e3-43eb-870c-e04a6157151b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f8613b2-0f59-436c-bdc5-2c78159ac479",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "446e146b-dae0-4c7c-b09a-92e8726203e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8055f7bc-20a9-4362-b545-04b8527d0e66",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de4a0375-641a-4c0c-b79c-da7a371fafa7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9468c51-9da6-4358-a95e-e8115ee9f01f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2497015-52bb-4ccf-a767-f1d53ba56d9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "eaadebd4-7930-444e-a335-4eae9666f8cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "295f08a2-c140-4371-9161-73c3c26d4195",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6989ee08-08f1-4e2a-80a9-ae7e5bf2496a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef47d0d5-b8d6-4571-a3b7-e71b0bad7e3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3741f3f8-59cd-4737-a57c-e086e1cab07e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "54e4358c-76e5-4291-aae9-7b915ed7f3bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc285693-33e3-461b-9951-94d673ed10b3",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b027610-8467-49ea-aaa9-580677119a18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1bf2006e-586e-4223-b748-76015a80046c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69581550-2e71-4320-8c6c-1c448ea6ee75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "172bb594-fc45-4446-aa01-78e0d9cb71ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d27ad4c7-1bc2-4f10-9b15-625195a8c533",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "380e91ea-1267-4002-9238-8a4aad6fb4f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "561f5fa3-3371-4403-9851-eab68a08a6df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf2275b5-172d-4c94-bdae-b713d1b1cdc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "bb662161-ce27-43e8-891c-e61b9becc49f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11cbfc7c-9049-4d96-81c4-4ec6b8b7d5c2",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c1be356-259f-44e3-ac92-d23dd184b51b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "424e9b2e-0267-4ba7-868a-6c5a0534ee7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4cee3d0-7959-46cf-9499-117207f3c19c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "de594360-891f-4086-a39e-d4cc54ca6960"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4adc6e5c-411f-460e-a97b-2e27eecf9ec3",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc9ad4b3-bf2c-40ae-a7cc-e5863af0e609",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d00c329c-2692-4529-b982-019657180d26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6717af38-7435-471b-9462-de10974a90e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "e2b3b3fe-17e9-4e6d-a9ee-4e1ef2441e10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0594f8c-3463-47ca-9403-d5632bbe8f37",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "251f97fa-84a6-45fc-80e0-001350d89738",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96082e26-285d-490d-9bb9-656cdb1bed9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34f84c04-932f-4cc5-ac06-a38e7cb599ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "bf6e1f9d-31b9-4018-981e-560a73ae766f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b41814a7-415e-4aa0-a1fc-236dd73d871a",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fa7c2b6-2e05-4e0c-9b7a-55bcee761023",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72263095-429b-4491-b9ca-c3495f5726a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e501668-1b34-4d8d-bba4-c93c06ace629",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "8cd889fb-2003-4fbd-ad78-7dd8913d9cb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "750d6d53-f55e-459a-87b1-a80296ce22e7",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24dd2983-e39d-4b67-9783-075a4ee1ba12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "340ce3da-4a92-41bf-a5bb-bfa965de0510"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df6675ee-03bc-4071-ae93-c57b6d5c86f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "26d9833d-ad1b-4950-8798-a2caa52d7955"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c29dff39-4780-469e-928f-98512fafdbb7",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42d13493-1ae1-4c55-a4df-68f01ab0f970",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9cd11b4d-0d94-4ef6-969c-b5cc4ead86e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a38a48d-a767-4b22-86d9-0c6458a0f0c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "8abd9cdb-76f1-4301-8668-07f4e3b9e120"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d6ea1ba-9f23-4487-8473-e88bf61dbd77",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5ef5bcd-e198-4f7a-8437-64c404e4a43e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf502c18-f6d7-4397-ba27-65fdb45a1d10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea054f7f-7f4e-4f80-baab-bf0559cc0dee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "824aa730-2924-4e47-99ec-dc1949c1cabc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a371e807-7ebb-46e8-8872-47f00abf9f97",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aeb1e15a-3e1a-4810-8c76-c6965ed7e2bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1a6f4dd-d9fe-4448-8a86-985a0a29df46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b033a307-58db-4e77-b9b4-bf9d81133080",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "75b1da10-0f6f-43f6-9f37-70347d68b6be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9ece90f-af85-4117-b5a1-0e88c5e8b1e1",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41cb1654-e3cc-4de5-a4a2-dba55eaf978b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa59f6c5-5abb-41a6-8675-7a735d068f9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7af3179f-6d3f-4fbd-ab29-e6d05396ac3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "4b8a6906-ec5d-44eb-9154-4ab1422ab4e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5b10695-9b49-4241-9900-0b109463d8ab",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ab0493a-f80a-47a1-ad9c-aca7b70601d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "346cc36d-800d-4090-891d-5f5e54b54c5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac5ba461-72d4-45bc-a97d-0454e5526222",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4606d2d5-90b8-4f93-b3dd-427fa5ebbab8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c64a0368-1233-46c6-94b9-5dc0db3828a6",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7aa29212-ee33-4812-9cac-3e9874398034",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd0ffee6-6aed-47b2-ab38-1682265450d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "730b2dc4-c951-423d-b6e6-34139b22f8a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "fd5109da-fe20-4f54-a5d8-3be8e3aefdb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3da42345-0ada-40da-949b-9ed8cd8e2f1c",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cded14a-b3a2-43d3-b34d-847a7c66015a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f56b87e6-1ad2-459e-8a78-d111ca2ce41f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f12ed79a-7bd8-461d-a16e-acf3d90899ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "88c694bc-79de-471a-b744-b37160d0ec68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b837a23-8039-4a9e-8a0f-de9415a9a5a3",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23a78fa7-f9a1-4381-8701-cd831b4073e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f4a5459-b2ba-4b57-9e0a-cb0b9e414896"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2dfb7c50-0665-4dfc-a1f9-153ce41f102e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8c63289c-d294-4aa1-b757-4e28fdef02cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42534ef8-c5c0-4833-af13-be63823072b6",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10254e09-01d3-4d89-a393-0175fcf090a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3b17e7c-46f0-4c67-b1e6-9fa7d2c3eb60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5df94b87-adea-4fef-b8bd-c52155af6086",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2ebe8f62-56eb-491a-a790-e85d32b89d2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7321d008-88fd-4cef-bc06-bbcdee45141b",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39ae7861-772c-4b7f-bbf2-eecb48044a29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69fa7e69-94bc-4cab-b1f3-71320f913d12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f50da97f-8be0-422d-ad5f-da2a0c89a2ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "75d8df78-ca7f-4c72-8dc4-e2d9a1f31d9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9cb57a3-d427-486f-8857-3ff3e1c185ea",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85c7c35c-0ce8-4fb9-8f60-729b143a596d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1dde9a69-72b0-4622-b7d4-758e9daf2681"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76be1a4d-aab8-48e5-99a2-b8f3ecc28d3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "fb68823b-326f-43c1-8605-9a7c6f996e91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b40bd7c-69cf-45e0-8187-a291e3f15883",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ceeece89-e322-474d-bdc0-1f738b32950f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd51bd91-3dee-4d35-84bf-95e8628c9f99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7f0a612-deb1-4dde-8232-361064573f62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c97efc86-4052-43eb-8a3d-2581c2834597"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbbe2cae-63a9-4e33-9d73-8ae21aa8b408",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0f0c498-a578-478b-81cc-72821819506f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "baa93a1b-bebc-4edf-a4f8-a189d3bdf903"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87246991-f524-40a1-b810-880013e534d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "db889ca6-6e3a-4525-8f5f-160d236af872"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5a0a4ce-be5e-436a-8c38-9d1e300b627b",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "642c7425-eee4-4e5a-8f6b-1b888acdda75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b424602b-eca5-433a-9376-e8a23034de95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd371716-f93d-4b47-8380-e5fff91d2709",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b8262f32-0396-429d-9fc2-6a26c1b9aab5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2240f418-32ef-4224-b915-fdf8224aae3a",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b2bbe85-69d7-4ada-b1c0-f7f7f48ee00c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04185e8a-22e0-4a4a-b60d-5f78c40a7566"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa91a970-d1f3-419d-a932-b59126f4c713",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "0684d2ee-711a-4917-9312-9ed6e3932e71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa6b0d66-2a24-4e0a-81b4-0ed91f363ea6",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bb31354-cbfc-420b-bc78-763d1d3300fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fcfe5613-4ae1-49e4-9287-4199e3067617"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2aeb3841-6cb7-4e26-b671-851165bc7f73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "457705df-8ace-4dd7-ae9f-a8f57a5ec5e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c9c61e5-a7dd-4fff-9e20-cb04ffc11f28",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be4c6540-7d60-4b97-8362-7c3f0c4576dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "858634e6-67f7-4c8f-9fa1-ec259e4d32f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "002c2153-f299-46c9-a71b-5ae02aca7dae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "22ca1f10-d7ed-43cc-953f-c8d259064739"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38ff5155-963d-4ac7-94cd-bf1ec7ede99b",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3303e180-6a45-4afb-a4c2-9e2e6d14c041",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7972238e-11e9-414a-9261-a1bd809b67d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "328230e3-97b7-4516-9ac4-0c3156c7c86b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "a8c35ed0-3be9-4a38-bed9-c845794bca72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a7f184f-1f68-4a4e-8e4c-a0ad3e9fbc12",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ecec5a5-6e11-4f73-81a2-78b52a0ac1c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69c37357-72cb-47da-921f-5410dac015d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b29adddc-535d-4924-a304-07b585e3bf4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "a286af07-45ac-481e-bcd2-65aa665ce394"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eeda508c-1daa-4658-a023-d0242637dc98",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f66fbc9d-a858-49ad-abd6-7df544eaa72b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46193554-b645-4f09-8625-634b21702359"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e61b931-967a-4ab9-96ff-618c62698959",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "716fd0c1-4c43-4103-b636-ed61fda20d1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de2aa9c9-e693-4c43-8722-e11886eab966",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4fcdf0f-7202-4f4a-adc2-bfdfbebe2902",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69a0330d-a0c8-485b-b63d-6fbb269e4193"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5de77cb-1aba-4c68-8e35-923a3c9dfba1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "24ccf755-cf33-4855-b48e-940fd980e1cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b686d86f-8741-42ae-aaa7-1c36439d181a",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c0a9fed-23f1-4078-8eea-02b882880714",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5823feb0-6792-4d24-b306-41f5ccdb022a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e97fdb6-8a00-4b58-8f80-a60036134bfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "430ace74-cfe6-4af5-b07b-159b145d626d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e744c35f-5d9c-48da-9506-71bd35e4fd00",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e614b42-5a4b-4445-a417-9c79921135b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "068be6de-9b58-45d6-bdf8-c5bce1d53e7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49d7a20d-ca6e-4965-b791-b9ff4c232eb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "43273007-5f6f-4b8f-82e1-85e94a68a425"
                        }
                      }
                    ]
                  },
                  {
                    "id": "395df559-f0a8-4dab-abec-9a0fca9d8ba3",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c77f66a8-789d-4cf3-86b1-5d38b5827c0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e340acb-2a9e-4985-9e26-d8330cc19550"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80e8d67a-daeb-436e-9563-85164a116e11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "79d5321b-f714-4820-8a85-098a4d5b5419"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8844de10-0b89-4672-a7f9-9a749796ef6d",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a918de9c-ffa0-4c42-a4a1-8cee0d202571",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4babdf6a-0db1-449e-bcda-ec849cc87d4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f7bc35f-15d8-4a88-a5ce-371eaf69aaae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3e11f5ef-6961-4209-ade6-91671612af00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce22240b-4151-4c02-be0c-0d5fb34251b4",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "263753a6-f03c-4252-976e-50d115d85262",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07a70fdb-65a0-423c-84e2-0151978ee898"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8c68a4d-2501-437f-a81a-dee415ebd7f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7ba71ab8-00c3-4eea-8614-57a37274dd4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff010925-89ba-49c2-a6fa-4aee19c7fb25",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e73b640a-e052-426b-bb84-65a7ab18d614",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9410823b-bf3b-4e65-a9ec-6bc6a800c2a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "305a9a55-b925-455d-93a4-ac672f164c84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "fa7513c7-59d0-4606-84f7-b79f41121b0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05a895d4-9b6c-4679-9d19-f911c18a6a79",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98bfaffa-ac9b-461a-b214-ff33c2608310",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e3a5753-85ff-4418-a885-2d2e84daa886"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae1e8da8-3844-4d4a-a3d0-b58540c1668f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "22698eeb-7469-4ae1-83f7-d0a17e5773f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8558d667-4efc-445d-b4f2-2c5aca6274e8",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16d3ed27-4cf0-4bbc-b9e3-36c916fd72dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa595061-5ba1-41d8-b188-cc35e9650285"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53403cdc-a993-4b7d-b24a-9318b9b3c9de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "21069fff-f11b-45e1-aafc-b8db9430889a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "045239f9-626d-41ae-8c30-a363868f96bc",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ce73c0a-ee34-4e76-9582-f741bddf64e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82e49602-94d9-4e3c-966f-282021525c07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e05de7d1-ea88-4495-bdf2-666d69b39541",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "408c79b9-5e13-4a8f-9bfd-fdb85ac04232"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8917999c-248d-424a-b083-53da9251f9bb",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "317c406e-512d-463f-a19e-4cca5e3cd302",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d133a226-5fcf-42b0-8089-0ef65d90e27d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7905463-326e-4db0-ab21-3d9c21654e17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6e1937a0-bab3-4203-bff8-ae2265c7194d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0c39cde-3b44-4615-896f-78ea67a59c66",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91c28288-7dcc-4431-8334-f5b96b651c02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f43dd659-9906-46e0-8a39-993e48fe6075"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22a11875-5050-4bfe-8bb0-e9e5cb9df84c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "48a4acf8-5817-494c-9e1d-7fb0147bb1dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2f84bd1-7054-487b-b36e-763b0c191124",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdf89f92-7c72-45d9-92a6-1f68bae8b7a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a70e00da-47d3-421c-9946-5344781bc635"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09cf0327-7458-42dd-bc10-e39ce0a422ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "42c620c3-6ff9-421d-b84b-83d06fcdc787"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d8dc5da-39b0-4346-96b6-213c5800d4cc",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "490e2b2b-7517-4a3a-b3ad-e2863a16ee0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db49662d-5be5-4989-9572-6de16f410515"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d26e4e31-9a8d-4ba9-9796-ace463a9ccfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "fa82ac46-8637-425a-a15f-fdeaf1ca5235"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43def77e-ee61-489e-9d8d-ef572a26cbe0",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb404813-6515-4eeb-97e8-2f9420401415",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66c649e0-1099-4840-a009-cbb6ee12a0b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0325a12-b831-4d3c-9690-dba715f59daa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "421ad278-9c2c-48dc-b05f-2abae6e70052"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9be27653-862f-40d0-a9b9-05ec0e36c4f9",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34d5c0bb-2f16-4e83-860c-0307b7f7b3be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23157a7b-e55f-47c5-9ab0-1ce74bf6d64a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6fd10c6-8638-416f-9fc6-13adf95da3c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c4c4bb00-d63a-44fa-9069-1967e5bdebed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94c2476a-6de2-4b36-8897-c60b223b375c",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34688c7f-fbbc-4a57-b179-e06524d0cb64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "306332ab-45df-471d-9a8d-4b049b3af301"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3eb800b1-e8f0-4d7c-b188-b0f1b1c1f62e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f01340a5-9ca0-4178-93a7-5e6592afdf58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fd00561-4ae5-4651-8f71-6a023dcab10f",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "899a3c07-4852-4488-bfee-7bc1dfbaafa0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "197329be-720c-4d35-ad12-98e9da9c13d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6aeacfd-1f87-45ae-b868-4d90ee45891b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d9479fa6-d54e-4291-ab05-c0da618cf99f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "294b9a4d-a3a8-4302-9894-4af9cee32a28",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5941cdd0-cff9-4cde-8018-db6f9921b952",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79efc489-280a-4b41-bff2-3f78797d8975"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2da3b35-de56-4a57-8f9d-8cdec950f015",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2ae91c65-c755-4069-8844-ad3d42f45dbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e67ec05b-746f-4497-8084-0d80f0de158a",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd1db014-dc0b-41a3-88a3-6e9e3d2fae15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "baa4c1b3-e30c-4ac8-b167-efe9e8a3bed1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0ae914d-a7ab-4b41-8d2b-e69d843161d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "571ade93-3b7c-4df2-8941-f45d3d928070"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb10893f-72e3-4217-a013-a24dbe68e8ff",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32453d2a-edef-4993-80a9-49fbf43d1f83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fdb2e263-8f97-40f5-a36e-7795240d64bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6601282a-ea67-4d86-88cf-9e87233d7261",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a9596dc6-369d-43f8-90a1-45fae51c9b94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd82b9f1-3d1d-48a8-b062-6da7c570fac7",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3d3844d-d4c7-4b96-8010-61e6e1ec5df9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9aaf8a23-4124-4484-8d81-443455a17f9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d4415c5-2737-4ca1-8081-b2d552c4c522",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2652dca8-4fec-4d4f-b866-22bc075cdb46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43a92cab-441f-40aa-93f9-0e9c75b9f3d4",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbda33b4-9a34-441a-b6a1-e75833dc5305",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba90aa2c-0d0b-4882-837e-29a3c081b4a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "636755f2-6537-44fb-a360-6b79a7d423f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "09a791ef-4aff-4047-a18c-56fc78ba60d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96925b42-78e0-40a0-922f-d9e457822408",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abec11e2-a882-48cc-9463-ed2127338dd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28689e4e-5497-4c39-bf10-631aac9eb181"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e783a1c-ffaf-4fc9-a7f0-030bf185cf67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "226d97bc-2116-4912-adeb-2bfae66caccd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa529dad-7f11-4e4a-af1c-0abce8ee0cfb",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32493e25-0756-4d06-a42d-fdad3ea6d7e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b65b0dab-2f13-48e8-abee-7a81b700d05b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b52d34b-b4f6-4d32-9df2-b2b1c2b0ad5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "dab08807-af28-4e9c-8e45-a902a6c5c653"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c7c679c-58c3-4582-92fa-d39c1b0eeaeb",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a091662-fbb7-45a7-bf4c-ffefde614c2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90993d73-a598-4a91-86f8-7c5676f96c41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "484ff271-237d-4005-8893-913ebd1c8b28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "dc6b4043-f736-4b38-8a9b-043f35f55c66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aadbc489-1086-4077-8ffd-284235d9f02e",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47f732a5-e087-48ad-9352-be7cb7135f5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5ec7732-e53a-44c0-a0fe-d4e36822c21c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2980e51-a7c9-404c-ae2d-8c16ae694435",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "ac68134f-3ca6-4f73-b931-56bc076dfd3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7cbcb48-61b0-4527-b4d6-72a82ccb8996",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13d33225-bf9b-4042-88ea-fee16863bb9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c063e3a2-09e0-4987-a810-7a6c917de5e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7457716-53f2-470b-926c-f73b68f4a03a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "f57e0115-6e25-465e-84c9-d31ce8be5363"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe6c4318-1941-4f5a-9752-bc4b03f67c5d",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "998b7923-ea4d-4c7e-8d2f-8ca400660a8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "413af888-e7a9-4c8d-9bac-d44bd765280f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a327a6aa-7721-4291-a626-54e9d74cda67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "b9c59e25-3126-4650-acc9-e853c91085ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f33fc82-0dd1-4e3c-a54b-ab30b8b962c6",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5f30f6a-e8b4-45d7-a586-fd57f259c5ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ca7c701-d8b9-477c-b64b-608e150882cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee2b9a09-da0b-4933-8407-82a7408e011e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "a1fe591b-5474-4b8a-be04-5b1e8e23db40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "826a966c-041e-45d3-bbd1-5efdf68488ab",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc2d001d-6a6a-44c6-b0f6-d97be08f3923",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "4e66029d-5bd1-4627-b87c-a6a1117a191f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c56538aa-d470-4b68-b31e-478e05ba25ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "eb08ac16-4464-4163-ae23-c67c7c4936ed"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "264e3040-0b0f-43d7-83af-15e665e7bdce",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "de914e42-03f2-4207-bc56-f18029175005",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e02e2888-52d5-4b81-89cd-bb7eb44adf17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d56a8d73-89ea-4fdc-9969-b96725491f8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "566361af-e0df-4374-b389-86ec4f5fe730",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "a7128289-0783-4df0-ab1e-8fc30fb1dca6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "126a806e-2022-482a-b5cc-c712aaf907f9",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a61432e-27f6-48e3-af28-3edcb8293240",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c98a0e3d-e5d9-4258-a104-5f06f202e878"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7499d74-0b00-485f-b0a7-04423f6dec87",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "ac095c7a-8fbe-4b0b-8874-b3b735c4b0f5"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "46454b82-bdcd-42f6-8370-214cac428d34",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8a3f11b5-7efa-4705-aff2-65dcfc33ed19"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b9e56384-3c9d-46bc-8826-4ac4f003dda5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "49ccaec4-939d-417c-8a9a-d5830d6d58a9"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f4526ef0-bf8f-47ea-bdfc-b2350195520a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6f175a34-abaf-4ab4-89ae-4c0188266db2"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "37d60bf1-3736-476d-b14c-5f04130cfe5f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "13938f82-eb96-4a09-a048-25f372708241"
                }
              }
            ]
          },
          {
            "id": "a097c37f-81a4-4180-bc85-337334be6c30",
            "name": "Positive Testing",
            "item": [
              {
                "id": "0873f489-8e5b-4d50-a63e-76ab7d41f79b",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "90eed1c1-ab03-41ca-8efa-e04d47ceb7a0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4bf59513-bc8e-47e6-aeec-1c9dae0950bb"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "82e163cf-0c13-4e85-8660-93403391ce9a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "3eab310a-0fcc-4c50-847a-9470afd24e46"
                    }
                  }
                ]
              },
              {
                "id": "f05dee50-4bff-47e7-aa51-5c26eb3c0c59",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c1d13f32-728d-4c7d-8f98-a52e64794099",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "955138de-e968-478e-bf94-5a1ca7c954dd"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a3a244b7-53bb-4139-8a1f-5bbf97fd7e24",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "7d2f511c-6c3b-44aa-8142-5f239afac869"
                    }
                  }
                ]
              },
              {
                "id": "9b383558-ff17-4d3a-8e23-b75eb3bfa300",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "82ca938d-f1ee-4044-93bf-b505358b86a3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a5780175-d158-4dfd-97d1-71ecb2505eb0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "19933c84-4ff7-40db-9d19-60d62ada476a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "8d57114a-7217-4853-a754-e1c5ae5505b3"
                    }
                  }
                ]
              },
              {
                "id": "1efa7c3e-77d0-4b46-bc2b-f41f465b310e",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d37843a7-f6e4-46ca-822f-f26042e307fb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1463d249-8638-4111-9890-a2f74ef11be2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "de2b66e4-6f83-4a7f-919c-b141175d7520",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "3d8bfb11-a419-401f-9ea7-988a86c3411b"
                    }
                  }
                ]
              },
              {
                "id": "abbfa5de-dbf4-4408-a734-81a93e310a10",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8368b41f-8730-4c94-bb58-7afbc1999203",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ba3bc37b-ec4c-4e68-9958-9237e56dcaf7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7a3850ec-b08b-4412-9a16-48b456f97495",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "8babffdd-c4c8-4a30-88e0-37e32aeedd04"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "dc43ada7-e76d-4390-93cf-38d3dc27c9ef",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7694ee70-2d6d-4c2d-bf8e-da64078a9bf9"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "1d445040-e4d0-4b44-b032-0d0a3e6495fc",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a279d158-f136-4f8d-bf59-87dce8733799"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "00beebb1-a227-4f00-a74a-79d135caab6f",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "102f690c-6917-4af7-9209-35c866f03f59"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bc3aedde-19d1-4fd9-a4d5-f74c4ab6130b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "cedd2b73-178d-439f-9778-cafc9830cc21"
            }
          }
        ]
      },
      {
        "id": "4c0e38af-989c-4bc1-b1e8-236a0cfc1bd0",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "a74a78a1-7177-4100-b0dd-d5f7fda2e4d4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5b848558-3ec5-4cdb-82d4-a98de7623272",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "fc767d67-45ea-412c-ab38-57e5d27b5b78",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2779a933-0b57-401b-97c9-44b501a2e33b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8fb73fac-6d56-4d06-b480-c1e2ad621912"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "635595ba-aff9-41fa-8cd9-9b9209294bc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "b3330c96-738c-4176-b494-572142e66903"
                        }
                      }
                    ]
                  },
                  {
                    "id": "043c2a0d-6d0c-4d48-8b1e-71ce281b906f",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99f5153a-22a0-4ab1-8c1c-045b63b113fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04ae7cb9-a505-4325-97be-4119e2f3d1cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04a8fc30-25e8-4e58-9313-8f8fcb4a5b03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "62f05511-b524-4a95-b520-c9bd163902f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a85b693-cd24-4404-9e32-9b39e37fcff8",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c2eaf4a-dd06-4096-b21d-f473bc3b8540",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9e07121-82b4-4395-9ba0-3d6604268e84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28d5303c-4c59-4f4a-a29e-20c2c2c8bdaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e04d820d-45a5-47cd-a82b-49b028bcaf7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "227b2a4d-d830-4372-b3fb-361d584ad5d2",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f81277bf-d769-4e3a-bd23-5722c3c75467",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0871ff59-99a7-4db9-b8c5-ed58ecf2b021"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a509419-ae36-4c9e-94a1-5bdd7fecad4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "419920cd-8ac4-4119-9759-c7052dbf39d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5081eca4-f4f6-47e3-b7da-f00f606d90a8",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7111e2f-9abb-4e09-bf78-e5f01cefbfb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5903cb4c-ffd9-4457-9567-35ad4183c9ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ffc8493-8892-4a8a-ac1d-f263b2dc7cd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fa072f38-018f-453e-9bc7-6ec08d589fba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0d27416-b96f-4a48-9080-311f7b9cd1cf",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26b70098-d035-482a-b0d7-956a201aee5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ef1b3fe-1397-46a1-8403-f544a531114d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fde704b8-252c-4541-97dc-8965ac094121",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "545a0a37-b5cc-4d33-8162-a4ae06fc0958"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db9a22ba-4bf3-4e15-b94e-e4eb338b6be6",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ffc0ece-5fe5-45b1-8d14-82030ab52c29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "880eca13-3511-4081-a136-753ac940666a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea33ecfc-2a63-4dd9-a022-bbbe63ceff9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "4e438dd2-9b85-4098-9350-b37cbfd2a5cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59760d2c-50a6-43cc-a5da-02a58ddfb3b6",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "459ac590-d2a1-4c5e-82f6-05aec84d7f6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb49298b-a3d3-4a2a-ad1b-a17c19395753"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9482cd6-0222-45bb-a387-9c79e26f6ac3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e75f835b-f395-4564-9f48-b573452e3bba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73ea8954-4761-4b4c-ba9a-05be86a3e1ee",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27a5c536-8dba-4115-8e9d-875916f1a3fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2e2fedb-dd65-4b03-92ab-e80adec37010"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4445de4c-2128-4fcc-8b36-15cfac55855e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4341c97e-2c3a-4770-b676-8f850ee5c2d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ea461bf-85ab-4089-93a2-f95f5dba213e",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "481f2f6b-99c3-401c-83ab-a70f429d5092",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e8fd2cc-d7fd-4e83-a258-e4d9787e5ab6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcb18af7-5147-46fc-8e7c-e6689a110e9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a52bbc2d-6800-4172-a99f-e5cc3728f5ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d1261d2-6863-436b-9fbc-f1cd5be7af6b",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23e23488-08bd-4135-b691-8574d1f1a3fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "926ffebc-8b3d-4ac0-9299-0839487967f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e09fd2df-d97f-4b83-8502-f6f61b647f1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "77019265-bbad-4896-a876-7462080760b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "695bb90c-c815-450b-81c0-c9d1870de26e",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2edc8e3d-8c14-4719-99aa-902da050a0fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae4e6d87-837d-4eda-9344-a09f2674b526"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e48ccf82-da73-4feb-83e3-4325b415501e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5ae2e25b-2ef7-417b-86f1-136caab5a56e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28053a7a-1291-4c68-abf3-8273240aad0d",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7c58ae5-a702-4328-9364-562a71d09c78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e62570a-4cbf-474f-b745-145421db441c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "762c95e0-99a2-455b-816a-8f795f64b5bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a6d3b9cc-e44c-45cf-b453-e538c63429ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e334aef3-9d05-4485-9c2d-c5c561b5b0a6",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4432be08-761c-452a-a961-80709f2f9732",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12f40102-a113-4dec-86a1-3856df1442ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8745dad3-f7fc-4498-822e-8a41ea33cf4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "607386f3-4bf5-4429-9809-0d63dbd42fec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a41192eb-c927-4b17-8e3b-8e6438271ed2",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2bceee0-7fa2-46ea-b4b9-1e32f9ba6d51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "463a4d53-539d-4119-870c-8f5a864fbaaa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6268aad-c76b-4a74-8257-8b18ba0928db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "4d3fba6c-96e9-41d4-b31f-5f66c06cb3ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "683c5164-5dba-498d-b67e-a7a1da751acd",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "059042c3-8882-4251-87e8-7f3eae2f197f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a07aad59-bced-4421-875e-44144d02052c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e6743b2-1a71-4783-8ef3-229419e4205d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "04228840-a7fe-4711-abd1-92f143207681"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d54649e6-0f3b-40c1-9bdf-7c96e637d1e1",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e3dc09a-44a2-4ec8-86f1-5a9b429223ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6abd338c-bd46-4f49-b7db-2aa89104476f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "650aafcd-d372-4a39-ab93-1657f4b9a13b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "4a2c97b4-b9c9-4990-bfda-f9afe8214ac1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1796e96a-b95d-4880-bca0-be3856f0453d",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "207de709-bced-49a9-889c-b23de31d622d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d6404d2-c5db-4a45-818c-6beb863dc18b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef42390b-fb95-4ffe-a961-4c6479bd85c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "ca01df2f-7889-467c-8fcc-6541b5e8fd70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed242fc7-9ecf-47c1-ade2-849b15e59e82",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "710fdfcf-da7a-47f7-825a-d93594870d0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90b4e20c-ec2f-4442-a771-15eec47957f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c8e8b1c-67d5-4ed6-a0cc-a79bcc784af0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5d5932bd-6e90-4b04-8af7-3772d0c4639b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abd0f779-ea66-4b44-be2b-d4e78b35010e",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6d0a124-1976-4c43-a189-80fb350a487d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48023da5-ed47-4b33-8146-0862a58e7e1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "603d10c1-58a1-48a2-80d9-018bbab33a4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "30b81b26-da96-4420-9b06-457a1b3879e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb65c143-1121-47bf-9e12-3f8d491f2f7f",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88ec6da6-c4ad-48a3-9b6a-1d448214fc62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "023625a9-eef6-4be1-965c-1238bb0e3004"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64943eb1-9505-4ff1-acbe-c95f3eb661ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7da6682b-6f46-44e7-857a-35544f27353c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02419bb8-be3e-4c29-9752-2a81046104a7",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "355df564-3b75-4443-804f-9e1ba83c99e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72098eac-1597-4910-ad11-fb10a543775b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a22c4b9-9e2d-4ab5-bc51-fd557d35b0ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "eecbdd98-3e6c-414f-9f02-973c0873b6d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b22dadff-9f38-4ae2-bce1-1f4a961420df",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e28cae52-62d1-40d9-9671-83371b4305e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7287bbf8-9709-470b-a1ba-519b759e82fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d44f6d6-c643-4ad2-ac6b-304bec305923",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1d128fb3-8627-483e-a693-ec16e447fb97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2da80e55-dbd0-4327-9dd9-c6011c0ef68f",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb48cfec-22ff-4dfe-beaf-83307eea4196",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a183fb5-ec9a-4ca2-8661-301015aa7de9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16799d87-136a-411d-a904-af55bce07fb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1fb9a864-254e-40fb-b47e-d1be3022c42e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "153b4874-af93-48c2-af79-5a478564c74c",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e605e086-ce50-4e2c-95dc-5891b8165574",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f61d9c9a-2505-471d-8ba3-550840f5711f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16e42012-fb1d-40bb-99d1-1f568ba3fb6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "29c05454-5b50-4968-b3bc-899227d7036b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bde4bed-24a8-493d-82f1-4bfddebd92c9",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14567a87-086e-4120-ae6c-429671daa29a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30363a12-fa3e-4e64-bebd-382e94c43c69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65b571b9-4cb2-4d1b-9a6e-7c0898c061fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a841acef-adf5-4ece-8c32-67ab97c995c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c516078-b2a3-43cd-84aa-94b5234fd177",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffc66287-e94e-4a83-8e93-d847d47aa074",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e157a9e-a79e-4d94-89a7-5bd0c7c9cf50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5d80154-e86f-4bfa-85b6-fcf1937ab3a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "864cccc0-bef8-47cd-810f-706412010ecb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bd67e68-1151-439a-a070-d6a8db465311",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc8bdbb8-b21c-40f9-a918-f621867191ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44dacb78-09be-4523-93f5-1e5c683f4146"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7df59c88-b9ba-4fed-9ee3-72397cdfc3f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "87eaedad-3991-4fda-9c7b-16bb8130c50f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97a52ec3-2dc4-4efd-8bc5-0eb18f3f61bd",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1aab8600-ffd5-4bc2-9528-7703334455d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef4cae2a-9784-4b52-a770-0ea093f029b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6c7176c-8d09-47ca-b007-9c3a41fc6a09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b8686c84-a7a7-4c90-abe4-c6f0ca5354ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b2ca18d-ac4f-487b-8caa-8f6cdde1b65a",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c185c384-87f9-4d36-b290-1c6de18914b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf59c187-290f-4f3a-b43c-4fc81ba10b78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a212118c-5f2f-4bd9-b184-330c9a0bdd8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "522f8b69-8243-4021-9419-62b912e44018"
                        }
                      }
                    ]
                  },
                  {
                    "id": "636746ba-7049-4edd-b15c-cc4c444649c0",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a744ae7d-03aa-4de7-bf1c-a37b1ac71dd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ba49ea8-df8e-45e3-bbac-87d6a2fbdb32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bab7957c-b63b-45c6-8704-0b913c36e9b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7ffa32dc-7028-4c59-a90e-bbda4aaad48c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9646ab49-637d-4fb2-8029-21af3017fecb",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df71932c-eca0-4532-a08e-d4d1ab5cce10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "719facdc-f051-45de-b6b0-af558e2c61f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e349159-21d8-4a06-bf45-240087dda8da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bd24c812-7ac5-4e7e-9ebb-e26db7435b06"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "2d84782c-9591-4330-939d-1a264cc9dec5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ced94d85-19ad-4d12-adb9-f11ec55e9bf5",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b173080a-c17b-4474-8739-cf0f1e89967f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e999c790-b70e-4f5e-81ef-f89a58475958"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08de4586-9d97-458a-9880-d133c2720377",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "28420212-83bc-4b06-bd2b-79df6cdf75a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e7a2425-6259-4c95-bd87-68fe20b7f23b",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00487708-daba-42f2-8203-6c35ee065cd1",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "2b568bb4-6f0d-4ce4-bc15-ab627e45d69f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64a06cd8-ab3d-4f2e-8051-c4f338c25637",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b8734178-7786-41b9-b909-145d7d96d7ae"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "21c7a139-af81-44bc-84ac-103d380575a7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d93a5890-d92c-470a-8d34-d451cd5eb322"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "99b62af7-21c9-4d02-a725-c6e0be9a83f8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d61232af-a586-4be8-b2a2-267bbcea923f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "47091298-02e1-4fe4-ba17-85342f780176",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "1aa95852-9128-471c-94a1-ff83e08ec51c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c45f874d-fbbc-4ab6-871a-29cc16ca2f3f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "420fc35d-eabf-4ec7-bf7c-2b36985dc280"
            }
          }
        ]
      },
      {
        "id": "2f7ffe98-ce56-4f3f-bbcb-10f76211fe60",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "af5fa449-4e81-4139-9da2-8617fbc2f7c8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9c57ca44-bb1e-422e-be5b-1ccc65619cbc",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "5a50efb8-02dd-47e4-acaf-0d84818c3b9b",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fffec9c-14bf-4c45-8cde-30b5d759ede1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69c84982-9c55-4305-b47f-9bd0c0dcd0fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70ecd2e7-005b-4aa9-8cf8-47fb22a43814",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "adf6d218-f719-49bf-9330-1bb0d12b3af9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91b60c7a-0ec0-40ac-9727-130435a8f2de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9822cae2-0b3d-43f1-8a18-a104686846c5",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e67f4461-d879-4dd9-b03b-84beb9aee0c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0289bd9e-3076-4330-bfae-7152839e4fac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47cdeff0-eea2-49d1-ab09-e96d980637cc",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a8db8a7-1309-4410-9f9e-9e89f4fc3b60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94570812-dc1d-4b6b-9763-7594261fe9aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2edea57f-690b-4185-b573-d98616d848ea",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34bbd120-e71b-43fe-817e-4f4db9b75aa3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21ff2d43-fc3d-4f14-954f-0f396ec73a23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12dd940c-ce55-4f2d-8b58-4f2df3d653d0",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87f5d34d-ccae-424c-8101-d62a73015799",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2103dbda-41cc-4b77-ad16-f5083e513a49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ab26314-7276-46c6-91b0-0ace6a10902d",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c60ac153-8034-4f69-a041-683aa52a9159",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "318606f8-2f9a-448e-a779-a7456b05944d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a00016f6-9912-453c-907f-045e041a6e39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d1bbab0-edbf-4f88-b40d-638917699f51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "025c3278-c6e6-478f-ab15-c7b1902556e4",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa96080f-ac47-4341-8c8b-c91a8c6f32d8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a92e1fce-94a5-4ade-b310-ed07819956fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0407a9c4-d7cc-49a9-9752-ba4fe9d1436a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1369c0f9-d84d-45bc-ac56-ad59701721ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83b7cf3f-5315-4806-b153-fa60bf3826a1",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "100b9f4a-35ce-46e6-93e4-721bce71bfd7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "252f346e-a3dc-4637-9d8e-aa33b492b723"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8c97bd9-2b86-40d5-9706-aa82971027b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bcde2832-490a-4545-8768-b4f43f921dc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "683ced26-9d1a-4c19-a06b-1a84e456fd4e",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbd1af0a-4b4e-429b-b08f-dd7f75d2d918",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2e4b99be-8864-4354-b610-aa406d83de55"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3198816b-079e-47ed-b803-eb9c315dc94e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb0411b7-8fc0-4a5c-b901-76b479178b02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d0517a0-068b-41cc-b5a7-ca78f812692c",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d9d0849-b5f0-4147-8e4b-90b3da17f10f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84a1e1df-b78e-467e-8d32-553e779eb62c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33c91451-2742-4566-9a13-e16bb9d0e14d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9c939fc-ef8d-4e92-9099-e17e02ea344e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e8d4cbb-04b0-4fe4-bb07-012b644d3f30",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c134e15c-8bb3-4134-a38a-b74e5a6b6a85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38313592-46a7-4440-b238-9aab0b33f997"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f5ff129-0f60-4661-a836-504281978219",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd5c95b0-ace7-4e54-8c22-6063757a93e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e46d394-9264-4a20-b0f9-dc21ee1348b3",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "929ed390-1964-4313-8102-20621a086bf5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "842db889-3d40-4c94-ac55-92ccc8e459f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e048149-eacf-4af1-86d9-b1546bc473dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72ae1375-31d9-4704-aef3-b2e2bc184e27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6de811c-61b5-4c2c-b0cb-ad84d9b43488",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4caa42e0-ca56-4685-8370-d54fcd1ea2a2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "062ad0cc-582b-41ac-a29b-8fc6f5f4e312"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0be3678-8e98-4ff9-99f7-f551fb4c5379",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6f81ad7-6bec-4993-b9a0-5a1f68f1cc4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdd56499-3a84-42fd-9fff-b6ca5face13e",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40fa9098-191a-4150-8cd4-0966aae911f3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b667399b-a722-4f2c-b276-7b8aed1d59c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7312f8e1-f7f9-4bf8-8310-4d654ee0b31f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "186d5b82-77c9-4b8c-9cb5-027089162e53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c2af83a-5f10-4155-a019-d5b53ce0213a",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d2840a0-93c1-4f18-96d2-31a10100d0a3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b1579b32-d1ff-4c58-ba6b-70fe2ee8c2f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc41efb8-3a36-4ebf-ac97-da7a70951e17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e13759b3-7c89-4d78-8546-61c278e26890"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94d5069c-6bb1-49e2-9b68-b6a8b02b7b89",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0004086e-7ad9-4249-a6e4-f204834afaa5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09d9c466-a3a9-40e3-a46d-64fe8b1b08a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3108f062-2d44-4f59-a414-da82adb618b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3c32669-fd49-4376-9073-1943fc18da9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5634b31d-28c3-4157-9345-d438019390c3",
                    "name": "credentials_verify:vc:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35b8ef03-b04e-4cf3-a26c-93dcb61bdc4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0448180-32b7-406e-9850-501885ec26f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4678107-17bd-4c8e-b49d-7fa5d42316b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89b1c704-91c4-48ac-a381-15acff066fce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9460912-bb0a-4b45-9a55-92ad3a3587b3",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ab4d3c4-4d2c-4f42-8adb-23289a14bf9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c0c7356-5fcd-4db9-b032-bd95a8523e57"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ad0eb89-2b49-4097-a53c-e1cbfe05e15b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5cd9f97c-31d8-42af-b948-aab8604c7c59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67eb453a-3ac0-4839-bd01-1e81f8c7dfa0",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8eba641-3b5a-4e65-bacd-c301a5cccf97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cbb3da1-fd06-4800-ac9a-293a36de2f38"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06ab83ad-3c38-4e2a-a377-84d6c973f81d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "731e038a-aa1e-41c8-b14f-c3fc7b22ee9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6d16812-9147-4fbf-ad09-28c1ba6e6268",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1040cf9-8ee2-4f6c-880e-306b670591c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea3cbbbd-9c97-442b-af6d-850bb5027b21"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7c3445d-c7f6-40f9-bef6-2a8cc34b4d21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87b79557-cf7e-44f4-ba92-6cca3b500f7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e44edefd-dad5-41a8-888d-8b3c56c70bd4",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48dfccfa-1b9a-4f65-a832-0f16092e9801",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29478727-4225-48cb-99f6-24b52b076beb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "958b7f07-bd33-4d6b-bdb1-0d04f5b0b60c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f39b54a-f4a4-4844-bd81-3125b2e380e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a7a5195-74c6-4bcd-a4e0-c697b7dcf15a",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94f9c103-850d-4843-81c9-d3267e803453",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e0c97d2-1f56-4a98-998d-25cb8a1e7f06"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a04ec72c-67e1-4805-a756-51f28d0df628",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "172df142-4da8-4beb-bebd-f73b89576c99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "115f053f-16bb-4781-910e-386caf8d0e03",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99fcf0c3-115e-4d86-a4a9-f61a778330d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "154d212d-2a39-46a9-84f8-d4b78b739d0b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d65b7668-7400-4001-b1f7-60dfc64a8dad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5579eb70-004d-4fbf-9bc9-f5ca98574e61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebdbabe8-9912-4f21-b35b-9a434b6e83a5",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bccd6fa-c82d-4a63-aa66-8d9a7d5aae58",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c074e615-420d-4147-a861-5f4b2aacab9b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "46331c00-f6e7-4a5f-99b4-7bb89fef65ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e89b2158-b06f-4812-8005-ede0ea587e7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae88607b-522b-49d7-a071-fc367bcf27bd",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0bf3885-3f72-4d97-a003-d8dac2437cb9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7fc0298c-e08a-4f46-8b98-1e3e72eb68dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09032f4d-fb25-4f97-abde-50586f13ee78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81cef327-3445-4fef-bfc9-8a474df834f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2e549e8-e275-411d-a46a-8677336d2fad",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98107483-f9d9-402b-b45e-abf7e9596338",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d85d3e6e-58d6-42b9-b430-fe61297e967c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df93b7b6-d140-459b-bd14-a36802a13851",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27fae043-e2d3-416a-8771-3b93fc0727ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cf0d830-a6bb-4717-aa0b-e9862dd8569f",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83cb5c5b-d6cc-4a6b-ad94-9b26ba168fd4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7a141ada-1372-4e08-9f24-273a9e824323"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac70a32b-f3e2-41db-b213-a7787763eba3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f2e4a06-9883-439c-b9fc-ecce1f8f913b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0420f46-e066-468e-a7a7-73406a507791",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d86a97f-3126-4905-92ee-5f04ed15d593",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b856aa7c-e229-4391-8562-a25bc1fc2d7f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c891277d-f3a7-4a77-99bf-c150a5f41448",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "998b0549-51f6-4285-ab0a-6fe3d50c46e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a401504-aed0-48fa-8647-c6a97c2faa61",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14a5bbf5-dcc6-48a0-ac01-70cd4c7ce016",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ab3118dc-c2fd-45f5-89d9-65ec2f0d05d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3f8caad-3d51-472b-9ab0-0f0bf9cb37b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b81b0da-768f-404d-bc98-31b6cd565fb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed5881f1-a41f-400d-85c6-17b624b3af41",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e65865ca-063c-4273-a7f9-366ef68ee512",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8dd7a30a-7162-4587-8a8c-209600ed8879"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e524081-f5e3-4552-913e-f52615d59dd0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6458fe9-0ef2-4bd7-8e06-fcfdab68c42e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b99ca3ca-d24b-4d46-973b-00ad46f538d4",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61e32c2b-44f0-4f2b-a975-7cb7a58d7330",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "da99755a-3529-4809-ae30-2fa8700ac6e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83df2581-d2ee-4ef0-bf2d-ac1c71a906fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "077107bf-ae00-4d22-b1d1-42675d84db13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0044546-d3c7-4f3b-855b-9431bfcdb122",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7da42e2c-0b0a-4cfd-ba90-6dd493a7f2ef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3674f56b-e8c6-4b1e-8e65-e64e4a1ca5ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec77b9a0-52c0-4c03-b0e4-838f5b630e07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "197f803d-77db-4dc7-bbc4-8205cdf58668"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09ead1dd-41ac-47e9-8f8d-7b10c8af1128",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ff715bb-5393-4b00-b641-cdd9c959796d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "349e0b01-8752-452c-a67d-addad7f7c58b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f979080-8a8e-4800-997d-2129b614ec90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e655e5dd-ad44-40f8-96f6-4c8f00b4d926"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6377ea55-a9e9-49fe-90ec-185b87d539a9",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d8d9a1c-0ad3-424d-a48c-b5a158d67a76",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e314c390-6514-47ea-8c29-52bb64017d90"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f08fdc8b-58f4-44f7-99ba-59c514cc1436",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04b558cf-b90a-4811-901e-f968aeceaed6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4ee0367-2367-4bdd-a34e-ffc9c34f13ea",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40f35ca7-9abb-49ae-b509-3334ef39c8a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e444212-3d05-4c77-a6dd-0b11e123eef7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9c64f18-4333-45bd-8ca7-aa80e5d32fcc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93a663a3-0f40-46f5-a8c7-f6459d5d3c80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9186fbeb-1c5f-41b4-8c10-44a4c45aae5d",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05e78530-5d92-48ce-8c96-4bce7e60eb98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4942fc8-d397-4d7d-a121-891ef6e68bb7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2a6c133-f1a6-4a57-a4a2-50159e2ef3d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e84d1572-a215-45e4-8f70-22d3fbacac80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae79dfda-3caf-490c-b93d-ad5ad7c91c0d",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "430818c0-f3f2-4a35-bb05-74893d58a71b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0cc02198-4f0a-451f-8ce6-223461f55801"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da67c9af-688b-4982-81ce-5e4190f980ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b547004d-e791-4c48-9a6f-0c36ac0d6b21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a93afbcb-e424-45ea-ae6b-a5bf96f8337a",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99c745e5-52c2-4087-8152-41718a053c6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbfa021b-9743-42c1-8984-4f0d1ce5e259"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53497662-c6ee-4aa2-aae3-8322efedcbe8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbcb4d90-2ce2-4872-92da-c9798a569e6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e68021f-155c-414d-a217-c68d4cb0e680",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff1321fc-b338-49f3-b469-f5486abef3de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae9ad8d4-92e2-4397-892c-ad95a65c38ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f3e20a9-16fa-46c4-81e8-0a50c61e67b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b41f5fbf-f5b1-47a3-984b-462a42881a1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b158dbd-376b-45f9-8e77-026a6cb0a7fe",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "973ff028-6311-468d-b262-ba226f3f2320",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d30d9e3-c681-497a-8fe7-3fdb5ad8863a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "124be654-c95c-4a59-9006-58e4a2cd964d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36f61125-fce4-4853-a4bb-7405849f74d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a22c745-d39f-4892-8349-c75af6078539",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a37712e6-fc5e-408f-9927-e2ef6b85cbb4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5903b59-663c-4ca1-87be-695ac5841800"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06d13a8b-cf1f-40c0-887b-f3e7f6004352",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ae0a05f-2841-4015-b420-397d91d02a8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b0b03d9-376d-491d-9caf-c6b4c8129105",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de3449c1-a0b8-4718-9ba5-e863b3fad557",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b4c76fa-b1ef-41f0-8648-0002f9dcda28"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa0d9380-e435-4424-b633-d76e97292571",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8866473a-eefc-4dfd-a2ac-ca2349f0e47f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffe36328-d080-45d0-83d2-599a8a6831d1",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f54027f6-0c31-45d1-b66d-97a468d1a915",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79b603d4-9f91-450e-937c-105277ca3af4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "252b83ae-3087-4baf-99b8-7ae8661dfc39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "664e4e8e-f294-469d-b992-c644e01d4239"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05970818-758e-435a-8d03-5395ee628349",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72f31139-846e-4f1a-bf86-9be8cf408366",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a85cfef3-2ccd-4edb-8307-0dee1c83cc62"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d9ca504-f4d8-466a-9964-51bc66dee94f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "497402c4-8b17-4f15-ae43-c461185d90a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f159803-c9ec-4810-9dca-07a41c8a3d27",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f105e844-3083-4dc7-ba9f-a09ac8ecd970",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dac80ed6-b486-4fa0-949f-42da5de861d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f19d1c01-f576-49a9-9af9-de47bad3564d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4bc0d51a-a883-474e-b2fe-0ad8fbeed648"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2e1576d-a311-445e-9c17-435644d0806a",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8357bab7-fb78-4266-b21d-70774ddbc841",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19b9aa52-57dc-4ac9-9e53-64dbcf9dff3e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f89fa1b0-327e-4c5a-9f09-16a4ca5e7530",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0384124a-20bc-4557-b4f5-9b0267d9035d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e691dc7b-a01c-4073-af99-e6249121e4c3",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f56293e7-1936-48b2-8cad-b2e64392c563",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac8d28c5-b715-4089-8497-6433e7f5d100"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a3dc05b-9a7e-4283-b5d2-58702eda4351",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea1aaed2-70c3-4c4a-95f6-7fe110cc80b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f637edb6-3635-4996-b8b7-c976824d9180",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1da760ca-14be-44ce-921d-e6bd67160bd5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b0f2677-7798-4619-8b22-4d7eb5a6dd37"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aec8ea5c-c3d6-4857-825c-5ca8b17a5c0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dccfe106-f57d-4610-8300-68d3e2b2f69a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1e9016e-0b89-42c4-95d9-7f423c71ca26",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f4457a2-211a-4ff9-9910-097edd7c89ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cce7a1c9-1de0-49a3-ac01-e95fc7240669"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25a5f3d7-a14e-446a-b1f6-ade672975a6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9550510e-4d82-456e-8130-c2a90396791f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "427ca60d-fdb1-466e-9aeb-d1cf9234074d",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e35da42-0ea5-43aa-b185-062ca391c8f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca3378de-5fe0-4609-8ce8-188110487b7a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d0b32d6-0999-4171-9b0c-69a4b3903d8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1bbd75ab-57ad-4c82-884a-494b76ef3890"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71b1ab3b-7994-4dd3-b115-841f4cb62014",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdb1a5dd-0fe8-4d44-ad68-cea1aa5c10fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1fc49f3-aff5-4756-970b-863d11a4403d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1299bfee-e9e1-4aff-91a1-e530b8e49bbc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45fbf318-2a53-46fe-90af-99cb1d2cb415"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c4bfcba-f67b-4d66-a728-9b1062b5083d",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dc7bf06-fdd2-49d6-b666-82f3c6419655",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6928ddf6-7f3b-4027-b1bb-b2f05b8611a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "265eb1f6-dd2d-41a6-9b6b-b485fcc1835c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2ef0bf8-059e-475a-abc3-48bb7cade6fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1232433d-e29b-4642-90f0-9fd88c93dbd6",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8af387ac-eb05-4db6-8bf9-41c31cc6e796",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e15e3472-ca4a-45cd-ac62-660c00b6f3eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e1cd02a-cf8f-49d2-800a-50ec056dff2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfb43331-dff2-402b-b6c6-5bfb554cd9f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66ad555e-4980-449b-8ff1-24ddc3b51828",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cd1f3e4-7669-4368-9be7-f709c4987b79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b3a1637-59b3-4c00-9adb-ec0ea2dd4402"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa586567-f05a-469f-a6ef-2e3b76010e74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68d46e12-62d5-48f4-9853-85514f967d0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79606e89-880e-40c6-91e8-3d09ccc11a21",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d3e07e7-ab26-49fe-93b7-8118927793eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "783d79bc-d35b-4185-aceb-e01fc15ae236"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85de7c06-d7bd-4895-8b94-9f449645b94f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f940ade-a2a8-4743-9ffb-37ff89674534"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dcc1de4-5857-4bfc-84bb-ef1d51cbc34d",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d07b6f95-9c0b-4068-9edf-06f41b34c43b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32a770fd-ee9e-4811-95cb-fdf3f6f0c7c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5cace27-ead3-4e2b-be9c-eb9f6dba195d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98d72595-e713-4c3f-83a5-96b6ded53fb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5adc6fd-7802-4fe9-8d36-0877c8648348",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e95b74e8-1a4f-4339-ae19-0554f016be48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e647ed0-9080-4696-a932-1e8454feec95"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f40964ce-dd58-4499-a7af-d81507cbf44a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28c3217c-f08e-4161-acb1-e74fa2a722ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4ed3d4a-86d6-44ae-a051-d877273d69f6",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "500ecb7e-54a6-4732-a1e0-e6685df83402",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "250d62f3-8997-46a0-895d-43a57ae14573"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a3b3571-e3aa-4cac-8e12-291a06e2305c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17fe0eba-9706-4733-bebe-4cb381c95f0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "533bffdd-7286-42d0-9c12-bd9ee8674e5c",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23a74d27-6ee9-43f3-abe5-6601966df0f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f33e10db-05fd-470c-a309-2a1461903bf3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50799ac6-ff5e-412f-9529-77785605d764",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb4fc467-d9af-488d-9d97-c64b85175de3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "274bc383-fca1-4d79-a4cc-b51e5b1bd4ea",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "447cfd18-aef5-4ed9-983a-1b51cf935dcc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7134f9c7-6a81-485e-8b7c-9e54508e1fa6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c2825de-c1af-4f50-99fc-376291302915",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8bdaa952-8a16-4b4f-a552-9f46b600db42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4c7e4c9-1dc9-412f-883c-8a7071f24d85",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bf8c34c-f82f-4e09-a529-c3c330f2a797",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e04c254c-5a62-4d7f-8b8e-4f02b65d7568"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df347ce0-cd26-4ebf-91e1-40fad0aaca69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe989401-f919-4f60-a071-bcaea44e657e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "956eec54-1517-40a2-ba96-de26e0c3cc02",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90e36deb-7f3c-4d9f-87a0-1090a3816e37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b644286c-1232-422f-ab22-850914c11e8b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d12bcdb-f25b-4fd7-af52-c73e2549f746",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ccbfb3ce-df43-46f8-bedb-e919147b19c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ef3b3a2-44ff-4429-b922-59cd2cf5fc37",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dddeab0e-78f6-4edd-8845-ac7d0962ead9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ffb56d3d-2e55-4d99-a692-eeaeb0f2fa4a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77aee8c3-59dc-4af1-9147-f1dea0467b3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfaeecb0-5691-4f9e-bb6e-d479019f3738"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ad34b60-fa82-44b6-a8ef-cb57f315f48c",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35bfca26-f890-4bb9-9285-7de9fb7d1d1f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "90c60449-00b0-47f8-b02e-35a7b3c9e8f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7621133c-684e-47e2-b8bf-4b7d91f440cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6cfb872-6f04-4d5a-a57b-13dfcaa979a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11807bc0-8137-45ab-ac33-0c228ffdcd49",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71e31b8e-5a23-4b74-bd84-e1081a46d651",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5040fd55-7b18-444e-9ad7-49f128efb10d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f46636f-20aa-4728-a32f-c497905c2d9c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "994d22f1-3e77-4772-81a7-ace68421b830"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98eb34d5-6ae0-44c7-bb22-b28a30590665",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b81c322d-98aa-42c2-83ee-0fab063f0ecc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "26914210-32b4-4742-95e6-79c5d65aba55"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55d71d7a-b3e5-4838-81f1-be2e458c1cbc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e43d08cb-64d7-4c96-868e-51ee4800fd9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebbc7004-981e-4f42-b45e-44d548f854aa",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48e829da-06d8-4973-a5d9-feb051c8e195",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a5b4e3f7-07e0-438e-9ea6-dd7c721405f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "244f38a5-947c-4e57-9cb7-25f5b78c2755",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d45e6b6-d226-4089-a9a0-67434c352acf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26ba032f-4f63-4a9a-9ddb-da621ad9b357",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "551d4308-b6d4-465a-a3b4-b180e203d154",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f94695a4-8ce4-4ff8-b9fa-f42ee23285ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "817a5522-ce78-4bcc-a5e4-75486aacffb6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eeb0e065-8753-4ee7-bc70-a21e31c988d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "724ae5a3-1417-4d1a-ab6e-82da19504164",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2169993e-89c7-4cb0-b0a8-b44e6bc4b294",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "47326036-926c-481f-b7ab-1f8ed2d5d605"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2eb2123-300f-4328-9e34-c3d67e7da0e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f3d32e9-e314-4cce-8ce8-c5ac31018239"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13506961-ea7b-4f92-b50c-9a3ffa5c89fc",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a491a50-ce92-48ea-a318-70025f7ada5a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2b90ab58-9d42-4151-99ac-1cd1c64cd048"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26257939-4a3b-45b8-a218-eafb83a34531",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9553b1e-c356-4f5f-bf58-a104c552c080"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9d60f1e-ebff-4bee-aed6-3e3b5c163ea1",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10e99ec2-81d4-488d-a3e2-6beeb62bf011",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6b378d66-536d-48a2-ae76-aa22535a3718"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d636876-ce44-4d33-9eeb-1a2ce3bb13b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62ca240e-09a9-4d0d-a3f1-34ca2e214062"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c074f49-1ae8-4cb6-850d-1a67b8d8153b",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23b4b935-3510-4840-ad3b-c837e6299c7a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0731b0d9-e744-4ff2-8094-c9cb9af82e11"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d9f9554-b0e1-4116-8aa4-6005d0bd7b3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f269573-6a18-4d75-8453-837e944d116e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "958219e3-6dce-44fa-a417-cc4dae1d3c87",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a5db7be-d850-44a7-ac22-28ca801c0504",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c19f0bc9-d9ac-4d13-b836-67398175c5c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b93bde06-56e5-4614-a305-3263b819fb8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "435b335d-f1e7-4776-85e5-b49c513af0a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b5ae4b3-ea55-498b-bd84-63f27e7a2824",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cce5a66a-7de3-46db-9023-ac192a364196",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "27efb023-2054-44b7-8b8a-041b61f22c19"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6873bb4c-46e7-487b-9b6f-786bca105e3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f72567f-41f1-40a2-9972-1abf2d7c4af4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0af0934e-0a0a-4f5e-a6e8-50677d785a40",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2ab6475-ca31-44aa-99a6-9f541df6a076",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b33bcff1-100c-4823-bedc-7df5d77c035c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e45e938-d0fd-4c3a-b0a6-dbc0afb67a25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4e5fa7e-9265-44db-9f53-5173eff15973"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07bac418-0f86-438c-ac50-f7a17411059e",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "339bb7a8-dff1-4b3f-bfd6-eebc3d18f608",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3e45cd85-7373-4468-924a-572b1c2e3196"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "508e57eb-955d-4cca-aa77-c97dd646074a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2b556bb-5eda-497c-a22a-ce2b41e6570a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96636665-d8a7-446b-99a2-faa257f0d5ff",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "699d00a4-3bc1-48ba-8ba9-3e1a88781d65",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e1b807f0-e968-4621-b00c-5eb13c7a49b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4837626b-d563-4291-97df-8658325f1752",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3da1d112-e16b-40ea-a707-62f739bd0fa0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc028467-aee2-4a04-a1d5-339816da61a8",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ae80381-90cb-4421-9b31-a5b44d9a8f3f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b6f415bd-17ec-462b-bab8-7ab7d4bd5f80"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "611297d6-04e2-4a0f-a5eb-8b5d6b6e5d56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a62fdd2-e803-4744-9764-bb1339d74bc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb23d7a4-daf2-4655-b834-868030b94f5f",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "511a76fe-5ce1-4d78-91c5-02c6efdafc58",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6f71b7c3-fe4e-47e3-8b27-0604f38deb32"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c999c4a-a632-4b4a-963d-56a583f48b9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a29f8398-85cd-4c72-ae0a-1a4b5cba9136"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6fe862f-fcac-45bf-ac38-5b53f44ea643",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50d6a454-f217-40ca-927f-12668233717c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "41109614-880d-4e23-95e5-cc70daefdc96"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b943f89a-b0fe-442c-a5b7-9a0f23fca38f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62a3bc73-72bd-4730-a949-60c18165d97a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76e21120-688e-4aba-ab33-748173ba4d4c",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1321f6f8-a99e-4680-a4bd-b62068269979",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2eacd20e-8c1c-4d62-9ef7-0b79d49b2d15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "070c8134-0106-4490-8187-35da4c9d39f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c8f1935-e2f2-45fc-8dda-0ebb53ea650f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9f648a0-e99e-464b-aaac-9fa232f0e168",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90f282a9-4a09-4195-956b-b6360223b8f3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b80e2397-f715-488d-b2c1-60786a42cad5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d7a49a4-6e92-4fcb-b1dc-b472af94258d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "582dfd1a-507b-4fbe-95ee-484d8e6074da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a4dd813-4c2c-4f98-8a7a-ca20cec478c3",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c121865a-d74b-4bfd-a7ae-5b7bd4573b1f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8e783dbd-a0ed-4b79-9ae9-821edabc5b3f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "352c31e5-5052-4a5e-852e-9c02cd986f0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f66f15c0-fcc0-4110-80fd-fc8480a2c9e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72ecd189-8ced-4c18-a776-5284edac4439",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1ead300-85d9-45cc-9375-1b4f9a28eeeb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1c0f994f-725a-4ff5-ad2e-882394728a61"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0df8ffe9-5486-4b3d-ae76-3afecbf0f2b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31dfd6a1-10e1-43e8-9c79-08fd3d2966bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e700c84f-5dca-49be-8fd6-93198cdb85d5",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a4b2087-01d5-4a2b-b20b-9bef4728389d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "42504a35-875f-4653-97e0-2833200304c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e55bc3e-4a73-488c-9456-939ecc859ac1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f58e7f0-7bb5-46a6-a6f4-61b2b0eae5a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ff1562b-26ca-47c5-8d24-66e022457724",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c3685f7-f160-4d62-b4ab-9fe1212ff690",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "83fbb924-7e07-4197-bca2-92dd06e200d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1136fcfa-69ca-4e30-8bea-396eacb2a9ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c61b066-4e5e-4f9d-a070-b17120c9db15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7e07313-bbac-4c09-8431-bc65e6d111bc",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34d9f727-10d1-42e4-b640-cd97377a5279",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e0d665c9-d2d9-475e-b2b7-bca05602a5c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d9a49de-f751-4486-9448-fbfc65b8cf2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15dce1ca-0c69-4f4c-9072-825150f88564"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eca4556a-16c9-48c4-a1f8-f777565be353",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "337bea1d-a649-4901-a348-88104394736c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "83006c90-b2c4-42aa-8fde-83b62effd622"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b5ccf5a-c0d6-4e48-a0e5-f9c603380cec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29444b26-e24f-41a5-be05-c410c04bf8fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e726ef0-110d-46b3-b415-240d4214805d",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cc27d5b-629a-4ea9-b263-95e36f518767",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "355773f7-474d-41a4-93df-f44c9d58f978"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88a3d14e-304c-425a-98f3-1112cbc37803",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e62bcac-abcb-4aa8-92d6-bf0315698a27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e050384a-c1ec-4485-a06c-37fb25fdc12a",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab582afe-8ed0-4cc6-b0d0-9e7db381f373",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9afb9c5f-5bde-42ae-9e65-19d8c954a9f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4c412f5-5b6d-42a8-ada2-cdc4e08a9b3b",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b5607a4-c031-4ef3-9f26-38ab1b213531"
                        }
                      }
                    ]
                  },
                  {
                    "id": "987d26ef-73c3-44fb-9e02-bedfb63e1371",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d1935a9-005f-47d8-8ef1-41018a3cd61f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "44fcb87f-4578-4e1f-b47a-1e6a159e8e92"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0a16430-f004-49f7-a4ba-ac6e988280a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8619ef31-695c-4bb3-af4d-c02834dfc9a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0194b06-e78b-415b-ba20-014eed831d6c",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5729f3cb-19cd-43c1-8211-41cff169dca7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c31b5bd9-4ae0-4c22-a793-245094255447"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0c8d479-0bb2-4cb3-a2b2-ca7218dfb893",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d0791e5-1dfa-45be-8d0d-b1a13e58191b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ef80256-66a5-42fe-96e6-07042a334b63",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffc0e12a-ebb6-4401-96b5-cd1af18adf0a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "210e1c80-b9e8-4812-a700-ad4034cde37f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be243601-d2c7-437e-bb3d-f8c1f5622d3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "222dea1c-f48d-48ed-8950-d866d28c2ed1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c368f60-aa17-4c81-a98b-d40733e7ac13",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9455229d-3be8-4233-9552-f37b4afa5960",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c6965798-61e4-4cc6-8233-cda053ef18e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfa7c609-97fa-499b-8fbc-47c8959e0565",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d36c20af-11be-4767-a606-7a7b2dd89f54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "890e62de-8837-44d8-bc6d-9d76fc25a3e4",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6890be44-9e74-43d3-9837-65d2949fea57",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "18fd36eb-fa5d-4f3d-8855-8c7ea278a940"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2075d38-33e7-4560-b843-f3032851a16f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c113ad1-87f9-44d3-8274-85ce2a3aec43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc3f9480-6f0b-4592-a0d7-7fe7a9ce1f42",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "919f7bfc-5b07-4843-b881-59c6e5cd8eaf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4b3034b6-8414-463b-be76-8fb3da830b9a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fa87fe9-9682-4527-9bd1-d1a8ebf28593",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aab00321-b223-401a-a55f-b3dbdc94030a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "294f77fd-aaa8-41fd-9d3e-bd603b3c8925",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ef437a8-cf05-4926-8e10-4d3e67d2d16e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b9451fe8-0cc2-46b7-80da-0c942613eeb3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "171df57d-3e3d-4b0c-a863-ded960dd48f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82af4766-2b6e-4ae9-881c-ce670996813e"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d3253640-98b5-446f-b4ec-088f32ec1c7e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "55556b8d-83a6-47b9-85c4-825352cc2a7e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "02162782-ad02-4350-8075-a5876b063fc4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b2bed753-d352-4334-a445-9440a47ea477"
                    }
                  }
                ]
              },
              {
                "id": "877b76e4-9bbf-47c8-9ea8-1ee5a8bb29f2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a341bad9-255a-417e-9e11-db26a63d393e",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be601f1d-e8a2-478b-a057-bf6345b04499",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "5b2c83aa-3993-45fe-88e4-585c6dcb1604"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fa4fb62-738f-4bb3-a05d-49da7a1940f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "25affe14-bc10-45b4-ad88-71e18e62791d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c55e57a2-1833-4d48-8e59-2da528478704",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6ed3d83-0a2f-4cde-88eb-b943e36063c1",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "2c05a912-652c-4e59-8a4a-985796b61a9b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d3c0e22-8f5d-4b61-b204-a5f808d5be94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7ac708a0-82dd-46be-a9c9-4ee6d1727ada"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ef5b0c0d-7206-4efa-a176-11fc87851b5b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3f9a76a4-cfc4-400e-993f-45f9e38cf368"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8e60229e-8a08-4140-b960-ac032892d6b8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "24f0c59d-31a7-4724-be98-667c145e4149"
                    }
                  }
                ]
              },
              {
                "id": "e40c613e-8614-4c8d-a704-921a3721ad86",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "1c413b66-6977-49d3-8b52-43366736e317",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a989db6-848e-49fe-a5c3-633929bae3f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "24c059ba-ee20-408d-a8c2-7acc4b9ffb4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3588cd66-ad97-45c1-b554-8a692404925c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb3d8a9c-f29d-4b3e-be22-35d29d82ad16"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "a819d0ba-3e6b-416c-849d-68f45f2069f7",
            "name": "Positive Testing",
            "item": [
              {
                "id": "5944249a-9125-455e-b52f-217e6ea71656",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "be781790-9a46-43c9-9119-1f49b8597737",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "fc214b32-2a75-463a-bd67-e13546ed2085"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1dee91bf-e6f2-4271-b5c5-245e355d93b4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2d229b9e-9fc0-48b3-8b27-dc9b103f00ee"
                    }
                  }
                ]
              },
              {
                "id": "d76d174d-0d9c-4d90-8b34-a26edbaacff7",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f13002c2-1ade-422b-a73e-94d46939cebb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "bd55dcfd-d9d6-4302-a418-cbec3fb78fc9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7d14978b-1e02-4831-9b72-0a27e6f39aa3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "eb3de474-fe0b-4cab-937d-c4c51c2193b6"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "93d77dac-43fd-45a5-9cd1-915f674be64a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "678306aa-369f-47f2-a83c-39c15a8f29cc"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "057e5273-3c7d-4718-87a7-4427b4bfce3a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b234fc51-1396-4369-8c08-61569527a824"
            }
          }
        ]
      },
      {
        "id": "15b3698c-4757-4367-90dc-e406eeccc9a7",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "5177d28a-778a-4162-805a-c510f82dd3b9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5a1b4915-e702-400b-8fb5-961b23adb150",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e84cd0b0-bef2-4d6e-b2da-75cbe52be7cd",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c3d4731-a830-4279-bf56-2c8821cf2dfd",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "deffaf4d-845c-49c7-9530-401ee6e213fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "998a16aa-61c8-4fd6-8b5b-0fa9c303b3f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "25fa29d2-1c81-4112-8633-9110ccc1d3e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1685a154-087e-4c40-9266-c3c3783725b5",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "324697ea-e92b-48b6-9c32-4cd37fd53c3f",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "19b3a964-3e01-4c71-bcae-b7d3ed18f3cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb7c2f3a-bc16-45ae-8841-a5add42f1053",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d66b28b6-e380-4726-b935-b5330359651d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "21731d76-a825-487e-8e43-6c23baef748f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b2242153-022a-42f8-8429-fb3f97467358"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "55408c67-8fd5-4890-b129-0f5bc5028f01",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d49ccbe6-8021-4e0a-a0a2-eefdd14f674d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e8ad74f8-bbb8-4b31-9cd0-bfcda61a970a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "704e1495-5d9e-4421-ad65-0b1b98f83153"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "26574f07-3463-41f1-8999-8aa9c315f1e6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c336a826-5d0d-4c8f-9e9f-da319c2f8385"
            }
          }
        ]
      },
      {
        "id": "c7847c11-2da1-40ba-8c70-4727969be897",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "ae99f1ec-0eac-4c08-893c-00508dbaf5bb",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5f283e40-677b-4d06-b695-94c0b15fb549",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "31c23f32-fe6f-4bcf-804b-9f87b6895d10",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bf9fc9b-e968-45e4-8ed1-3fdb802600b6",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "f0e2b01c-3df7-4598-bd4d-aaafcb1ed0b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "976e67b0-58bd-4a7a-a8ef-af6f1ee07b23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d93ef0fc-6bc6-4405-a4c1-581bda4fea47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee068f6e-97ea-4c3b-8e95-b1a151136779",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e413a5f-aae5-4ed8-9c72-668152cb6333",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "63c00a0b-e149-4832-b958-1fb21f7b08c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2050c294-8755-49a4-8565-3387ce45e4c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5be16333-88f5-406c-a5f3-c993e04314af"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2ee73628-d19d-46e1-b818-cc22bd4dccca",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bee8aa02-f64b-4dcf-ad5c-724db3b05292"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8034038a-c4d4-4508-bfbd-aa950dceacfe",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fe9a1f7b-6acd-4349-bb32-c56ead3e18ca"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "606957f3-45a5-47c6-ba0d-8f5b2cecf22d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "eb36e47d-1468-4a1c-84a5-ef1713a66757"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c408e44a-c03c-45b6-9c01-49d1f9c5c99f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d3df3cd4-ebe4-4951-b484-111b052c46bf"
            }
          }
        ]
      },
      {
        "id": "871d2233-fb70-41ab-82bf-fd2cdc919e50",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "17e40fdf-e984-48ce-83f1-65f2df87d9d6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e46d6895-ec03-44f2-a501-5693d245b2e1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e594399b-4f2e-4c1c-8eba-d863b0993c8d",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d994c7a9-de98-4009-840d-054ae42b6eea",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "1536f622-f23d-4687-a21e-292c3c7d7ca3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12e739eb-c506-4da4-9c57-b7d1223c14c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "13edfbe7-52da-4900-8d87-1d03fa8f30a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "905dd46b-b469-43ea-b941-40e5ee08491e",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac9475db-badb-4624-a7e8-20e7a89c9213",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "9644a649-c641-4f29-8815-182ef7957862"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37c71962-20ed-4453-b2b4-81aaf1f73e67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a88a0f0a-d3cb-456a-a485-974c4f3fcd9c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7dfd50d4-adfa-47ac-9a31-0fe14ec4a4df",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "70cef459-953c-401d-9b22-72aaa320dee2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1c494287-524a-4d5e-95a0-b727b45e1367",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4b94d6e3-a4ee-4fe7-87f5-f0e1c192d02b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "54f7ca9c-b7a9-48aa-9495-4b819d01553e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "28d2d5d9-9748-47e9-a99c-942ec9f065ab"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "566b7e29-8779-4e31-937b-611131b72631",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "56b7e8e0-6c1b-43c7-95b7-bf98d28f6631"
            }
          }
        ]
      },
      {
        "id": "41cc83ae-fab3-4314-b9f9-9232c5a98e48",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b53fa9b2-7309-44ce-902f-01eb33d8c75b",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d2a2c07f-2d16-4b89-9217-f0bb04af1d8b",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "6206f338-96d3-44ff-9c16-bfb8050134b0",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3e8d4165-461a-490c-a038-a16d7ab21f95",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "af509b65-a4af-402b-b5e6-55a60dda12ac",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1925,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 262,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 517,
        "pending": 0,
        "failed": 101
      },
      "testScripts": {
        "total": 967,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 958,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 102.35496183206108,
      "responseMin": 14,
      "responseMax": 896,
      "responseSd": 148.376995456586,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1671237353058,
      "completed": 1671237390737
    },
    "executions": [
      {
        "id": "4a544a39-d4d5-4cf7-a13b-9ed348b3ccaf",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 253,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "6b0154da-8a31-4ebf-8ade-d74568161d2c",
          "httpRequestId": "30b8f94f-96f4-4667-8f7c-e2f637eacffd"
        },
        "item": {
          "id": "4a544a39-d4d5-4cf7-a13b-9ed348b3ccaf",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "a4b0751d-0ccb-486a-9ca3-bba989e2c181",
          "status": "OK",
          "code": 200,
          "responseTime": 97,
          "responseSize": 0
        }
      },
      {
        "id": "0395e6b1-2787-403e-88f7-d1e8dc772fd5",
        "cursor": {
          "ref": "e0109fca-df87-4b03-ba7a-5b776351e5a0",
          "length": 253,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "78cd1d7d-bba1-40f0-81c4-2117de996312"
        },
        "item": {
          "id": "0395e6b1-2787-403e-88f7-d1e8dc772fd5",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "08995fc8-cb5c-4929-9dfb-50b9a0fe4239",
          "status": "OK",
          "code": 200,
          "responseTime": 14,
          "responseSize": 0
        }
      },
      {
        "id": "d8b858a6-8b35-41f6-b145-ae718aeee271",
        "cursor": {
          "ref": "239bf051-f0be-4cc4-9033-fc75a33e980f",
          "length": 253,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "7957d3c1-cb3e-4400-bdcb-92492b5f4423"
        },
        "item": {
          "id": "d8b858a6-8b35-41f6-b145-ae718aeee271",
          "name": "did_json"
        },
        "response": {
          "id": "33e82cd6-cd8a-4360-977c-19c7f324d10b",
          "status": "OK",
          "code": 200,
          "responseTime": 146,
          "responseSize": 1369
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c42e0cde-8b29-4348-9d63-acbeedbd616d",
        "cursor": {
          "ref": "02689d14-ca51-4a92-aea4-10ea116f9aa0",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "de9968bb-8e95-4525-8c6d-2e61152fb4ff"
        },
        "item": {
          "id": "c42e0cde-8b29-4348-9d63-acbeedbd616d",
          "name": "did:invalid"
        },
        "response": {
          "id": "0930b4a1-ff1d-44a4-8d45-dd42cb6696f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c42e0cde-8b29-4348-9d63-acbeedbd616d",
        "cursor": {
          "ref": "02689d14-ca51-4a92-aea4-10ea116f9aa0",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "de9968bb-8e95-4525-8c6d-2e61152fb4ff"
        },
        "item": {
          "id": "c42e0cde-8b29-4348-9d63-acbeedbd616d",
          "name": "did:invalid"
        },
        "response": {
          "id": "0930b4a1-ff1d-44a4-8d45-dd42cb6696f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0b689ab-8a76-4372-b095-0b494f939778",
        "cursor": {
          "ref": "73f22c53-e6fc-4666-8bd9-fa0e76cb326a",
          "length": 253,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "cdddbfef-09f3-4cb3-8b7f-5958ce13b143"
        },
        "item": {
          "id": "e0b689ab-8a76-4372-b095-0b494f939778",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "a82aaa16-e8d7-401c-9dd2-24266402fa6d",
          "status": "Not Found",
          "code": 404,
          "responseTime": 72,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e0af9ef-02a8-4a86-90e8-7c926461566e",
        "cursor": {
          "ref": "95e8b24b-dca2-4ab2-bb2a-4710ecc64db4",
          "length": 253,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "5717d278-388e-4257-9425-4d61eb780620"
        },
        "item": {
          "id": "6e0af9ef-02a8-4a86-90e8-7c926461566e",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "ff6ab58d-4188-409e-b898-76c8704633a9",
          "status": "Not Found",
          "code": 404,
          "responseTime": 32,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35546eed-def2-4dfa-902c-e156becfe188",
        "cursor": {
          "ref": "b0489715-038f-4b17-939e-7a7fbb3464cc",
          "length": 253,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "6a29ffeb-6f66-4768-aaa6-1dc57f855cba"
        },
        "item": {
          "id": "35546eed-def2-4dfa-902c-e156becfe188",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "d879f2c1-40e9-4aac-8074-210583b09d33",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 32,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd6968d8-26d2-4f2b-8dad-9f6a98a5e87d",
        "cursor": {
          "ref": "d9d5621a-15a3-4f88-9f71-06f140d34606",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "1a507ae3-ac2a-497b-861b-d1a75d22bc34"
        },
        "item": {
          "id": "bd6968d8-26d2-4f2b-8dad-9f6a98a5e87d",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "c025cb11-107e-46ad-9db7-3b63688a8b20",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 32,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd6968d8-26d2-4f2b-8dad-9f6a98a5e87d",
        "cursor": {
          "ref": "d9d5621a-15a3-4f88-9f71-06f140d34606",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "1a507ae3-ac2a-497b-861b-d1a75d22bc34"
        },
        "item": {
          "id": "bd6968d8-26d2-4f2b-8dad-9f6a98a5e87d",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "c025cb11-107e-46ad-9db7-3b63688a8b20",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 32,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1507aaf4-7614-4d2b-89bc-a4bcf0356229",
        "cursor": {
          "ref": "3489422c-2610-4ce3-97f3-dbd3708f34c1",
          "length": 253,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "d728e73b-e31a-47bd-895a-5fbbfbae5b9c"
        },
        "item": {
          "id": "1507aaf4-7614-4d2b-89bc-a4bcf0356229",
          "name": "identifiers"
        },
        "response": {
          "id": "e2d99613-24c3-4946-9a87-f95df360e70e",
          "status": "OK",
          "code": 200,
          "responseTime": 67,
          "responseSize": 1385
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "431e94a9-cc67-4cea-9746-a1953e73005e",
        "cursor": {
          "ref": "802fabd2-8d8f-4fdc-a72d-78374e2bf348",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "3f35f9f9-8910-40ea-9526-869ce0675f01"
        },
        "item": {
          "id": "431e94a9-cc67-4cea-9746-a1953e73005e",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "8d865d92-cf57-4662-9282-975f212fe207",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "431e94a9-cc67-4cea-9746-a1953e73005e",
        "cursor": {
          "ref": "802fabd2-8d8f-4fdc-a72d-78374e2bf348",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "3f35f9f9-8910-40ea-9526-869ce0675f01"
        },
        "item": {
          "id": "431e94a9-cc67-4cea-9746-a1953e73005e",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "8d865d92-cf57-4662-9282-975f212fe207",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d03483b3-5651-4c97-9cba-7a445ff60c69",
        "cursor": {
          "ref": "d02d21df-af39-4495-8739-b9b782626ae1",
          "length": 253,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "88e0a810-aae4-4cf8-989c-3932475e080e"
        },
        "item": {
          "id": "d03483b3-5651-4c97-9cba-7a445ff60c69",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "b319bdf4-e5f3-4332-aa2f-2cf9e9de9a7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c1dd629-dbfa-4563-b35f-abfa5cab2037",
        "cursor": {
          "ref": "0f3e49a3-f7f9-4dc3-9e1c-c0862c437ca4",
          "length": 253,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "86da54fd-6551-419c-8fc7-02236f610f7b"
        },
        "item": {
          "id": "5c1dd629-dbfa-4563-b35f-abfa5cab2037",
          "name": "credentials_issue:credential.@context:invalid"
        },
        "response": {
          "id": "48a925bb-823a-46bd-a25a-29b56f19006c",
          "status": "Created",
          "code": 201,
          "responseTime": 678,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "b5596e9c-110c-42fc-8307-e683c313b4f8",
        "cursor": {
          "ref": "75ac83c3-8019-4f22-a920-2db8a1c2c8bf",
          "length": 253,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "811aece5-b4d9-47c3-a107-dc21a55c1107"
        },
        "item": {
          "id": "b5596e9c-110c-42fc-8307-e683c313b4f8",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "5f6544dc-cc8b-4867-8068-7da197c16af9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69a0d48e-a10f-48e2-978a-0176b5d6ab0c",
        "cursor": {
          "ref": "4450b01e-f4b9-4308-b49c-d87393c444ab",
          "length": 253,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "df08e659-2d31-49fc-9a38-7b8407a3ec47"
        },
        "item": {
          "id": "69a0d48e-a10f-48e2-978a-0176b5d6ab0c",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "62c7f171-bcd6-4d1e-91cd-298563a12fd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3447eb6-d2a8-4bb8-83de-10beff3f0ca9",
        "cursor": {
          "ref": "6ce81a16-10fc-4ca7-8247-683d9e9043da",
          "length": 253,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "e6db259a-ab0f-4254-94d4-a3895f1b766a"
        },
        "item": {
          "id": "c3447eb6-d2a8-4bb8-83de-10beff3f0ca9",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "545f425a-e01b-4db8-943d-1323c228f6cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f6d833d-b9e8-4f6d-a04f-8a349ac5b76a",
        "cursor": {
          "ref": "d48442e3-fb94-4edb-a319-1b6f588a7686",
          "length": 253,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "0ddac669-346a-473a-b25e-6524e5334265"
        },
        "item": {
          "id": "5f6d833d-b9e8-4f6d-a04f-8a349ac5b76a",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "38ab8d37-e6df-4fab-abfd-d4a8b7e7113b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d66b67d-eeed-4083-ba7e-470ad79ec1c1",
        "cursor": {
          "ref": "42f55014-4ae3-43c3-8c70-9c2c504c0859",
          "length": 253,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "d18f5d21-469e-48e4-a4ac-b16556fb0f8a"
        },
        "item": {
          "id": "4d66b67d-eeed-4083-ba7e-470ad79ec1c1",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "c31dde98-2c55-4a7e-a533-d97941bc412d",
          "status": "Created",
          "code": 201,
          "responseTime": 383,
          "responseSize": 690
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "f84012f7-149e-47d5-b9e4-5e77eb930df1",
        "cursor": {
          "ref": "16f3e810-7eff-4511-b0df-ab10d2a53337",
          "length": 253,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "9922b408-c448-4e49-a7aa-d74f9c123546"
        },
        "item": {
          "id": "f84012f7-149e-47d5-b9e4-5e77eb930df1",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "4a9c69bd-3fcd-41c4-aadc-551ded1ba939",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "babe3fdb-e143-45cd-a02c-fe1a44add4e6",
        "cursor": {
          "ref": "77b33ac7-e434-4447-8a36-f50f2d8f4f6e",
          "length": 253,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "9f165147-ced3-45fe-96a9-763d81c6c9b1"
        },
        "item": {
          "id": "babe3fdb-e143-45cd-a02c-fe1a44add4e6",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "47134736-4a2c-4533-a275-c930db784e72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b15aaf8-7817-4a22-a20f-096e1575a011",
        "cursor": {
          "ref": "f28a33e5-53d8-43f1-b240-6f89b33c0061",
          "length": 253,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "8cfb5925-5ee9-4e95-95cf-c5bd2bea31a2"
        },
        "item": {
          "id": "0b15aaf8-7817-4a22-a20f-096e1575a011",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "caf1b1d1-5984-46f5-96d3-74ce5c4f8aec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85d32f65-2e5b-420c-951c-312c73c139c1",
        "cursor": {
          "ref": "496ce458-d3e1-491a-9dd1-9f2a98746612",
          "length": 253,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "c7de62d3-f86b-40f8-858b-e50cb53f75bc"
        },
        "item": {
          "id": "85d32f65-2e5b-420c-951c-312c73c139c1",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "d9581f22-058b-4857-80ea-cf6d98f55cb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a1b57ee-bc37-4f61-8c39-14cc96101e4d",
        "cursor": {
          "ref": "3251700d-f22b-45ab-8d6f-4696a7c1f598",
          "length": 253,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "b70d1413-992a-450c-8ef1-90106cb2b743"
        },
        "item": {
          "id": "9a1b57ee-bc37-4f61-8c39-14cc96101e4d",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "276a57f6-0ff6-42aa-a9f7-bd3c27e8b9fc",
          "status": "Created",
          "code": 201,
          "responseTime": 355,
          "responseSize": 736
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "a557b163-9ae0-47ac-bd64-6775f5064a37",
        "cursor": {
          "ref": "7c594f68-08ba-4113-93b4-bdebe6e5e703",
          "length": 253,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "459caad6-f307-4357-8abd-c64d13ae686e"
        },
        "item": {
          "id": "a557b163-9ae0-47ac-bd64-6775f5064a37",
          "name": "credentials_issue:credential.id:missing"
        },
        "response": {
          "id": "3c064db5-49b8-4000-92bb-96f7ba446a1b",
          "status": "Created",
          "code": 201,
          "responseTime": 896,
          "responseSize": 672
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "58e0bb6b-7002-4468-9f97-6333b2fd4d03",
        "cursor": {
          "ref": "3162f7b2-131d-48a8-b0db-872a958a6833",
          "length": 253,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "e6ad3226-105c-4837-8a6f-002c1180ef1f"
        },
        "item": {
          "id": "58e0bb6b-7002-4468-9f97-6333b2fd4d03",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "a1d34219-d655-4992-9375-280041828948",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "907aef22-24fc-41e1-82e6-049bb7407c2c",
        "cursor": {
          "ref": "a40fb0f0-83a8-406b-b2be-ab567d7cb749",
          "length": 253,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "c0e89277-faf6-42d5-856d-ad76b697e027"
        },
        "item": {
          "id": "907aef22-24fc-41e1-82e6-049bb7407c2c",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "0828e761-3d92-48e4-a116-4daf0195906c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b94062f-1584-4e21-8687-a771351fdcfd",
        "cursor": {
          "ref": "d1a60d9c-af77-4f7e-9775-02589f97922e",
          "length": 253,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "b61e1b2f-c695-40a6-89a2-6a92b7b55da1"
        },
        "item": {
          "id": "3b94062f-1584-4e21-8687-a771351fdcfd",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "fbc863a9-fdf6-49d0-a9ab-747c0920348c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1153f32-c5c2-4a5b-bcfe-888dd7329a29",
        "cursor": {
          "ref": "c0b56d4e-852a-40a0-b1a7-e8d7352cf59d",
          "length": 253,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "85257cf6-6785-42ce-b3d1-1a96bf0dbf23"
        },
        "item": {
          "id": "e1153f32-c5c2-4a5b-bcfe-888dd7329a29",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "6faf1f21-3ffb-4480-8c4e-f965ad99f4f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c64ae1b-bd44-410a-ace0-96e4890bb01e",
        "cursor": {
          "ref": "5f09266e-c7b7-419a-b82b-fa84fd7a54bc",
          "length": 253,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "08e63c49-cd04-425a-b886-6a8baf0eff5f"
        },
        "item": {
          "id": "5c64ae1b-bd44-410a-ace0-96e4890bb01e",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "8fe06b2a-c3c4-4c4f-b986-58d782c60591",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7602f1f4-ae10-4147-9d3a-1f7a9fb7633d",
        "cursor": {
          "ref": "dacae844-ed10-4815-b5b9-2bc1ff6ce818",
          "length": 253,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "ebd266c2-b73b-4eda-b7e1-77eb9731641c"
        },
        "item": {
          "id": "7602f1f4-ae10-4147-9d3a-1f7a9fb7633d",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "49ce5a64-1ecc-445a-b2ef-cce505dd3677",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33686e00-445c-443c-b7ed-08b0d07b64a3",
        "cursor": {
          "ref": "51ac9153-bc83-46f2-b584-b1e0ab69d440",
          "length": 253,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "23397a1e-6bf9-43a1-ab36-a1f2c649933e"
        },
        "item": {
          "id": "33686e00-445c-443c-b7ed-08b0d07b64a3",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "09af7367-45f7-41ab-8628-75edd987d291",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05d8560f-797a-4615-bc1c-3c962d1a7d6a",
        "cursor": {
          "ref": "a7c30e72-9ef3-4c0d-b03b-402cab56832f",
          "length": 253,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "79df8714-d4ce-4a75-80a3-2b95a0527c5c"
        },
        "item": {
          "id": "05d8560f-797a-4615-bc1c-3c962d1a7d6a",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "36e22fe3-3408-4e2a-917b-236b51eb37ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44023da2-eaba-40d8-989c-982ec010d649",
        "cursor": {
          "ref": "973bbdbe-8c9d-465a-aa0c-fc3a41e1d184",
          "length": 253,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "08a1838d-c83a-4f4f-805f-564747b980c0"
        },
        "item": {
          "id": "44023da2-eaba-40d8-989c-982ec010d649",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "719cfa3b-e1ad-405d-9f00-0a65500d86c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "feb121be-df34-4154-90f0-81dfb3546abc",
        "cursor": {
          "ref": "ac119db9-7d3e-4ee1-bd38-79e3a8552bf4",
          "length": 253,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "b246e49b-aa66-4b4b-bc88-79a60d25b7d4"
        },
        "item": {
          "id": "feb121be-df34-4154-90f0-81dfb3546abc",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "25e91f24-443e-4838-8dcc-54f85eda4753",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84103c3d-b719-49a1-b712-fdcc11c151ff",
        "cursor": {
          "ref": "74b5d46a-3aa6-4439-9b02-d4711348dc3a",
          "length": 253,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "3316d65c-ef02-4700-84c0-a47377a5b8a6"
        },
        "item": {
          "id": "84103c3d-b719-49a1-b712-fdcc11c151ff",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "ca25916c-161b-469e-8575-5c4c8a8ff0cc",
          "status": "Created",
          "code": 201,
          "responseTime": 639,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "591724f4-f097-4ee2-87df-39394ef0aab8",
        "cursor": {
          "ref": "e482875d-016e-49f6-a975-ae2cd2736a55",
          "length": 253,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "1d2031f3-c880-4dda-afcb-e191dcb455fa"
        },
        "item": {
          "id": "591724f4-f097-4ee2-87df-39394ef0aab8",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "8b0a4963-a833-4e70-bd5d-f720fdb8feae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3e162da-664b-4d2d-8d3a-e0e4d2b88a36",
        "cursor": {
          "ref": "fb42b2a8-abd3-4c12-87a3-d5fd8f66b999",
          "length": 253,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "821e3fc9-63ba-4c58-bca4-9032847fa15b"
        },
        "item": {
          "id": "e3e162da-664b-4d2d-8d3a-e0e4d2b88a36",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "886a68ab-c373-4cb6-84fe-d596d7b001c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c03c3cad-de1e-45a2-84d4-e138c2488dcc",
        "cursor": {
          "ref": "74754d0f-358d-4a53-8a0f-c5a150dcf741",
          "length": 253,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "bec8a96d-bc34-4a35-9890-f9e4478c73d7"
        },
        "item": {
          "id": "c03c3cad-de1e-45a2-84d4-e138c2488dcc",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "bed6d5ae-ec1f-4a0c-96ce-88e43ba8bddd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1eb94de9-6b7c-4151-93e1-e936e8cb6f16",
        "cursor": {
          "ref": "6697cd4e-e7eb-4d4f-a225-de158b314e99",
          "length": 253,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "51076c7b-c3ca-4abd-8c66-95f3e30d81e8"
        },
        "item": {
          "id": "1eb94de9-6b7c-4151-93e1-e936e8cb6f16",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "5b6b44bb-e84c-439c-b45c-1da619b3681f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b336f74c-6df8-49c8-afc7-d38a299e4b44",
        "cursor": {
          "ref": "e685151a-372c-4f87-9ce9-649140535bbf",
          "length": 253,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "034c2bdc-22c2-4fc8-9bed-fc4b94380e16"
        },
        "item": {
          "id": "b336f74c-6df8-49c8-afc7-d38a299e4b44",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "cb52d5ea-3472-4c7d-a136-57ad3f95cb13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "117a4799-a867-4bde-a98a-602814b2ea29",
        "cursor": {
          "ref": "4ef34f01-8887-46ce-9921-658984adb092",
          "length": 253,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "3bed0c08-220a-44ad-a5f9-5fffa5ab3ed4"
        },
        "item": {
          "id": "117a4799-a867-4bde-a98a-602814b2ea29",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "512b5af1-e67d-42a9-bd59-a4652bf2bb46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce0e6dfa-6cd3-490c-a753-a99e03ba2dbd",
        "cursor": {
          "ref": "f71ebd68-6d03-44cd-8a94-8f90cc5e6483",
          "length": 253,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "eb80ce0c-8617-4cde-9f4f-ae8ddbb09316"
        },
        "item": {
          "id": "ce0e6dfa-6cd3-490c-a753-a99e03ba2dbd",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "ff784f85-cda9-4a0d-93bc-ab04d2174431",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a04e7932-4781-4b53-b135-408c535625d7",
        "cursor": {
          "ref": "f7ee04c5-1263-4485-8e6a-afe55553bdf4",
          "length": 253,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "28aacd9d-4f13-4650-9c24-473c9c2f2f31"
        },
        "item": {
          "id": "a04e7932-4781-4b53-b135-408c535625d7",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "48a14e36-7f5a-4833-8f5d-4182d3d1a5b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed938942-9c17-417e-a1db-cd048e5d0973",
        "cursor": {
          "ref": "b5ab8585-be8b-44be-8637-94ed9cc730ca",
          "length": 253,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "8c5d5b13-e44f-4e54-9e8c-419ac555ab31"
        },
        "item": {
          "id": "ed938942-9c17-417e-a1db-cd048e5d0973",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "f449a0c6-476a-4bf3-8dfe-921a09400f96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8055f7bc-20a9-4362-b545-04b8527d0e66",
        "cursor": {
          "ref": "6addbf40-ff19-45e1-b099-03e73d7fc2c4",
          "length": 253,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "6246edcb-c639-4790-82c9-3e0b81fcf6a1"
        },
        "item": {
          "id": "8055f7bc-20a9-4362-b545-04b8527d0e66",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "efd68fc8-5842-4525-a425-60f4aed7c2a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "295f08a2-c140-4371-9161-73c3c26d4195",
        "cursor": {
          "ref": "fae5cb8f-080a-417f-8c3d-790ee765d053",
          "length": 253,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "ad6146cb-6c16-43f5-948f-72a5f140e843"
        },
        "item": {
          "id": "295f08a2-c140-4371-9161-73c3c26d4195",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "644034bf-8b2e-4663-b736-ecc4fc872161",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc285693-33e3-461b-9951-94d673ed10b3",
        "cursor": {
          "ref": "50b5e003-d32f-4578-b102-d6494546ed6a",
          "length": 253,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "36a4c2b4-1bbc-4c81-8ef1-661ba4d29f09"
        },
        "item": {
          "id": "cc285693-33e3-461b-9951-94d673ed10b3",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "fbfecc79-d936-43bc-be48-24be3e773303",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d27ad4c7-1bc2-4f10-9b15-625195a8c533",
        "cursor": {
          "ref": "b3a07a2a-8062-4bf1-93da-77599e9aafce",
          "length": 253,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "e36c4126-d134-4175-afa6-3eabfda020a3"
        },
        "item": {
          "id": "d27ad4c7-1bc2-4f10-9b15-625195a8c533",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "43ed7d1f-9869-4521-8eb3-129b16394dd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 393,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "11cbfc7c-9049-4d96-81c4-4ec6b8b7d5c2",
        "cursor": {
          "ref": "0c5424d5-d866-4e16-940b-b93e1b39d02e",
          "length": 253,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "302572db-546e-4059-9801-f76d09039b9d"
        },
        "item": {
          "id": "11cbfc7c-9049-4d96-81c4-4ec6b8b7d5c2",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "cec7e7b8-35dd-400c-a751-c3501bbe6644",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4adc6e5c-411f-460e-a97b-2e27eecf9ec3",
        "cursor": {
          "ref": "e9d34eb6-f3a1-401e-a734-2b5d00b6f18f",
          "length": 253,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "6c2a8cd8-71ca-4820-a1cf-e77e89b8cd1c"
        },
        "item": {
          "id": "4adc6e5c-411f-460e-a97b-2e27eecf9ec3",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "0ecf0cff-7487-4412-a36d-d5fdf4169444",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0594f8c-3463-47ca-9403-d5632bbe8f37",
        "cursor": {
          "ref": "58475cd2-e790-4a0a-a4a1-41a478183f70",
          "length": 253,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "32c6f735-1700-465e-935a-87ce94a09153"
        },
        "item": {
          "id": "f0594f8c-3463-47ca-9403-d5632bbe8f37",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "8f120d5a-67df-458a-aed3-df5fe8c3a235",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b41814a7-415e-4aa0-a1fc-236dd73d871a",
        "cursor": {
          "ref": "580e2f13-bf1d-4591-badb-b72d0d9ee2e1",
          "length": 253,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "d86cd42b-0aa5-4b47-830f-de4b23c4ae72"
        },
        "item": {
          "id": "b41814a7-415e-4aa0-a1fc-236dd73d871a",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "5712f304-9332-4a6c-84e2-63d85455bc0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "750d6d53-f55e-459a-87b1-a80296ce22e7",
        "cursor": {
          "ref": "5b3db62a-0a8f-456f-a4d1-1d22b29d04d9",
          "length": 253,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "682c0a0e-543b-4605-bed6-2711a48f3954"
        },
        "item": {
          "id": "750d6d53-f55e-459a-87b1-a80296ce22e7",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "43d290a7-7437-4f94-bac6-270305551354",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c29dff39-4780-469e-928f-98512fafdbb7",
        "cursor": {
          "ref": "2b186e82-0316-4944-a89e-4ab7c798011c",
          "length": 253,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "e9704b27-021f-4fd3-ba2f-91be9c63df43"
        },
        "item": {
          "id": "c29dff39-4780-469e-928f-98512fafdbb7",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "55ab3010-97fc-4426-ac5d-a8e17022bf73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d6ea1ba-9f23-4487-8473-e88bf61dbd77",
        "cursor": {
          "ref": "eb2d3656-ed40-465d-8c2f-39b2ab815044",
          "length": 253,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "07b1d1c3-d8ca-4ed4-8590-f650ce99f328"
        },
        "item": {
          "id": "2d6ea1ba-9f23-4487-8473-e88bf61dbd77",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "4f579e60-ace8-40d9-a20b-234273f32694",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 301,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "a371e807-7ebb-46e8-8872-47f00abf9f97",
        "cursor": {
          "ref": "bc0fdfaa-66ac-4faa-b35b-ed0823bc017c",
          "length": 253,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "be19818c-9219-4cad-ad0b-c141a967ce5e"
        },
        "item": {
          "id": "a371e807-7ebb-46e8-8872-47f00abf9f97",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "7e723d13-25c1-4ca7-9804-f0867b443961",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9ece90f-af85-4117-b5a1-0e88c5e8b1e1",
        "cursor": {
          "ref": "115074c9-9dd3-4db5-92f0-652926d86bd5",
          "length": 253,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "7ccfcdce-1e48-4cee-a7a3-350185c72b1e"
        },
        "item": {
          "id": "a9ece90f-af85-4117-b5a1-0e88c5e8b1e1",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "92dfc7cc-4b8c-4c7a-bb45-2a97914517e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5b10695-9b49-4241-9900-0b109463d8ab",
        "cursor": {
          "ref": "d84bf90e-00c1-4b6d-8e00-d566809b39cb",
          "length": 253,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "f7f4698a-896a-4af5-bfba-be1a8d618c7e"
        },
        "item": {
          "id": "a5b10695-9b49-4241-9900-0b109463d8ab",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "bbf70722-cfe1-4da9-8bae-50a8b883f5a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c64a0368-1233-46c6-94b9-5dc0db3828a6",
        "cursor": {
          "ref": "92c90525-bad0-4a2e-b6eb-5934745f389b",
          "length": 253,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "5bb3043c-e770-4ac9-9b8b-e6da5c563be3"
        },
        "item": {
          "id": "c64a0368-1233-46c6-94b9-5dc0db3828a6",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "22ca6248-7bc0-42ec-8431-092fd62ac34c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3da42345-0ada-40da-949b-9ed8cd8e2f1c",
        "cursor": {
          "ref": "36c452bb-3383-474d-9ad7-59980cb60ebe",
          "length": 253,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "11ef1855-cd03-4282-9e6f-4ad37859a6c3"
        },
        "item": {
          "id": "3da42345-0ada-40da-949b-9ed8cd8e2f1c",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "5bd26645-e01d-403b-8fb4-5e973050e9ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b837a23-8039-4a9e-8a0f-de9415a9a5a3",
        "cursor": {
          "ref": "ca0cb054-2b73-4e53-b63a-c32a8717a857",
          "length": 253,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "0f7707fb-6482-4dd3-8a57-44508ec91cb6"
        },
        "item": {
          "id": "6b837a23-8039-4a9e-8a0f-de9415a9a5a3",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "a4109314-058a-4034-996e-ed267f8e9354",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42534ef8-c5c0-4833-af13-be63823072b6",
        "cursor": {
          "ref": "3fcbd087-c086-497f-bbb0-4f53e6fa4933",
          "length": 253,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "19c53579-27a1-4c4e-aaf0-abedd8ec96cf"
        },
        "item": {
          "id": "42534ef8-c5c0-4833-af13-be63823072b6",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "5a2e08b9-1fc8-4c30-b8e4-e87f09c723ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7321d008-88fd-4cef-bc06-bbcdee45141b",
        "cursor": {
          "ref": "71799d4c-67ad-42dd-9b3c-8604860bed21",
          "length": 253,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "f92c6896-4897-49f1-8daa-65d5a9a88bd0"
        },
        "item": {
          "id": "7321d008-88fd-4cef-bc06-bbcdee45141b",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "2f3d35f7-b74b-47ed-b66a-5fa6c2ba4b62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9cb57a3-d427-486f-8857-3ff3e1c185ea",
        "cursor": {
          "ref": "fd8265e1-ffe3-4803-b2d6-6c6b651fb822",
          "length": 253,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "49e2aa96-de2d-492c-8f3c-671095b8dcdf"
        },
        "item": {
          "id": "e9cb57a3-d427-486f-8857-3ff3e1c185ea",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "19488ff0-0498-4b2c-885a-2a2295f19900",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b40bd7c-69cf-45e0-8187-a291e3f15883",
        "cursor": {
          "ref": "2cde9dc4-2011-4e04-b964-2210d888abb4",
          "length": 253,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "adbe3034-baf2-476b-90a6-fa12f665f0da"
        },
        "item": {
          "id": "6b40bd7c-69cf-45e0-8187-a291e3f15883",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "e16c8af2-fff4-402c-8766-d06d14178981",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbbe2cae-63a9-4e33-9d73-8ae21aa8b408",
        "cursor": {
          "ref": "e9d12b0a-7023-4c85-9eaf-07dbf810af8e",
          "length": 253,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "5de8583a-7b27-4cdb-b526-64bff97a54ee"
        },
        "item": {
          "id": "dbbe2cae-63a9-4e33-9d73-8ae21aa8b408",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "2e0a0e1a-640f-448f-9c7c-877d09252309",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5a0a4ce-be5e-436a-8c38-9d1e300b627b",
        "cursor": {
          "ref": "db1ca847-bcf1-4793-b7bf-a2ea9e04c8cd",
          "length": 253,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "b5e8e3c8-b31c-485d-954d-2c1badc876bc"
        },
        "item": {
          "id": "f5a0a4ce-be5e-436a-8c38-9d1e300b627b",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "169d1ecb-29ac-45b2-a1a3-fbd3139cbe35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2240f418-32ef-4224-b915-fdf8224aae3a",
        "cursor": {
          "ref": "d706e3b3-2393-402e-955f-24f8cf588f5d",
          "length": 253,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "f4ddef02-094f-490b-8ee0-f6ed50672dea"
        },
        "item": {
          "id": "2240f418-32ef-4224-b915-fdf8224aae3a",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "5cc0fa48-8590-4b84-a90e-a5662dc79a20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa6b0d66-2a24-4e0a-81b4-0ed91f363ea6",
        "cursor": {
          "ref": "86e51f4a-e775-42f9-bf5d-c2caf23160ac",
          "length": 253,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "cbb8798c-7327-4c28-9cf8-d98ed3e19ec2"
        },
        "item": {
          "id": "aa6b0d66-2a24-4e0a-81b4-0ed91f363ea6",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "044f8009-6b44-4811-a609-69d72230003a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c9c61e5-a7dd-4fff-9e20-cb04ffc11f28",
        "cursor": {
          "ref": "673b419d-6bb9-4f1b-b115-dbad65d31bd8",
          "length": 253,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "9a8bd890-17fc-43d9-a2fc-87ee7eb508c1"
        },
        "item": {
          "id": "9c9c61e5-a7dd-4fff-9e20-cb04ffc11f28",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "1148404b-6323-47c9-9793-92f112e2a76e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38ff5155-963d-4ac7-94cd-bf1ec7ede99b",
        "cursor": {
          "ref": "2b1f79ad-e42a-4e75-b1fd-da10c6425faf",
          "length": 253,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "00a2b1c9-bd3f-43ce-8c5f-6cd2dee2a6ec"
        },
        "item": {
          "id": "38ff5155-963d-4ac7-94cd-bf1ec7ede99b",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "40561461-e45f-486c-9a85-985683f6c9b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a7f184f-1f68-4a4e-8e4c-a0ad3e9fbc12",
        "cursor": {
          "ref": "d212d737-0b68-4b46-8d80-54eed788e187",
          "length": 253,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "2138b631-fbd0-4ef4-8d34-80ca1dd22415"
        },
        "item": {
          "id": "0a7f184f-1f68-4a4e-8e4c-a0ad3e9fbc12",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "aae4b380-6ad4-4ebe-bcc1-dc463ce8bd40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 213,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eeda508c-1daa-4658-a023-d0242637dc98",
        "cursor": {
          "ref": "18422e1c-6946-4adc-b793-31f94f261a5a",
          "length": 253,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "a5e7af7f-e5a7-48e8-8c00-7309b8a304ad"
        },
        "item": {
          "id": "eeda508c-1daa-4658-a023-d0242637dc98",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "35315788-7e49-467b-a71a-495135bd7e19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de2aa9c9-e693-4c43-8722-e11886eab966",
        "cursor": {
          "ref": "4a9fe0bb-8d2b-4683-9268-89dedb7eccfe",
          "length": 253,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "18c22768-68d4-49b6-b912-c6e283ce9be3"
        },
        "item": {
          "id": "de2aa9c9-e693-4c43-8722-e11886eab966",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "e2356c84-252c-4f36-8b17-b44cbe899382",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b686d86f-8741-42ae-aaa7-1c36439d181a",
        "cursor": {
          "ref": "1ec53c3f-7b20-4f9d-b52b-74d5939678d4",
          "length": 253,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "a9b32b43-eac0-4800-a866-5adf4b04a6ca"
        },
        "item": {
          "id": "b686d86f-8741-42ae-aaa7-1c36439d181a",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "ec11f4e1-071d-42a1-b851-d48eb2d16c59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e744c35f-5d9c-48da-9506-71bd35e4fd00",
        "cursor": {
          "ref": "1e9eb449-7687-41c8-98d8-02267c92a9a0",
          "length": 253,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "32e2621b-9a70-4148-9292-a601f1e7b357"
        },
        "item": {
          "id": "e744c35f-5d9c-48da-9506-71bd35e4fd00",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "1964d41a-cce0-4a89-9d30-ca4249bdf7f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 557
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "395df559-f0a8-4dab-abec-9a0fca9d8ba3",
        "cursor": {
          "ref": "b4d3c920-0115-436f-99d8-1fdeae597cad",
          "length": 253,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "31cceff6-3639-440a-bb8f-3677e995c52f"
        },
        "item": {
          "id": "395df559-f0a8-4dab-abec-9a0fca9d8ba3",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "1ea63b58-9759-471d-8bd0-ba887912a4f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8844de10-0b89-4672-a7f9-9a749796ef6d",
        "cursor": {
          "ref": "8396754f-0ab2-40fc-ae30-1cdcc4c3027e",
          "length": 253,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "a6aa2eda-d13b-4f41-9338-087362b13388"
        },
        "item": {
          "id": "8844de10-0b89-4672-a7f9-9a749796ef6d",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "219d2100-c24b-433f-b514-62cb545465b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce22240b-4151-4c02-be0c-0d5fb34251b4",
        "cursor": {
          "ref": "95aa27bb-9372-4696-8245-ea27a4afe133",
          "length": 253,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "d682d4ac-9fd5-42fd-89bc-03a5072ad36e"
        },
        "item": {
          "id": "ce22240b-4151-4c02-be0c-0d5fb34251b4",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "4c721024-039e-4da3-8b5e-e2ed8cd25c05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff010925-89ba-49c2-a6fa-4aee19c7fb25",
        "cursor": {
          "ref": "ab980e87-a8d9-4c73-b5ae-572168c23b05",
          "length": 253,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "25068d4a-df6d-4db7-8c71-0f4af715d6f8"
        },
        "item": {
          "id": "ff010925-89ba-49c2-a6fa-4aee19c7fb25",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "365c24ea-3cb0-4f68-9988-dec5050da74d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05a895d4-9b6c-4679-9d19-f911c18a6a79",
        "cursor": {
          "ref": "90070e8e-3584-4655-90cb-8274838b88a3",
          "length": 253,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "9202711a-be1e-4039-b273-1bcacba999f3"
        },
        "item": {
          "id": "05a895d4-9b6c-4679-9d19-f911c18a6a79",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "6d8d5de6-c0ac-4cf1-8b3d-fd09927a3145",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8558d667-4efc-445d-b4f2-2c5aca6274e8",
        "cursor": {
          "ref": "3d4aed61-017d-491f-8d19-bd1b0c3eb843",
          "length": 253,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "92497e9f-ed39-4da6-a25b-9ea1f89844e1"
        },
        "item": {
          "id": "8558d667-4efc-445d-b4f2-2c5aca6274e8",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "868c2405-33d5-49d5-9624-3de16f274637",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "045239f9-626d-41ae-8c30-a363868f96bc",
        "cursor": {
          "ref": "b87edd7f-8a51-4bbb-957c-1cc6e799fd64",
          "length": 253,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "e6a230db-8d75-4951-946e-f4f11b2669e2"
        },
        "item": {
          "id": "045239f9-626d-41ae-8c30-a363868f96bc",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "ee512004-4a74-4ce4-8bfc-b5439d2cbecc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8917999c-248d-424a-b083-53da9251f9bb",
        "cursor": {
          "ref": "c8d7d62f-b63d-4a89-bf43-9000ea657e54",
          "length": 253,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "1635d8b4-daa2-4bca-91b9-48de6509fa96"
        },
        "item": {
          "id": "8917999c-248d-424a-b083-53da9251f9bb",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "1ed786d0-acf9-4f77-a10a-6412f093c516",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0c39cde-3b44-4615-896f-78ea67a59c66",
        "cursor": {
          "ref": "7efe2e24-ca72-443f-86c8-5e6eaa68a612",
          "length": 253,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "3095e837-c21e-441b-b0be-47c7b05b5495"
        },
        "item": {
          "id": "d0c39cde-3b44-4615-896f-78ea67a59c66",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "0a22ce81-9237-423d-9bfc-c922afa50bd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2f84bd1-7054-487b-b36e-763b0c191124",
        "cursor": {
          "ref": "093cec7a-1117-4e8b-b800-620932ccf5f8",
          "length": 253,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "e52f8fef-4bd6-4bb7-accd-5c9e5b884323"
        },
        "item": {
          "id": "c2f84bd1-7054-487b-b36e-763b0c191124",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "b9acdad7-4c83-4041-9b63-73b44e2f3fc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 333,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d8dc5da-39b0-4346-96b6-213c5800d4cc",
        "cursor": {
          "ref": "b24a3065-765b-4edc-bbdb-4468ec6eb643",
          "length": 253,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "4e5fdd3f-d055-4975-af4b-6b84e454650c"
        },
        "item": {
          "id": "9d8dc5da-39b0-4346-96b6-213c5800d4cc",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "248de97c-daed-44e0-b551-d76d8f56f499",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43def77e-ee61-489e-9d8d-ef572a26cbe0",
        "cursor": {
          "ref": "1eb5ef5b-c42b-4d3a-b7f5-b9ae562e51b8",
          "length": 253,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "6d199ccb-0004-4335-9c01-ebff29e654ab"
        },
        "item": {
          "id": "43def77e-ee61-489e-9d8d-ef572a26cbe0",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "993d4152-98b6-47d5-846f-eb06c89cf6af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9be27653-862f-40d0-a9b9-05ec0e36c4f9",
        "cursor": {
          "ref": "67ffe33a-9bbe-48e2-96b7-48ffffe4f9a7",
          "length": 253,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "d3effa17-74fd-4e1b-adfa-4a035a0f4d82"
        },
        "item": {
          "id": "9be27653-862f-40d0-a9b9-05ec0e36c4f9",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "774df986-7ebd-4729-8e60-76ac0d951c28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94c2476a-6de2-4b36-8897-c60b223b375c",
        "cursor": {
          "ref": "9853f7cc-0a27-4450-b46a-0de10ecd24ad",
          "length": 253,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "d1c0eb37-9953-4312-9ba6-736f8a366739"
        },
        "item": {
          "id": "94c2476a-6de2-4b36-8897-c60b223b375c",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "1d1359ed-7f69-419f-abb3-2c97ef0db8dd",
          "status": "Created",
          "code": 201,
          "responseTime": 563,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "1fd00561-4ae5-4651-8f71-6a023dcab10f",
        "cursor": {
          "ref": "4be269b2-8d9a-4c99-9046-12c61529f84a",
          "length": 253,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "b8784e64-6c49-4ce7-b995-670382c57c80"
        },
        "item": {
          "id": "1fd00561-4ae5-4651-8f71-6a023dcab10f",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "c7e982fa-776c-4c4f-9cab-2f471d4523af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "294b9a4d-a3a8-4302-9894-4af9cee32a28",
        "cursor": {
          "ref": "51101846-125e-4b2d-82f4-7e049661a2da",
          "length": 253,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "c8207f47-7070-4679-87e8-f3989826caca"
        },
        "item": {
          "id": "294b9a4d-a3a8-4302-9894-4af9cee32a28",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "e7ede948-46c4-46fc-be26-edab648d66ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e67ec05b-746f-4497-8084-0d80f0de158a",
        "cursor": {
          "ref": "c8bfd63d-a9af-46fe-a30e-d15450fe1b60",
          "length": 253,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "1deea772-5235-407a-8d49-8b8578d5a019"
        },
        "item": {
          "id": "e67ec05b-746f-4497-8084-0d80f0de158a",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "54638d7b-3fe3-4ca8-8bb8-afab33e495cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 389
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb10893f-72e3-4217-a013-a24dbe68e8ff",
        "cursor": {
          "ref": "052e3dea-ec3d-40e1-8d19-9e6baddeba54",
          "length": 253,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "e3fc4b89-b78a-4535-bc53-0f087531ffad"
        },
        "item": {
          "id": "bb10893f-72e3-4217-a013-a24dbe68e8ff",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "78a0c2ac-3f3b-451e-90fa-3b705b0bfac8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 388
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd82b9f1-3d1d-48a8-b062-6da7c570fac7",
        "cursor": {
          "ref": "6d85012c-2aac-44e8-9e48-e91c875917e2",
          "length": 253,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "af083b64-5614-4e44-8c4e-0a996e01de2d"
        },
        "item": {
          "id": "fd82b9f1-3d1d-48a8-b062-6da7c570fac7",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "f2f5c628-7b86-461e-98a8-63df0d3a3e3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43a92cab-441f-40aa-93f9-0e9c75b9f3d4",
        "cursor": {
          "ref": "fe790bca-2e08-4480-9599-cfe70c32a5ee",
          "length": 253,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "c367a3ae-9a97-420a-9421-af28d8a55446"
        },
        "item": {
          "id": "43a92cab-441f-40aa-93f9-0e9c75b9f3d4",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "ef0e6f80-206f-40e4-89e2-6aa5b2639d67",
          "status": "Created",
          "code": 201,
          "responseTime": 538,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "96925b42-78e0-40a0-922f-d9e457822408",
        "cursor": {
          "ref": "6c5c3a04-f303-4558-b6ea-93906aa73b08",
          "length": 253,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "fb34ef3f-a020-4152-b02f-1353aaec6797"
        },
        "item": {
          "id": "96925b42-78e0-40a0-922f-d9e457822408",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "340e9328-7f29-401c-aad1-3f37f8e404c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa529dad-7f11-4e4a-af1c-0abce8ee0cfb",
        "cursor": {
          "ref": "17367b49-c84e-4a5f-bfcd-5d537be33233",
          "length": 253,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "2f4f11b1-1cdc-4371-b654-347e0d936df4"
        },
        "item": {
          "id": "aa529dad-7f11-4e4a-af1c-0abce8ee0cfb",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "6d2d9e49-6404-4624-8353-472fa2c37d3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c7c679c-58c3-4582-92fa-d39c1b0eeaeb",
        "cursor": {
          "ref": "c16752ae-95dc-44dd-9381-40b53d6085de",
          "length": 253,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "e69ab9ef-7223-4285-ade1-7d4e7272e5df"
        },
        "item": {
          "id": "8c7c679c-58c3-4582-92fa-d39c1b0eeaeb",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "ba8fe810-24f8-4c50-8bda-32c2721cd186",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aadbc489-1086-4077-8ffd-284235d9f02e",
        "cursor": {
          "ref": "949b93bd-68f0-4455-b138-22a5e4c797fa",
          "length": 253,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "17ea17f1-59b7-40e2-bce0-7ea70caa840a"
        },
        "item": {
          "id": "aadbc489-1086-4077-8ffd-284235d9f02e",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "815c6f7e-7de6-4cf1-b7dc-4e2862a60513",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7cbcb48-61b0-4527-b4d6-72a82ccb8996",
        "cursor": {
          "ref": "efc16e0e-d125-47eb-a5e3-ccd0ae1b6d5a",
          "length": 253,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "4bdaaa4d-ee9a-40ec-b509-1c84fe7e7882"
        },
        "item": {
          "id": "d7cbcb48-61b0-4527-b4d6-72a82ccb8996",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "e50160eb-6dd6-4924-9c81-06380fce21f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe6c4318-1941-4f5a-9752-bc4b03f67c5d",
        "cursor": {
          "ref": "688998d6-df91-4a46-8c4c-76027ee9626e",
          "length": 253,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "ad6acfc0-b1ba-4c48-8865-9321bf89074c"
        },
        "item": {
          "id": "fe6c4318-1941-4f5a-9752-bc4b03f67c5d",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "f1e368e1-c081-4bf1-a555-da46815570f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f33fc82-0dd1-4e3c-a54b-ab30b8b962c6",
        "cursor": {
          "ref": "528901fc-7d18-4364-be95-25ac35013e4e",
          "length": 253,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "03370d12-53c1-4167-8b6b-dad2dc9d28e4"
        },
        "item": {
          "id": "9f33fc82-0dd1-4e3c-a54b-ab30b8b962c6",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "dd3dc047-9246-42cb-a4c8-90ef5d2254d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "826a966c-041e-45d3-bbd1-5efdf68488ab",
        "cursor": {
          "ref": "f7c99370-6e77-4d81-b29d-9fd23f85a4f3",
          "length": 253,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "8bf6164d-8e65-44bd-95cf-dd7979ec45e9"
        },
        "item": {
          "id": "826a966c-041e-45d3-bbd1-5efdf68488ab",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "1278daa8-6d8c-47ff-8707-5ff989f74d0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 127,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de914e42-03f2-4207-bc56-f18029175005",
        "cursor": {
          "ref": "9e7b8449-ddcb-4db0-863c-0875806caa98",
          "length": 253,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "baf4b843-bf11-4e3b-b686-4ea4c63e592a"
        },
        "item": {
          "id": "de914e42-03f2-4207-bc56-f18029175005",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "aabc65f1-66c7-4cf4-9928-da9f33fc7058",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:104)"
            }
          }
        ]
      },
      {
        "id": "126a806e-2022-482a-b5cc-c712aaf907f9",
        "cursor": {
          "ref": "1048da1c-35c9-4326-821b-58f67e5749c6",
          "length": 253,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "f83d6ec4-2ed5-48b4-82fa-00e5db442392"
        },
        "item": {
          "id": "126a806e-2022-482a-b5cc-c712aaf907f9",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "84e10acd-4c01-4857-844c-a32b82ac2057",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:105)"
            }
          }
        ]
      },
      {
        "id": "0873f489-8e5b-4d50-a63e-76ab7d41f79b",
        "cursor": {
          "ref": "fe91d2a3-09ba-4d7f-b330-71b2e2a088b9",
          "length": 253,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "e80c2d9d-3fe8-40a8-9dda-529395ea623c"
        },
        "item": {
          "id": "0873f489-8e5b-4d50-a63e-76ab7d41f79b",
          "name": "credentials_issue"
        },
        "response": {
          "id": "fcb0212b-8adf-48dd-9cfc-b6e4ca6ef740",
          "status": "Created",
          "code": 201,
          "responseTime": 683,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "f05dee50-4bff-47e7-aa51-5c26eb3c0c59",
        "cursor": {
          "ref": "5bcac739-0ad5-471d-8d4d-06d98998e562",
          "length": 253,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "0d58a7fc-16f4-4294-9d97-960bc9a93fc6"
        },
        "item": {
          "id": "f05dee50-4bff-47e7-aa51-5c26eb3c0c59",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "805ee122-ba15-42ee-8597-20818172453d",
          "status": "Created",
          "code": 201,
          "responseTime": 568,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b383558-ff17-4d3a-8e23-b75eb3bfa300",
        "cursor": {
          "ref": "9529da97-a182-4ec1-9e16-a42780b363b6",
          "length": 253,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "72f62110-194b-42e5-8566-c351561a348b"
        },
        "item": {
          "id": "9b383558-ff17-4d3a-8e23-b75eb3bfa300",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "02dd65ae-2e1c-4a9a-ad67-55639aa6ba0a",
          "status": "Created",
          "code": 201,
          "responseTime": 634,
          "responseSize": 747
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "1efa7c3e-77d0-4b46-bc2b-f41f465b310e",
        "cursor": {
          "ref": "5f9ae8a0-1303-48df-8b27-b26c4fcc207f",
          "length": 253,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "a519fa44-3f6d-4989-9eaf-6a1ca2ff7592"
        },
        "item": {
          "id": "1efa7c3e-77d0-4b46-bc2b-f41f465b310e",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "fb78d55f-12d8-462e-b48c-eb1ce773a558",
          "status": "Created",
          "code": 201,
          "responseTime": 516,
          "responseSize": 715
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "abbfa5de-dbf4-4408-a734-81a93e310a10",
        "cursor": {
          "ref": "341def22-4280-4072-a685-1dfc203b5281",
          "length": 253,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "6ef4afb2-92d1-4259-81b7-59c6321da80d"
        },
        "item": {
          "id": "abbfa5de-dbf4-4408-a734-81a93e310a10",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "b8542891-fd38-4682-8ee5-4e0a80b68388",
          "status": "Created",
          "code": 201,
          "responseTime": 524,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc767d67-45ea-412c-ab38-57e5d27b5b78",
        "cursor": {
          "ref": "199b266d-7d18-4bbb-bebd-33c55a78f71f",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "17782cc3-4533-4b95-bd4c-0cea6b2b649f"
        },
        "item": {
          "id": "fc767d67-45ea-412c-ab38-57e5d27b5b78",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "4409f0e0-c9fe-4b3b-ba91-daa34d11dc0b",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "fc767d67-45ea-412c-ab38-57e5d27b5b78",
        "cursor": {
          "ref": "199b266d-7d18-4bbb-bebd-33c55a78f71f",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "17782cc3-4533-4b95-bd4c-0cea6b2b649f"
        },
        "item": {
          "id": "fc767d67-45ea-412c-ab38-57e5d27b5b78",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "4409f0e0-c9fe-4b3b-ba91-daa34d11dc0b",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "043c2a0d-6d0c-4d48-8b1e-71ce281b906f",
        "cursor": {
          "ref": "4a9b49b6-7814-4478-b7f0-e8288b9c7522",
          "length": 253,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "595e00fc-167b-4d19-bd0f-35472673aeb7"
        },
        "item": {
          "id": "043c2a0d-6d0c-4d48-8b1e-71ce281b906f",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "f144d9e3-8626-4531-bc3d-5a51719b88e7",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "6a85b693-cd24-4404-9e32-9b39e37fcff8",
        "cursor": {
          "ref": "f950cc9d-4473-4efa-a872-22fcaf3713a9",
          "length": 253,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "204298b1-84ed-499f-8218-8e48622361ff"
        },
        "item": {
          "id": "6a85b693-cd24-4404-9e32-9b39e37fcff8",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "4c4160ec-2a6f-4609-b989-65d08a1482cf",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "227b2a4d-d830-4372-b3fb-361d584ad5d2",
        "cursor": {
          "ref": "10997303-17cf-482b-836e-c8c39cd58a0b",
          "length": 253,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "169b0487-66e3-47b4-9cbc-43d3382ce9fe"
        },
        "item": {
          "id": "227b2a4d-d830-4372-b3fb-361d584ad5d2",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "52eda25d-9309-46eb-811b-00a1ba17d649",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "5081eca4-f4f6-47e3-b7da-f00f606d90a8",
        "cursor": {
          "ref": "824a832e-b37d-4f0e-9efc-f475672b3d14",
          "length": 253,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "6990ca8d-e056-4ad2-a6e1-44b0f979968d"
        },
        "item": {
          "id": "5081eca4-f4f6-47e3-b7da-f00f606d90a8",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "10b24855-1589-448c-a160-dc45169027a7",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "b0d27416-b96f-4a48-9080-311f7b9cd1cf",
        "cursor": {
          "ref": "9a897f05-6aef-41ad-ba3d-57f1172a4069",
          "length": 253,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "296c165e-a684-4bb8-9077-f2ac4fd25846"
        },
        "item": {
          "id": "b0d27416-b96f-4a48-9080-311f7b9cd1cf",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "d5dcf20d-18ed-4905-afa7-d49b874695fc",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "db9a22ba-4bf3-4e15-b94e-e4eb338b6be6",
        "cursor": {
          "ref": "ebaf6db2-2530-4ae5-926a-cde4304d2d46",
          "length": 253,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "e27ea234-dc9b-4b69-be2f-036a26e521ea"
        },
        "item": {
          "id": "db9a22ba-4bf3-4e15-b94e-e4eb338b6be6",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "76d9722b-ea78-439d-ab79-677dc7ed11ee",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "59760d2c-50a6-43cc-a5da-02a58ddfb3b6",
        "cursor": {
          "ref": "1b4bb7e3-71bb-4775-9db2-bfd4b44745e4",
          "length": 253,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "100614aa-bd82-45f6-be81-a90e2503458f"
        },
        "item": {
          "id": "59760d2c-50a6-43cc-a5da-02a58ddfb3b6",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "7e9bda37-c96e-4d53-9236-de47f17aaef9",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "73ea8954-4761-4b4c-ba9a-05be86a3e1ee",
        "cursor": {
          "ref": "f46acc68-7d1f-4142-b78c-432ce69f5c8e",
          "length": 253,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "dd204fa6-370c-4bc3-9590-178226d62100"
        },
        "item": {
          "id": "73ea8954-4761-4b4c-ba9a-05be86a3e1ee",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "274a5588-08a9-49af-ab21-198b50e2e075",
          "status": "OK",
          "code": 200,
          "responseTime": 35,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "9ea461bf-85ab-4089-93a2-f95f5dba213e",
        "cursor": {
          "ref": "9dc21a78-345d-468e-8cff-ad376fdc9d55",
          "length": 253,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "bda8d1b8-54d3-4961-b8c4-bf09628da198"
        },
        "item": {
          "id": "9ea461bf-85ab-4089-93a2-f95f5dba213e",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "92470377-4c17-45c4-a283-c82adf52706f",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "0d1261d2-6863-436b-9fbc-f1cd5be7af6b",
        "cursor": {
          "ref": "d327ab50-81a6-4db4-9ad3-2a9ce4fe1ba5",
          "length": 253,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "2b83fb75-340f-48d7-a34c-4be2ebb0813d"
        },
        "item": {
          "id": "0d1261d2-6863-436b-9fbc-f1cd5be7af6b",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "656d4d17-71db-4748-b2e7-5c18d1f4810b",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "695bb90c-c815-450b-81c0-c9d1870de26e",
        "cursor": {
          "ref": "8114ae9c-8085-410e-b308-be809735f541",
          "length": 253,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "03565e90-a19d-4365-84f6-8ac6cfaefc0f"
        },
        "item": {
          "id": "695bb90c-c815-450b-81c0-c9d1870de26e",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "14cd8bf1-39b0-469f-bc34-0c2fa6b1309d",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "28053a7a-1291-4c68-abf3-8273240aad0d",
        "cursor": {
          "ref": "a9f8b016-3528-4324-a52f-2c2f5e0f8e99",
          "length": 253,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "f3a041e1-c6be-478e-8edb-c2980b71e264"
        },
        "item": {
          "id": "28053a7a-1291-4c68-abf3-8273240aad0d",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "ad6beb50-9951-4131-86eb-e1f53ecf786c",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "e334aef3-9d05-4485-9c2d-c5c561b5b0a6",
        "cursor": {
          "ref": "2a7e0aa8-e1a9-4c6e-ad82-8d98eb0ba392",
          "length": 253,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "0ca7d61e-b96d-4e1e-b099-c0b5457c0a1e"
        },
        "item": {
          "id": "e334aef3-9d05-4485-9c2d-c5c561b5b0a6",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "f89fc2a4-74fb-4773-aa69-654073b995dd",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "a41192eb-c927-4b17-8e3b-8e6438271ed2",
        "cursor": {
          "ref": "4798def6-8f01-4ce3-89a9-0f8d882dba07",
          "length": 253,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "0846b82b-2523-4e45-ba11-1ef22fc78027"
        },
        "item": {
          "id": "a41192eb-c927-4b17-8e3b-8e6438271ed2",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "2858429b-6767-4a74-8e43-2c7758810004",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "683c5164-5dba-498d-b67e-a7a1da751acd",
        "cursor": {
          "ref": "8801cb4a-39c4-4207-bdde-8f834d06f93e",
          "length": 253,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "ea7d7572-2668-404e-9d6c-176a6f4f2a45"
        },
        "item": {
          "id": "683c5164-5dba-498d-b67e-a7a1da751acd",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "4f65f99d-911c-4eca-aa49-cef40721fdf0",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "d54649e6-0f3b-40c1-9bdf-7c96e637d1e1",
        "cursor": {
          "ref": "aae6f9f2-83cd-45e5-8864-28359380d193",
          "length": 253,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "aa9e18e2-fe4d-4395-b090-3d350a49ef7a"
        },
        "item": {
          "id": "d54649e6-0f3b-40c1-9bdf-7c96e637d1e1",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "bc893606-ca38-4e5d-aafe-a2e1acd6998e",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "1796e96a-b95d-4880-bca0-be3856f0453d",
        "cursor": {
          "ref": "cee9349c-b0ae-4ed9-b724-74e2f245ad35",
          "length": 253,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "127e0a36-9f84-4d05-bb62-65de4058609f"
        },
        "item": {
          "id": "1796e96a-b95d-4880-bca0-be3856f0453d",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "f5767fdf-fce8-47c4-a3dc-2edb23108ac8",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "ed242fc7-9ecf-47c1-ade2-849b15e59e82",
        "cursor": {
          "ref": "beef101b-9a7d-4097-a46b-e20dda6ebaf7",
          "length": 253,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "3ca68673-0336-4e9d-831d-819078ce7f55"
        },
        "item": {
          "id": "ed242fc7-9ecf-47c1-ade2-849b15e59e82",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "74268570-7da0-43da-b224-fafc5d075d77",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "abd0f779-ea66-4b44-be2b-d4e78b35010e",
        "cursor": {
          "ref": "a5c00334-c1d7-4255-b46c-9df8a0c75c20",
          "length": 253,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "6b26ffc3-2693-4cca-9e78-fedecf66b2ff"
        },
        "item": {
          "id": "abd0f779-ea66-4b44-be2b-d4e78b35010e",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "3cb429bd-7cef-400f-bc18-f7e666a819b7",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "eb65c143-1121-47bf-9e12-3f8d491f2f7f",
        "cursor": {
          "ref": "901bbe5f-3956-4acf-a9fb-4abccce0d6f8",
          "length": 253,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "0a09d49f-dd34-465d-8ee1-48226a7e3a3f"
        },
        "item": {
          "id": "eb65c143-1121-47bf-9e12-3f8d491f2f7f",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "0ca2efa3-5a22-4c5e-8db4-20b37f7de796",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "02419bb8-be3e-4c29-9752-2a81046104a7",
        "cursor": {
          "ref": "b4579c21-27ab-4f70-ba18-d4119990d614",
          "length": 253,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "5c8fe607-3e7b-45c8-8e81-d6cefbc84d88"
        },
        "item": {
          "id": "02419bb8-be3e-4c29-9752-2a81046104a7",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "f3891c19-34ae-4c21-87c6-2bbc74674a8c",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "b22dadff-9f38-4ae2-bce1-1f4a961420df",
        "cursor": {
          "ref": "61336404-0f54-48f5-a5bf-9135c7254aee",
          "length": 253,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "bd03c079-f691-4757-849e-5e13b098be0f"
        },
        "item": {
          "id": "b22dadff-9f38-4ae2-bce1-1f4a961420df",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "511200d3-d325-4803-83bb-387d64d36a96",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "2da80e55-dbd0-4327-9dd9-c6011c0ef68f",
        "cursor": {
          "ref": "c6e4602d-1216-4f76-af12-da7795977d19",
          "length": 253,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "78eaccfa-0cbe-4472-8e6c-414acb37bf7e"
        },
        "item": {
          "id": "2da80e55-dbd0-4327-9dd9-c6011c0ef68f",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "1213b23d-2c67-4999-b3a1-0ad92b9adee9",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "153b4874-af93-48c2-af79-5a478564c74c",
        "cursor": {
          "ref": "8ad17a49-ce99-45f6-a6e6-8231047105d2",
          "length": 253,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "518d5a50-3576-41cf-94a6-95b90875f648"
        },
        "item": {
          "id": "153b4874-af93-48c2-af79-5a478564c74c",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "a0bbedd4-2b67-4191-afbf-24da9ed9f5a4",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "7bde4bed-24a8-493d-82f1-4bfddebd92c9",
        "cursor": {
          "ref": "e6a68cc2-04cc-469e-9946-6115a58e4ef4",
          "length": 253,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "63182355-8371-4aa9-9438-fa9d365389d1"
        },
        "item": {
          "id": "7bde4bed-24a8-493d-82f1-4bfddebd92c9",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "060ac5a1-8c32-41ff-8080-58a5789b9e85",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "1c516078-b2a3-43cd-84aa-94b5234fd177",
        "cursor": {
          "ref": "c5a74bc1-fafb-45b9-a0a6-1bb02b4d4798",
          "length": 253,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "c69b6ed5-93ce-4b19-b4fc-257d77ed7f47"
        },
        "item": {
          "id": "1c516078-b2a3-43cd-84aa-94b5234fd177",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "66fd962d-47b4-4672-895a-4c0d42fe3d95",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "0bd67e68-1151-439a-a070-d6a8db465311",
        "cursor": {
          "ref": "598ad6aa-b152-4e3c-9ed6-7fe9fa3c955c",
          "length": 253,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "68748c7a-db52-45a4-b289-3a455b0160fd"
        },
        "item": {
          "id": "0bd67e68-1151-439a-a070-d6a8db465311",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "1abf6fab-1d2d-46aa-ab6e-07ff5fb04380",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "97a52ec3-2dc4-4efd-8bc5-0eb18f3f61bd",
        "cursor": {
          "ref": "4935607a-84ba-4346-bc26-765806df21e8",
          "length": 253,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "f5ce3f16-caed-4440-a372-a8d99e5aa144"
        },
        "item": {
          "id": "97a52ec3-2dc4-4efd-8bc5-0eb18f3f61bd",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "17671cfe-452b-4140-87d7-ddb342d8ab79",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "5b2ca18d-ac4f-487b-8caa-8f6cdde1b65a",
        "cursor": {
          "ref": "28fe7e21-4fd6-46b8-ab3a-84f911e2c434",
          "length": 253,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "70865adf-a5dc-4dff-bed2-57601f716db3"
        },
        "item": {
          "id": "5b2ca18d-ac4f-487b-8caa-8f6cdde1b65a",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "80d544fe-d089-4523-949c-91a1109c3994",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "636746ba-7049-4edd-b15c-cc4c444649c0",
        "cursor": {
          "ref": "1589d03d-a908-4c2f-b165-daedfec87b51",
          "length": 253,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "5a0c4038-069f-42e7-b092-11f570344ac1"
        },
        "item": {
          "id": "636746ba-7049-4edd-b15c-cc4c444649c0",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "b1a3ac5f-1f55-4d94-9bf3-e4b8552d42ec",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "9646ab49-637d-4fb2-8029-21af3017fecb",
        "cursor": {
          "ref": "0c908623-35e7-4ca8-814e-39f927fadc3c",
          "length": 253,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "c9f608ea-66e9-4fa9-b9a3-c91a375abe0c"
        },
        "item": {
          "id": "9646ab49-637d-4fb2-8029-21af3017fecb",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "768ee204-5fa8-4018-bec4-9f6c96d0013c",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "ced94d85-19ad-4d12-adb9-f11ec55e9bf5",
        "cursor": {
          "ref": "e20bdc01-e1b8-47f5-b4b3-795a34f13b8b",
          "length": 253,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "6df032d8-c500-4fa9-99b8-7f5439afa22c"
        },
        "item": {
          "id": "ced94d85-19ad-4d12-adb9-f11ec55e9bf5",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "771ff6c2-8c5a-4ef6-8e9e-e3263635825c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 32,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e7a2425-6259-4c95-bd87-68fe20b7f23b",
        "cursor": {
          "ref": "03e5c7f9-3eb1-4b94-8644-8965bb342271",
          "length": 253,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "2fc0326e-6c6c-4a25-921c-506c3414a124"
        },
        "item": {
          "id": "6e7a2425-6259-4c95-bd87-68fe20b7f23b",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "e72571e6-20db-4cf1-a305-bbb5ba792d0d",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 31,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a50efb8-02dd-47e4-acaf-0d84818c3b9b",
        "cursor": {
          "ref": "3a512bce-bee7-4978-9a1e-5108cd968b23",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "90a85320-f850-41e7-924a-dc319832b5a0"
        },
        "item": {
          "id": "5a50efb8-02dd-47e4-acaf-0d84818c3b9b",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "42b9a926-57e4-4900-babc-232807dcb5aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a50efb8-02dd-47e4-acaf-0d84818c3b9b",
        "cursor": {
          "ref": "3a512bce-bee7-4978-9a1e-5108cd968b23",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "90a85320-f850-41e7-924a-dc319832b5a0"
        },
        "item": {
          "id": "5a50efb8-02dd-47e4-acaf-0d84818c3b9b",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "42b9a926-57e4-4900-babc-232807dcb5aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70ecd2e7-005b-4aa9-8cf8-47fb22a43814",
        "cursor": {
          "ref": "d2e145e2-098c-4856-8996-8167a455d2b2",
          "length": 253,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "eef04cb2-1faa-4d0a-954d-ba2acedd7368"
        },
        "item": {
          "id": "70ecd2e7-005b-4aa9-8cf8-47fb22a43814",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "2cb33a71-3830-4b48-af72-6198d57bb99f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9822cae2-0b3d-43f1-8a18-a104686846c5",
        "cursor": {
          "ref": "e2b050f9-c914-4955-be5f-8bb2e0f934df",
          "length": 253,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "fc7776b6-fa6b-480a-afd5-ffcc80262b92"
        },
        "item": {
          "id": "9822cae2-0b3d-43f1-8a18-a104686846c5",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "49f7b68d-fe46-4af8-a00c-674a0787de6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47cdeff0-eea2-49d1-ab09-e96d980637cc",
        "cursor": {
          "ref": "dbb6527d-8683-40ef-a6fd-a2ef266150e7",
          "length": 253,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "3334a3e3-e523-4c78-ab60-bcf48d5a33ae"
        },
        "item": {
          "id": "47cdeff0-eea2-49d1-ab09-e96d980637cc",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "cb8ad46a-7081-4e20-816d-5ccda9bb7a12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2edea57f-690b-4185-b573-d98616d848ea",
        "cursor": {
          "ref": "255bae1a-a332-4fc8-a6ad-07dedbcfaef0",
          "length": 253,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "c551a41c-8ae3-456a-b0c1-c7d2d1c98e52"
        },
        "item": {
          "id": "2edea57f-690b-4185-b573-d98616d848ea",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "0b5a606b-ed71-46eb-a80c-a95ede8c6897",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12dd940c-ce55-4f2d-8b58-4f2df3d653d0",
        "cursor": {
          "ref": "623a244e-b27b-43eb-9b75-d72cc2ca60e6",
          "length": 253,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "8295f63b-cbd7-407d-9b24-909262f776ac"
        },
        "item": {
          "id": "12dd940c-ce55-4f2d-8b58-4f2df3d653d0",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "fa4384d4-2688-4e06-a800-7665ae0a3901",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ab26314-7276-46c6-91b0-0ace6a10902d",
        "cursor": {
          "ref": "d066b7ac-dce3-4a55-97e3-bafd664fe147",
          "length": 253,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "9268ccd9-5651-45a9-885d-f8904be22587"
        },
        "item": {
          "id": "3ab26314-7276-46c6-91b0-0ace6a10902d",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "4f91d95b-1261-47fd-a950-164295a149a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 156,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "025c3278-c6e6-478f-ab15-c7b1902556e4",
        "cursor": {
          "ref": "e2704d48-5377-4087-a909-c7ca3db51e85",
          "length": 253,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "ac939ebf-f7a8-44ae-a1cc-f7079eba74e7"
        },
        "item": {
          "id": "025c3278-c6e6-478f-ab15-c7b1902556e4",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "237816bc-6847-469a-877b-c431293d3eff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83b7cf3f-5315-4806-b153-fa60bf3826a1",
        "cursor": {
          "ref": "dd3c1362-019c-49ef-9785-a21f3b6aeff8",
          "length": 253,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "315ef394-0f95-4695-9ffe-8044f15ac7ba"
        },
        "item": {
          "id": "83b7cf3f-5315-4806-b153-fa60bf3826a1",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "dc8b003c-2ea9-4b66-9682-0435ffdd0908",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "683ced26-9d1a-4c19-a06b-1a84e456fd4e",
        "cursor": {
          "ref": "bb0cafc0-6d7d-4aac-a72f-9ae1698651a3",
          "length": 253,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "0a80cd2f-1ead-4a6c-9868-24dc4717967d"
        },
        "item": {
          "id": "683ced26-9d1a-4c19-a06b-1a84e456fd4e",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "f471c644-2228-452c-bbd4-95920cbc132c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d0517a0-068b-41cc-b5a7-ca78f812692c",
        "cursor": {
          "ref": "209eaecd-15dd-4925-9c37-3312fe30df00",
          "length": 253,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "6fbff918-1683-4f06-9830-7f790ac48925"
        },
        "item": {
          "id": "9d0517a0-068b-41cc-b5a7-ca78f812692c",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "f65d313b-1985-49a9-b178-750967333aac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e8d4cbb-04b0-4fe4-bb07-012b644d3f30",
        "cursor": {
          "ref": "eb127887-f7e3-4507-98f9-86c49a0e38a4",
          "length": 253,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "0fb69e00-8bea-457f-b417-68ab6939812f"
        },
        "item": {
          "id": "5e8d4cbb-04b0-4fe4-bb07-012b644d3f30",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "e065cf01-9794-4ab1-8d6a-b122215db47b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e46d394-9264-4a20-b0f9-dc21ee1348b3",
        "cursor": {
          "ref": "bbeef518-2dfb-4817-93a0-b718460dd078",
          "length": 253,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "3a08c481-0870-469b-a334-16e66819642d"
        },
        "item": {
          "id": "9e46d394-9264-4a20-b0f9-dc21ee1348b3",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "58fbab2f-44af-4ce5-8163-21dc77a2dc02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6de811c-61b5-4c2c-b0cb-ad84d9b43488",
        "cursor": {
          "ref": "2829e77f-3c25-46a5-8630-b4dfbd05b965",
          "length": 253,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "53682407-8a69-42df-ac6f-196dca9b3ac0"
        },
        "item": {
          "id": "b6de811c-61b5-4c2c-b0cb-ad84d9b43488",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "78706d86-3bf0-43cb-a7a5-b289e48f73e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdd56499-3a84-42fd-9fff-b6ca5face13e",
        "cursor": {
          "ref": "05c0c43c-1881-4161-9b49-11243f71bb00",
          "length": 253,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "5b4c34b5-200d-4f82-b6d7-f8c73b3a4305"
        },
        "item": {
          "id": "bdd56499-3a84-42fd-9fff-b6ca5face13e",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "99b68b46-829b-420d-927f-20c340d2bf94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c2af83a-5f10-4155-a019-d5b53ce0213a",
        "cursor": {
          "ref": "c48c48a0-454c-4074-b41c-a88e67b12593",
          "length": 253,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "57683ed3-6f97-4c6e-ae40-c78de1e6cc0d"
        },
        "item": {
          "id": "5c2af83a-5f10-4155-a019-d5b53ce0213a",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "21d54e78-9d3a-4d5d-8b59-9ec9cf576530",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94d5069c-6bb1-49e2-9b68-b6a8b02b7b89",
        "cursor": {
          "ref": "545ee1a2-eebd-429a-a021-d9c8b30db074",
          "length": 253,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "1c1f94b6-436d-45e4-bc8e-5f2f22451c4e"
        },
        "item": {
          "id": "94d5069c-6bb1-49e2-9b68-b6a8b02b7b89",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "e9d69d02-80ff-4012-befe-fbbd7a8a9e38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5634b31d-28c3-4157-9345-d438019390c3",
        "cursor": {
          "ref": "3e3a07bb-06cf-40ab-b192-6d541ec64920",
          "length": 253,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "149effc5-07c8-4632-a473-144bdfcb5be2"
        },
        "item": {
          "id": "5634b31d-28c3-4157-9345-d438019390c3",
          "name": "credentials_verify:vc:id:missing"
        },
        "response": {
          "id": "467c9547-2c22-4e0d-af1a-cfcf56fe382f",
          "status": "OK",
          "code": 200,
          "responseTime": 571,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "b9460912-bb0a-4b45-9a55-92ad3a3587b3",
        "cursor": {
          "ref": "8e33981b-0579-47e4-9408-7df648d890b7",
          "length": 253,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "571f421f-7a8f-4c44-87c2-5c5640a0e930"
        },
        "item": {
          "id": "b9460912-bb0a-4b45-9a55-92ad3a3587b3",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "5237e292-0919-42e8-a3e3-1f3598ba206b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 258,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67eb453a-3ac0-4839-bd01-1e81f8c7dfa0",
        "cursor": {
          "ref": "e6369fb0-a3a0-4e7c-8bed-1fbc025a0e80",
          "length": 253,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "12288a3a-12fe-4640-93d1-2d5f0a5bf980"
        },
        "item": {
          "id": "67eb453a-3ac0-4839-bd01-1e81f8c7dfa0",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "f1a75c2b-e96b-4353-bb48-371171a33426",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 257,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6d16812-9147-4fbf-ad09-28c1ba6e6268",
        "cursor": {
          "ref": "34c9f795-2cfd-4990-bb46-6bd5acc25605",
          "length": 253,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "aff149fc-fe76-4804-9bc0-e272aa755639"
        },
        "item": {
          "id": "f6d16812-9147-4fbf-ad09-28c1ba6e6268",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "4fcdb4ec-34f4-4eaf-9ca6-58bdb2efcf4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 261,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e44edefd-dad5-41a8-888d-8b3c56c70bd4",
        "cursor": {
          "ref": "fd2d28a9-a099-46c9-98b3-ef3f61863e9b",
          "length": 253,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "96a9957c-bde5-47f5-90a3-ee526082e0d3"
        },
        "item": {
          "id": "e44edefd-dad5-41a8-888d-8b3c56c70bd4",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "e7370ef3-89a2-4b0c-8607-544995c7ed6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 275,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a7a5195-74c6-4bcd-a4e0-c697b7dcf15a",
        "cursor": {
          "ref": "8df7ac36-114b-4a51-b8cb-0e74ad2cfd99",
          "length": 253,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "7831f502-1e11-4f83-bb8f-59443a311888"
        },
        "item": {
          "id": "1a7a5195-74c6-4bcd-a4e0-c697b7dcf15a",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "407357ce-2511-4229-a311-d73c80f979ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 264,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "115f053f-16bb-4781-910e-386caf8d0e03",
        "cursor": {
          "ref": "36fab6ab-71fe-44d4-afde-f717d1a02141",
          "length": 253,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "049a9da7-adbc-4612-b55b-d0d7bab462f8"
        },
        "item": {
          "id": "115f053f-16bb-4781-910e-386caf8d0e03",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "d57d9403-1144-4861-b663-c7970101d9f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 251,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebdbabe8-9912-4f21-b35b-9a434b6e83a5",
        "cursor": {
          "ref": "0e52d319-5df8-4011-b38f-a2d17754b3c9",
          "length": 253,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "64d26bfc-ddcd-4637-a6fc-1a081751ced3"
        },
        "item": {
          "id": "ebdbabe8-9912-4f21-b35b-9a434b6e83a5",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "c0761118-dd6f-4cdc-959f-b9e0454a71d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae88607b-522b-49d7-a071-fc367bcf27bd",
        "cursor": {
          "ref": "ca92e0fd-0013-4f34-ae63-0b59fa3eb18d",
          "length": 253,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "cc488647-c551-4bba-9f88-a40f2d1c6998"
        },
        "item": {
          "id": "ae88607b-522b-49d7-a071-fc367bcf27bd",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "c99b2081-ff5e-4a8e-9b64-237fbfeb8953",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2e549e8-e275-411d-a46a-8677336d2fad",
        "cursor": {
          "ref": "403a5879-8123-4b60-982a-d871bc24c98c",
          "length": 253,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "bba413cb-a3dd-4336-a783-cad76b1f18f4"
        },
        "item": {
          "id": "a2e549e8-e275-411d-a46a-8677336d2fad",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "e4549128-e15d-4ee5-98bb-9bdc713643c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 230,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cf0d830-a6bb-4717-aa0b-e9862dd8569f",
        "cursor": {
          "ref": "1d937af2-4beb-48ee-9f2e-22e9e7c8063c",
          "length": 253,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "ddf17b40-2a9b-421c-b316-bb4fc54e206c"
        },
        "item": {
          "id": "9cf0d830-a6bb-4717-aa0b-e9862dd8569f",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "c6d11224-abdd-41fe-87ce-d0bd3912d197",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0420f46-e066-468e-a7a7-73406a507791",
        "cursor": {
          "ref": "cefae8fc-6e98-4412-a453-9e7b90eb28a0",
          "length": 253,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "469c5f4a-bc32-4c37-9afd-834825291ef7"
        },
        "item": {
          "id": "f0420f46-e066-468e-a7a7-73406a507791",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "8bc51445-1694-48f2-89db-b7e8dc05e503",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a401504-aed0-48fa-8647-c6a97c2faa61",
        "cursor": {
          "ref": "2742bdfd-ee43-4dce-acf8-b589ce1ec88c",
          "length": 253,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "73388218-e5ba-44e6-9b11-ff78ff5bac14"
        },
        "item": {
          "id": "7a401504-aed0-48fa-8647-c6a97c2faa61",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "01f126b8-7523-49d7-8537-88d27872deaf",
          "status": "OK",
          "code": 200,
          "responseTime": 216,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "ed5881f1-a41f-400d-85c6-17b624b3af41",
        "cursor": {
          "ref": "d15b256d-6af3-4f77-afc9-cc6d871cb8f1",
          "length": 253,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "87dcd581-8b0f-4383-8dc3-54f71b785caa"
        },
        "item": {
          "id": "ed5881f1-a41f-400d-85c6-17b624b3af41",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "0fe9c459-39f9-4ad7-8c6c-5f06a8b4d2ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b99ca3ca-d24b-4d46-973b-00ad46f538d4",
        "cursor": {
          "ref": "a75b558d-9e69-4f37-9c38-17f028d6ab28",
          "length": 253,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "b0c861ac-c9ad-4ce0-8090-6fa6fe75f047"
        },
        "item": {
          "id": "b99ca3ca-d24b-4d46-973b-00ad46f538d4",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "45e3ce1a-5dad-43c8-a980-88c1ac726e9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0044546-d3c7-4f3b-855b-9431bfcdb122",
        "cursor": {
          "ref": "6ccf5d05-d091-4aa6-b150-295ce0a6c72c",
          "length": 253,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "39000244-ea6b-4e4a-be79-782a457c4d18"
        },
        "item": {
          "id": "d0044546-d3c7-4f3b-855b-9431bfcdb122",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "04763763-931b-482c-8ba7-c465167c014f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09ead1dd-41ac-47e9-8f8d-7b10c8af1128",
        "cursor": {
          "ref": "f4cfe8eb-99c5-4dc8-9fd3-cb4fb9040ba2",
          "length": 253,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "17fcc304-a686-4ed6-b117-e5cb4d743e32"
        },
        "item": {
          "id": "09ead1dd-41ac-47e9-8f8d-7b10c8af1128",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "fbc6ec09-6b8e-4d9a-aeec-4c2f46f91fe0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 222,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6377ea55-a9e9-49fe-90ec-185b87d539a9",
        "cursor": {
          "ref": "58fa5fa2-4330-4017-8ff8-591b53a45f8e",
          "length": 253,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "231d6539-4ed6-4282-b77d-d766c7b075ca"
        },
        "item": {
          "id": "6377ea55-a9e9-49fe-90ec-185b87d539a9",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "e9454dd3-92a4-43f7-9a74-1a3e0dd6e496",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4ee0367-2367-4bdd-a34e-ffc9c34f13ea",
        "cursor": {
          "ref": "eba61482-7a20-47e1-86be-5cc171706c8f",
          "length": 253,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "1dd33b6b-b2ae-489c-818c-846628e1f00c"
        },
        "item": {
          "id": "e4ee0367-2367-4bdd-a34e-ffc9c34f13ea",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "d7981d98-7a40-454f-aa29-344d33ecbd82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 295,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9186fbeb-1c5f-41b4-8c10-44a4c45aae5d",
        "cursor": {
          "ref": "66b90d23-c869-497d-b9a8-2b801bc189c6",
          "length": 253,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "6c26594a-1047-4341-ab1d-ef106b9ce9f5"
        },
        "item": {
          "id": "9186fbeb-1c5f-41b4-8c10-44a4c45aae5d",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "4e5dac54-870e-4072-8b8b-10b48c58def7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 259,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae79dfda-3caf-490c-b93d-ad5ad7c91c0d",
        "cursor": {
          "ref": "184cd410-9758-4ae1-9166-8c45504918f2",
          "length": 253,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "25bfca9e-5f9b-4992-909e-f599ae958189"
        },
        "item": {
          "id": "ae79dfda-3caf-490c-b93d-ad5ad7c91c0d",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "832ea6aa-afa0-4c3d-82c9-92c249ff1ecc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 260,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a93afbcb-e424-45ea-ae6b-a5bf96f8337a",
        "cursor": {
          "ref": "0e98b121-1a48-4957-9ecd-0e769684e6e4",
          "length": 253,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "02506e02-d108-4eaf-a487-4ef6d279dc27"
        },
        "item": {
          "id": "a93afbcb-e424-45ea-ae6b-a5bf96f8337a",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "ff1c720a-38fe-4dcf-a0e3-3310b9efae7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 302,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e68021f-155c-414d-a217-c68d4cb0e680",
        "cursor": {
          "ref": "415f3882-9582-4a7b-849b-58bdcc9de181",
          "length": 253,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "917b8318-842c-45b1-a719-fba1214b9dbd"
        },
        "item": {
          "id": "5e68021f-155c-414d-a217-c68d4cb0e680",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "b6f12a4f-715a-4eaf-956b-42fcd57c41ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 450,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b158dbd-376b-45f9-8e77-026a6cb0a7fe",
        "cursor": {
          "ref": "1d0a0245-8976-4f2f-8678-1dc7e0805579",
          "length": 253,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "b8bd0e5c-b69e-442f-90e4-e3ea7faacbfb"
        },
        "item": {
          "id": "5b158dbd-376b-45f9-8e77-026a6cb0a7fe",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "3971da7a-63dd-4bd0-bae4-0b90500a4fae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 270,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a22c745-d39f-4892-8349-c75af6078539",
        "cursor": {
          "ref": "78742c21-9346-4908-93de-9b9c24506185",
          "length": 253,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "ab6f86ac-679a-4f0f-93d4-b52c6d300788"
        },
        "item": {
          "id": "6a22c745-d39f-4892-8349-c75af6078539",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "9baf8132-390e-4f36-84e2-01e126cb9777",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 263,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b0b03d9-376d-491d-9caf-c6b4c8129105",
        "cursor": {
          "ref": "76da6021-d126-408b-863d-64beb946584f",
          "length": 253,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "a9d1f2da-2303-4683-8289-1b2fbf27751a"
        },
        "item": {
          "id": "2b0b03d9-376d-491d-9caf-c6b4c8129105",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "aa6fdf07-6ca7-4ee4-8c39-3f94d5331959",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 287,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffe36328-d080-45d0-83d2-599a8a6831d1",
        "cursor": {
          "ref": "c721ec6c-761d-4f77-8272-0a0665ddf7cd",
          "length": 253,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "4daf534f-5ef2-4279-bf50-4bbf01468de7"
        },
        "item": {
          "id": "ffe36328-d080-45d0-83d2-599a8a6831d1",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "ec4ce484-d151-458c-99db-a457fb585322",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 264,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05970818-758e-435a-8d03-5395ee628349",
        "cursor": {
          "ref": "6a25ce9b-5591-4235-b9a3-b9a38f4a119f",
          "length": 253,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "274c6e8b-c6af-42bf-9ab7-1206aa596048"
        },
        "item": {
          "id": "05970818-758e-435a-8d03-5395ee628349",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "96eab0b1-e0c8-4022-abde-86ae5f57caa7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 257,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f159803-c9ec-4810-9dca-07a41c8a3d27",
        "cursor": {
          "ref": "70f4b7e8-18aa-4781-953c-6e1898b21eff",
          "length": 253,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "85d88367-903d-4f7d-8fcc-a3461dc23e1e"
        },
        "item": {
          "id": "4f159803-c9ec-4810-9dca-07a41c8a3d27",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "8e6c9a93-5795-4a3c-8c78-1f368cf04517",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 261,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2e1576d-a311-445e-9c17-435644d0806a",
        "cursor": {
          "ref": "edf03ee2-195f-4c57-b751-a453e184f9d5",
          "length": 253,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "dfea1323-dfd2-4b9f-9382-286537e27e50"
        },
        "item": {
          "id": "f2e1576d-a311-445e-9c17-435644d0806a",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "9ae19760-6af9-4bfa-8486-5155c06eb92c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 266,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e691dc7b-a01c-4073-af99-e6249121e4c3",
        "cursor": {
          "ref": "56dfed9f-ae59-48b8-94e6-f7e25c5e998c",
          "length": 253,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "7c7957db-7494-45fd-aa6d-11527720fe0c"
        },
        "item": {
          "id": "e691dc7b-a01c-4073-af99-e6249121e4c3",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "4732b465-3a17-4743-be5c-bf5da348781b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 261,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f637edb6-3635-4996-b8b7-c976824d9180",
        "cursor": {
          "ref": "9bc54402-f30f-48ae-87fe-756fe43bad31",
          "length": 253,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "b54c4672-098c-4b37-a3ba-43f9c7d86f80"
        },
        "item": {
          "id": "f637edb6-3635-4996-b8b7-c976824d9180",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "de19c846-368b-41b9-9be7-4b015554aed7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 265,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1e9016e-0b89-42c4-95d9-7f423c71ca26",
        "cursor": {
          "ref": "0e655a96-8642-4d8c-8b75-a8a5223474d1",
          "length": 253,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "c5800063-fa47-4e41-9675-856e55096599"
        },
        "item": {
          "id": "a1e9016e-0b89-42c4-95d9-7f423c71ca26",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "d51f32d1-73bc-4768-920e-80f3cd25bf5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 260,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "427ca60d-fdb1-466e-9aeb-d1cf9234074d",
        "cursor": {
          "ref": "8f3d17c7-2f30-4535-b590-cdb1a2301fdd",
          "length": 253,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "0e583c14-3bcd-413c-9c74-8e8418cde774"
        },
        "item": {
          "id": "427ca60d-fdb1-466e-9aeb-d1cf9234074d",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "0fae5afd-5c51-417e-aae7-82ea9a52f20b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 258,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71b1ab3b-7994-4dd3-b115-841f4cb62014",
        "cursor": {
          "ref": "99d9e56f-782e-4dd9-8221-f59a0a44d29e",
          "length": 253,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "c9aa72f7-f890-4558-9313-fb73a534dd60"
        },
        "item": {
          "id": "71b1ab3b-7994-4dd3-b115-841f4cb62014",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "916581ac-15dd-484f-b6ab-712d88be3573",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 268,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c4bfcba-f67b-4d66-a728-9b1062b5083d",
        "cursor": {
          "ref": "06cacb4c-2c60-49a1-9fa0-214b346e9229",
          "length": 253,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "a73dc9a9-17b5-4195-91d4-570820280a36"
        },
        "item": {
          "id": "3c4bfcba-f67b-4d66-a728-9b1062b5083d",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "49dff01c-0461-423b-bf05-fb8eecc3bdfe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 280,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1232433d-e29b-4642-90f0-9fd88c93dbd6",
        "cursor": {
          "ref": "88b3e6ab-7df7-4604-8d11-7b099c91baa2",
          "length": 253,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "c5c8661a-3cc8-471a-8a2f-88811efbecc6"
        },
        "item": {
          "id": "1232433d-e29b-4642-90f0-9fd88c93dbd6",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "ee99f756-5c3c-4405-bed1-ed415563c0c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 259,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66ad555e-4980-449b-8ff1-24ddc3b51828",
        "cursor": {
          "ref": "65d74c58-a9a4-445a-88f6-e86f125df45b",
          "length": 253,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "5709a47f-d387-403e-b334-fddc6a8e53b9"
        },
        "item": {
          "id": "66ad555e-4980-449b-8ff1-24ddc3b51828",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "18e475ca-e8f3-4547-9a31-1e54a566bd81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79606e89-880e-40c6-91e8-3d09ccc11a21",
        "cursor": {
          "ref": "3201ad31-1c3d-409b-b10f-c579419a8741",
          "length": 253,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "dd23fb43-808d-4ea4-b2ca-ae3c888b51ef"
        },
        "item": {
          "id": "79606e89-880e-40c6-91e8-3d09ccc11a21",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "4233c213-af70-47b4-9130-a5d0f32068ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dcc1de4-5857-4bfc-84bb-ef1d51cbc34d",
        "cursor": {
          "ref": "0f29c5b4-a676-43d6-b8fc-dd7603979458",
          "length": 253,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "86c2ecb0-ad0e-438b-a4ff-78fddd01a26d"
        },
        "item": {
          "id": "6dcc1de4-5857-4bfc-84bb-ef1d51cbc34d",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "d13764f1-9ec6-4e80-913c-234682b26f0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5adc6fd-7802-4fe9-8d36-0877c8648348",
        "cursor": {
          "ref": "96f8f5f5-a994-46f4-89bb-b38186fa36eb",
          "length": 253,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "ed8dbc6d-be1a-461d-a072-344305b44fea"
        },
        "item": {
          "id": "e5adc6fd-7802-4fe9-8d36-0877c8648348",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "bc6a946f-814b-41ea-909f-7433d24fd3b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 257,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4ed3d4a-86d6-44ae-a051-d877273d69f6",
        "cursor": {
          "ref": "4f1144df-c6a3-4a94-8fbd-f5aa3f995f04",
          "length": 253,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "b460d435-01b4-42bb-9dd8-47e7011547f7"
        },
        "item": {
          "id": "a4ed3d4a-86d6-44ae-a051-d877273d69f6",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "9ecaa822-3581-4533-975e-9ded8029eb1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 154,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "533bffdd-7286-42d0-9c12-bd9ee8674e5c",
        "cursor": {
          "ref": "b07f4474-7cca-47d8-a2c1-2787c02122f2",
          "length": 253,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "4207e5ba-2adf-4a6d-a543-b98a13fc95b5"
        },
        "item": {
          "id": "533bffdd-7286-42d0-9c12-bd9ee8674e5c",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "645cab8d-47cd-48e7-9587-828613ac54f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "274bc383-fca1-4d79-a4cc-b51e5b1bd4ea",
        "cursor": {
          "ref": "7579eb27-5e57-4490-8518-df67cbced4d4",
          "length": 253,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "750d6505-a083-4ce4-88af-6393e7fe8d86"
        },
        "item": {
          "id": "274bc383-fca1-4d79-a4cc-b51e5b1bd4ea",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "a671df2b-73b9-4565-ae27-93b0f585e6d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4c7e4c9-1dc9-412f-883c-8a7071f24d85",
        "cursor": {
          "ref": "4d5d6117-6cac-4491-98ee-d51cc34878f6",
          "length": 253,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "5532409f-1618-4c14-81b4-d2f651203bdf"
        },
        "item": {
          "id": "b4c7e4c9-1dc9-412f-883c-8a7071f24d85",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "d1e7269a-222e-4eae-bf9e-966fb283de61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "956eec54-1517-40a2-ba96-de26e0c3cc02",
        "cursor": {
          "ref": "55ff27fa-4a05-478b-bfed-8b59b8644775",
          "length": 253,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "2ee08634-b34b-47ec-8335-61cdcfc9147f"
        },
        "item": {
          "id": "956eec54-1517-40a2-ba96-de26e0c3cc02",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "83e6af3c-6d10-4c3b-a4aa-5d8bb375272e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 299,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ef3b3a2-44ff-4429-b922-59cd2cf5fc37",
        "cursor": {
          "ref": "b77201de-bb05-475f-bb2a-fa5d6bc01d43",
          "length": 253,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "d7acce1a-8f9d-4bf3-bd14-868ac9522bcf"
        },
        "item": {
          "id": "6ef3b3a2-44ff-4429-b922-59cd2cf5fc37",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "07cfc2d7-3cbd-4b1c-8873-93c1b5e1bd08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ad34b60-fa82-44b6-a8ef-cb57f315f48c",
        "cursor": {
          "ref": "08225ca4-d4cd-4dd2-b65c-c241dee1340b",
          "length": 253,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "113165cb-b602-4b39-92bb-76cc5ee46dd0"
        },
        "item": {
          "id": "5ad34b60-fa82-44b6-a8ef-cb57f315f48c",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "f654b605-da69-4134-956f-8e19b9d6d0c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11807bc0-8137-45ab-ac33-0c228ffdcd49",
        "cursor": {
          "ref": "c3895b46-cc67-4910-949c-dedf6269edd1",
          "length": 253,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "81275cb2-485b-4cd6-88c3-59c1d99f92c7"
        },
        "item": {
          "id": "11807bc0-8137-45ab-ac33-0c228ffdcd49",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "505a27a1-8e74-48db-9bfb-e04591f36f68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98eb34d5-6ae0-44c7-bb22-b28a30590665",
        "cursor": {
          "ref": "8d27242a-f542-4927-be76-4f083748ccfc",
          "length": 253,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "759c14ef-37fc-41f7-aa6b-8d152487d982"
        },
        "item": {
          "id": "98eb34d5-6ae0-44c7-bb22-b28a30590665",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "a0abe212-7776-46c3-920f-c9d70ce27998",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebbc7004-981e-4f42-b45e-44d548f854aa",
        "cursor": {
          "ref": "b81c9e07-6d1b-4b84-b838-dbf30c78a6bf",
          "length": 253,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "d6e40051-9532-42cd-87c8-0dcbeffd945c"
        },
        "item": {
          "id": "ebbc7004-981e-4f42-b45e-44d548f854aa",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "6d0b683a-9501-433a-8eb4-a4bf620bac87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26ba032f-4f63-4a9a-9ddb-da621ad9b357",
        "cursor": {
          "ref": "16fd91ee-f058-4742-9ebe-ec73a3f36f71",
          "length": 253,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "c626eca9-2aa5-486d-82f1-5c1fb7371593"
        },
        "item": {
          "id": "26ba032f-4f63-4a9a-9ddb-da621ad9b357",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "429d2ac1-7401-4df6-b896-1d9f62d47324",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "724ae5a3-1417-4d1a-ab6e-82da19504164",
        "cursor": {
          "ref": "fbfb98a8-4dc7-4c9e-95e3-084114a69f3f",
          "length": 253,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "fa47f696-475f-479f-8c20-a8bb170f75db"
        },
        "item": {
          "id": "724ae5a3-1417-4d1a-ab6e-82da19504164",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "d40eb722-3b09-4917-ae39-7cda7c10d197",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13506961-ea7b-4f92-b50c-9a3ffa5c89fc",
        "cursor": {
          "ref": "1655daeb-dd18-4279-a3e7-5eb7dc5e0215",
          "length": 253,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "408646c9-ce37-4e02-957f-135ede0f2b63"
        },
        "item": {
          "id": "13506961-ea7b-4f92-b50c-9a3ffa5c89fc",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "144cb6f2-d68a-44b5-9bb2-9eefed67463d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9d60f1e-ebff-4bee-aed6-3e3b5c163ea1",
        "cursor": {
          "ref": "a8929aa3-a79c-4cb4-a3d9-8b7201b293f6",
          "length": 253,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "316499cc-0f43-44dc-ba51-d22ea13a4608"
        },
        "item": {
          "id": "f9d60f1e-ebff-4bee-aed6-3e3b5c163ea1",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "546e8e8b-61e7-44a8-addd-f1b057bacd19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c074f49-1ae8-4cb6-850d-1a67b8d8153b",
        "cursor": {
          "ref": "a4ad23ec-6227-4f6a-818b-c82eb8c32e7f",
          "length": 253,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "91d25fe3-f395-43fe-bde2-afefd10feb39"
        },
        "item": {
          "id": "8c074f49-1ae8-4cb6-850d-1a67b8d8153b",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "3873da06-1077-4b60-8222-2222911dbd84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "958219e3-6dce-44fa-a417-cc4dae1d3c87",
        "cursor": {
          "ref": "c40ae5f9-824a-432e-b7aa-a5d3cb5fac84",
          "length": 253,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "36d6f7f8-818d-457a-855b-7befb91fca8c"
        },
        "item": {
          "id": "958219e3-6dce-44fa-a417-cc4dae1d3c87",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "9d37babc-c58b-47b0-a2cf-238d90426b01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b5ae4b3-ea55-498b-bd84-63f27e7a2824",
        "cursor": {
          "ref": "e30da6ad-bea1-4237-8df1-4250e25b4fa8",
          "length": 253,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "3d7bc7ac-aaba-46e2-bf03-032db8fd09fa"
        },
        "item": {
          "id": "4b5ae4b3-ea55-498b-bd84-63f27e7a2824",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "24d0365f-fb77-4874-bd8b-7a8581957a4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0af0934e-0a0a-4f5e-a6e8-50677d785a40",
        "cursor": {
          "ref": "5bf27e97-599c-4285-883b-87a4db92295f",
          "length": 253,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "ddadb1e6-f3d5-4f8f-9b0a-e6c16cd168ea"
        },
        "item": {
          "id": "0af0934e-0a0a-4f5e-a6e8-50677d785a40",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "ed6031c1-0b4e-4f1f-a06b-91ec838fb813",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07bac418-0f86-438c-ac50-f7a17411059e",
        "cursor": {
          "ref": "11f9d8fa-d062-4708-ad29-ea57611e548a",
          "length": 253,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "9ba203f0-4edf-461c-9edc-d3820320425b"
        },
        "item": {
          "id": "07bac418-0f86-438c-ac50-f7a17411059e",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "b983de63-40ee-4019-854a-f59bf719235c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96636665-d8a7-446b-99a2-faa257f0d5ff",
        "cursor": {
          "ref": "bc9379ee-ad0e-45b9-afe0-0946ff946587",
          "length": 253,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "4d46aaa2-5664-4251-933a-5b6b360c49c6"
        },
        "item": {
          "id": "96636665-d8a7-446b-99a2-faa257f0d5ff",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "ae96cf8b-2c8b-4894-8da6-b2f5e5706906",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc028467-aee2-4a04-a1d5-339816da61a8",
        "cursor": {
          "ref": "101b1bc6-fccb-484e-81ab-4213d6bf032f",
          "length": 253,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "8a3da494-4ccf-4067-adf0-66bc25db568c"
        },
        "item": {
          "id": "bc028467-aee2-4a04-a1d5-339816da61a8",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "514dd5e4-81d1-4777-b38e-d9ec64706a55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb23d7a4-daf2-4655-b834-868030b94f5f",
        "cursor": {
          "ref": "11ca75a4-d7a2-4b20-9c19-a9f8e06c97f5",
          "length": 253,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "08ef168b-1192-4a5d-98e3-af7d1f28dc0e"
        },
        "item": {
          "id": "bb23d7a4-daf2-4655-b834-868030b94f5f",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "1debb5e3-8a81-4f59-888a-d702148fd43e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6fe862f-fcac-45bf-ac38-5b53f44ea643",
        "cursor": {
          "ref": "8a63e0ee-57ae-409c-ae1f-a799f1c5428e",
          "length": 253,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "9c150333-717f-499c-a955-721706cbd2c1"
        },
        "item": {
          "id": "d6fe862f-fcac-45bf-ac38-5b53f44ea643",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "74d7180d-8692-40ed-9773-bed0da77e819",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76e21120-688e-4aba-ab33-748173ba4d4c",
        "cursor": {
          "ref": "acc32ee9-8cfb-4fab-9275-c6a3a0c20b77",
          "length": 253,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "0a99361b-c885-4849-9c80-07393040d18b"
        },
        "item": {
          "id": "76e21120-688e-4aba-ab33-748173ba4d4c",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "b7ed8465-3c38-4e26-8d38-dfd5fd0795fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9f648a0-e99e-464b-aaac-9fa232f0e168",
        "cursor": {
          "ref": "3a801199-a153-491f-bd6e-9ba1dab7216f",
          "length": 253,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "a9d41abf-fbd9-40bf-b42e-fd8406f87b4b"
        },
        "item": {
          "id": "b9f648a0-e99e-464b-aaac-9fa232f0e168",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "c2daede1-c8e5-4896-8384-6127447f15ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a4dd813-4c2c-4f98-8a7a-ca20cec478c3",
        "cursor": {
          "ref": "3d691be4-7aaf-4c0d-a223-bbb306fe02db",
          "length": 253,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "41fb74fc-c8a8-4f86-9e4b-8a2d499774e5"
        },
        "item": {
          "id": "8a4dd813-4c2c-4f98-8a7a-ca20cec478c3",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "220772a3-7fd9-4990-8014-03eeed0522de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72ecd189-8ced-4c18-a776-5284edac4439",
        "cursor": {
          "ref": "97fd05fd-0eba-4b53-9985-c137b7c81087",
          "length": 253,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "ffaa9b5e-bd3d-45b5-8a22-e6917526b8ba"
        },
        "item": {
          "id": "72ecd189-8ced-4c18-a776-5284edac4439",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "827d0812-994b-42b5-9490-9d0891d7609e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e700c84f-5dca-49be-8fd6-93198cdb85d5",
        "cursor": {
          "ref": "47abc397-a6f1-498f-81c5-188d28a5a729",
          "length": 253,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "14609c45-daad-4a0f-9de2-fc9f0d323c39"
        },
        "item": {
          "id": "e700c84f-5dca-49be-8fd6-93198cdb85d5",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "2e505ead-ff98-41cd-b712-50e7b3baf0ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ff1562b-26ca-47c5-8d24-66e022457724",
        "cursor": {
          "ref": "4ed32f3a-7862-4297-a38b-9855efada5e2",
          "length": 253,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "3b8c0a54-7d69-4c71-8c0f-215317e10ed4"
        },
        "item": {
          "id": "2ff1562b-26ca-47c5-8d24-66e022457724",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "98d06377-8473-4a09-ba92-c12ee3a9ff4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7e07313-bbac-4c09-8431-bc65e6d111bc",
        "cursor": {
          "ref": "6a05362a-120d-4158-98aa-d6d2c381e3f2",
          "length": 253,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "a3d388d6-adfa-4445-bc10-46fc56172361"
        },
        "item": {
          "id": "a7e07313-bbac-4c09-8431-bc65e6d111bc",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "749cf1f7-e782-4326-b1b8-c4a3ded35753",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eca4556a-16c9-48c4-a1f8-f777565be353",
        "cursor": {
          "ref": "cab8ff6c-c2dc-44ba-9f69-eba6af289951",
          "length": 253,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "028d500d-17a4-494e-9cab-cbcdcbefa694"
        },
        "item": {
          "id": "eca4556a-16c9-48c4-a1f8-f777565be353",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "37e879f3-f3fe-4fa8-9ee9-468389c17904",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e726ef0-110d-46b3-b415-240d4214805d",
        "cursor": {
          "ref": "5221ff42-6cde-46f2-b4ee-8ff08c0bacfc",
          "length": 253,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "38704b40-1d7c-4e04-9be8-78c450ec84f3"
        },
        "item": {
          "id": "9e726ef0-110d-46b3-b415-240d4214805d",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "f04db86c-2feb-4ad0-aa1b-0db1f2198a8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e050384a-c1ec-4485-a06c-37fb25fdc12a",
        "cursor": {
          "ref": "d4e85be3-dc72-4f0e-9dd0-4da722218f2e",
          "length": 253,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "6cc5fe53-1790-42b3-9f9e-9691b0b44025"
        },
        "item": {
          "id": "e050384a-c1ec-4485-a06c-37fb25fdc12a",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "642c2271-95e0-4ce9-b46b-87fea8107278",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "987d26ef-73c3-44fb-9e02-bedfb63e1371",
        "cursor": {
          "ref": "61620c02-f18f-419e-8974-6d0f8196a07a",
          "length": 253,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "3b7ba946-1074-46fa-abae-9d758a9598a9"
        },
        "item": {
          "id": "987d26ef-73c3-44fb-9e02-bedfb63e1371",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "ab7d4845-8490-420c-8c37-556f64d85f61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0194b06-e78b-415b-ba20-014eed831d6c",
        "cursor": {
          "ref": "c249da03-9623-4f34-9808-4a32262ca228",
          "length": 253,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "09f49e31-4d6f-479f-91d5-6ec5c4ac8363"
        },
        "item": {
          "id": "d0194b06-e78b-415b-ba20-014eed831d6c",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "2b75f351-165b-4eeb-b1b3-5dbdc0a8a265",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ef80256-66a5-42fe-96e6-07042a334b63",
        "cursor": {
          "ref": "7d7f2f1e-c1e5-4110-ad4a-73e7cc4e9a26",
          "length": 253,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "1874cc47-1da5-4a88-99ec-55f8269ca84f"
        },
        "item": {
          "id": "1ef80256-66a5-42fe-96e6-07042a334b63",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "9a81416b-9164-41f8-9645-dfa93b78458e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c368f60-aa17-4c81-a98b-d40733e7ac13",
        "cursor": {
          "ref": "606c806c-3b88-40a1-9236-1fbc7113043c",
          "length": 253,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "e63350d6-22b8-41cf-afce-baf297d7d2c7"
        },
        "item": {
          "id": "6c368f60-aa17-4c81-a98b-d40733e7ac13",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "bb44cfd6-81b8-4f35-b092-028c8a317d87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "890e62de-8837-44d8-bc6d-9d76fc25a3e4",
        "cursor": {
          "ref": "cef48314-9cb6-43aa-8b2c-f87b86cac7de",
          "length": 253,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "9d266941-09a1-4e7c-830c-f17a87192c2e"
        },
        "item": {
          "id": "890e62de-8837-44d8-bc6d-9d76fc25a3e4",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "291259b1-6083-4bc3-87cc-f89cb587d4aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc3f9480-6f0b-4592-a0d7-7fe7a9ce1f42",
        "cursor": {
          "ref": "e2cbaf4f-9d3b-4b3d-b934-b72235827a21",
          "length": 253,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "32415783-ea53-4b5d-b8ee-7ed491c994cc"
        },
        "item": {
          "id": "dc3f9480-6f0b-4592-a0d7-7fe7a9ce1f42",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "39bc231b-ffbe-416f-9c75-b51ec2d1f66e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "294f77fd-aaa8-41fd-9d3e-bd603b3c8925",
        "cursor": {
          "ref": "079b03ae-b092-4b72-8950-b8075b491ddd",
          "length": 253,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "4ef074bb-1719-4adf-a7b7-0ef7ee50c0c3"
        },
        "item": {
          "id": "294f77fd-aaa8-41fd-9d3e-bd603b3c8925",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "5b3c7711-14da-4d41-8c0f-f081829badee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a341bad9-255a-417e-9e11-db26a63d393e",
        "cursor": {
          "ref": "a5a060f2-684d-4074-9fbc-605a8b265d89",
          "length": 253,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "97c12e63-1ec6-4628-b49c-f59ccef1e60e"
        },
        "item": {
          "id": "a341bad9-255a-417e-9e11-db26a63d393e",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "32a1e396-d276-4af1-9884-f9e88821ef44",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 31,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c55e57a2-1833-4d48-8e59-2da528478704",
        "cursor": {
          "ref": "19982fb7-ed52-43e2-8789-c617e3a87b89",
          "length": 253,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "b24db306-0f0f-43ad-8f7c-3eaab60b820e"
        },
        "item": {
          "id": "c55e57a2-1833-4d48-8e59-2da528478704",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "60c7ca4e-ccfb-4e32-aac8-e7e749cb9417",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 31,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c413b66-6977-49d3-8b52-43366736e317",
        "cursor": {
          "ref": "4c447667-0f56-44b2-83ca-4fe6ef634e96",
          "length": 253,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "2fbb407d-5589-444b-9876-c90bc09d533a"
        },
        "item": {
          "id": "1c413b66-6977-49d3-8b52-43366736e317",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "c974704d-d30b-49ab-917e-43b94c7433e5",
          "status": "OK",
          "code": 200,
          "responseTime": 259,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "5944249a-9125-455e-b52f-217e6ea71656",
        "cursor": {
          "ref": "0df4fef9-357a-4ec5-b0af-2b19cd2d0c65",
          "length": 253,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "3e4b9b23-296c-491f-9a53-6500edc6803c"
        },
        "item": {
          "id": "5944249a-9125-455e-b52f-217e6ea71656",
          "name": "credentials_verify"
        },
        "response": {
          "id": "64b9a046-0d72-4003-8b1a-f0eaa98b4db0",
          "status": "OK",
          "code": 200,
          "responseTime": 511,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "d76d174d-0d9c-4d90-8b34-a26edbaacff7",
        "cursor": {
          "ref": "a5b3be9c-fec2-473b-9aa9-b3782a791dda",
          "length": 253,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "de4bec7e-b3dc-47ea-9311-f8f9e963cb5d"
        },
        "item": {
          "id": "d76d174d-0d9c-4d90-8b34-a26edbaacff7",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "3a0a621b-9090-4acd-8a8d-50776c082c50",
          "status": "OK",
          "code": 200,
          "responseTime": 522,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:247)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "e84cd0b0-bef2-4d6e-b2da-75cbe52be7cd",
        "cursor": {
          "ref": "fd7e64ac-77a5-44fe-b767-2564a098c883",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "b621740b-df72-43da-8eb2-ffccc600df9d"
        },
        "item": {
          "id": "e84cd0b0-bef2-4d6e-b2da-75cbe52be7cd",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "8cc749c9-0219-473f-875f-9e96890fd8b4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 31,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e84cd0b0-bef2-4d6e-b2da-75cbe52be7cd",
        "cursor": {
          "ref": "fd7e64ac-77a5-44fe-b767-2564a098c883",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "b621740b-df72-43da-8eb2-ffccc600df9d"
        },
        "item": {
          "id": "e84cd0b0-bef2-4d6e-b2da-75cbe52be7cd",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "8cc749c9-0219-473f-875f-9e96890fd8b4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 31,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e84cd0b0-bef2-4d6e-b2da-75cbe52be7cd",
        "cursor": {
          "ref": "fd7e64ac-77a5-44fe-b767-2564a098c883",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "b621740b-df72-43da-8eb2-ffccc600df9d"
        },
        "item": {
          "id": "e84cd0b0-bef2-4d6e-b2da-75cbe52be7cd",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "8cc749c9-0219-473f-875f-9e96890fd8b4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 31,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1685a154-087e-4c40-9266-c3c3783725b5",
        "cursor": {
          "ref": "72c8eed0-8e9b-469a-af3d-0b6a915c3898",
          "length": 253,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "3f50ef08-397f-4a0b-8fbf-5b43c2c25013"
        },
        "item": {
          "id": "1685a154-087e-4c40-9266-c3c3783725b5",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "d841dcbc-4d8d-4f17-aef8-969809aba339",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 32,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31c23f32-fe6f-4bcf-804b-9f87b6895d10",
        "cursor": {
          "ref": "de10f389-bfd7-42a8-bc49-e7f985d5c975",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "a0e04b29-898c-40e5-9973-17a036011222"
        },
        "item": {
          "id": "31c23f32-fe6f-4bcf-804b-9f87b6895d10",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "52068263-de2f-490c-b738-69cf7025b91a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "31c23f32-fe6f-4bcf-804b-9f87b6895d10",
        "cursor": {
          "ref": "de10f389-bfd7-42a8-bc49-e7f985d5c975",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "a0e04b29-898c-40e5-9973-17a036011222"
        },
        "item": {
          "id": "31c23f32-fe6f-4bcf-804b-9f87b6895d10",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "52068263-de2f-490c-b738-69cf7025b91a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "ee068f6e-97ea-4c3b-8e95-b1a151136779",
        "cursor": {
          "ref": "0956d77e-8278-4ab9-8c0d-051e2f85d741",
          "length": 253,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "3b016754-549c-43b5-8d94-f972bab91da3"
        },
        "item": {
          "id": "ee068f6e-97ea-4c3b-8e95-b1a151136779",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "1be3bbc9-79f7-4b75-870a-d24616b1b8dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "e594399b-4f2e-4c1c-8eba-d863b0993c8d",
        "cursor": {
          "ref": "e8bcddf7-279f-4190-a327-75f19be2c98d",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "e075df73-3f52-4b39-b1e4-1f11c075ee69"
        },
        "item": {
          "id": "e594399b-4f2e-4c1c-8eba-d863b0993c8d",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "aec1280f-e148-4f57-b620-9c3c4cb0180c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "e594399b-4f2e-4c1c-8eba-d863b0993c8d",
        "cursor": {
          "ref": "e8bcddf7-279f-4190-a327-75f19be2c98d",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "e075df73-3f52-4b39-b1e4-1f11c075ee69"
        },
        "item": {
          "id": "e594399b-4f2e-4c1c-8eba-d863b0993c8d",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "aec1280f-e148-4f57-b620-9c3c4cb0180c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "905dd46b-b469-43ea-b941-40e5ee08491e",
        "cursor": {
          "ref": "52c84cfd-22d9-41df-b95c-c9685fadb50a",
          "length": 253,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "449f8b51-06b8-4b40-b3cd-2b1fd8576940"
        },
        "item": {
          "id": "905dd46b-b469-43ea-b941-40e5ee08491e",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "3c4c2dcf-a32f-4090-95ba-a1db339cda2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      }
    ]
  }
}