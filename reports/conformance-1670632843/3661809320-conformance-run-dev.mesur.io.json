{
  "collection": {
    "info": {
      "_postman_id": "f5f17919-82a1-4db5-be95-0f985635313d",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "e82d6061-61fb-4ec4-8401-239a323308fe",
        "name": "Clear Cache",
        "item": [
          {
            "id": "5c58a527-32ca-43b4-a635-79939d8676bf",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1afb0d9e-4b9b-469d-b925-a2b9d73736f2",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "46a30264-22ed-40b9-bad2-d08b0824ce1f"
                }
              }
            ]
          },
          {
            "id": "c22d3c19-672d-49b2-8ebb-86b7a489fe12",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "18f145ab-a134-41bd-a711-a2010e9386d5",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "c221e596-d386-4ed3-bdc8-fd0e8e02987b"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "fe1502a1-b355-4ddb-95f6-ad480dc27424",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "2004cedc-e214-416b-8963-774e5168b197",
            "name": "Positive Testing",
            "item": [
              {
                "id": "0dda850c-95e1-4b74-a846-6bf602e5e9d1",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "48aa3cb4-3643-42d4-93a9-f3b6cf373ce4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "98cdba1b-379f-41d1-be3e-4b5799146ec3"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a13df8f0-017f-4152-8f2b-044f0d5d7b80",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "33c68d72-de79-4a27-a270-208c88f60be2"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "78ffff23-cccb-4d04-92bf-10d7ca81e562",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "64476830-793b-4877-86f0-65d3b43afb39"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1c8d5171-dfb2-41fa-b8da-696b2239eefd",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "f177ca08-8760-4baf-854d-a13050b7f25c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5ab01982-887c-4e49-a9d6-9c49e8bd06f6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1e0a669c-03e9-4f26-af7e-2eeecaeb882b"
            }
          }
        ]
      },
      {
        "id": "d3311c76-932c-461f-ba7a-2d691f07668a",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "77b4ce9e-f2a5-409c-a294-f786fb9f3e73",
            "name": "Negative Testing",
            "item": [
              {
                "id": "81b80fd1-7c7b-4c18-b417-997e53389252",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "0c6197cf-39c1-452d-9f45-54b21795a2d8",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f5dc4d3-75f8-4799-a700-330fef53ac4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8bd93219-43b8-4dac-845f-e15397627a01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10c84480-093c-4724-abbe-ca2de4862bf8",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2883f483-4d5a-4bce-8419-85e57785fa31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7512cda8-d3b2-4347-b160-1b3b5622ebcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82b30438-9bf6-4c69-81be-445235df527f",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b14cd83e-285f-4c06-8575-cf936aff952a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "954dba01-60ed-4a38-a3ec-7789b01cac70"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "39391124-cfb1-4edc-9a7f-44c3eeb7f6ed",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "98b067c1-e191-43e1-bfb1-3a36e82895db",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c2b21b0-2d7d-4788-bc18-83635f99f999",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "84b9e223-d805-48e0-b1e2-0c7ff45f6790"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df4357cf-ad96-4a50-8c16-f8ea11cb48cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3e60faa-caf0-44b8-b47b-edce603d3486"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39295128-801c-4b42-ac0f-41fe5d7e1642",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "803ec000-48c3-499e-8a6b-ff5513b0a6cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "81597073-72d8-4e88-921b-107c04475f17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f464695b-a49f-46f2-908a-cfab7e0975a5",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "5f320969-d166-46bc-8a53-9f63af17039c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "6cd63405-66a2-44d8-a3b1-4a1f3a764d22",
            "name": "Positive Testing",
            "item": [
              {
                "id": "49ee24b6-057b-44ca-bc1a-e7b5bfd75efe",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5d2b44e7-541c-4682-b5ba-c5fa7d33122d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "ea0fef32-5948-485c-9726-5612932ac655"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "587328f9-a3df-4b1d-824a-d5e507b4275a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "6df98f0b-652d-4206-97de-6135bdd65688"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "320de423-84af-4748-8664-23576464460e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8a7d0d9d-3719-4e1b-b92e-93d8baf6fa8b"
            }
          }
        ]
      },
      {
        "id": "99413e59-7b94-45f3-b0f4-25f701355f3e",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "efc569a0-4079-41ca-abb1-a2417ecb9be4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f61ad4b2-2f14-44d6-92af-e3620a137c54",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "67363a60-c907-4e66-8514-178518c79d65",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad833330-91db-46b7-8128-bfaf6cf0e9c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "390429e1-2f94-471c-bfec-a21d4ea9de21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "900255f6-3c09-49b9-a808-50cee9ea3121",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "60a477df-d229-4b7e-aa85-35c8e8472890"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fec8f2e9-2614-4a12-813c-818e066abaf0",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "523da963-c096-4d13-8830-d4d1f412b60e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "162efe93-b10d-4c3e-8802-a2d5d5701fcf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72938d88-d638-4566-85ae-e7358cd5faa3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6704cb8e-7995-42ac-b468-6b30334682f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ef66ddf-3a0e-4ba1-82be-873fa4b8b1f0",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e173ae69-080b-46f4-ab27-b88cbbdf7e6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f272a713-b6c6-4c21-90da-37b66b9f6a7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3af8cdaa-e3cc-400b-a75b-6cfab352e9a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ac1ff446-5c64-4485-8688-760e1a7448ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d199d518-39bb-4de4-8353-d7f5c47a43d2",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4f8663a-8012-40dc-b906-094760736700",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a374cde-09d5-4e23-9b63-4bc6301d7c0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c654345-723e-40bc-bdc7-0f262d9c4783",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a40fe73f-6c80-4704-904b-9d5f5e1cba50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98df6351-0f74-4005-9cb2-000d8bea232e",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcb67951-1567-4abe-b9fa-93b8d7624a14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05d01298-4c89-4cc9-8425-3e5dacdd1142"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b5b189c-5917-42d9-a848-c81544060676",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2e8d89c1-7835-4a1c-937f-1032418102a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4f1f8f6-478c-421f-9714-b79ea910c9a1",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e733c45-0cc9-403b-ba76-78f398a5c676",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61f02c27-bee3-418b-81b1-62308770c6cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef2db318-cc6f-426c-b0a6-25c293d040f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5ebb77f5-ece1-4be1-b5aa-f787ed756c08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6117fae-e958-4f20-a83a-beefee2e6919",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fc911c9-7042-4d69-9da7-fa58afc1bf1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7db5b043-a8fc-40cc-87e9-d57e78c8d8a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b5190dd-1faa-4e4f-96b3-fcdd5adf64c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7a22cd06-f8c9-4425-918f-42700f946f54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52412b7b-7327-4ee2-b130-35c075e37e99",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f2537cc-df5c-4ca9-8d9a-810d8b0680dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5feb400-6a2e-4602-8619-5e0377f27b30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7968ef80-bcd3-460c-bda4-0896f9e6a80b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f03b4836-bbd9-4173-94b9-c3b08eb184a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2da7e0f-2a9b-4586-8d1f-d15d8895ca36",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f648c9c-4aef-480c-b1c9-a98ece3841f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ad47e5b-9155-42f3-a4c5-1e81c9aad0fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d3fec40-b5c5-4979-90d2-6e1fe3edbe3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5823d5f8-fe23-48b6-910c-0e0a1dfe6be9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1f5b52b-9e80-4ae4-bfc3-da31fc932423",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11724e30-4668-4062-afd1-b9c389af79a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11a917db-3bca-4f61-a5fc-56dd99f66565"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f0cd7e9-df3d-43e5-a0a3-76a6b2dfdf2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "721223f9-f1f7-4d0f-bff3-f5343244d472"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d881e10-243e-46fd-be67-ef6effccc53e",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbab91c7-a643-421e-8e7d-76cba3adaf7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6877a92f-3e06-41f2-a1b8-2f09ef1fe5f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55b448ad-8f0a-4d09-919b-7e3822aa2fa5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "47b54cf6-2863-4aec-966d-05943bb276aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d900f24a-4c31-4202-a2c9-44cd76e65807",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2156135e-40b3-4217-acce-23eb4ad8ffe0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0deb428-dd57-402d-b731-e7234fccf010"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f934515c-08ea-4191-9431-a871e98b514b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9c38bc7b-0b2f-431b-9ad0-dcd7ac1b5b0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ea275a5-db9a-41f6-8f08-f0e77c1d7365",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70cde7a7-7c5f-49c2-a86b-01aeb32a1f2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19d6d1f7-931a-4fb5-9e16-8f6742736714"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bc300cc-c71d-459c-b9a2-2582d935409d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b390e4c8-9ca5-491a-9e32-9cd5d9583f1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "358c995b-3b48-4ac9-8b5e-e4ca350944db",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40379bf8-f9b3-42f0-a286-cdf2df603eda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4fd564c-93ee-484d-9fa0-967e0131bee0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41c95ce7-5b0e-4bc2-b1fb-e01afcd15187",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4c813c24-0c62-49b2-9077-45641e621659"
                        }
                      }
                    ]
                  },
                  {
                    "id": "947ec4c4-be9e-4202-90a6-d2e0acd624d5",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d6a7efc-b7ed-428a-baad-996c20945b82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a25c7a47-0739-4a1a-b95d-d23a422f48da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74a4a972-e8e9-4c75-a31e-ff41f298e818",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e317f8b9-8cdb-47b4-824d-a641cb947629"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c23faba5-67c1-48c1-8696-8f20817af319",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc62d7df-621e-4320-8dd7-16d77ea1e5dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c1b91ed-51fa-4a7f-8633-7ee845bb6b48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b964702-2cb7-46fd-aed0-bf43bf323321",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8fafa9b2-eee5-44d2-b627-e92a131b8336"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2aa23cb9-11c8-4fdd-9333-83d813505166",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61a82c08-f0bf-4a13-b404-c19bd25774fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6d973d2-5856-40fa-a630-d28f865faf71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eeb1ed67-cf68-449e-a485-efde272eea5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c4d5de7d-a67e-4378-b7f0-555e363d1fb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "153344db-740b-417a-97e0-52d61c5675a2",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "286705b8-f050-4b17-a94f-53fa383cd94f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe197302-14d5-4b36-85f0-894cadda80e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d3f2da9-c573-4d8f-a98a-6b7551504ce2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "7207b7c2-afd0-4a14-9289-7319b69da459"
                        }
                      }
                    ]
                  },
                  {
                    "id": "663069d5-57b1-4ed1-8bef-713d6797c6b4",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cc88ee5-2df8-4185-bf57-6c007f20dcdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "879edec0-61dc-468c-aef4-8d0b27102fc8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4628b60b-2978-4bf0-9a28-599fd806fc17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6db1e4b1-2ad0-42df-9c53-80daba98b399"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e885fdd2-9504-4393-a023-85c5c1939edc",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea8a614c-352a-44ae-884c-f75182ab5291",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f899fb1d-d68b-48ba-a0c1-945e87001383"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9352a68-e4e9-43a2-817a-7c630f3d5a70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c648851f-7519-4a8c-a2ad-4041d85bd80c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fd2a7c1-cd2f-46c8-8dd3-7f7c4b10e99a",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edf5f639-fda5-4b8a-a21c-30e01a6e5f23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eaaf7f53-52a9-4c09-9563-a747089d68c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b71f209-7cd7-447d-af8c-3dbee02761e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "35f4d8b6-9feb-42a0-ac1c-5fbeaa9bd41a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de3f7509-957b-4669-9dbe-c624376b55d3",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "255471a8-5e7a-43a8-96fe-9590b0ef1733",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7bb0eb3-82c4-4131-8369-e52f613e82ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17fecf5f-dc84-40a0-ae5e-c645f0cfefa8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "797f6b75-f762-45e3-a085-7ed5f91f9caf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c7c88e8-0ee9-41ff-88f0-78600e9dc65f",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c0daaf6-3ca9-4145-988e-d29f5a9d3eea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ed95c95-bd6d-4329-8a04-ee56f50cabd5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2430588b-6121-4286-a410-79e08228afd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e01eba93-b707-4b13-8361-75dcf18636f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97cf24dd-b376-4d6a-8ec5-a115df736a28",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87668e5c-8635-476d-8619-8a5dd030d64d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24e41b93-1963-4e1d-9b94-4663ce59abf4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "689e2ed7-e9c3-4298-9f7e-68f67fa5b873",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "96ca0d4f-43a0-4bf4-a3a1-f7ad594cc872"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0532cc6-6ef9-4e1f-a41d-80a79efd04a0",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "adade623-c694-4061-a566-fc34182b1bd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8841bc91-1513-4985-b993-0f9635c00065"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "275b8c9d-f495-400b-bc43-4535fb2ad40c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0d14725b-42e0-4996-8e4d-95ef95c22440"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aac794da-35cd-4c7d-9748-caa128b95622",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcb9cb1f-f964-4c4a-bb74-a0c2cecb8c0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "420a3298-aea1-41b5-8fc3-03b5eedd2c77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8ee6026-3b08-47da-898e-1308570f6444",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ef1f3fb4-f2a7-4023-8c71-2bfd1817ff1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da70e747-0193-4325-a626-47f07b9e7bf4",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4aaf4f75-bee8-400d-8234-fa6c30a2089d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18391b37-5b5a-4970-9741-d2b3e5a2ab50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4d17c92-e3fd-4970-a6d9-2c5c3dc05494",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c49c4ce6-736a-4325-988c-714e71b5f0bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48bac62b-950b-4dc9-a859-f50c4fb8784c",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5046f4cd-5710-4cc9-9684-51164f1479e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af9f9477-2f7d-461b-a09d-d7e78b835bd8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc00de70-1ed1-46ac-84c4-6548d50da022",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6add2936-9ac8-46e8-85c5-c99fbf79025d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b2d6c0f-2638-4fb9-b27b-b756743384c4",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0ae3069-ae4d-4735-a889-10131edb1674",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1058f581-1a4e-4508-b6f4-91c9a19e37bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d925929-ae54-40ae-b395-7468a651b615",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7c4d56e6-9312-4e8b-bf08-0779d6ebfe95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbee01a0-ed4f-408e-baf2-ffefd44d62b8",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e185d39-9f9f-4dd1-baa7-ed4a0ced53b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf12bc58-6639-4c1c-9ae8-9fd7de1e4efe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "498cbda2-bb5a-435c-aa4a-9b869850041e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "bdf734ae-5444-4fb3-980f-074bf7de198d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c83bf112-2f1d-484b-bbcd-0595f3605720",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a748241-91e9-448f-a068-4535f20aa99c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9bdb714d-2e9a-441b-be4e-c976598555e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35c67edc-7df3-4d15-8b74-24cb89fc7fc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "fe1c7e74-3ad9-45d4-923a-1ed36ca3a136"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67986d65-d72a-4c22-8951-50e40bd2f27b",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5e04864-7e1f-471c-96d4-2c941eaa7ef8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63429504-02c9-49a2-9e67-ffb77df752cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dbdd028-75ff-446c-b4fd-e99a6aab1118",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4e75c76c-0133-497a-870e-69c4615d8d7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3be75134-aebb-49af-b847-5bcb6dbecb64",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad51abed-f9d4-422e-8fa1-67688f3ffd86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41041e08-6002-41b5-a723-25dd35f973aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f8abad4-6213-4dbc-8cea-451dee5d8564",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a9b7e685-0345-44a3-b6bb-ba37cee5160e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a6b5a1d-2ec8-4648-9fa7-b3d7428338f6",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcac3cbe-4ff9-4112-b4d7-f101f508ee98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57741905-9e47-40a8-a503-6f47c7f7958d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b034db04-fd33-4275-aa82-6cb526846adb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0e340422-01cb-443a-b805-9d9b662c2f75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0faf90c5-d930-4db1-ab18-4d9d8146514d",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3783ae22-4dcc-4a07-a492-52fa3265eb0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7bda8eb3-6c23-4b58-acf7-24616b4babc0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d0a7bcd-bdcf-4e13-ac22-0b5774356c96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "a3f2b4bf-d55d-4e9a-ae71-7a59e947ea14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2932a8b0-75a7-4522-aee7-a26db99d3462",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c7d850f-2e76-4ae0-8bdc-2f5d8580fb28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "34741f89-5be1-456f-8723-c7020185255f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96e6e3e4-760d-4ce7-9815-642ce92dda63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "84ceed1e-8a65-4dee-8b70-897921ff9dca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b3e8dbf-59d8-4d76-b92b-2a800944787e",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8575a4b-89aa-4ab4-a760-ce75d80517c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7199e805-f20b-4335-8511-02c34b9ad1a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03b2b08e-2230-4525-ab44-0b2fdd5d2cc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "83e2a6fe-bd22-446f-8360-99e8e26a888f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e282592a-439f-4f4b-abb6-1f97fc8cf059",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b00fe6e-cb5a-47c4-847f-54a0e95506be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84c0cf2a-1ad2-4fc3-8064-ca13e4348520"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62040298-89b7-40db-9363-303a9f0f75f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "c1e27e0d-e30a-4abb-9600-d113e82cfbf5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "180603bf-1d5c-4a0f-9763-98f3e56862d0",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5950519f-541a-403c-ad18-4341b5735569",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18ca2c06-cbfb-4b39-a52b-d4608edfd1a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "443a8898-b790-445a-afb7-fc3a9b47de9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "86b9331f-d595-4b68-a6be-e7c899f86708"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f30059c-1551-46c5-a85e-5276db3737c3",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bafb2648-f7f1-467c-9f22-7931abc4df1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed38ea27-fedc-4455-bd2f-992603308edc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a70130d2-e654-4025-8da8-67feb52b73dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "10cd7d2f-a951-4428-b033-df556d8aea9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ccc492b-5203-4880-8bff-e18b50770fa1",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57e79d62-6ab3-4dce-b7e0-4f82d85982a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c24a7923-4a4c-43b5-a4e5-0ee3f8a9af81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4dd339c-403a-4014-8202-a02d3a0f98fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "8ad8d0d8-2fa2-4ed0-8455-e62214e9a659"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd59127f-d6d2-46a5-98f2-f8948aa30637",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de20943c-17d3-4681-8a44-f911c669dbbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70d62ef7-a8b9-4087-bc8f-91229a380bfc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34672c2c-5ca5-44ac-909f-b1aae93aa173",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "c8ca1a91-6af1-4f1b-862f-96eacd225b75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "535e0986-6ee5-4d62-b1a3-91d402075765",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3b93f60-3215-4dfa-a3e6-61fe755dcfb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b45c8b6-07f0-42a4-a110-4c684c954035"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c938655-a2c2-4c0c-b6de-ddd6040ad795",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "97cd2ce6-228f-433e-a1a2-6e651db59bbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f18b089f-c804-432f-91e8-0098f9fda446",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba67d18f-6930-40fa-9aa6-90e2d2928409",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88f19a80-cd66-4b50-93c8-7ca84f4533a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e57b5f56-d218-4b18-9205-d312a1ce945b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "9c9e6262-b910-4d3f-8f62-cc0f8a5f3659"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e9edcb9-e779-434c-b55d-17a5fd568665",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca347673-c859-46bf-863f-a5ce366e5720",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c4ba956-499b-4c10-8ac5-fe350bdb5cd0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e63c3853-91f7-480a-91e3-e63f64f289d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3b864485-2133-4fef-8e3b-4cefab72659d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99ddd255-1b79-4cc4-8b85-74888b3632bc",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "894d4703-25a0-4cdd-9e78-931c43477dba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58a80ab5-95c6-4a1f-a4e8-896c2f1e5efb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fa3ad96-bc5b-48a5-8004-f4b4a1a9925a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "220a275f-d640-4664-9ec7-3a8dc4f7ee50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdacf512-2b47-428a-b9ee-0a511d791443",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db0a33c4-190d-4649-a5c6-d78d2126d1ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eac7b83f-181a-48ef-a3da-63f3103d8fb1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bd952ef-f2ef-4e76-9b19-ac599a146d97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8fabecc3-0f65-416e-9872-ad9010255d8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f040d5ed-559b-4655-b89b-84918285f6a0",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4a5bc3e-d0d1-40eb-a893-c4d787162fba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a99bc36f-5b6d-42e4-a225-41c7fc7e664e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0edcaf1d-4424-419f-8dba-3530549bea9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "79c288d7-68dc-45b6-93ae-d9b94f5156ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36f942dd-252b-470c-b92c-6024551c64b2",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c251e28-eb04-414c-b028-3d93cc90efa7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82cc846c-751f-468c-b885-1374d0221529"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb87626d-d6d6-4d59-b07a-486ddae5ea80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "38e77a4a-8ab0-4667-bdbe-a0885fbe0fc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d613e5dc-e1e5-4432-b25d-762db30de4bd",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d99b4c5-e927-4b8e-8173-a4db2c2381b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f4e85d2-2b92-483d-acb4-26e9e6d4748b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70f49f6c-05c6-46c2-b5ae-89533b34bb75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f9c78617-c4cf-416c-8770-6a19e7c36bbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe729cdb-e1d3-40fc-8292-1425d5e69dbb",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a37fc24-cd27-4254-a838-c7414053cecd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c28ac826-1a0b-4e55-8ce4-3923f8193d1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c23b314-c247-4c18-98a0-599a406544dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "6c4389a7-d9e2-4b3b-9a77-a7dc0419f6ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01add205-f73b-4bf2-badb-a84ae9400d21",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "072526a6-a666-4809-bf13-a8bdd27526f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7dab7f07-d836-4cd3-b4a3-5855e4d27378"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cdcdd86-9768-4d93-94a3-cc4a55e6188f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "9c95a429-282c-426b-bdfd-827cadc5c0eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "676a2297-0431-4f29-9dc4-b1579ce5cb8c",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb714eaf-f74a-4c15-90c9-9ae3dd9b2ff5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62aa8664-ed5b-4c95-b1cd-d049a6802cb9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9d692aa-74f7-4650-8c72-a10584a504ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2d89e375-d422-4589-afe6-30853f0e2db7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2097eb9-e0e2-4162-8cf8-e077431e0c06",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07935ae0-f1c3-450b-b0b0-b432db237221",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20b3f465-9c4b-4c58-9df2-557578868b48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7923699-a1d5-49fe-aeba-c792f5988205",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c5b90859-772c-4d25-afa9-83f828d9138c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "875eb45e-1ab4-4e81-a1ae-6d88ae441ca1",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea50e102-484e-4bcc-afd2-3484987e8db7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c589d56-4f34-4db8-9c7b-5ada13777ab3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3dd9c2f-26d5-4c18-aced-a6f393140b16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "51d4b9a4-a1e3-4320-896e-c1a6d1feb136"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55f69091-998c-4450-a1a0-8c6f2e8e09af",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77277cbf-4c75-48ac-8d72-55f0fb6ee73a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9113e40-4118-485b-94f4-411919937be1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4eb393f-6898-41b3-9e57-81847f034327",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "dfff3d7c-e576-481a-a3e4-4c30fc4eb91a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2294afe5-63c8-4d7f-b154-e91391ac9e95",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "189d5e08-ecb3-42df-b883-3115b238b397",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a597b70-baea-43d4-9f39-447a6c6b2f98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b77eb35-0845-442f-9db2-f9eccf8b3ef0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "7b3124c7-08e3-4d53-8440-22b888f26f3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "194c91b9-d09f-43e3-9bf5-97e3b4a08ed3",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74c80f0c-95c8-4306-98c2-c600a44a2a7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c315148c-8ec2-4b32-bc7b-31f7b90ccc7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bf1429a-3487-49f0-a3ee-07a681b78127",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "4c7c00e6-5bcd-47e3-a49f-218e318e4ca6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f254bd9-f2d4-4d77-b05c-de96bc18afd2",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "030e3b2a-9508-42cb-b062-3425861947e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf72430d-b0e2-42a5-8ea6-b924003f516a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6d9a862-eda1-4f48-81d8-b486175b52ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "3cb4eb09-a2e4-4c00-8b73-2a88ae2d9fdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07871a98-d6c9-40f4-9fb3-e8d2afbc8234",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7da86e93-29cf-4f57-92b6-28b17df680d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02be2ae4-a1b5-4c83-95b2-bd4bba90c591"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38f2a9bd-93a8-4ab6-9055-0626a7b56265",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "a0b02c99-9afc-4b96-8055-36cff6d50cf8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "031c1d29-1445-4dc9-b1b5-d15fc98e7f24",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21430f96-7f55-473f-8228-1a71355c76a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59f79880-6c7f-4dc9-8433-51ef8e0f40e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf3fc991-c9de-41b5-995f-d616533f812c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "c2b8e7c2-8272-4e7a-85d2-2c1fe0932b89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2529c13d-3c99-4580-8b63-5653b30d1ed9",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "626adc9a-95a5-4ff6-908e-e19509c47328",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "513ad5ac-d671-45a6-8e2f-b4bc3df803d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53ca5fcd-6cac-487b-9fb1-8de9adcb58c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "6ac64337-2fbe-4dc5-b4ea-e6e8e390f464"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dce95601-57f7-4cde-93b0-0b3738984850",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ae4d728-4365-4e7a-bb99-cfaf2cfbe7d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97ebe05a-a90c-45e5-ac43-6864acf9c458"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a322e39a-7674-4f50-b8b9-adf9b5e82485",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "8c237dbf-4556-45f6-b860-dde9395bab94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50075349-45ee-4bda-9bd7-582d8c639a0f",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9aaf575c-bd88-416c-a307-bbc7a9b2352d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "216b1a13-f932-4dd3-b858-c154b93cf56c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8dc19758-227b-4aed-a8f3-2a26bbbe9a80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4eba2080-1976-442f-9486-0f2cc0e31a45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bab338fb-2c48-4133-8319-d3f4213eab80",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52395774-5788-4a3e-8e21-1e28a003954d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fc138a0-22d1-449b-8e92-acfe8845139c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d52db8d-6cf4-4892-928f-20e168c71237",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "cf117b2e-8fc2-4fa2-9b36-29a1df0fa9bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96e48bd1-cf93-441c-9399-e3a810d8d777",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdde1aa1-6d28-42c6-b183-011bf005466c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cdaf0d40-3524-46f8-a4ef-c7813953c24e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e91a137a-eac7-41a6-a7bf-57b3f9526766",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3fb8853f-00be-42a4-87ac-aaa1f5b19e1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea3e12eb-a274-45fd-b1a2-8ba4e602b16f",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0aab1119-bb28-499e-a994-bbecd1dc8fa1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac63d9a8-9cc7-4f1d-9209-535b38e893da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72294856-ceba-4055-abee-18b44dd5afed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3267ba58-1442-4e9d-a51c-27d5cf499f86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "662b5e8a-dc8a-4bcb-bf37-6cecc279a138",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9097b4b4-a59a-430c-86f9-6468f0cfbe05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b10770cb-5362-4e87-8ac9-735a92fcb9cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcfd2358-8003-4850-aabc-0edd4e38e395",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "8b9a8d57-40f9-4983-b832-68e02cd3101a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ed2b293-11f4-425e-8259-2a8887855617",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d41109d-70b5-4432-aa2f-b86c81d54972",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42e75729-965a-43d8-884e-bb0738973ea1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ba61c93-b389-499f-b410-112c1fe048ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "a17fa530-8b34-42fe-bd11-26a0a1589cf3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70c8673a-58bf-499b-980a-cc5ad3a04fbc",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94d53652-65cf-4123-9437-014b63188bdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25bd8508-abce-41f6-bcf1-5fde99641632"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93f3a9f6-4f3f-44ec-92a3-40b4af12a3a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e7de23ee-fa25-4aa8-8576-a7161135be5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5317f647-8f45-45ca-8d03-46dec23aa9f8",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84462d0f-c083-4945-9e67-3ca33d7c1485",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4cd7345b-cb5c-4273-8272-19135221ea0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7d691f7-44df-41f5-bfd5-9a4429cc3e1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9cab92c3-d434-4d2f-9cac-92f66d25ec74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b18305b4-c02e-405e-a1b5-8e34ea382849",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d28753e-132c-4dee-aae9-a77b48742216",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46936490-88c4-42b1-aa11-0ab6fdd93f1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4bee8e0-9996-4153-8b71-3fb51097e326",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "31091063-b42d-49d7-a299-688ab5d30157"
                        }
                      }
                    ]
                  },
                  {
                    "id": "812fac3a-1b60-4be0-854c-2621d01b7a64",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a813d89d-54f0-4934-85e5-ea5c1421ad6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d6b5623-b4fe-4a62-b167-e85d52a729e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42fc91fe-2071-418a-b10c-dd787f60557e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c0704b03-e307-4698-b163-5c4d173c5c21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eaf13cc6-7235-4c33-9ee9-11c0cbae7142",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69b4d1e5-0ba4-4b66-bea5-295fa0b90fb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2139506-ba9c-4152-b011-45e7582b5904"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c2126ed-6362-480a-a244-e2ab73dd5824",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e4e92e9d-4b9a-484f-a7cb-3b52dd73e3f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed4e9ac4-b475-4863-94b8-b6845bd27369",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb22b338-3730-4952-8a49-7004951f0a29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cab957c5-6d69-44bb-86a5-e05ba085163f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ac51967-07f0-4127-a302-17a33bb55be4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "4bc1a9ef-157a-4838-b61b-ad25a02f7694"
                        }
                      }
                    ]
                  },
                  {
                    "id": "798814c3-f9db-4a03-bce8-ffc99dd5afa7",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7eb5ebc7-d701-49e1-91a2-01b4e3403d04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2b6c1cf-8bbe-42d0-b2ec-38eba4b71fdf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a4d7417-55e0-497f-806a-dfd9f213e227",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c6bd96e2-42eb-4306-b6bd-03e6967cb104"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01d2d67a-ac9d-439e-b0f7-c69857049848",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "335f363e-4293-463f-9a13-04795e2ab76c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fb7e2b7-6664-4dfe-be48-815366558321"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac2fed81-159e-405a-a0b8-67638224918a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5815d678-e0ab-4a45-96c9-c0f4148f0761"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d8de215-55fc-4976-8bbb-ce5c86f4c182",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ce22ed2-a2e0-4c9c-9b0b-73572a5f3165",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9e6d4a8-3f05-4a56-963c-3c15c7198561"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08da7eb3-e5f3-4df8-b025-98616bb7afcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f736e7b0-d3e0-4a57-a596-9e55a9871847"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17738137-e5c4-44ae-85c5-94d5a315e17e",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8914ed9f-d67f-407c-a850-da888e6eb9f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76aa67a2-ade9-4261-824e-14341e2f39d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2309e7bf-602e-4833-a383-2d415bf8ca69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a25adc83-c2e6-47d8-b992-d6d6d7ab490b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6bb7d5a-e615-41af-ae20-a11b90049735",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cff1e545-ec8b-49ae-8b1a-dbf513f170d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d0fae0a-9094-44be-9ea6-33eee05cbd09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51ac51cb-1338-479d-a201-9d068282d68c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "dadb7f7a-0a82-479e-8ec8-a7237cf0a88b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc845dcd-4d03-4752-8fe4-7c0ba48b8964",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1aac13b6-ce77-400c-8a80-7aaffeb320a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "212c6534-2f8d-4fe3-9fb5-744da60f8c1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c66a748-edf7-4096-ae4e-e09f3215b637",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "9150f8fd-6917-4dcc-9890-b98960e840bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abfcbc28-a359-455e-bba7-ee67530b121e",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "564c9f7a-141b-47f4-b7ee-75a1d46b947f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d34d59e-fb77-4418-aff9-fc3868181c9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce9bad2c-51bd-45f1-8d71-1b9fc51cd061",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "34e0c999-c9b8-4010-8851-92948a690b0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41eb9b50-4767-4128-b61d-773bb2a9ff46",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d806c025-a5d6-497e-bba8-6c1436aeb857",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c206c70f-9401-4b26-b252-b082e3963deb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36657385-d31c-4732-91c3-453f6b9a0f70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7debba4e-2795-4fdc-a6bc-d10d4c42d6d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "279b9901-7f4b-4a1c-b58c-05cae3e42317",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91c722c3-595a-458c-95ab-f15cc2612695",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61d07154-1059-4ae2-886c-97c31528566f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "869a2d84-320a-486e-91cc-7f78233c1cc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "20059152-cf1b-4a2b-9563-a664aa6a094c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe867192-9e9c-4853-a30d-919e2615ad4c",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c33d8267-55f0-4b83-98d0-8a2abdbce8c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24c53459-584c-487f-8676-69dd77a5e3d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f13a8960-865c-45a1-ae52-5ec12cbb4d8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a574d3cc-2a26-41d9-8c7f-cfd84d36e151"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92e1a36d-5892-49db-a7f8-7a36374de077",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50e71428-30cf-4b91-96cd-9af2d2e5d7fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07bb317b-7306-4e67-8a47-a6c58e020f38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b770a78-c41f-4f23-8efe-eb66b19262b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0082861a-b65d-48ea-92fb-a3580fbc0548"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd796adb-6998-4e23-9e9a-1e83f7fc1ccb",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9850cb86-20ee-4b3c-9647-d655659c02af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41b86ebf-813a-4dcd-96d6-96e9c909ab0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5074af5c-b74b-49cd-8d5a-27b82a3cb9c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "b6e4a30b-25b1-4f29-8f5e-90e3434f6d3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35319162-e6cf-4771-878e-fc98f7fe263d",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8fe2ab8-7d82-4cfb-b654-783024cfdac0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3c210f6-71b0-4b23-b993-9f91ebffaaca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "389fb3dd-ef7b-4bb4-894f-a452d49f06ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "5bc33570-7a50-4f07-bcb8-85b3aacbf413"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3d51a55-4cb9-473f-85e3-7a10d9f78560",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56cd1a4a-cccb-44f0-a20f-4cf1e5a25920",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4763b06c-b38f-4e3c-b9e0-7d162bf9a349"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7efbbd1-577c-40b6-be18-3e7ae67bb433",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "7676c551-9b78-42d0-97d6-7574a2131f57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbfee104-86bf-412a-bf6c-0841afc8d2d0",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eac9fabc-9623-439a-ba03-c1c21d3bae49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc3a8e04-ecce-4eae-ae5d-c8cfe8144229"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ed8d995-8185-4d91-883c-4b0fdf230a10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "ad7c4293-869c-4d24-a713-ca4eb1ea13f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd2751ad-8586-44ed-a488-9d257a8a9d1d",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb852a44-3566-4853-b844-95dc05345cbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6fc1cbc9-0415-43e3-924f-68a8ea71c10a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7eb0a897-8788-438c-a449-536b62dc8e01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "95dcef4c-d0be-4ba3-b988-0943def7df08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "689a69df-9143-4b2c-bead-05f048ff991d",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ae5927a-fa80-45d6-8ee6-edfcbc938e6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "60e579b0-dc29-4f54-b148-9bda98e3ed9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6165a421-b102-4f99-afcf-d5e3a1e0eec5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "9e944a86-5df2-4fb9-b4b0-abd3388435c5"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "60f6a9ee-f65a-4acb-8346-873d307c0582",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4c12be97-3d2f-4c2c-b2e9-50bc5385ccc7",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cc8b5c4-209f-49ec-abd4-1f7a0c224ad4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "017ef75e-dfe0-4b07-9730-803dde2d42fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d43af25-6816-4a1e-9a9a-5a7aa8b26df5",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "01a4cca6-e814-4f7c-ac5c-0abf942038af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97d40056-121a-41c0-825e-e0f29a9ddc32",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddac6bd7-54bf-4092-82ef-f7f86ccdf112",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "caf8f3ee-4df5-4fb0-8ac3-20b6fcc5a990"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e152eb9d-9ca6-4347-9ffd-8f6e21b15da8",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "b353fd68-9605-4336-87c3-eebdd40bda7f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a418ae22-86d9-4ea5-91db-2e08d0d332cf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0fbdcf19-58cd-497c-9a75-c08e97fa00fa"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "648bb02d-92b5-44f0-a98b-a9801a5c64f8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c054e187-4893-49f1-9ae7-6427da3a9035"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "123eb3fb-2d3d-4500-a0a3-fc3ecdfb630d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "fc84d5e3-ba61-46ed-a614-49abc551dd3a"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "9f81ac31-3b35-4a3c-90fd-986a0920de96",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6a6361b9-2efc-45c8-8833-5cc60f685650"
                }
              }
            ]
          },
          {
            "id": "28f74788-7123-4146-b3f0-4846ee892d74",
            "name": "Positive Testing",
            "item": [
              {
                "id": "8f5e7d1f-74b5-43b4-8637-88a9de9025ce",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8b3caa40-11ef-4608-9590-ac2f97ede290",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bc75737d-df12-4931-9e22-70c5dc0f6bfb"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8810fab2-27be-4fa3-9270-407f6dca560e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "550a28b5-021d-4767-b326-bd67b8549d7f"
                    }
                  }
                ]
              },
              {
                "id": "64cf2986-63ce-4a66-8ae4-dcdd4ca3ed06",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f94c86fd-5166-4482-b935-af3f2ab93e87",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4c02f51f-d791-47b1-a03f-c5a97e806259"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2f11a76e-be26-492b-b978-fcf1b5447ce7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "d4fa1a26-397e-44ef-919b-084c680a26e4"
                    }
                  }
                ]
              },
              {
                "id": "8e558df9-8bd8-40ec-9df7-08b6a0ba7037",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d14bc038-4eea-403b-a14f-131a9bee7619",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "de81d842-0756-4a34-8496-18741791b4df"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5d5ecdaf-94a9-4157-9955-5dd6e19ac41b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "d77f9649-5a1b-445c-83c4-7954572828e6"
                    }
                  }
                ]
              },
              {
                "id": "bc3561e5-ddb3-494a-9bf9-6255e2fe7484",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8b86e767-bbed-41f5-9573-a33c8f9900c3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bd8083e4-dff8-4e29-a586-8c18e23f3a42"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8c4c3c78-4734-4109-b2dd-6cae7cd7ef10",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "458297fd-f643-4564-828b-096c0e24cff3"
                    }
                  }
                ]
              },
              {
                "id": "ff074cbd-8207-4e4c-83f7-28101213f82a",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e3a74b43-8d44-4d26-8f40-3ea1eb76506e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a3e416a4-cc66-42a8-972a-5b11abcafccd"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0a43e59d-21c5-4599-b253-49eca1848d33",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "c445fb3c-46fd-42fb-85c9-a743b073b42a"
                    }
                  }
                ]
              },
              {
                "id": "e2c50910-6bac-4787-b30c-741069df574f",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b4e0fb6c-b201-4108-8478-61c35dfc7f88",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6409e0b9-47e0-4b93-a422-d3f0a22f2d0b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cce8ae36-0caf-461c-949e-5ef52732f41b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "4fb139d6-48b5-4923-bec9-9cd303d87f03"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "9c491e76-25c1-4aec-8745-c7cef479650d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b4ccf8fd-d92d-464a-892e-7840365db141"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "28225674-d43f-4158-bf25-621429822e42",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "724c8b47-841c-43d7-85d0-a6fcc90c9c22"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6dc2dfe1-cc74-4eb4-a3ab-5aa2d74b1cd2",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "73c86a26-4282-41ed-96a6-71e2f983cc55"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "36756a0a-dabc-4f2e-9719-baf6cffbd124",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "528b23c8-70c6-492b-8f51-a5caaf611744"
            }
          }
        ]
      },
      {
        "id": "981dda51-efcb-496e-b532-e3a7996bc0ba",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "5c8dfaf1-0742-4817-ba79-88d79e29756a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c3c43818-d37d-4621-9a6f-f5b4f1ba194d",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "4ebc12ba-9ea3-4a8f-ba1b-c501910a7636",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2d9713c-e691-48bd-af2a-fc3ff4877f97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e13f8b50-421b-4d06-b0d9-7a798b566fe2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2870375b-c7fd-4546-89db-06301cefe1f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "332d1997-e16d-4a68-848d-51e447a83b90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d45f7b1b-8ea7-40be-9d25-6cc2de3c7048",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3307ea0f-d48d-4895-8b31-8a629c29ea93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3f7736c-1b0c-43df-8d85-a62c438e9a35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8f32c9d-0f02-4fdb-a6e0-46cd7a37d4b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "07185de6-da39-45b5-9c82-04b92cea06df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0de73672-3ba9-4187-93de-d5ea5c748d69",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c517b791-ba20-48a4-8bc6-51e1495aa60e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a5384f6-0a2f-425d-b8c6-ecfbf4f3cd3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c671ebc5-71e4-4304-b4ef-50970d0b20a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "090df2e8-21e8-46ce-98eb-506bbef4d745"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62f08258-90d4-4434-a13f-ddfe644abf5a",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce73cc5e-c8c6-4865-93a4-75666606c6b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8c16b14-ef94-47b3-9928-734cc3b2f66a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4ba070c-51aa-4373-a35b-37b83458588b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b7094afd-010e-4774-a690-4ab0994e1d61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fabd45b-461b-46de-8001-a7b1dd573fcc",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79cda0d9-03ec-483a-9a2e-9c896fb3b6d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7071aa2-d7d7-4016-b3d3-9e76505642f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a825dd7-72e0-4a38-bf3c-961c73af2803",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fb05e546-87a1-42b8-a9b6-dfa6ca7d587b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "964cc477-ac95-4b37-8019-f029a96dbc81",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40414701-a4c9-4a81-be21-ae14997ef333",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f2cf976-0e09-43f6-ad6d-b522a9de9613"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bbb5ffe-a21c-49be-a549-cd58cf602131",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "54f658fa-055c-41cd-a0c9-a69ac395b90a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30e7845e-3143-4f95-99dd-11b7b5efdda0",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a6795b7-d7eb-4ec8-ae46-3da7f39c4bf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4d5ca13-0cbc-4c6e-a455-601069189e58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01913f34-aecd-48d2-9428-80cc60475478",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "f21abf7f-9992-429a-8945-a8b3d878c142"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8945375-23ce-4231-841a-58c9bca15ad3",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b209ba85-996f-4b72-b07d-1ea0410d6495",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4fad7208-14e1-4d1a-941d-06aaf5364b76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cff31fc8-c474-4e14-8a86-22ee2ae92014",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1e8ce7b3-bb7a-4b37-b71b-e74cb76fd42f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e44f4b59-a9f6-44e0-b219-c3f9ad860cdf",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5896fa8e-3bcc-4699-b94d-7dd03b720622",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8dd37196-661f-42b8-830e-8393d387c03a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f27147c-79f2-43b6-89c8-4b1f9442041c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8380313d-5d4b-4c50-bc38-72812e90795f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8bd4257-8205-4ab7-8d89-7273f638513e",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f489ab8f-0f22-4f7b-a95c-370dca44fc6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "209f19ab-b839-4250-8dab-066312f8cefa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0601950-5ea5-492b-8ccc-3d404a602aa3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6a758e81-bdfe-4ca8-9e56-139cec7b7242"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c55e3eb-6b36-47b8-bcf3-15ec82974767",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2e63c16-62f5-45a3-a356-ed1e55e379bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40d195e8-4d40-4571-ade6-605669492247"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85705a2d-d6a2-46ec-8a48-7c2d93c24dbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "82863322-6bb9-42fa-ad54-de1a15ff10ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "082594c7-7b1f-411f-95eb-11c1310034db",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "332b455c-a42a-4363-97ed-459f3ce1dd44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4df95f1f-65f7-4617-96a1-68e6ef435fc5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "405e7f9d-4325-468f-8be8-1d7a2ddc41e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "820f8e06-0549-44c2-bd9e-3d3e8ecbf656"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3472bb1a-e059-463c-b3e5-b65a7603001a",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "505fc500-c026-4fc2-b703-f4c75732bf22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5dcc65b5-41b9-4cfc-a1b7-f60855f59c65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a6fab29-39c4-4fb7-a5f5-4e366e929ccd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5a2db642-6103-467c-8149-2bcd3fe1bd27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c890c404-ee0f-42e7-882e-71a044cebb3a",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "869421e2-037f-4c2d-8f8e-3b188beb79da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97eb3708-70d0-4b61-94a9-1731f427c0da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "258365e4-1d23-4ead-a776-4c89222c6dbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "f6d4f9f7-c657-4dc9-8ba6-d3cc55bb75f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7a2e46a-148e-426f-a5d2-43b2e0cfa1a6",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fc93af1-ed39-4659-bd59-bb1a476ed045",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7da12dc2-580b-48dd-9553-206c5a5d368a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8375f219-870e-4348-b6dc-7a485915e397",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "076a603f-1947-4dfe-a9dc-5a00d147e80e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc24b75d-d79d-4250-b29b-00628c0eedad",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "040c77f0-121b-4982-8c3a-3082f17f3966",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7c8cc1f-8950-4698-91db-2313faf499a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "888d43a1-c4cd-4d7b-b447-99a163cf5bd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "7f484422-ae7c-4aaa-a5ae-6a2e0359af41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74b40791-95dc-4ecc-8fdd-7ddfce6f50cb",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a95c9b3-0d8f-40df-a978-81b46c155e06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2063c719-c723-4249-9163-488ae47f143d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddc83f46-b41c-4e78-a567-a7648253c5ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "b2c0affd-0974-49a9-8eb5-f8013abaee37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "853373c0-cde8-4ddf-b9c3-18fdc5f975be",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba77f831-c510-4624-9460-a7fd9aec7105",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c40abb5e-13fe-440c-b949-3d0ee339a875"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bb0e38f-c3c0-4940-a8d8-f8ec60032980",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "847e3594-b28c-40ae-9bae-3336e48f9a04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f987a57-f60d-4adf-bc93-56e5532c8431",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7665b0f6-6a71-44d1-a548-4227faedbf76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b32f194-a3e2-499c-9939-4a39737af1c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e7a3cc3-5d50-4c9b-8cee-09613d9bd499",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0f238f7d-b0da-460f-a2c2-77a49a0648d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8416fc90-fab7-4684-a194-cd0f5664f575",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d61bacbd-ef2a-405a-a5a1-7b0a0cdf0dc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9e420f7-3c79-46bc-adc9-6a76a8148b0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4aea105d-2e50-4bed-b79d-ffb8e875ee21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "77054293-ef15-4145-b1a2-53b2c130f2fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "386f6925-0cb7-497f-8c4a-d5cb777d2d1c",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e98b9302-01b8-4d6e-8e01-4772ee6b231a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c5a428f-2439-47cf-acef-25871424b12e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc8a6d63-215a-4880-bd58-d0989621862f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "44e4b8d6-48d8-4147-b3b5-0945fa18bdf6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "caf57417-369a-4ca5-8baf-93daa127ce56",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69c8c9c9-bfb3-4e4a-ae72-2c6adc2512e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6cacb342-532c-4506-b45d-932538a09b18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a40ad33-1936-4871-a609-06f6bd44e9f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ac9606a5-1bbe-48ee-a99b-fc0595d43ac9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efb44210-f5ec-4d4c-8d8e-feda7dcf9890",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "183fde68-d0e3-4333-8990-ca42ee739131",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a1b1659-8838-4563-a686-4238e1b8ab5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e72ca52-815b-4394-b19d-98d16628d067",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "62b3bdd2-f04a-40a4-a2ae-1f207a170620"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce2eaf2e-0ef1-49f7-8e3b-742816773e89",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b28443d0-ccc3-4def-9377-4b98b6a7be66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b55611d3-8c92-4692-b02c-4ffac69b5615"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fd35292-c7ae-401c-a8a1-cab5cd1c646e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ecb7bb15-2ba3-42ed-9eb0-4135fafa7b84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "620be37e-4fc3-4081-918a-ad36ce77a4e4",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1684f67-df60-4ccc-b38d-cfe1985dcae1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa50b027-765f-44ca-9473-ddad23e0aeb6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9264ad3a-1003-4335-b8dc-066979a53137",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b80876ec-0c2a-443e-a270-e71eec180a9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "239d63d4-bcac-4952-b8bf-85be41e35153",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49c79a9a-b06c-451e-982f-2ffcd8dd4ae6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1994dd78-8ccb-458e-8d4f-51d1e9100383"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95cd8bdc-4e4b-490d-8a29-aa0320db1674",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "eb3143c9-cf5c-437a-867f-1f301c83a860"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a629e735-3507-4f35-a151-a5651931c2da",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6310fb85-3dda-459a-af32-43f5c4c620ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0286ef9-3eeb-4eda-bbe3-b83cbe099f19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c0a64a8-526e-4803-9b4a-ea7f8b7d26cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c35d779e-6578-4011-8ac0-e11803afd7ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b38e2fe2-8cd2-45d9-93e6-2649df0446e2",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1aaa511-69f4-4ae8-91d5-303918717c67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23b7e1b3-46f6-466f-8c09-fa7cd21d8336"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "423fe353-84c0-4928-8982-e5e62300cc33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3ba2ca1c-39a0-4289-ae65-40158412223e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63d7256f-2a6b-42d9-a065-782a44f67cfe",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1122255c-cd8d-4ed6-b0bf-d9daf63957f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ada4563-633d-4e77-94d4-7309bb287110"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d803abc-ab0a-4b14-b691-1ebffc70cee3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d3c0611b-7c54-463f-8068-7b99f91cb4f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f2fb8a0-42f6-4ea5-b6e7-3a3475f74046",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e4a6371-4099-4b86-992c-93ffb82863a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6aecb771-84f1-4832-bd02-5007ad9d855b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b58a894-ed0f-4403-a744-e74e0c77e00e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0faa5515-d800-4aaa-b101-f3ef33228965"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0eed636b-d068-4264-a3e2-580391fa237d",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5a3131e-de41-49e4-81aa-cec83ce93d4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9b70770-3894-4b81-984e-0ba252150969"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f8f63ea-3259-4580-845b-0328d1a6947b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f60109cb-f12a-4cb4-b619-2b9dfa8b7684"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16121025-8b3f-48c6-b54a-6d3449068508",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "135becd6-434a-467b-917e-2ca3aafa463a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a42aa8ea-6a96-4126-afab-2384d7ceeb09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a883f8c6-9b36-4992-bfc8-b8b76a86ec1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "545b5d8c-35bf-4aac-ab54-9aaa53a638f5"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "e55700fc-90f4-4d0e-b185-b036731b8e5a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1c1c6987-db65-40fd-a0b8-c9b8938f065d",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6b197c8-3d1e-4bdc-9fd0-f953ad6aa396",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c8a77eb-6e19-4caf-9e05-a352f60d8724"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e87ba608-4682-40cd-a71f-96079270102e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5856c8a0-77ef-48ea-a0e7-bf609487a02e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b156df0-599d-4f0a-a855-7c2d5da88480",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51752ccf-c1c4-44a9-9c55-a8feec4e1982",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "5f9bfecd-3fdc-400d-ae64-88c3e8421d1e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "781d95ef-484e-4165-b2a0-4f6f914e9f6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e0075f68-cf6f-49c7-9835-310a8b3e3a8b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6feed1bc-0666-4737-8352-6ec722feae27",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1cae97da-29e5-4fa9-aef8-cc8abb7ebd24"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "aff7ec58-47ca-40c5-99a7-b0998e2bcf61",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "88f545cd-1d6f-4352-b7eb-92e27ae25295"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "77985eb3-7598-418a-aef5-3d758b91bd65",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "0252af2e-2c88-4984-bbb8-bf2c491aa1b5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a04334da-514c-4cd7-a602-97ee03e6800d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f46b3260-348c-4fab-978d-b0cfbbe2d3fc"
            }
          }
        ]
      },
      {
        "id": "407697c5-59e9-429a-9aea-f8d2849d50aa",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "8b9fd69d-5c7f-41f4-8547-54ebd97070e9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d94f9a22-9b19-46b8-a05f-059c2c12d74e",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "fdb89177-1fdc-4545-997a-2c7a76405c9d",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fc68097-2b9d-4aaf-98c5-53bed84b73b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac7ec883-49f3-4c09-9a93-30632d05c1d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a855f18c-5242-4bdf-8726-f84468d0c231",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17161743-6b54-46f4-976c-7102c8fe003f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1248f6c5-62ef-426a-a4f8-171e7e5cd6b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97314762-2984-4ec7-a8e4-2ab8a2cf0d1a",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4df2027-132d-4cc5-a7b2-a3c308ce32b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0624587e-e858-421c-be5b-b5339db49156"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01ec01b3-831b-417d-aae3-437b5cfd2cea",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "097c777a-a158-429e-8a6f-5cb33d02729b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "045de1d4-c3bb-4dc3-8220-7ce15ac803ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9eaeedf-d679-473a-ae73-6dd99a821c9a",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8b54588-8d56-43bf-a1f8-d0d30bb9e086",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a33d725-2e49-4fc7-be35-618e7824cc35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2132a884-0af5-4eec-956f-0dfb99c0c322",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "355abd96-4022-4927-b3e7-72d300eaaf28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39a502ab-a496-4ad5-aa43-368e01a201d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50d7e713-7f73-489f-ae5c-a970153dc0f3",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78eb25c9-a043-423a-a2c6-8311abf9ec9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "108a0826-3dd9-480a-a79d-4bdd3637565d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6722bbd4-47b4-4eef-b0b4-ed5c5c026517",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8595fa7b-8c2d-4ba2-877f-37eeca9251ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77b59b2c-6c8f-461e-8673-6de142d70c02",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d1360e0-b369-43be-ac88-ad1bcdf18660",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c625e415-8d92-48f9-a2aa-7676542261f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1b18163-5fe3-4c9c-8b9c-b9e00c4b0825",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7be15cca-61a5-4680-8cfd-927121f8ae72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61c52de7-d912-4b35-a7cd-b03e26748fa3",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ab68945-33f2-471f-9179-cbb027aebe1b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fe2e3dca-a733-4621-bf73-235b81112283"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "515379df-3cc3-4f5e-b94a-3aeea56f6e53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61082f6e-fbbf-40e3-8a8e-d67f6c97068a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5a16ebf-80f9-4159-93d1-0da41d51dea6",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f9b84b0-7679-4aa0-873e-4bcacfaab255",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9085cb71-5ae3-4807-ba3d-7abc2e763624"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23771f32-6dae-4d90-a9e0-8aa385b14c43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "312f2ce5-f735-4b94-ab8c-00a9fa7a14c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38a6e837-b082-4447-9a48-621ef15caab3",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..zF1sQbNclnV5pE5MfuXqMaTVBquwie4ctwzSdbC_LJ1Lx5qRK6V-y9wl5oTvN_GpuOvMIvlG3kQdjgqL3GBKDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e10568b-770b-485a-b33b-92fa0f44044b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d3ac98c-fe9c-42bc-a357-55fcf5059f47"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "383b13c4-6816-42d5-94fe-d4c560274597",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c5b509d-a178-4fd1-b3f7-1dac6dbb0b94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "437aa50d-eebd-46ce-8497-2ac5ebd843eb",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d14baaa4-e708-48d4-986b-02803bd6330c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ef456ad-4d91-4d2b-9e3b-8079bc1ec73a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0a6475c-78a9-4247-9a15-7950a50000a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f19f94bd-0772-470e-8ba4-60464382b483"
                        }
                      }
                    ]
                  },
                  {
                    "id": "688dc576-6e7c-49df-b983-6f5404e8870d",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eda880bc-cdb3-4c56-98c2-ae28eb884a22",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "08287f90-8abb-4d7d-8a27-e43c8c447cf0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0755d5fc-8db0-4534-a45c-c5acf4075e14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9af8de5-31c9-4c12-b675-e43fb7ca51e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4aa53f79-1ffe-42d9-8dd1-11ec739ff5fb",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85664ee8-0786-47d0-97a8-c9f3f01b6665",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "164197f3-6693-44d4-ac93-309a23a5b973"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "badff812-f3d6-4b09-bad8-91165dc1385a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7aa0743-d559-4e24-ab00-c8ca2ccc59bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c4900fc-b575-4770-9db5-b03f1221397d",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f189a690-a859-4d05-a021-0f92f1c08a82",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8ae7149b-cf95-4a1f-a9be-9d24a5c23d9c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "084db5b7-f523-4e1a-85c8-5fd528410ae1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c597b148-28aa-4833-8b4f-4918f20d55b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e44520c-39a7-49f9-b25c-00e393eb4822",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ef9407d-1cc0-447f-aca4-f409c7ec9747",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f4400d5f-fc1e-4f3c-ac6f-2943bb6c4aca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b207e49-4616-422f-bba0-acb467b20ce5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "535babba-8494-4bdc-8e80-8d115c7f761d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e0e089c-7d07-454d-9296-e3a25ece4e73",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59e47b1a-154e-4411-909f-cf887860ef86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d680eba-5c0b-488c-ba44-1ec7bef8eac6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf0754db-04a3-40a2-b00c-fb16b87caf4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e698354-727c-4d09-af89-174e848a4e64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ade0f1b4-a327-4252-be89-25b091b894d1",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df1feb00-1ee5-40c5-8e18-33f4de743547",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f87a457-a0df-4571-892c-7c978bccc6b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef676cec-250b-40c4-a7ed-0972cd0dd3a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "143fa139-873f-45eb-ab20-e68d9fbd6eb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57951bcb-44eb-460e-8d72-c909d2059c1e",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": false,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5354b63-b39d-4555-84d0-87ac151db259",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0b5c688-74ab-4f96-82d6-8c3ff122f25b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "513b47e0-064c-4262-885b-7803ca6f156a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0caa167-6eaf-4745-b9f1-54c8e93cfbe2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1907a303-5f47-4fba-a065-1a12a8ae6316",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": 123,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64c7dac7-73b6-4406-856f-7d75bbcc53ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5616ef0b-1d7c-4dc9-b59f-23f88c569d41"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d906738-6671-45de-a2cb-e4c50fedc535",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4087ddb3-2e34-4640-9242-5ba0e15a0f4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acbc314d-faa6-4884-ad39-7d1fdec3bc75",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": null,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "674ac813-2df1-4d6f-ab98-e7082d055db5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54a794d6-896d-47af-89ab-7242d1fb67d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8b25f53-d721-48cb-9b12-20053f5ee68f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f58d10b-eb44-4c95-bcce-6d793f2b81d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e3cfbe9-6335-425b-81c0-6b8f48a9f663",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..5J-iTBtI5WNIe9L3kLF22cjjDx6iQuJAgl6yYYoIGMC-X_crKNlSlB5bRJsrb2MV-NDlWMtHe0grtMqRG1N0Bw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54195ae6-f5a5-43be-b4e8-6375e479b658",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc1bb037-ccf2-49ec-8f5b-b9128ef8b03f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e13278d3-a064-49b4-8a5e-7ee8232d78a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "984dd47a-6452-4873-94e5-47f38aea4d74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3beb0e6e-3735-45d8-bc3a-658761faf3d2",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dc1d10b-03bc-4c96-ab04-2eefca962f6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "489b72e8-9494-4efc-b1aa-b8803d694858"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c83656ce-ac67-48cf-a3c4-180026d76792",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c40f97ed-3213-439c-af1f-175a46b24476"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8eb1dce0-de40-4061-863f-abf2db41acbc",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "740952fc-7d0e-47e1-a4ce-d5c04acd399a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "89be1b71-6ef8-4399-bf2d-ad56c696d338"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "835d316b-b4df-4ba8-b852-d7e45261f79a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ee17eb6-c129-4f94-b3ee-b667b4732c40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50606bf9-e470-49ea-9755-6eb1634d887c",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07a757dd-a220-4be0-a3fd-4480317f839b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c208e42c-4f6b-40d4-9dba-dfc922fcba9e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "641b148a-c285-499d-83a0-a82cfb021030",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b021a74-d119-4c33-9a22-19900be849b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "267f429e-8637-46ec-88ed-7a16c0a4ec15",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96b90e42-fea2-4334-97a8-6e3639bae56e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b33b910d-4dd9-456f-bc49-493f60e7e3ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f0a644f-8a53-45a0-8eb5-edfbc958d73d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e35d78a7-c1a6-4f91-8963-ba90c0719a99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8289ad9-e6db-4686-8b0c-84946ee84eb4",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70f49373-593b-4344-a188-d64188d020e5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7a8e7ffa-9010-457c-8d38-c911fd9982b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84a0ab57-23a7-4003-8cbc-3f5d85d69771",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2d44baa-8ea0-4458-966f-d4fdfc753f3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45a3a797-f786-4803-a34c-1a012202ee46",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72a4243e-e7d0-453e-a519-46896d39f0a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3576e765-bd65-44fd-afa9-51cb4122c5ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3555e3fd-21fb-4de0-9728-fc7125441720",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34e649cc-93da-4929-b7df-9f99121f018e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a01978a0-98df-4c91-ba43-6fe3df916c39",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01ccf808-e358-4693-9ff9-ca227626288a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "87c6b490-a3f6-421c-885e-09112b0795d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d56eb722-7303-4422-842d-d15047d899b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a320267-6741-44af-9caf-b33fec810984"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fab577f6-bcca-4505-bf2a-fef4e1e110a0",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4ff2b8a-511e-4f66-bff3-3c6d2a0dc3e1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8a8d1cd9-b3f7-4c54-ba12-a21dec7706f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2da52dec-a096-4180-bb26-4ed9148e9ae7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9a72c29-cba7-4198-97b9-af4f101dcf0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dbe7417-7905-4f55-81a5-ea80900e7bc3",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86ce18fa-6cc8-4c05-8e08-77826b6d8e16",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "579915bb-9c95-4b64-9dd1-9e2159979574"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0913fe14-84fc-405c-a517-39495cbe5b7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1d064f7-96f0-46f2-b415-a44ffa043ab1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81c07e9b-0a7e-4564-b00e-ec91843f0f8f",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19f1b3a9-adb8-434b-94e6-af78e80ae9a8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "28fdd6f1-bf59-418c-9539-4a7bb2afe3b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d00ecf2-bfcd-48ae-ab7a-a716ef028428",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e3a9ef2-4608-40a9-bb88-9fc44b6fa5b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2844f7f6-8af8-43e3-b2a1-b38860352b04",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7ff8528-efbb-40ec-bc1c-f2c293ae3297",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a44e9346-2011-4440-ab8a-db6c43976521"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4d8f98c-1d20-4d5c-b1fd-dfb15c467fb2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "627d6aad-f26d-4ffb-87a1-01bcdeea5ac3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e26d99ac-cf75-4c98-a3d5-50a9d055d20a",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec14f917-b2a9-47aa-98c4-43ef06bb1a27",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9405e1b2-16a7-4326-87a6-ef62710fece3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "209fb383-864b-4403-84f1-8afbacbc7964",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6980a33a-fccb-4283-ac03-94448d78b451"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c11feb3-46c7-426a-90aa-b88bc7778bf1",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8484885-a699-4352-8598-0d4153c10a50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fed807de-ebb6-49a4-9fdf-4b8ad54342ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c752712f-d39a-4ac3-89da-8d017d199b4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ea92d2f-8b03-4741-b0b4-87a0503c8645"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de81e7d5-d94e-4a9b-be17-c47758d5a9c2",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x7a3s_8HfmUqGT6SDkktN-jeRmBR2xQ_9tOhJx4kEG3SCsRTySfDxya9yy57LNv__qbY1eMkm9SNrwdYiqlBAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ed1bf65-4fc0-4a6d-b880-f023e5350933",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75b48ce4-b040-4fc4-b51d-532ac9693376"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "147c8877-63a7-420f-8ecf-ae2352961fee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1dab1ddd-5d2a-4b9d-acda-4dd27178d134"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a3e49f8-c266-4506-9a27-958ae49e95c5",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mMaPSvG48oEf3bv0t-6eLR3zvU3_BKoRIkgzkuZfm8zvjqbI7iy05D8k1mTeoSZEw3xYV-_sH1rChqGmmp7KDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "455c661f-28da-41a0-8904-c84223ca7b8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87803fd3-b9e9-47b2-a8b0-983c21e78f66"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d2fcd1b-fcf6-4a48-907c-1da57afd051c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33fdf8f2-b422-4df8-8338-08166e394820"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64265d5b-d063-429f-ab3f-b21a733e6360",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..rAVfo-Gnj0vUX6yDAr7pslI6XAAyF2LHTXpiZEmnH5Hb4RsKcmDZZawaLSCg931y1cBUgZ1PQvGbJEdb094ZDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72fb344c-85a5-4b2d-8878-d3177116b05a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92f97687-dc96-40ba-b9f0-fce6eb90a66a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4129e717-da74-45f5-b936-3dc677e43de7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45575b85-f6c8-4e37-bfc9-5a3da41bb327"
                        }
                      }
                    ]
                  },
                  {
                    "id": "407ca89f-537c-4362-84b1-98b0038ec29d",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf9b198e-7d26-4ec0-954d-eb26a51cbbd4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88d0def3-dc15-4e45-af72-81d3519e3708"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "043795ee-0e83-415f-9616-2634722be6c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5100b199-d015-4e3e-a696-f9cc16897a93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b549eab2-4665-471e-8bbe-77a06333ac74",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53f2af02-3686-4b53-bf8c-d1b043ae44ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd2b6203-afa7-482e-b8cf-012611020a1f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25e69653-c215-4c08-bda7-43eb8dd8eb5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b03e930-8fda-432f-b47f-8a1469c97848"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fd7c6a8-8929-46c4-a60e-19bb16013937",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..vv4qa5LGRlgeMxW5G5VjEKDfjKKosQnvpx6oapYDlfUSWVagQsDoDcRmkotKzFHDcTh-opjGLp__agL6_d4OCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6a7a05c-e5fb-467d-87dd-122fe6235486",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26e34ac9-6db4-4d8a-ade0-6424af4c09cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1a584a9-95f0-4ce9-910f-2efdaaa536b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7b19036-7547-4b78-8383-947cde76a7f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f1d25db-cf3e-4e77-b583-eb423090ff9b",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TTwcmWS6_0_t8XPlAGXbzWVSL_dL7OeYojY0FZz1WXCFvDfeAQtMh3dcIxuCeDqON6St3PODGfxluO_q1vWCDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d734b629-e9d0-407a-bd49-3bb0ea03b8d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42ebe416-98d2-4f3b-9ac4-0fe3bf989ddf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73193741-a58e-43ad-8178-697e6e3572d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa17133e-89ce-470e-8992-8599f72862fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8480733-fda5-45dd-b8c4-62b6c9ce9614",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..wpkNYYEOCjKMWm9xTYNn0J7IgXZQbbkEoohMQbloz_Zxb15UVu6DqiqsENotAeHvlRWd7RH2O9v4FwWBeqvPDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95e99b57-5094-47f0-9134-f2d3b7102f78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2cc0ae0-bf3a-4489-83e3-93a528950006"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23677122-e875-4496-8edc-35d0205f82f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef05f2ab-08ab-41b5-9732-82e093d9a9e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05dd8d36-aa1f-4155-b208-ff40a44bc623",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be0f99b3-485a-4cc6-be46-2c93215608f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6179ed0-9914-4c3d-8983-32317c1e7035"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99b14be5-112d-48a1-a556-74b088b707ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80e8228d-5a4b-4449-a14e-6e7f94876ab5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f8da23c-c50f-4c6f-b25a-f79c35498e57",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHJmwuqqXWMdd298m7RCTGyGoAzsCx1y9tewaHukqaJJoPn2-TLDCQuXvlnFeAYAE_Cy3j1UScfoVx5k-eclAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e6760ce-4336-43a8-9370-0369b6e55998",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4833290a-8924-4d69-b978-aaf9698407e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d82ca32-46eb-4d76-ad3f-f6dc16a04ca9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79d8d0ab-964e-488f-99bb-87139b33a935"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8754718-ba7f-4035-8cbe-5497547182e7",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d747df3e-4f08-4178-b965-68678c24fd40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc87405c-5517-4248-8940-b88c43abb253"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3761ef5c-3ec1-4232-bc6e-d934c65b33d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c09da681-edbe-408d-98e6-17c03c1c4708"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a17e97cb-6582-44ac-80fb-e9f5cdf58284",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..OzKfWk00QpV3_FJru3xJ3_ktwlU4O68prZWWCmdy3mQTbCz2lPFRl2sB4AkdD3AZUFMAnwxhscd9B0UnqxTZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e8e3603-eb11-416b-99b6-3877d4236d56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79cc29fd-8a99-4b44-8eaf-6c39b270e495"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c1e5e6f-787e-4c4a-99b4-0ca1cf6eb002",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4cc424e-c5ff-4798-b553-c8c0f0a24e16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12d07bd2-f2c1-4b39-87ce-c85ae0bf54c4",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1W7WM5cXb0daWooGxEOYn_zm72mkmpF_tu8Fij39luQwNGDgK7h4nZGBFcS80HTVqiBKxzlhGq1yNnpUlLG-Ag\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c6dab14-530a-4438-a177-e1be4ebb454d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6740bd6-154a-43f3-9968-18dae42a0968"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e9a7605-1111-4147-ac52-c58d9cbc9a40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "523b812f-2111-40fb-99b2-2d3762cd31f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed463c70-095f-4db9-be44-bad05fc3742a",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dkiU2sStrvQWiNFK8cKmCbAcRGsC9kbDdKyr-NRlPc9ORQczitwUEymjviemIi1Oot23VohpyMcSFvgFIKIFDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24882f3e-313b-43ca-8573-e890e5eac0e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a39ecd0-b4b6-45f7-ad47-cc731736cb11"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cfdaee9-9f95-48dd-a7b4-fde5903a9619",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c00bc45-fcba-445c-89af-a4f5882a917f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbcc5cff-b064-4d89-8209-610983496c3a",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1601dff-e034-412e-82ed-5ac64d59f629",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4847971-1a83-4237-b504-e1efb8ac4d13"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab7e3990-30e0-4991-b006-0aa614f16ca7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87e7c154-cb3a-4974-bd22-55d1758171c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5233217-ae28-42eb-a46b-86c0fcbf73c9",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pNIbeUn6DL71QxEWTF1wQTqKfAJET5JB9FlmoLXk4-rv1owG68DqQY6qwcPx6fUbMijsWsXlvaFvzND0jAg1AA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8033bdc6-b112-4fcb-bbfd-0c112bf3f0e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74353588-d2b2-4abb-b7b2-2e14bdbd40e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd8f914a-f2f5-4757-bcf5-23e91f7d3232",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05ca2730-c803-47f3-8354-4910a3ba27d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62e618bb-ea19-41cc-953b-fa0ce34a38b2",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z0P0ndVABJRB7mCsv4C-EgB-1SxgnfrU2uQBDSwKm2KfB1jBnzsEzY9enxOn7V1lBAPNxELTEaxPCAK7_n3bBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffc8e7cd-6c41-4651-9f53-6ae0de35f6a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7098a639-e56c-4c2d-91bb-ea15520a2863"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f696602-17a6-45d4-bf9d-837c81c37d7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6c7fb8a-fe0f-4960-83d5-9bae6a285c4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c3a1fe8-c35b-4dbf-8596-becee63b27a6",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fc89338-321c-4c2d-a30d-01d4a70019fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06de9f67-be6b-4367-9ba6-ab8686148a3f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be23a47f-80dd-4be9-90b0-487b7ae5a597",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e11c78f7-804b-4ec5-970a-d03e0e3f6404"
                        }
                      }
                    ]
                  },
                  {
                    "id": "797edaa0-e221-4d72-b0f2-57a1621adea8",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a05cd18d-c992-4f63-9923-b97909798014",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3deb4ad6-ef8c-4529-9280-a0a658a60a92"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04fa3c91-ad08-4c1f-afb2-818631af33f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eaf360cf-25dd-40e9-b462-59363c7dd160"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d12fe76-3dfb-478c-a66f-580bd141c8f8",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..IXaPbANtKFiA3Sh28esCkg9kdwpHScJg3bOCF7Phmb5n9RC981EeIobgDnMzWIjP4v0S92FDEcZqA_XbW43GDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f39f6737-b876-4de7-81e3-c1e1f6be1b07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "533d3ac5-77b6-43f0-95c6-b88b43d3a262"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "802a9b05-dbd8-42c0-ad39-143658e7c888",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46c5d6c4-9b2c-4f14-b65d-0d0373064d26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33e0b8c6-94fb-4ab3-96da-a75cdb936561",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iM5Xr2lBqwFIQhq9RI7Dv4K0dzdQ0z7i5YN4ELsstv9vDC9xA-GY2Ft-PsfubsbgVyQsQYjchCv23GULmhauCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7006b021-e071-4966-ad82-9383d65826c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fa7b1cc-c8b2-4239-bd56-dc44f5468dc9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c836816b-6526-4381-becf-213df1efc3a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad380a91-e749-46fa-976f-9ca35dd52dc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f496df45-4cf6-4540-92c7-82b5e10e990f",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4605b03-c021-4f77-adfd-f33b9d9a4576",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2808ca9-9c2a-45ad-b9a6-2a13546fdc8a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f230524e-0f12-4ff3-9949-3d44faf2a07b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f31b70f-a7fc-402f-b703-834b46f24e82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba422951-e78a-4128-95bd-e298efe0bf96",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad4546ef-8cf3-417b-bcb0-87d74a448480",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db7a8206-6fcf-4213-bcdd-a8a08e5421b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9d67972-ff80-4f8c-b116-75b504a4a7f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11d9ab34-f82f-4a66-bf6f-28c976e2a3a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7231eb2-716e-474c-97c1-887eb38acfdf",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..GBcSurXcOJcVinhthkmqvV40OS1rN2fY57Kad0HMLUuykp14JJCtNw_gmtf6SwZxhB860OVsUmuNbZXsMCi-DQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb93f62b-10fe-49f9-a1a1-01e5f8b7c125",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba735e50-314a-4571-ab37-c33bb7b87f6b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe9f7d15-d35b-4ffd-9ef4-7c599c8cba1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "677c54a1-4b37-456a-bc4a-f29974554aec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "972f46bb-205a-4bd0-a259-430646686a5f",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VWowmcXQAjabeJENG3aOcLzQ9HrvmSIs2pOWcaEMLdJtvJfP7oWohIBiqp94-eo1pd4Ocgk3hT0cLvS5qKBYAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50542980-13ff-443b-98e8-ab7e51250839",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f97cb49b-2dc0-4eb0-85ce-4dd6d2556a15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "118c6650-765a-4bde-b9e4-14121f021850",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "008e97f5-f771-4a4e-9413-511d317d1e76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "702c4f07-c060-4d9c-8074-21c8956cbdb8",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..-awe55AAvkjymZEpagD4fdSQk0uCGFfjyFwg7upmg_CISWk12JfezKe-N3hjTwYKCSCjScynLGvlH2x4iSgbDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ac1af28-92b1-4524-af0d-d2f8e8e91310",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29c62f93-a290-4dfa-883a-32ef3dbdd8f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d583795-ba3b-4642-b754-74c5630551da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40e9abab-cd39-473f-8745-2697d4271af3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d95db08-89d1-42af-864c-24f117e1cb43",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..NDwZvVUWw-xG0zU8VsWhiXPWrYycgK_zwN8zZts05DTw23rOTd9IOXQxqhEMzo_X0c25jzowIbpDfEFxqfmnAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb337b34-3312-470b-8343-bbdaeb417033",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d4615cf-8fce-4175-b777-73c6a951cd0c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3401150-525b-476d-8afd-7238c0b2578b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5121f2ed-9432-4dce-8a37-18438af6eba8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96e31116-1355-4f85-864a-8e1e1cb99f52",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..y_7VEjN1ENYoedOrj2jsIqgL7FSYelxGgFZD5ckqKvSDM5BVEWiEctD24BWppCndRR7WR9_1ByBm2F1yBSaoCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5096288a-7f1a-4d4e-a770-95025866ce27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a787475a-8efc-4295-9bb9-12249276fecc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c97a76d-45d5-4189-a27d-747f940e76ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44d7b1f9-5d98-443d-946f-a92a63b77fd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5065515d-cb08-49f4-a114-12f3f89d9a08",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c812102-1408-46ac-a41d-80fdf3cb86b1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7e5d9eee-29ed-4796-bdca-db1fdb2d92ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f87d3ad-6678-4074-a097-b88367d9003a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8026c3b-d413-4bc4-b775-7189e1a22d33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10ce7a07-1c19-4868-8544-ecea421e116b",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c1156b5-49e0-46ba-8817-307b3982d61f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "71ff1d21-a053-47dd-b784-e0a900af647b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf699879-55c0-43df-ba96-7d94d54b91b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e816632-bad7-41cf-b852-920a25d2eb0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f790f49a-39cc-4460-8f04-87c1fc71fd88",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5de97fe3-852f-4482-9520-b5344b72ff41",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4aa8ad76-4ff6-4585-aacd-bc597ee3d962"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0aebb410-dfa1-4843-8817-3d4229e746ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21961473-5047-4fee-81d7-29aa522f0e4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6ffe67e-e939-40b3-8f8d-0dde529b224c",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cca8f29-ded6-4ab2-9ff2-772358173461",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2957138b-e181-4195-a541-627d3649a1d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f260b69-8118-4b68-9b38-669ba6097a81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a65f5a9b-7dbf-474e-a534-2009a3187671"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a58e8ada-0bd1-487f-9fb2-7ef94d87a933",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ec5a8cd-3ece-4897-9b63-bb8fa7dcab13",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2a9eb568-54c6-4f05-8b22-6c849505a1a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bfd6cbf-9f94-4576-9a43-2d2a1987cc56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97a71f34-93db-4174-acf4-8954e80c1545"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcca0c98-a6e5-47a5-8d03-08a89299aca6",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5eb9a239-e586-47b5-9072-66c445a26ea9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bdf00bd3-ab65-43ed-8a0e-a655eeda3ba1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dec3b93d-b83c-409f-8eb1-b504676656bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0fe4c0ec-66cc-4eb6-b6f5-944915dd9977"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5074bb85-04d0-4af0-81b7-59f99a493a37",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98829843-f9cf-49df-b75b-9aef3d1d23c7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7981f47e-6641-4174-a62f-3711e049a7b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1e12e7e-7636-4a70-b805-2206cea7eda5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "968afdf5-8694-4b1a-a863-3dc29287d317"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c289b01e-d18d-4c8c-8f4d-644771d74b9d",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e35cfcf4-6fdf-4518-84da-60897f164dda",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ece58fdb-ec23-41e7-a824-914aae1f336d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f6e9853-4c37-400e-8cfe-7aa8272a210b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "702fb66d-7b21-44ca-9b4c-f79887ba0348"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fb72b79-225f-49fa-a736-df9effa0095c",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "434f1951-fde3-4a7f-83cb-06f04dcf7c9e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3fce09a8-b400-4b24-bf01-755643ddaf8a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "817c89ec-c584-4ece-ba11-6b3edeff8e5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "988e1b80-37ff-4ffe-85c7-affb0b3a9843"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6c9d913-b15d-4de9-9940-5db10fcae814",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42cd2888-9f4c-4793-80fa-71f3740a41ef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "283b1a67-9961-421c-8aef-656c4e5f9a7e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac4d56c2-30da-4689-acd0-b432046d0bba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "730a08ac-46f3-46eb-a3a5-3a71eff60645"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82551000-8058-4149-8f1b-52c5f01801d4",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c89ffdba-5df4-4402-bc30-752614ce026e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "94632d76-44eb-4fec-8326-252df0790f09"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bdbcf7f-2cd7-4421-97f5-71c3bd6c9e60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb806df0-e02a-435e-b07e-e59c314ba8e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc99820d-d0e3-419c-a405-d1f247deb526",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c90652e2-7c2d-4af4-86fc-7d15af097941",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c73c1cf2-a414-490e-b9d0-73eae28be15a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30b72cc8-9f23-4cd0-884a-94045e9ef3ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60ea57fb-a01a-4f8c-adbf-e70445939d8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf0b4008-66b3-4d06-bc2d-ac4c9c136cbd",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "329923eb-6c0b-488d-a31f-4723a3715ee8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8c9aa72a-d28c-40fb-a4ab-bae66fd4cac5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd34f92b-2744-4f22-b294-6249193d78e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "552f36f2-d722-4180-9f79-902e964e01ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82ead091-d7cb-4d62-81d9-94b187affd41",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5495a3a-791c-42cd-b554-9ce30118d380",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "031188f2-2194-4eb5-ab6c-9e039186f71d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b444ef4-bedc-4c5e-95e3-e7debcf960eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ff3da58-87b5-4b57-9f57-f59d477e08a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f896cfb6-45b0-4bd6-b700-4ed4f4888c7f",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "275d7733-086f-4b3c-8dad-bf4150ae4bfd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "46291161-3f75-45c5-bc5d-24dacef12521"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73e6ad01-eca8-461e-b3af-482da873aefd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f9f0d12-f543-407a-aab2-f5dff9637ab7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ac4feba-4052-42d8-b119-f706b216af60",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a1d71ae-38fc-405f-a23b-91c97065583e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "18e9266e-b631-40a0-ad66-f9482b9d1642"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a2a24cd-437a-4833-a1b4-b44d4bab1b59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "237ec2cb-39e2-4714-84be-bfd611f9e052"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72624e4d-4171-40cf-a175-9e347b23fd1d",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afc3a1d7-7b16-4f01-b7b8-334ae56867c5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "76a1c000-1eb5-452f-b8f2-5c09097bf243"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2853b4dc-bf1d-4b1c-9f77-5271b56826d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f75d9374-59aa-45de-89c5-15327f0286df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "194acdc3-8c37-4001-af4a-9e6cebbd40e3",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76817729-423e-4b87-9fe7-e38241bbb984",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5cc6d08f-4b5b-4a4a-a621-144f81a9c683"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58688a09-84b8-4e44-a78e-7165b2d597b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7517f1e8-c7b2-452e-8472-db54e1f13a4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e334e6c2-5fd3-4802-a2d5-5d1f546ca690",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "666fe052-13d9-479a-b68c-cd436c894368",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7c343458-7587-47a9-a143-4fccb455dae5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de2ecdc5-132d-4b20-a7f4-bb63299e1588",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26e8a444-873e-4e20-9059-b12355edf0fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9316bc1-d4d7-494e-bbfd-6d0050dfab32",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "053d531d-a71e-419f-a1f1-2c852d169866",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b6dde64d-e33b-4b5a-8665-c68501d2c892"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "869d31f8-6c3f-449b-b44e-dcf830416a03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0db94e33-aca8-42c6-97c0-0d1f276e7f04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0eea2f1a-0a0f-445b-b659-4acd13434f21",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "421fe2e9-2081-42b9-807c-3aef7b79388e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d77caa9d-9e8c-41b1-bf48-e94e9c2357d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d58dc79-40de-4397-a61c-469fe68887fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53ac739a-7dea-4d0e-aa1d-bd3a60e94f80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c895d4f-c5d8-4c3e-88da-d24f946b1c4d",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53ad4444-9b27-49a9-8743-32e994c758c0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dbc9b063-ddfe-4fbe-92a6-ece6eb41e106"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "735b78c5-ecfb-40e9-8aa6-315d99ee7e30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "638ed2f7-0e8c-4fcb-8859-27af8ba0245e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3b69a2e-ab97-43ca-8880-31ac0ac8ae45",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3325df6-09de-4c7b-b9b8-9957cf32a80b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f6910f5b-f43e-4b2d-8cc6-76cbedcd70c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d3cbb4f-e36e-4b22-a790-ccc2ac75e3c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00f1c30c-1a61-4e72-80b8-85bfb3f2be28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "188084a1-d631-4661-a7b5-c3cf70d9a433",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5684afc-8814-4774-b201-2e9fa5fbea45",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2b166e5e-c2a0-403f-80c1-8fc67b3dfdb2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3baf7dc-9a9d-47dd-a910-49d9264fb4d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8a9a3fe-3bb2-48ac-8fba-383f40a9e73d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7d8091e-3311-4583-b842-eac0c01b7a97",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adf6d91f-c1b9-4ba4-a338-a9c44b0c698a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d4e19f9a-0e60-4b4b-ab04-8169800b20f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da42ff8b-886f-456d-99a9-240c2a598fa3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ccc8b8b6-ff7e-415b-8d94-aa7e02a61822"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b38c2057-efa3-49bf-ae58-ba9b140f55ae",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ee3233e-e4f8-43e3-ae2f-5a7ddcf59b44",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f4be13d2-1df9-436c-9c1d-749ba4c8cbc1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62bcd3ab-1724-48a9-9b87-9e1117bb8ff5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65637015-2402-4486-8dfc-d7d05dee66fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd88a3a8-0278-4e13-84af-7dfa73cb8c42",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6b055a7-10c9-4b8a-b665-ef948dd7ed34",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d194017a-007a-4ff4-93c2-d13d4a6a4ddb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90ec14e3-e89a-42a1-98fc-7123722e776f",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89b19dcb-16d7-4963-bf01-32e1827e02ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb84e8e8-dd2e-42dc-96dc-e16052a98501",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff34a879-57e0-4264-a02d-ec3ed63a9233",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7faaf9c8-593e-4f10-a7ce-6dbbdddfba22"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53de9d70-e31a-443d-8dfa-98e995d5e505",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73810f20-f148-425f-8017-e273e8e3a88b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5fecacc-67a0-43be-90fe-fb77db8c969e",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1794be1a-ec2d-42da-93d1-7727c82a2ac7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0abed436-05a0-4b39-8102-d21f6ee392dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28fe916f-939e-41b4-bcd3-c0723e3fdc2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93792737-6024-46c7-858b-24c467e2b9b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "696b0cc6-dda9-455e-b5b1-8f091ff20432",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd64183a-3025-4773-b59c-24dc5f94ae63",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d584ef28-00f1-45e1-addc-6e935c6a3ab9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09505169-f724-4086-8c01-650e09ec7e16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21f10942-978a-45a0-b573-c3a00e04de6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7d634e8-690a-4559-a543-c97658493226",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62d0b27b-eb42-448a-92c3-75a87fa96563",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4a487469-236e-4d61-a76e-b3fe1986519d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b705794-e8f6-4dca-8131-b9c1480e308e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "934944ca-4f83-49b5-8cd7-f41a29958c4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e2486aa-ce5d-4575-b751-2aa58049b13f",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b3c8ac7-843a-4911-8729-0e8893fd4a4a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "39274381-c59b-4570-be54-02f2f750c48e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc4a672f-c468-4a91-91dd-4c2dcbe4084f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e2e45df-5ca1-46c6-9b17-c2973672f6da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3eac145f-1b8b-4c16-99e4-ba808e56d7cb",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e740dffd-20a8-45a8-8ad2-8dad81986cc0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "526515b3-11dc-4ad7-9be1-9df4c3afb500"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3c1da79-2b1d-4f97-94f5-669fad1d70a8",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e787dd9-c305-4900-b156-20ff88c49db4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "babc7f09-58b0-4939-99c4-b21d28e1a5ce",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b886e46-e4ec-4146-b708-3983d48e3299",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1b8b2008-9987-459e-8be4-bf481879a912"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a0ceb46-002c-4c30-a83a-6ea56e8905a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58b0cce3-e8f3-4412-9449-93bcce76d607"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d4742fdd-ddc1-448f-b70e-f5be0c0e2577",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d66b1dce-9d88-4d90-a653-2252ae999a12"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "dab8a93c-f670-4f32-bcdf-e15c2b5f9c62",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c6b291ed-3fe3-48b1-a5ee-23f8b1e5984f"
                    }
                  }
                ]
              },
              {
                "id": "05f164b8-e9bb-4a83-9830-e6c4c76d320b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9a722632-37ec-43b1-8e6e-853f1e7e6959",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47999efa-e787-49f7-b69b-800b4f18c6f6",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "b93133e0-1a6a-4aed-953d-6b8b892bb98c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f682d657-a499-4abd-b576-0dad730893ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "37b25a0a-8dd6-4e5b-886d-c86a02b44473"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c6bd925-b2f4-4417-8ad9-bafec23508bb",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a24e5a38-f52d-4cd4-a10c-9091f09538e4",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "901809c4-2bf7-43ab-b658-c9a92efc45ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6822f510-32d7-492d-97c5-8ef37e899cbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ae2aa6cd-8740-45c1-8de8-78230eed7ab5"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "607776b7-5380-4f03-a843-9126e8f5bb98",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5dbd751f-fa13-45a4-becc-151250ecf0b2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f5b4fac8-f6b0-4d70-a1d3-17baa9f9c49a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "91927bf1-4591-4b62-ace1-f8ea95f34346"
                    }
                  }
                ]
              },
              {
                "id": "5b2f3669-6841-43d3-9dfe-ce9b18a267de",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "6ed00280-cd0b-4de3-be62-72068562d9b8",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "589b9f36-2c34-469f-8586-43dfdc6e06c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "38f9335f-ec50-454e-a9f3-e08827f42ec1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a2f851c-3700-41fa-9a1c-d505ec5e54a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37643930-1c91-43b1-8a85-6b1fe321cd55"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "7818f6ea-7977-45b9-a1c0-da4145741101",
            "name": "Positive Testing",
            "item": [
              {
                "id": "89146054-3701-49ea-9bcc-583797864ee3",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "da929858-2337-425a-9eab-067bed307619",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "794c1004-9e4e-46d5-8f97-67cc9f281b40"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c240ab41-69c9-4083-a7dd-d35f6d9e2968",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3eb0ad9e-b303-4e6f-a5bf-1d05e6bafa45"
                    }
                  }
                ]
              },
              {
                "id": "9ab6edcf-c9cc-4c98-96f0-9c7d3ffbf5f6",
                "name": "credentials_verify:id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "462b5010-ddb7-4f01-b2af-65fd24c5582d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "128e063b-2ebc-4c98-8a02-71ba9a722c23"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2d7a3bbc-4220-43ba-b0f2-671f52fe8707",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e0917055-1ed7-4607-a157-87041ecb6b03"
                    }
                  }
                ]
              },
              {
                "id": "a9c618ab-ed0d-426c-a482-bad4e07c14d8",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ccd6eb1a-d4bb-464d-b41e-c43cd8620e79",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "010b5eeb-65c4-4e21-aa1b-d0c4104a9501"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "83af4979-17c9-418e-898b-435f02311811",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1ccb0a59-2658-45fb-acaa-53a15ad7889f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3b7d0efb-97fa-4c68-841e-59353740ad39",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "2d7ad92a-f099-43c2-a3cd-763541268054"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0053c17d-4173-4d9b-91cf-00fc1d51a0f7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9f73bb68-f305-4e5e-a0c3-2533f0be395d"
            }
          }
        ]
      },
      {
        "id": "dda363ff-0532-48c2-8523-c97bf307ed71",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "8dafd3be-73b2-4d55-b636-0333c5ea7f78",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a40f903e-d1fa-4a22-8e00-c3fd13b68c8f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "18fd7b9d-edc5-427f-ac9f-4ab2a1745c08",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acd7bd0b-92c3-40ab-808d-c07b7c82f9d3",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "b5e76e69-a1d7-4477-b73c-fdf10e755cc2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcb981ab-3751-4c5b-960c-647e716dc6d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b477441b-eb85-49bc-9165-9aadddce61e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f80e8b41-742d-494d-a0c9-8e32d9859198",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6d759b7-8aaa-4650-a956-8e30dc5131cd",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "ac066227-cc9a-42c2-8316-bceee06cf861"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2e3e540-816d-4da1-a4f3-2fec26c1d8d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8d2564a2-4091-4fda-9dc7-ff675d180c98"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1048c789-f580-4de0-abd5-c7ca548a5f0d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "45a8a1d2-dfb9-4e6f-9973-68e9f0bce5bc"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "126babaa-461f-4282-920d-399644a2db39",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "761d0d72-a16c-479e-9402-c70e4664d8a5"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6fb0aa46-b14a-4343-80a7-d76eca89fcc1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "58ced993-4c28-4628-b1a7-a7c38ebaea35"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "94894da7-ad69-4862-9fc0-08547dad28d9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "11882b66-f25a-4a10-856c-095a77e2e5b8"
            }
          }
        ]
      },
      {
        "id": "32f323f3-9312-457a-98f0-4cf12f6bf321",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "ca7fe86a-f974-45b9-a866-78679ed7e236",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ac8f84bb-25b7-467b-9427-fc011b7e34d9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "214a573c-cc9b-47b5-85ae-9a2a07dc9dc6",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56f36904-2150-4ff7-9aba-efa0a8ecd663",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "fb5c8cc6-d41e-428b-af38-8afa889dfdbf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ba917b3-47e6-4455-b4b3-001063b45d6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f9d5b118-61fb-4e0c-8e73-b3a24c2a19cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8066418b-5e11-413f-b32e-0e950206de73",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14fddd8c-bd96-4773-b695-00c2452fc962",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "82086f48-4b8d-447f-b79a-55cb1d93e50f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9001a8e7-4393-4ac2-a5d9-6516e78c5f15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bbf56069-3351-428b-8467-879db2161f86"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d81aafa4-f178-4e9b-bba5-44da8126f99e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6c1a175c-27b7-49af-b3c3-ec2b386412af"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e5f8e944-423d-4add-9572-793954495970",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3126e6fc-0e68-4e4b-b806-28b5b30764c1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cd449150-a264-4572-b2c7-08444ee5872f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "73b9d605-7d70-4238-b494-90fe2d539d8a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "740ea619-3131-4777-8d0f-5b33f3f84d41",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c5842b73-8688-424a-8f93-00a50bd0e601"
            }
          }
        ]
      },
      {
        "id": "0b29c792-7b7b-4e81-96f4-3b7d282c6f85",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "c7c9dcf9-33e0-48d9-a81b-686a3f931229",
            "name": "Negative Testing",
            "item": [
              {
                "id": "48252cf0-899c-49a6-8636-ce5b1993a0ca",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6d00cfa8-8982-4c36-ace1-2c248df08b9f",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f09f7719-b617-4ea6-9493-637b5e7c9a00",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "9f1ef768-3fd7-4686-9780-7e48ff132407"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2df6c84-305e-4d17-8df6-062e5b7e2320",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "784e217d-e750-446c-8544-853e9a4376f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f9f928e-586d-4506-9804-e136f17b5b69",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec66f096-57f4-48c8-ac26-3685fe5eacce",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "ed3948dc-01d4-4e62-bd92-070bd5af2d63"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b11c97e8-0fb2-41ad-85a9-13820804cb38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "21f27410-91fa-4a3d-a321-4149842f1278"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "154b1eb8-eefe-4c9d-bc7c-ba63f32930f0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5b6e4d69-a4b0-4c39-b4cc-3691d8218f85"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8de3f09c-c561-42a6-a417-d98075c52093",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a97c4175-3044-4d47-93af-a3204b7df22f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ed051eea-b3dc-4935-9d90-dbacf40635bb",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "c846704a-120f-4625-834e-c7afd1d73d27"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4115fc83-db2d-45bc-90ef-045ae2d5d9c0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "50382609-5388-44d8-a791-96bbdf686532"
            }
          }
        ]
      },
      {
        "id": "08eba87d-c503-422f-842f-9d4671bf2c70",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "26e7f6a3-b969-485b-8680-8ed335e42034",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c10a260b-e704-4765-a0e6-fda62449c541",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "808c5b43-db19-4fd1-a4a5-ec2decd3e71a",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b44c1e83-ed2f-4a27-919c-c8eb12e7fb97",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "64cc9d91-2e74-4301-a630-e01c76097439",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1915,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 261,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 511,
        "pending": 0,
        "failed": 92
      },
      "testScripts": {
        "total": 962,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 953,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 85.06513409961683,
      "responseMin": 8,
      "responseMax": 808,
      "responseSd": 148.2801518086096,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1670632590623,
      "completed": 1670632625969
    },
    "executions": [
      {
        "id": "5c58a527-32ca-43b4-a635-79939d8676bf",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 252,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "5898c2c3-d374-42ff-b731-847467e4a64d",
          "httpRequestId": "bc1dc689-4060-41a0-b18c-81bf0fcaef08"
        },
        "item": {
          "id": "5c58a527-32ca-43b4-a635-79939d8676bf",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "6da5088b-ea2d-4f56-9b90-5ae8fbe4953d",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 0
        }
      },
      {
        "id": "c22d3c19-672d-49b2-8ebb-86b7a489fe12",
        "cursor": {
          "ref": "afdcdc97-0cc1-4296-93a0-6286279757c6",
          "length": 252,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "ca3ca16d-4ad5-4d10-818f-402fb0b1566b"
        },
        "item": {
          "id": "c22d3c19-672d-49b2-8ebb-86b7a489fe12",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "14bd2ab1-5900-45fc-b5d2-2a898ae4b010",
          "status": "OK",
          "code": 200,
          "responseTime": 8,
          "responseSize": 0
        }
      },
      {
        "id": "0dda850c-95e1-4b74-a846-6bf602e5e9d1",
        "cursor": {
          "ref": "1ccfd376-2081-4d39-971b-aeb1cd646af5",
          "length": 252,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "a34e2a30-8598-46c1-ac66-8eb10be95d2b"
        },
        "item": {
          "id": "0dda850c-95e1-4b74-a846-6bf602e5e9d1",
          "name": "did_json"
        },
        "response": {
          "id": "a1d0c2b6-82eb-4366-b8bb-8fa9c142e208",
          "status": "OK",
          "code": 200,
          "responseTime": 157,
          "responseSize": 1369
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c6197cf-39c1-452d-9f45-54b21795a2d8",
        "cursor": {
          "ref": "26907cae-7f1c-4280-bfa4-104bb5a7b4fd",
          "length": 252,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "12172e08-3565-4eed-96df-1ef413be153c"
        },
        "item": {
          "id": "0c6197cf-39c1-452d-9f45-54b21795a2d8",
          "name": "did:invalid"
        },
        "response": {
          "id": "68dde296-7617-4ab9-bb1c-6725bca10914",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c6197cf-39c1-452d-9f45-54b21795a2d8",
        "cursor": {
          "ref": "26907cae-7f1c-4280-bfa4-104bb5a7b4fd",
          "length": 252,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "12172e08-3565-4eed-96df-1ef413be153c"
        },
        "item": {
          "id": "0c6197cf-39c1-452d-9f45-54b21795a2d8",
          "name": "did:invalid"
        },
        "response": {
          "id": "68dde296-7617-4ab9-bb1c-6725bca10914",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10c84480-093c-4724-abbe-ca2de4862bf8",
        "cursor": {
          "ref": "4be1b5e4-c32d-42a7-931c-44fb18989d92",
          "length": 252,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "ab608295-90cb-4041-af46-3dcca0be7fb6"
        },
        "item": {
          "id": "10c84480-093c-4724-abbe-ca2de4862bf8",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "7094bc70-2a5c-4ff7-b48a-62d3f9ac1ec6",
          "status": "Not Found",
          "code": 404,
          "responseTime": 116,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82b30438-9bf6-4c69-81be-445235df527f",
        "cursor": {
          "ref": "10e99a45-189b-4976-bd63-9a23eaac10c7",
          "length": 252,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "936c55f8-a2d6-47ab-8d2e-9b6615d493de"
        },
        "item": {
          "id": "82b30438-9bf6-4c69-81be-445235df527f",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "01822030-b299-4eb5-897a-d399e3a6d314",
          "status": "Not Found",
          "code": 404,
          "responseTime": 11,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98b067c1-e191-43e1-bfb1-3a36e82895db",
        "cursor": {
          "ref": "a6b69064-f772-4edb-a8e7-12c4cc5020cd",
          "length": 252,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "31736dc8-e15e-41c4-ae6f-96494dc74657"
        },
        "item": {
          "id": "98b067c1-e191-43e1-bfb1-3a36e82895db",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "b0c47cfa-8a36-45f5-9125-143d29800cf7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 15,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39295128-801c-4b42-ac0f-41fe5d7e1642",
        "cursor": {
          "ref": "48a26351-e6d9-47a4-a284-e2bd08bed677",
          "length": 252,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "cad3bde2-5d0a-4272-a86e-9ac7202476df"
        },
        "item": {
          "id": "39295128-801c-4b42-ac0f-41fe5d7e1642",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "fca660ad-1e16-4708-8fc2-93ead58b958b",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 11,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39295128-801c-4b42-ac0f-41fe5d7e1642",
        "cursor": {
          "ref": "48a26351-e6d9-47a4-a284-e2bd08bed677",
          "length": 252,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "cad3bde2-5d0a-4272-a86e-9ac7202476df"
        },
        "item": {
          "id": "39295128-801c-4b42-ac0f-41fe5d7e1642",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "fca660ad-1e16-4708-8fc2-93ead58b958b",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 11,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49ee24b6-057b-44ca-bc1a-e7b5bfd75efe",
        "cursor": {
          "ref": "a0873fc5-c234-4ca9-bc61-1ee20450c9aa",
          "length": 252,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "6e825327-135f-4416-9a35-d791cda50c32"
        },
        "item": {
          "id": "49ee24b6-057b-44ca-bc1a-e7b5bfd75efe",
          "name": "identifiers"
        },
        "response": {
          "id": "1c2f8c7e-a261-4ef5-9956-b490e028d839",
          "status": "OK",
          "code": 200,
          "responseTime": 159,
          "responseSize": 1385
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67363a60-c907-4e66-8514-178518c79d65",
        "cursor": {
          "ref": "dc0dc349-67ed-4f09-9805-a991352312d0",
          "length": 252,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "033387eb-0d21-42db-a79a-4311b79c1fc1"
        },
        "item": {
          "id": "67363a60-c907-4e66-8514-178518c79d65",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "7d803d17-8015-4c9a-84d1-52960b58f7ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67363a60-c907-4e66-8514-178518c79d65",
        "cursor": {
          "ref": "dc0dc349-67ed-4f09-9805-a991352312d0",
          "length": 252,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "033387eb-0d21-42db-a79a-4311b79c1fc1"
        },
        "item": {
          "id": "67363a60-c907-4e66-8514-178518c79d65",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "7d803d17-8015-4c9a-84d1-52960b58f7ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fec8f2e9-2614-4a12-813c-818e066abaf0",
        "cursor": {
          "ref": "1e2ebc26-15e9-45e6-a1ce-26388a95d91f",
          "length": 252,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "2082a8f5-7daf-4c2b-a467-f5813b116576"
        },
        "item": {
          "id": "fec8f2e9-2614-4a12-813c-818e066abaf0",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "725b58f3-e0e4-4fb3-89e3-c3155b346fec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ef66ddf-3a0e-4ba1-82be-873fa4b8b1f0",
        "cursor": {
          "ref": "29d546e8-900d-4dc8-afd6-cdfcb677307f",
          "length": 252,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "b7d488da-ba01-4431-ac71-f2a0591aceb3"
        },
        "item": {
          "id": "9ef66ddf-3a0e-4ba1-82be-873fa4b8b1f0",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "f7257fcb-60db-4c3b-88bb-40fea64a8d76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d199d518-39bb-4de4-8353-d7f5c47a43d2",
        "cursor": {
          "ref": "23ff4229-8379-491e-8cad-9edd8f5839b5",
          "length": 252,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "f60d6a5a-baa2-4609-a53e-b052460f9263"
        },
        "item": {
          "id": "d199d518-39bb-4de4-8353-d7f5c47a43d2",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "93cfa277-9137-4bc0-b439-0b99aa1cbcb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98df6351-0f74-4005-9cb2-000d8bea232e",
        "cursor": {
          "ref": "3211c2ec-01f5-4fdf-a8ef-2d5ed95aa394",
          "length": 252,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "03ceb718-5b5e-41af-b9df-420c7dd0c4d6"
        },
        "item": {
          "id": "98df6351-0f74-4005-9cb2-000d8bea232e",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "fef55b9f-a51c-4594-be87-1cd99c1e60cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4f1f8f6-478c-421f-9714-b79ea910c9a1",
        "cursor": {
          "ref": "ed7be0d5-a0a4-4911-bea3-153aba8d6887",
          "length": 252,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "07ec45e1-6b12-4ea3-8adc-d2efd5780cba"
        },
        "item": {
          "id": "d4f1f8f6-478c-421f-9714-b79ea910c9a1",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "3ee446dd-35f9-495b-87f4-3ebda75e4cfe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6117fae-e958-4f20-a83a-beefee2e6919",
        "cursor": {
          "ref": "934e512e-a63a-4661-be2d-421592491417",
          "length": 252,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "959d0dda-ebee-4018-afd6-990aac497ff0"
        },
        "item": {
          "id": "a6117fae-e958-4f20-a83a-beefee2e6919",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "e8b8d3df-c04f-4e83-8829-d7c908540d38",
          "status": "Created",
          "code": 201,
          "responseTime": 808,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "52412b7b-7327-4ee2-b130-35c075e37e99",
        "cursor": {
          "ref": "4d50b00f-3760-4d0d-b2d8-9d626ceb2e96",
          "length": 252,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "41be0a3f-ccf0-4aaa-bb8a-5365d11da418"
        },
        "item": {
          "id": "52412b7b-7327-4ee2-b130-35c075e37e99",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "ac6c2260-7fc5-417b-86e0-8e0381a0d332",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2da7e0f-2a9b-4586-8d1f-d15d8895ca36",
        "cursor": {
          "ref": "6dd98849-d8e1-4ccf-88c9-09290455cfbc",
          "length": 252,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "d035a86c-f60b-4c27-aae8-b172595e82ac"
        },
        "item": {
          "id": "c2da7e0f-2a9b-4586-8d1f-d15d8895ca36",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "bcd2b1f2-ab00-4be4-a579-5c719f1ca715",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1f5b52b-9e80-4ae4-bfc3-da31fc932423",
        "cursor": {
          "ref": "ece55ae8-a048-417a-8e13-76eea13eb100",
          "length": 252,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "6eb12c25-b69b-4669-bf3f-7454b0b58fe0"
        },
        "item": {
          "id": "d1f5b52b-9e80-4ae4-bfc3-da31fc932423",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "07303a3b-44c1-4e73-bbc4-ddd240c1df3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d881e10-243e-46fd-be67-ef6effccc53e",
        "cursor": {
          "ref": "bfe622e4-f637-49b9-8306-1e5731e5b96e",
          "length": 252,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "a523c21f-aa1c-413a-bfaa-5184f307b921"
        },
        "item": {
          "id": "5d881e10-243e-46fd-be67-ef6effccc53e",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "f33e68d0-3e89-4d81-9b9c-4d9c878d4e50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d900f24a-4c31-4202-a2c9-44cd76e65807",
        "cursor": {
          "ref": "536a941f-fcfc-44ca-bd82-622b20e8e6ea",
          "length": 252,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "6e6c9c17-c810-484f-b3ef-ca863f282321"
        },
        "item": {
          "id": "d900f24a-4c31-4202-a2c9-44cd76e65807",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "a753dba0-bac0-4d06-a2f0-7b80f5891c64",
          "status": "Created",
          "code": 201,
          "responseTime": 591,
          "responseSize": 683
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "7ea275a5-db9a-41f6-8f08-f0e77c1d7365",
        "cursor": {
          "ref": "e1c263ef-d2ce-4e14-961b-566bc62836b2",
          "length": 252,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "86af0056-c74a-45f8-a94a-e060ede9b7fb"
        },
        "item": {
          "id": "7ea275a5-db9a-41f6-8f08-f0e77c1d7365",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "680652c1-8dc4-4cfe-a14c-9155c22c26a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "358c995b-3b48-4ac9-8b5e-e4ca350944db",
        "cursor": {
          "ref": "f15fc45d-c845-4763-8e39-bccc7da34282",
          "length": 252,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "9bb6bb63-57b3-46f2-b907-e995fffedfaf"
        },
        "item": {
          "id": "358c995b-3b48-4ac9-8b5e-e4ca350944db",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "ae5b9271-92a1-4a78-86a7-008ece54453a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "947ec4c4-be9e-4202-90a6-d2e0acd624d5",
        "cursor": {
          "ref": "26ddce99-b5d3-4b0c-ad29-5a808dd98eaa",
          "length": 252,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "1c4e3101-fa24-4fde-955a-41f8fce42a4a"
        },
        "item": {
          "id": "947ec4c4-be9e-4202-90a6-d2e0acd624d5",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "85559db8-8948-4fe9-a679-fcc064849ab0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c23faba5-67c1-48c1-8696-8f20817af319",
        "cursor": {
          "ref": "390949a4-cd36-4e64-9175-afec7249f933",
          "length": 252,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "5e1fbc34-853a-499c-8b99-cd709621e693"
        },
        "item": {
          "id": "c23faba5-67c1-48c1-8696-8f20817af319",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "1858733d-c13d-4b36-a1c8-ab41de0bd1b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2aa23cb9-11c8-4fdd-9333-83d813505166",
        "cursor": {
          "ref": "f0719602-69e0-41a9-afe5-e11f7e89f81a",
          "length": 252,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "83218330-4fbf-4a21-9831-f9dd3cf8571f"
        },
        "item": {
          "id": "2aa23cb9-11c8-4fdd-9333-83d813505166",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "c7a297b2-04f7-4a3a-accb-4a8fb6e7910d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "153344db-740b-417a-97e0-52d61c5675a2",
        "cursor": {
          "ref": "15385ac8-cba2-4545-940f-13ec921c19d1",
          "length": 252,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "89810e39-b196-485e-b82f-bdc4a602c487"
        },
        "item": {
          "id": "153344db-740b-417a-97e0-52d61c5675a2",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "c3989b44-c792-458e-b068-5bdad3fd8ed1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "663069d5-57b1-4ed1-8bef-713d6797c6b4",
        "cursor": {
          "ref": "69f2470a-ca1e-4202-a170-2f67e95eec5a",
          "length": 252,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "a980eb28-0055-4d89-9769-a337957b222a"
        },
        "item": {
          "id": "663069d5-57b1-4ed1-8bef-713d6797c6b4",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "ac2dd0f2-4528-4e44-9210-b0cc1d6cd3d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e885fdd2-9504-4393-a023-85c5c1939edc",
        "cursor": {
          "ref": "a4dc5e75-6a1d-439d-8ad8-480acf30481b",
          "length": 252,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "315ea1bf-6c45-4c6d-a1d7-af09c86cabe2"
        },
        "item": {
          "id": "e885fdd2-9504-4393-a023-85c5c1939edc",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "66690cff-4f5f-4214-8959-e9dc2798c0a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fd2a7c1-cd2f-46c8-8dd3-7f7c4b10e99a",
        "cursor": {
          "ref": "fe60dd5e-61c5-4135-8e4c-8840b3b10409",
          "length": 252,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "9321285c-3f88-481e-820e-fd8b6698e40f"
        },
        "item": {
          "id": "9fd2a7c1-cd2f-46c8-8dd3-7f7c4b10e99a",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "60530cf5-c674-4475-a9fa-71a9e6ca485a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de3f7509-957b-4669-9dbe-c624376b55d3",
        "cursor": {
          "ref": "19d46fb6-c357-4296-a334-dae16b30fa1c",
          "length": 252,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "d92f347b-8613-497b-8822-3936b20726b9"
        },
        "item": {
          "id": "de3f7509-957b-4669-9dbe-c624376b55d3",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "a45998c3-5218-4f95-8146-162f9ba310c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c7c88e8-0ee9-41ff-88f0-78600e9dc65f",
        "cursor": {
          "ref": "1a8fad2f-a47f-44ff-b4fa-81b3d678cedb",
          "length": 252,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "4d206656-4096-4d2a-a96c-748508420723"
        },
        "item": {
          "id": "3c7c88e8-0ee9-41ff-88f0-78600e9dc65f",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "3f9ad0a0-8b42-4d59-a063-22ff3e4adf8e",
          "status": "Created",
          "code": 201,
          "responseTime": 583,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "97cf24dd-b376-4d6a-8ec5-a115df736a28",
        "cursor": {
          "ref": "54999573-a045-4bff-9a18-2e1fa591a804",
          "length": 252,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "3fd5a0ba-760f-4484-b2f4-081ed0fcfc0f"
        },
        "item": {
          "id": "97cf24dd-b376-4d6a-8ec5-a115df736a28",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "5b0f59e1-5d78-4eb3-9ef6-3eb626bacfcd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0532cc6-6ef9-4e1f-a41d-80a79efd04a0",
        "cursor": {
          "ref": "50fbd7c2-230a-4f2c-bcc5-8ae84f608910",
          "length": 252,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "bf23edf8-6e4b-4090-92fb-0408c77c3115"
        },
        "item": {
          "id": "d0532cc6-6ef9-4e1f-a41d-80a79efd04a0",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "30b667f3-d789-4b2c-8eae-928294d42a3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aac794da-35cd-4c7d-9748-caa128b95622",
        "cursor": {
          "ref": "6d5de7cb-cab5-4772-9d7d-126b0733da82",
          "length": 252,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "10aaa372-e23d-42e4-93a9-b8c2967437aa"
        },
        "item": {
          "id": "aac794da-35cd-4c7d-9748-caa128b95622",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "ff44a6c0-614f-4b9d-a460-6b7bb1c2c3fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da70e747-0193-4325-a626-47f07b9e7bf4",
        "cursor": {
          "ref": "b583ecba-aef2-486c-891e-bea51b812344",
          "length": 252,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "615011c1-4187-4d06-85a1-2d0a499bab4b"
        },
        "item": {
          "id": "da70e747-0193-4325-a626-47f07b9e7bf4",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "6e362db4-d8e0-4eee-8d62-53ee5dc4931c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48bac62b-950b-4dc9-a859-f50c4fb8784c",
        "cursor": {
          "ref": "e9fb23b9-5168-4ae2-867e-635174f43389",
          "length": 252,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "2bc8e453-9073-4e11-8a56-3d319d9495ad"
        },
        "item": {
          "id": "48bac62b-950b-4dc9-a859-f50c4fb8784c",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "e8831a8d-e859-4c93-a440-00586e75768a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b2d6c0f-2638-4fb9-b27b-b756743384c4",
        "cursor": {
          "ref": "a2190635-ec74-4a62-83b3-82605a08ab05",
          "length": 252,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "1dcd2dd2-e8da-4f78-89c4-6e359fae4910"
        },
        "item": {
          "id": "1b2d6c0f-2638-4fb9-b27b-b756743384c4",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "4c9f6637-79ff-473d-864a-d39572f35cf1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbee01a0-ed4f-408e-baf2-ffefd44d62b8",
        "cursor": {
          "ref": "f75a6202-d599-4072-b51b-d4727405f1d8",
          "length": 252,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "beef392c-60ea-4c85-8fd6-c4b188cb317c"
        },
        "item": {
          "id": "cbee01a0-ed4f-408e-baf2-ffefd44d62b8",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "1e6b3e8d-d3d1-42ac-a36e-d9a991887624",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c83bf112-2f1d-484b-bbcd-0595f3605720",
        "cursor": {
          "ref": "78c98bb6-0b85-4fe9-a977-43e18c1e15a8",
          "length": 252,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "faaac1d4-2d05-4aa6-93f6-19849ad9967c"
        },
        "item": {
          "id": "c83bf112-2f1d-484b-bbcd-0595f3605720",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "e2264405-b0bc-4399-a74c-24e65c45ac92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67986d65-d72a-4c22-8951-50e40bd2f27b",
        "cursor": {
          "ref": "2be0b7fd-68be-4546-aeea-ca3593a0c605",
          "length": 252,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "c6569801-ea8e-4b0c-88f5-fd74463e42f9"
        },
        "item": {
          "id": "67986d65-d72a-4c22-8951-50e40bd2f27b",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "f54704a6-d04e-4a8a-b1d4-99de1984a71d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3be75134-aebb-49af-b847-5bcb6dbecb64",
        "cursor": {
          "ref": "65eecc92-1d80-4477-bb50-f0e296bf6628",
          "length": 252,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "0908cb3a-ad93-45e3-a80b-d7af3ded3461"
        },
        "item": {
          "id": "3be75134-aebb-49af-b847-5bcb6dbecb64",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "9dccf588-c96a-4fa1-a3f6-3055745c35af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a6b5a1d-2ec8-4648-9fa7-b3d7428338f6",
        "cursor": {
          "ref": "0e7d954d-f9ae-4f91-8fc2-ca7bce15e162",
          "length": 252,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "f43f2fc9-2ab4-4f8c-9fc2-08c224920d20"
        },
        "item": {
          "id": "5a6b5a1d-2ec8-4648-9fa7-b3d7428338f6",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "daf7cd53-1e80-44b0-8830-268c2fe09397",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0faf90c5-d930-4db1-ab18-4d9d8146514d",
        "cursor": {
          "ref": "a3ebf65b-461b-4a1d-aa44-57acea3e2833",
          "length": 252,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "cb253896-a600-4411-a8a3-af892c64bc4e"
        },
        "item": {
          "id": "0faf90c5-d930-4db1-ab18-4d9d8146514d",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "c7a3b525-a5df-40cd-97b4-8ea610ae0dc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2932a8b0-75a7-4522-aee7-a26db99d3462",
        "cursor": {
          "ref": "24e87de6-e829-4027-ade6-0849ae8e5ba5",
          "length": 252,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "79a51bab-6f22-4964-aecf-3f75d7682519"
        },
        "item": {
          "id": "2932a8b0-75a7-4522-aee7-a26db99d3462",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "9f005204-d027-4485-9434-be7563dd91e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 268,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "4b3e8dbf-59d8-4d76-b92b-2a800944787e",
        "cursor": {
          "ref": "2c64942a-7f2e-457b-b65f-f511d92b1c8d",
          "length": 252,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "c7300c17-47d1-4ecf-b6c5-45eb0c9860b9"
        },
        "item": {
          "id": "4b3e8dbf-59d8-4d76-b92b-2a800944787e",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "80b32563-00b1-4a8b-aafb-b482f52b2128",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e282592a-439f-4f4b-abb6-1f97fc8cf059",
        "cursor": {
          "ref": "a75dd870-e5d3-429c-a813-8ae1c1ac8b3b",
          "length": 252,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "8172b38c-bf78-4edc-a2b6-7be72008f397"
        },
        "item": {
          "id": "e282592a-439f-4f4b-abb6-1f97fc8cf059",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "00e30d3a-f7ee-4a1c-9f4f-acf72fb33439",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "180603bf-1d5c-4a0f-9763-98f3e56862d0",
        "cursor": {
          "ref": "e58d31dd-b940-4b69-97f0-7f9649bef7ff",
          "length": 252,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "aca1dc71-d0d2-4511-81f8-8cd4e7c99026"
        },
        "item": {
          "id": "180603bf-1d5c-4a0f-9763-98f3e56862d0",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "b54dfc1b-9496-4fa6-b3e6-69b0afde822d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f30059c-1551-46c5-a85e-5276db3737c3",
        "cursor": {
          "ref": "bd4b2d68-a8ee-4e51-af50-907d808fbeec",
          "length": 252,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "a937e6f8-7dd4-4d3e-a8d2-90799859e290"
        },
        "item": {
          "id": "4f30059c-1551-46c5-a85e-5276db3737c3",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "65bffa83-b181-4fc8-9ef8-e05d19365273",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ccc492b-5203-4880-8bff-e18b50770fa1",
        "cursor": {
          "ref": "d1ed6e26-2012-496e-bc71-cf997c171f0d",
          "length": 252,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "c5b5484b-08e3-4b26-9d96-9a96a44fffa2"
        },
        "item": {
          "id": "9ccc492b-5203-4880-8bff-e18b50770fa1",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "b48c8558-cd08-4d43-bd1e-a16ecc913c3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd59127f-d6d2-46a5-98f2-f8948aa30637",
        "cursor": {
          "ref": "2b048dd6-8dc6-425f-930c-ef2e874ae1e3",
          "length": 252,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "6ba161a5-46eb-44b6-8f17-636e8ba9b8aa"
        },
        "item": {
          "id": "fd59127f-d6d2-46a5-98f2-f8948aa30637",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "b31d3018-f100-4add-b0a8-026e154518af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "535e0986-6ee5-4d62-b1a3-91d402075765",
        "cursor": {
          "ref": "540acf76-2706-4cae-8728-9f4e6c86f3a4",
          "length": 252,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "dab7bc89-04d5-43b8-bd4f-e664fefa1ef6"
        },
        "item": {
          "id": "535e0986-6ee5-4d62-b1a3-91d402075765",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "35d4198b-1fc0-41a2-b953-748d4943219a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 248,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "f18b089f-c804-432f-91e8-0098f9fda446",
        "cursor": {
          "ref": "a3cab359-0310-4bb3-aec5-dee862067ed4",
          "length": 252,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "44a25c73-e9ca-4590-9097-f18e33297c65"
        },
        "item": {
          "id": "f18b089f-c804-432f-91e8-0098f9fda446",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "9ab4f8aa-29f7-450b-b202-83759cfb811c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e9edcb9-e779-434c-b55d-17a5fd568665",
        "cursor": {
          "ref": "d12fce45-db90-4201-a15e-7cf34ad7ace1",
          "length": 252,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "27ea988a-c310-4a70-aa4e-6f6e6904f45c"
        },
        "item": {
          "id": "7e9edcb9-e779-434c-b55d-17a5fd568665",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "5cbbb1e9-6af2-4d0f-9ac4-3a45cbf0257f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99ddd255-1b79-4cc4-8b85-74888b3632bc",
        "cursor": {
          "ref": "a60ba951-61de-4d48-9580-54713cb1fd38",
          "length": 252,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "bed99649-84ac-4eef-bd24-7436974fe01e"
        },
        "item": {
          "id": "99ddd255-1b79-4cc4-8b85-74888b3632bc",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "84ec3b23-9814-4c83-9225-df00a4cc696d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdacf512-2b47-428a-b9ee-0a511d791443",
        "cursor": {
          "ref": "593d332f-1e4e-490b-8bc1-cf75bed32fa7",
          "length": 252,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "916b5514-4966-451f-94b0-f18ab5f658b5"
        },
        "item": {
          "id": "bdacf512-2b47-428a-b9ee-0a511d791443",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "d43af51f-536f-47bb-ad4e-5cb57aa6c0d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f040d5ed-559b-4655-b89b-84918285f6a0",
        "cursor": {
          "ref": "b9ab3c91-bfa7-45a0-99dd-2ac94857902e",
          "length": 252,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "55eb40a0-c979-4e0a-918f-4a0f4d2424d4"
        },
        "item": {
          "id": "f040d5ed-559b-4655-b89b-84918285f6a0",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "4a1db19a-5e77-4bae-8ba5-11ca200df9d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36f942dd-252b-470c-b92c-6024551c64b2",
        "cursor": {
          "ref": "80be42c8-cd7c-4d3a-afef-422d9d755718",
          "length": 252,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "cbe1b046-4e75-4c8d-af03-8c0e27db3a4f"
        },
        "item": {
          "id": "36f942dd-252b-470c-b92c-6024551c64b2",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "56990976-d151-4e7f-b1db-68685cd606e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d613e5dc-e1e5-4432-b25d-762db30de4bd",
        "cursor": {
          "ref": "a381796d-3a2a-4aff-85e4-d7298d76d5ea",
          "length": 252,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "bbbb496f-8469-4684-a3ae-72d6bc169955"
        },
        "item": {
          "id": "d613e5dc-e1e5-4432-b25d-762db30de4bd",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "a0e3deb6-39fa-41a9-9dd2-4f56f9e6697d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe729cdb-e1d3-40fc-8292-1425d5e69dbb",
        "cursor": {
          "ref": "0fb6d681-85eb-45e2-94a0-43c29e81abf4",
          "length": 252,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "e548ac4e-6b96-4783-a0d0-a0d1b6276551"
        },
        "item": {
          "id": "fe729cdb-e1d3-40fc-8292-1425d5e69dbb",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "8212f7e0-1e6a-4ff8-9b5b-eda1f6e785b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01add205-f73b-4bf2-badb-a84ae9400d21",
        "cursor": {
          "ref": "34fa981d-5b8c-467e-9331-bca35c924d79",
          "length": 252,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "ab210f8e-417d-4f2f-9e15-979e8b98727d"
        },
        "item": {
          "id": "01add205-f73b-4bf2-badb-a84ae9400d21",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "c820f9a4-0e48-458e-bc81-b986990768d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "676a2297-0431-4f29-9dc4-b1579ce5cb8c",
        "cursor": {
          "ref": "89c7da1b-8918-4a93-a3e7-4e03392102a8",
          "length": 252,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "764f7f4f-8799-4e56-a39f-1f30f7375eb2"
        },
        "item": {
          "id": "676a2297-0431-4f29-9dc4-b1579ce5cb8c",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "b0197930-217a-43b0-95d7-2f3bcb4c3713",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2097eb9-e0e2-4162-8cf8-e077431e0c06",
        "cursor": {
          "ref": "d5b8961c-ba74-4ef7-a4c5-11c3214e65ab",
          "length": 252,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "575c54dc-2fb4-449e-ad5e-087e646eecd1"
        },
        "item": {
          "id": "c2097eb9-e0e2-4162-8cf8-e077431e0c06",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "14f0b8d7-d6ea-4331-b47d-ed417f7c8619",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "875eb45e-1ab4-4e81-a1ae-6d88ae441ca1",
        "cursor": {
          "ref": "b8ffe57e-75b6-4ad6-9256-a22949c53345",
          "length": 252,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "3706018a-3f5f-4c0d-98e7-07e6667ae6f1"
        },
        "item": {
          "id": "875eb45e-1ab4-4e81-a1ae-6d88ae441ca1",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "949e9afa-495e-4874-b138-5d5d6bb56b23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55f69091-998c-4450-a1a0-8c6f2e8e09af",
        "cursor": {
          "ref": "eb5c2d28-afb3-43a1-a34a-8e4cf1275b17",
          "length": 252,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "9477a932-46be-40d3-be90-a404b3353281"
        },
        "item": {
          "id": "55f69091-998c-4450-a1a0-8c6f2e8e09af",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "ed375999-7b66-4350-8ccb-981a29235dac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2294afe5-63c8-4d7f-b154-e91391ac9e95",
        "cursor": {
          "ref": "5437d95b-748d-42ae-83d0-d09899e2b7b6",
          "length": 252,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "64d58e85-4f6b-430d-a8f9-fc2d98e18094"
        },
        "item": {
          "id": "2294afe5-63c8-4d7f-b154-e91391ac9e95",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "e6daeff6-42be-49db-9306-10c973ac8828",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "194c91b9-d09f-43e3-9bf5-97e3b4a08ed3",
        "cursor": {
          "ref": "834ce179-36e0-4ac5-b184-38d13281fc51",
          "length": 252,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "546f2869-9e33-4147-bc9b-ef7c9e94299a"
        },
        "item": {
          "id": "194c91b9-d09f-43e3-9bf5-97e3b4a08ed3",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "92275375-c30b-4807-8b4c-2d841e198648",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f254bd9-f2d4-4d77-b05c-de96bc18afd2",
        "cursor": {
          "ref": "b55d9959-d29d-4cd5-9cfd-fe8ad4a36b4b",
          "length": 252,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "79149a3b-42a3-4754-961e-6e05de818f33"
        },
        "item": {
          "id": "1f254bd9-f2d4-4d77-b05c-de96bc18afd2",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "e74d8b01-a21e-4db9-8e64-86ed4a3243a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07871a98-d6c9-40f4-9fb3-e8d2afbc8234",
        "cursor": {
          "ref": "03d4b265-69fa-44e2-aa49-3c0219cd86eb",
          "length": 252,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "ea006b46-0bfc-4673-a661-0347afb374e6"
        },
        "item": {
          "id": "07871a98-d6c9-40f4-9fb3-e8d2afbc8234",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "c6d2d8e2-fd08-43d4-9d98-68550ce297d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 130,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "031c1d29-1445-4dc9-b1b5-d15fc98e7f24",
        "cursor": {
          "ref": "ee58f732-60b4-4d88-9dc8-da4f014ebab7",
          "length": 252,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "885cfa92-cc3e-4cf3-a328-04f7aed35b38"
        },
        "item": {
          "id": "031c1d29-1445-4dc9-b1b5-d15fc98e7f24",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "fa02f459-6283-4a41-9a40-b72e5f384fab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2529c13d-3c99-4580-8b63-5653b30d1ed9",
        "cursor": {
          "ref": "25a64938-f269-47fa-9953-a34403d6f02c",
          "length": 252,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "7bd39285-903a-4b05-9e26-29f706297d98"
        },
        "item": {
          "id": "2529c13d-3c99-4580-8b63-5653b30d1ed9",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "3eda3973-ae0b-448d-ab39-b7856eca8ae3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dce95601-57f7-4cde-93b0-0b3738984850",
        "cursor": {
          "ref": "d2703858-f82d-4b6e-978e-2a6c460125d1",
          "length": 252,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "f18b2292-ef88-4e9e-ba2c-e2df7583b186"
        },
        "item": {
          "id": "dce95601-57f7-4cde-93b0-0b3738984850",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "88fcea56-03e0-4fea-89bd-eea3a25c610f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50075349-45ee-4bda-9bd7-582d8c639a0f",
        "cursor": {
          "ref": "5402e993-7196-4ffa-a6cf-25c0cce2b806",
          "length": 252,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "02bfceec-2dc3-41c6-811b-6a1fdc6422c0"
        },
        "item": {
          "id": "50075349-45ee-4bda-9bd7-582d8c639a0f",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "2834321b-ea71-4b1b-9631-c63133b54a31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 557
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bab338fb-2c48-4133-8319-d3f4213eab80",
        "cursor": {
          "ref": "8b1e4114-3114-46bb-b9a3-da1bc400690d",
          "length": 252,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "65adffd9-d36b-4a92-b244-b760b36ca9b2"
        },
        "item": {
          "id": "bab338fb-2c48-4133-8319-d3f4213eab80",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "0e830ee9-c378-4d76-90ba-d14033e9e357",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96e48bd1-cf93-441c-9399-e3a810d8d777",
        "cursor": {
          "ref": "a16381c2-e908-4256-849c-b27f61146761",
          "length": 252,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "827b6451-d4a0-4bce-9219-2c8f0dd57102"
        },
        "item": {
          "id": "96e48bd1-cf93-441c-9399-e3a810d8d777",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "40ef17ef-f451-4e35-8e28-4ff3db12d4e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea3e12eb-a274-45fd-b1a2-8ba4e602b16f",
        "cursor": {
          "ref": "55cfd409-51aa-408a-9e85-5c3f8e0ec3c4",
          "length": 252,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "45116b05-10e6-4694-b2df-4c824b236bb7"
        },
        "item": {
          "id": "ea3e12eb-a274-45fd-b1a2-8ba4e602b16f",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "f2bcec8b-9d51-4be9-afbb-423bf2483f84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "662b5e8a-dc8a-4bcb-bf37-6cecc279a138",
        "cursor": {
          "ref": "8ae865af-1f24-4e58-84a9-d9df0e0d5aec",
          "length": 252,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "f2e63b6c-03dd-4362-aabc-a08550bfe481"
        },
        "item": {
          "id": "662b5e8a-dc8a-4bcb-bf37-6cecc279a138",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "04d885dd-f35c-4bd2-89ce-73af8014fed2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ed2b293-11f4-425e-8259-2a8887855617",
        "cursor": {
          "ref": "fcd3e93a-4369-4f91-ae89-fb4eae07c234",
          "length": 252,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "76348af4-c10c-4d0d-99e6-791e5daa33be"
        },
        "item": {
          "id": "1ed2b293-11f4-425e-8259-2a8887855617",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "da6b6914-9080-4de5-a170-0d706cb996af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70c8673a-58bf-499b-980a-cc5ad3a04fbc",
        "cursor": {
          "ref": "1255cfb3-42fb-4e23-9159-50bf3012cbed",
          "length": 252,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "85b63047-379c-436f-a33a-260d72528a34"
        },
        "item": {
          "id": "70c8673a-58bf-499b-980a-cc5ad3a04fbc",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "10131eaf-9400-498b-8364-8cfefc37f830",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5317f647-8f45-45ca-8d03-46dec23aa9f8",
        "cursor": {
          "ref": "2aa4c1a2-26a5-4bc8-a457-3503382a303b",
          "length": 252,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "32e873d0-27c5-49a5-a724-10b420d7cb51"
        },
        "item": {
          "id": "5317f647-8f45-45ca-8d03-46dec23aa9f8",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "72f611dd-f62d-4130-b6dd-a5ccf95088a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b18305b4-c02e-405e-a1b5-8e34ea382849",
        "cursor": {
          "ref": "d0ad68ab-53c0-47e5-b1d9-5e36a1196636",
          "length": 252,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "4d56204b-7da0-4e7c-80e7-e14a55561bbe"
        },
        "item": {
          "id": "b18305b4-c02e-405e-a1b5-8e34ea382849",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "a4f00775-813d-4602-bcaa-743d631c21a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "812fac3a-1b60-4be0-854c-2621d01b7a64",
        "cursor": {
          "ref": "052fbd36-fb0a-41aa-829b-af0e6f45ff7e",
          "length": 252,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "7e838985-1f54-4a28-9fb8-a55500c5e75d"
        },
        "item": {
          "id": "812fac3a-1b60-4be0-854c-2621d01b7a64",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "35714204-2694-407f-b649-991c8ae3a9b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eaf13cc6-7235-4c33-9ee9-11c0cbae7142",
        "cursor": {
          "ref": "05f9c068-6a4a-4d33-a742-4dae4965f240",
          "length": 252,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "07bcad2c-58fd-401a-9946-f1f42da12fd6"
        },
        "item": {
          "id": "eaf13cc6-7235-4c33-9ee9-11c0cbae7142",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "07648245-0afd-42ce-8683-4cb29d5107af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 296,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed4e9ac4-b475-4863-94b8-b6845bd27369",
        "cursor": {
          "ref": "a8e98f99-6777-4bc7-9731-2924a7917495",
          "length": 252,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "fab48ce4-196f-480e-b94f-fe11130c9d80"
        },
        "item": {
          "id": "ed4e9ac4-b475-4863-94b8-b6845bd27369",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "51034b9f-0d8f-47be-9a99-8b42abf8d3ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "798814c3-f9db-4a03-bce8-ffc99dd5afa7",
        "cursor": {
          "ref": "be553f6c-82c3-47ec-88c7-7fab0e1b3478",
          "length": 252,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "bb5f143a-c110-4f9c-b311-466e8bfbf5ca"
        },
        "item": {
          "id": "798814c3-f9db-4a03-bce8-ffc99dd5afa7",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "624a0ba2-cc5d-4300-915c-f4e2cbe6d150",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01d2d67a-ac9d-439e-b0f7-c69857049848",
        "cursor": {
          "ref": "b2c70e1d-ad2f-4faf-bcae-d8f5de16f5ea",
          "length": 252,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "6493a2c3-4ed2-4eb7-859a-42d1bb952125"
        },
        "item": {
          "id": "01d2d67a-ac9d-439e-b0f7-c69857049848",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "5cdeb77b-290c-435f-a918-f9e3ae41270a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d8de215-55fc-4976-8bbb-ce5c86f4c182",
        "cursor": {
          "ref": "a39d516c-e38a-487a-ad3f-0d75258eee63",
          "length": 252,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "c247c42b-87ae-4850-bc41-07506a8585e7"
        },
        "item": {
          "id": "0d8de215-55fc-4976-8bbb-ce5c86f4c182",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "87dc898f-7092-4292-9512-cc01c57494ad",
          "status": "Created",
          "code": 201,
          "responseTime": 582,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "17738137-e5c4-44ae-85c5-94d5a315e17e",
        "cursor": {
          "ref": "0569803b-b3d5-43d0-909f-2c4c80966005",
          "length": 252,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "c921f30b-b5d8-407a-b6e7-9a9ee1945d17"
        },
        "item": {
          "id": "17738137-e5c4-44ae-85c5-94d5a315e17e",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "a75a0d18-a58f-4cbd-9039-f730b2bfbb1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6bb7d5a-e615-41af-ae20-a11b90049735",
        "cursor": {
          "ref": "a33ff89d-fee2-484c-a8e8-b14274a1864a",
          "length": 252,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "89063453-c449-4297-bab4-c6cfe1d04770"
        },
        "item": {
          "id": "f6bb7d5a-e615-41af-ae20-a11b90049735",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "784c9600-ed71-4b1b-b37c-ffb54ec533a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc845dcd-4d03-4752-8fe4-7c0ba48b8964",
        "cursor": {
          "ref": "4167c625-79cc-4bb3-bb91-6cb402c30ab1",
          "length": 252,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "66040184-cde2-416b-8bd6-5fee445226bd"
        },
        "item": {
          "id": "cc845dcd-4d03-4752-8fe4-7c0ba48b8964",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "278b76a8-8286-44a8-893f-ec482fd6fca0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 389
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abfcbc28-a359-455e-bba7-ee67530b121e",
        "cursor": {
          "ref": "1ccecde4-a880-48dd-9408-7ab359c1d4f3",
          "length": 252,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "f130fe37-a786-4673-b184-1a6b5f3ab859"
        },
        "item": {
          "id": "abfcbc28-a359-455e-bba7-ee67530b121e",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "fb2d9137-f9ec-4d85-9666-20303e57103c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 388
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41eb9b50-4767-4128-b61d-773bb2a9ff46",
        "cursor": {
          "ref": "37498d25-16ef-4fd8-851f-1ab2d9e4ccee",
          "length": 252,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "82b6dfca-843c-44bd-85b5-793a9834f8ba"
        },
        "item": {
          "id": "41eb9b50-4767-4128-b61d-773bb2a9ff46",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "750b5968-642e-4570-b57c-2a16e6b0a84a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "279b9901-7f4b-4a1c-b58c-05cae3e42317",
        "cursor": {
          "ref": "b4ccd4eb-c451-4ef0-90b6-6499d9fe3b77",
          "length": 252,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "5e607ead-7802-401f-a4ac-59d05dd10b3f"
        },
        "item": {
          "id": "279b9901-7f4b-4a1c-b58c-05cae3e42317",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "66bd5000-a4d1-475c-bd6e-afa6a27cb70b",
          "status": "Created",
          "code": 201,
          "responseTime": 556,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "fe867192-9e9c-4853-a30d-919e2615ad4c",
        "cursor": {
          "ref": "98a703d5-57cb-407c-b281-75b7c1bcbeed",
          "length": 252,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "9c3b952b-ead9-4269-a64b-285b79c2946d"
        },
        "item": {
          "id": "fe867192-9e9c-4853-a30d-919e2615ad4c",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "79bafea7-2019-4e5a-9354-f5964e56cba6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92e1a36d-5892-49db-a7f8-7a36374de077",
        "cursor": {
          "ref": "7f97220c-371f-420c-b033-8c29d9bfec6e",
          "length": 252,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "934299aa-a49d-4d38-b5c2-9d82dd48cca7"
        },
        "item": {
          "id": "92e1a36d-5892-49db-a7f8-7a36374de077",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "48301dab-fd26-47fc-8248-ebe4dc9697d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd796adb-6998-4e23-9e9a-1e83f7fc1ccb",
        "cursor": {
          "ref": "7499b14f-05ed-4f46-b4eb-65ab2125b674",
          "length": 252,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "a5e0bc0c-204e-49fa-9187-e518fbeed557"
        },
        "item": {
          "id": "dd796adb-6998-4e23-9e9a-1e83f7fc1ccb",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "52497d3f-1e32-405d-a5d5-934bb9a71c60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35319162-e6cf-4771-878e-fc98f7fe263d",
        "cursor": {
          "ref": "e7cfad58-6de6-4ba0-82cc-7383235224bc",
          "length": 252,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "a70d6962-8397-4ff4-8419-ce8acb7cd62f"
        },
        "item": {
          "id": "35319162-e6cf-4771-878e-fc98f7fe263d",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "a585a130-c82d-4269-81ba-578f50a4e7f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3d51a55-4cb9-473f-85e3-7a10d9f78560",
        "cursor": {
          "ref": "ceb00a33-ae02-4330-b69c-bd553da907ed",
          "length": 252,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "0181301f-819e-4c7d-9c41-4bf15423a38c"
        },
        "item": {
          "id": "b3d51a55-4cb9-473f-85e3-7a10d9f78560",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "d9fdd097-2bc9-4bc9-bcc8-a32db5bbdc35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbfee104-86bf-412a-bf6c-0841afc8d2d0",
        "cursor": {
          "ref": "a8455ffb-388b-4ce6-a2e1-464781ab183e",
          "length": 252,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "9f18eb17-e57f-45af-8f13-9b5a46f88b04"
        },
        "item": {
          "id": "cbfee104-86bf-412a-bf6c-0841afc8d2d0",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "2dfa9534-1393-4a54-aab5-df307685902a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd2751ad-8586-44ed-a488-9d257a8a9d1d",
        "cursor": {
          "ref": "7366e240-6840-4879-bfce-c8f135fa6505",
          "length": 252,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "840493b8-5f6f-4689-b657-385841f0ac89"
        },
        "item": {
          "id": "fd2751ad-8586-44ed-a488-9d257a8a9d1d",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "4f08b216-6e27-4002-8aaf-b362738ff81b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "689a69df-9143-4b2c-bead-05f048ff991d",
        "cursor": {
          "ref": "efab37b9-1c0a-412c-bb52-1b6a0bfeb41d",
          "length": 252,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "fc23da20-8caf-4772-90e6-3419b00937fe"
        },
        "item": {
          "id": "689a69df-9143-4b2c-bead-05f048ff991d",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "495962a5-1929-4c11-bf84-2594079c50af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c12be97-3d2f-4c2c-b2e9-50bc5385ccc7",
        "cursor": {
          "ref": "b937debd-c51a-4bf8-8dc8-2d1b8ae44fd8",
          "length": 252,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "35f170f6-9390-497e-877c-c7bc1ca52f6c"
        },
        "item": {
          "id": "4c12be97-3d2f-4c2c-b2e9-50bc5385ccc7",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "bac0ccbb-cc75-45c2-a130-99cb545e87d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "97d40056-121a-41c0-825e-e0f29a9ddc32",
        "cursor": {
          "ref": "81b98ec3-7333-4f55-ae60-963988c77c28",
          "length": 252,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "597c0f1a-6750-4ad0-958d-6d461ad85a46"
        },
        "item": {
          "id": "97d40056-121a-41c0-825e-e0f29a9ddc32",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "a99e7249-8637-4de0-a4a3-05f7f3594948",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "8f5e7d1f-74b5-43b4-8637-88a9de9025ce",
        "cursor": {
          "ref": "058d71d6-1f75-423a-8618-bade4949e9b3",
          "length": 252,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "1df0cedd-416f-424a-b77e-98bcc21b0335"
        },
        "item": {
          "id": "8f5e7d1f-74b5-43b4-8637-88a9de9025ce",
          "name": "credentials_issue"
        },
        "response": {
          "id": "ab5aa950-2933-4e21-b2d1-c026e61a1219",
          "status": "Created",
          "code": 201,
          "responseTime": 587,
          "responseSize": 636
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "64cf2986-63ce-4a66-8ae4-dcdd4ca3ed06",
        "cursor": {
          "ref": "16b184c9-ce26-42df-9b5f-853e37681c32",
          "length": 252,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "ff3d7c14-6b00-434e-9a4a-ea2505e458a1"
        },
        "item": {
          "id": "64cf2986-63ce-4a66-8ae4-dcdd4ca3ed06",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "04948f4c-8405-4b3a-a8cf-78786f769d81",
          "status": "Created",
          "code": 201,
          "responseTime": 544,
          "responseSize": 690
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e558df9-8bd8-40ec-9df7-08b6a0ba7037",
        "cursor": {
          "ref": "99214219-c2f1-4de0-ad0c-0bdcb73cc7e3",
          "length": 252,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "8f6aa566-8152-4af8-b697-6740b7cde1f1"
        },
        "item": {
          "id": "8e558df9-8bd8-40ec-9df7-08b6a0ba7037",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "bf77aa89-0616-4dc7-8b9c-d2389bc37cdf",
          "status": "Created",
          "code": 201,
          "responseTime": 540,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc3561e5-ddb3-494a-9bf9-6255e2fe7484",
        "cursor": {
          "ref": "f29007ca-5f25-40da-bcf3-43cab6034ac8",
          "length": 252,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "3040683a-babd-4452-b791-37ab1d799568"
        },
        "item": {
          "id": "bc3561e5-ddb3-494a-9bf9-6255e2fe7484",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "c11567e6-e509-4639-868e-631e9f246fa0",
          "status": "Created",
          "code": 201,
          "responseTime": 547,
          "responseSize": 659
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff074cbd-8207-4e4c-83f7-28101213f82a",
        "cursor": {
          "ref": "16e28701-91f3-48e7-9532-3e88c5cde805",
          "length": 252,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "45314942-ab8d-45be-80ae-f2127324f86d"
        },
        "item": {
          "id": "ff074cbd-8207-4e4c-83f7-28101213f82a",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "d19dddfe-5dd5-49dd-a879-579eaa4d6b02",
          "status": "Created",
          "code": 201,
          "responseTime": 549,
          "responseSize": 627
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2c50910-6bac-4787-b30c-741069df574f",
        "cursor": {
          "ref": "a3a63f73-f95e-428d-8336-e88fd73ea028",
          "length": 252,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "4f19156e-05c0-459f-bf22-c032e43616dd"
        },
        "item": {
          "id": "e2c50910-6bac-4787-b30c-741069df574f",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "ff6c8dc2-d11c-4faa-930e-29ee15e49dcf",
          "status": "Created",
          "code": 201,
          "responseTime": 553,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ebc12ba-9ea3-4a8f-ba1b-c501910a7636",
        "cursor": {
          "ref": "56a96a48-3b0e-4c38-8099-005f4dfe6563",
          "length": 252,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "c8b8a5eb-7263-4f67-8da1-fcd4f72c70b9"
        },
        "item": {
          "id": "4ebc12ba-9ea3-4a8f-ba1b-c501910a7636",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "3d19a886-2a7d-4d39-8df5-8c59ff3a2a87",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "4ebc12ba-9ea3-4a8f-ba1b-c501910a7636",
        "cursor": {
          "ref": "56a96a48-3b0e-4c38-8099-005f4dfe6563",
          "length": 252,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "c8b8a5eb-7263-4f67-8da1-fcd4f72c70b9"
        },
        "item": {
          "id": "4ebc12ba-9ea3-4a8f-ba1b-c501910a7636",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "3d19a886-2a7d-4d39-8df5-8c59ff3a2a87",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "d45f7b1b-8ea7-40be-9d25-6cc2de3c7048",
        "cursor": {
          "ref": "66e6620d-5bb2-45a0-a835-cec1e64e644c",
          "length": 252,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "c6d75316-779e-4ffc-a230-fecd8eaaca95"
        },
        "item": {
          "id": "d45f7b1b-8ea7-40be-9d25-6cc2de3c7048",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "09b37487-925d-48bc-b9ec-285a1e508839",
          "status": "OK",
          "code": 200,
          "responseTime": 13,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "0de73672-3ba9-4187-93de-d5ea5c748d69",
        "cursor": {
          "ref": "42a820c3-0e41-4574-9946-90b90db83ebf",
          "length": 252,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "55c5265e-4eea-4ec2-88ee-a41f96234d2c"
        },
        "item": {
          "id": "0de73672-3ba9-4187-93de-d5ea5c748d69",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "4718a148-c7ee-427c-897e-76584d175027",
          "status": "OK",
          "code": 200,
          "responseTime": 19,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "62f08258-90d4-4434-a13f-ddfe644abf5a",
        "cursor": {
          "ref": "55f307e5-433f-42f9-a5e0-0fe03a264f4b",
          "length": 252,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "223a81e4-738c-4a42-8c08-a6bdf4eaca49"
        },
        "item": {
          "id": "62f08258-90d4-4434-a13f-ddfe644abf5a",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "4935f944-152e-44aa-9492-6387f50657f2",
          "status": "OK",
          "code": 200,
          "responseTime": 15,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "9fabd45b-461b-46de-8001-a7b1dd573fcc",
        "cursor": {
          "ref": "b8834ac7-748e-4ec1-99d2-b07f3645eae5",
          "length": 252,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "3825e37f-9480-446f-bf9e-01911184b17f"
        },
        "item": {
          "id": "9fabd45b-461b-46de-8001-a7b1dd573fcc",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "5f1e2561-372f-4968-bfae-9d5b38473320",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "964cc477-ac95-4b37-8019-f029a96dbc81",
        "cursor": {
          "ref": "4b50113f-fa75-420b-a0cd-01cf7033c390",
          "length": 252,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "d217534b-4e16-473b-a97c-7957d2e9f4c2"
        },
        "item": {
          "id": "964cc477-ac95-4b37-8019-f029a96dbc81",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "05338c2f-ea29-43e9-ab16-13b09cc24006",
          "status": "OK",
          "code": 200,
          "responseTime": 15,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "30e7845e-3143-4f95-99dd-11b7b5efdda0",
        "cursor": {
          "ref": "d0888047-c963-4ae5-b19d-79a5ce62273f",
          "length": 252,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "bb5d8ab5-47b6-4168-abd3-9f0017d778e7"
        },
        "item": {
          "id": "30e7845e-3143-4f95-99dd-11b7b5efdda0",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "5d04b50e-1aa8-46c6-984b-2d375f6b8091",
          "status": "OK",
          "code": 200,
          "responseTime": 19,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "f8945375-23ce-4231-841a-58c9bca15ad3",
        "cursor": {
          "ref": "c252c1ac-7729-4f88-8f61-e2e85bdaea57",
          "length": 252,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "57484069-4d2c-4d34-8c70-5dc971096ee7"
        },
        "item": {
          "id": "f8945375-23ce-4231-841a-58c9bca15ad3",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "f3a9170f-abe7-4627-bac3-0da72f0cbbff",
          "status": "OK",
          "code": 200,
          "responseTime": 16,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "e44f4b59-a9f6-44e0-b219-c3f9ad860cdf",
        "cursor": {
          "ref": "bee95a88-5838-4c60-ac29-5ae36edaafd1",
          "length": 252,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "fefc4084-6fdb-48b6-a1d9-b930b01be9b0"
        },
        "item": {
          "id": "e44f4b59-a9f6-44e0-b219-c3f9ad860cdf",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "7b942c62-1515-4eaf-91cb-424549c29442",
          "status": "OK",
          "code": 200,
          "responseTime": 17,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "a8bd4257-8205-4ab7-8d89-7273f638513e",
        "cursor": {
          "ref": "632a9b81-d449-4975-85e7-9cac3767eac0",
          "length": 252,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "843d13b1-f758-4d74-ab70-088b5b9838ef"
        },
        "item": {
          "id": "a8bd4257-8205-4ab7-8d89-7273f638513e",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "429d42ef-8980-4dfd-ad2c-97c607005761",
          "status": "OK",
          "code": 200,
          "responseTime": 16,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "4c55e3eb-6b36-47b8-bcf3-15ec82974767",
        "cursor": {
          "ref": "aa0c9f62-3f80-427f-a207-9339b90a20e7",
          "length": 252,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "33f3f828-715c-42ce-9da1-3baeb6d0a22a"
        },
        "item": {
          "id": "4c55e3eb-6b36-47b8-bcf3-15ec82974767",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "d2ce7e1e-0d96-4463-abe9-394d957ee45a",
          "status": "OK",
          "code": 200,
          "responseTime": 18,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "082594c7-7b1f-411f-95eb-11c1310034db",
        "cursor": {
          "ref": "11f2fc25-45fe-476e-bc34-f354b85a069d",
          "length": 252,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "ea1e2528-7718-414d-9c9b-f3842bc9a88e"
        },
        "item": {
          "id": "082594c7-7b1f-411f-95eb-11c1310034db",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "7b65e451-de28-4f98-b47a-af3335e53c39",
          "status": "OK",
          "code": 200,
          "responseTime": 23,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "3472bb1a-e059-463c-b3e5-b65a7603001a",
        "cursor": {
          "ref": "3dc61f8d-fe4a-44bf-b42b-2ff4783a4c74",
          "length": 252,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "197e0f2b-7a57-48c9-9a12-08efeea0e64c"
        },
        "item": {
          "id": "3472bb1a-e059-463c-b3e5-b65a7603001a",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "c7b22bbb-6d61-4cbe-b858-becde826cd52",
          "status": "OK",
          "code": 200,
          "responseTime": 20,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "c890c404-ee0f-42e7-882e-71a044cebb3a",
        "cursor": {
          "ref": "fa864d4a-611c-4f08-98ef-6dcdcbce958d",
          "length": 252,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "ded06722-12fc-4861-a228-1cb46472f866"
        },
        "item": {
          "id": "c890c404-ee0f-42e7-882e-71a044cebb3a",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "a776c52e-ac66-4332-bf7a-2be180d759f3",
          "status": "OK",
          "code": 200,
          "responseTime": 21,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "a7a2e46a-148e-426f-a5d2-43b2e0cfa1a6",
        "cursor": {
          "ref": "575047d7-22bd-4749-af6e-9bd7c8e3e2f1",
          "length": 252,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "c111e4ad-7e2f-45fe-9b43-18b32f010aff"
        },
        "item": {
          "id": "a7a2e46a-148e-426f-a5d2-43b2e0cfa1a6",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "52775022-1cce-462a-ad84-297490ec619e",
          "status": "OK",
          "code": 200,
          "responseTime": 18,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "dc24b75d-d79d-4250-b29b-00628c0eedad",
        "cursor": {
          "ref": "813b0aec-3a30-444f-ad41-62a1e0441ffd",
          "length": 252,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "0c9a1883-ae0a-48c1-bd64-e5fd71c9bace"
        },
        "item": {
          "id": "dc24b75d-d79d-4250-b29b-00628c0eedad",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "9693be3e-4c66-48d4-a672-b7d2cd3356a4",
          "status": "OK",
          "code": 200,
          "responseTime": 14,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "74b40791-95dc-4ecc-8fdd-7ddfce6f50cb",
        "cursor": {
          "ref": "2e50d3ac-cfcf-4fd0-9bf8-6988dad1ca0f",
          "length": 252,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "c58e263b-44d3-4f9d-982b-008120010466"
        },
        "item": {
          "id": "74b40791-95dc-4ecc-8fdd-7ddfce6f50cb",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "da2000ac-8f85-417d-a7eb-f6e10846c140",
          "status": "OK",
          "code": 200,
          "responseTime": 27,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "853373c0-cde8-4ddf-b9c3-18fdc5f975be",
        "cursor": {
          "ref": "a16329d3-0ffb-4e2e-8e96-6cd8ba80fc63",
          "length": 252,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "307e9f3e-9449-41da-b81a-dd4e31197f5f"
        },
        "item": {
          "id": "853373c0-cde8-4ddf-b9c3-18fdc5f975be",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "4ab02a2c-3fb5-4fee-a19e-84e887973484",
          "status": "OK",
          "code": 200,
          "responseTime": 36,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "3f987a57-f60d-4adf-bc93-56e5532c8431",
        "cursor": {
          "ref": "7bb5a222-4424-4715-a9e1-bbbbd13050b7",
          "length": 252,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "1b21d552-1979-4cdc-b03d-f2781c4eba5f"
        },
        "item": {
          "id": "3f987a57-f60d-4adf-bc93-56e5532c8431",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "5cf5cadc-f5a9-40a2-ada3-de74f0f94261",
          "status": "OK",
          "code": 200,
          "responseTime": 26,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "8416fc90-fab7-4684-a194-cd0f5664f575",
        "cursor": {
          "ref": "6e611137-8e6a-4ccc-b58f-f55718d2cf7b",
          "length": 252,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "7602aafa-8561-42e0-b3ec-7a17c56aa011"
        },
        "item": {
          "id": "8416fc90-fab7-4684-a194-cd0f5664f575",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "e7a97a0f-ccbf-4586-871f-114e88b477c2",
          "status": "OK",
          "code": 200,
          "responseTime": 28,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "386f6925-0cb7-497f-8c4a-d5cb777d2d1c",
        "cursor": {
          "ref": "7f3efef8-8be8-4aaa-b588-f67020d1cf22",
          "length": 252,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "688b29c3-6df8-45e9-af6a-8278c4ce4af8"
        },
        "item": {
          "id": "386f6925-0cb7-497f-8c4a-d5cb777d2d1c",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "e9c869fd-f371-4da7-8c6a-f1b1542aaceb",
          "status": "OK",
          "code": 200,
          "responseTime": 17,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "caf57417-369a-4ca5-8baf-93daa127ce56",
        "cursor": {
          "ref": "9e856a4a-433d-4e74-ae04-bdeaa3f50fd2",
          "length": 252,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "32b5f3f8-083f-457b-a875-d1850d8cb0ba"
        },
        "item": {
          "id": "caf57417-369a-4ca5-8baf-93daa127ce56",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "6fbbfa08-7c1c-4bab-8e97-bcb218932db8",
          "status": "OK",
          "code": 200,
          "responseTime": 18,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "efb44210-f5ec-4d4c-8d8e-feda7dcf9890",
        "cursor": {
          "ref": "ff109b6b-527b-4ead-b119-3258508b701b",
          "length": 252,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "7b302537-90b6-47c0-8d2a-f7fd3c26bc80"
        },
        "item": {
          "id": "efb44210-f5ec-4d4c-8d8e-feda7dcf9890",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "8909d1a8-cef7-40f5-b086-6afacd048523",
          "status": "OK",
          "code": 200,
          "responseTime": 27,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "ce2eaf2e-0ef1-49f7-8e3b-742816773e89",
        "cursor": {
          "ref": "926132f0-00e6-4a1a-bae0-51239b51838b",
          "length": 252,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "65cd46f6-4b82-40d6-89e9-dd29dd0f10c6"
        },
        "item": {
          "id": "ce2eaf2e-0ef1-49f7-8e3b-742816773e89",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "35d079e7-bf09-40e9-a218-ce4e693bba74",
          "status": "OK",
          "code": 200,
          "responseTime": 26,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "620be37e-4fc3-4081-918a-ad36ce77a4e4",
        "cursor": {
          "ref": "6055c672-336c-4154-a46c-0c3edaab1092",
          "length": 252,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "5326c891-335b-431a-9f5e-187f34acf66a"
        },
        "item": {
          "id": "620be37e-4fc3-4081-918a-ad36ce77a4e4",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "44e284bb-b55a-496f-9c4a-594e9ca49f43",
          "status": "OK",
          "code": 200,
          "responseTime": 21,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "239d63d4-bcac-4952-b8bf-85be41e35153",
        "cursor": {
          "ref": "79424175-846a-41e7-a38f-ff8dd36c7eca",
          "length": 252,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "df0b90a3-ab35-4b8d-ac92-7a54a034fb82"
        },
        "item": {
          "id": "239d63d4-bcac-4952-b8bf-85be41e35153",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "e843bd0f-4750-43c5-9f7f-75c97d152304",
          "status": "OK",
          "code": 200,
          "responseTime": 25,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "a629e735-3507-4f35-a151-a5651931c2da",
        "cursor": {
          "ref": "7cce4ebd-d38d-4b87-91d7-61839f2138f3",
          "length": 252,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "94cd12fb-54bc-45fb-a784-98919c87d60e"
        },
        "item": {
          "id": "a629e735-3507-4f35-a151-a5651931c2da",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "5366d0c9-3a57-43e9-909d-90236bf0026b",
          "status": "OK",
          "code": 200,
          "responseTime": 19,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "b38e2fe2-8cd2-45d9-93e6-2649df0446e2",
        "cursor": {
          "ref": "029d3ceb-20da-4f8d-954c-4e8705dce2b3",
          "length": 252,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "abc579cc-1420-433d-a5c4-f5429239e1c7"
        },
        "item": {
          "id": "b38e2fe2-8cd2-45d9-93e6-2649df0446e2",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "0b0ec925-ea24-4596-a6ea-930e36ace444",
          "status": "OK",
          "code": 200,
          "responseTime": 16,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "63d7256f-2a6b-42d9-a065-782a44f67cfe",
        "cursor": {
          "ref": "d7ddb0cc-5221-414f-8fce-715f490576fc",
          "length": 252,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "fddd67a3-0349-4580-ad1d-fc497488f4af"
        },
        "item": {
          "id": "63d7256f-2a6b-42d9-a065-782a44f67cfe",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "c8c56c21-8fb4-463b-a33b-da3c6b95c402",
          "status": "OK",
          "code": 200,
          "responseTime": 19,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "5f2fb8a0-42f6-4ea5-b6e7-3a3475f74046",
        "cursor": {
          "ref": "8d88333d-af9a-4c0f-8915-acae421b4985",
          "length": 252,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "bfe88bbe-e66f-4a34-8b2c-d8ab3b1d3d71"
        },
        "item": {
          "id": "5f2fb8a0-42f6-4ea5-b6e7-3a3475f74046",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "98cb24a8-81b6-4187-b86d-6534ff5ac91a",
          "status": "OK",
          "code": 200,
          "responseTime": 17,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "0eed636b-d068-4264-a3e2-580391fa237d",
        "cursor": {
          "ref": "24693268-5531-493e-86f1-757335ae3b9a",
          "length": 252,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "e889d2d6-f1bb-4581-98b2-08cbaf7498ad"
        },
        "item": {
          "id": "0eed636b-d068-4264-a3e2-580391fa237d",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "c638535b-6c4c-4d65-b058-090010cc0688",
          "status": "OK",
          "code": 200,
          "responseTime": 16,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "16121025-8b3f-48c6-b54a-6d3449068508",
        "cursor": {
          "ref": "e8ff6560-e89f-4a98-859c-686f76d09334",
          "length": 252,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "74f48e68-1286-4e49-b157-631041f7360d"
        },
        "item": {
          "id": "16121025-8b3f-48c6-b54a-6d3449068508",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "f11b0423-d83b-4448-b572-86ad132c0283",
          "status": "OK",
          "code": 200,
          "responseTime": 23,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "1c1c6987-db65-40fd-a0b8-c9b8938f065d",
        "cursor": {
          "ref": "0695eeab-2ff0-4426-9cc0-c1d24289ec99",
          "length": 252,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "b1f16eba-26f8-415f-bf2c-4cf5a989f9f7"
        },
        "item": {
          "id": "1c1c6987-db65-40fd-a0b8-c9b8938f065d",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "975bd0a1-0770-440f-8405-ead4836f6942",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 27,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b156df0-599d-4f0a-a855-7c2d5da88480",
        "cursor": {
          "ref": "829c1b3b-bf9d-4dd7-b837-5457df4bbebb",
          "length": 252,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "a156ff03-1924-448e-90df-142956e2149a"
        },
        "item": {
          "id": "3b156df0-599d-4f0a-a855-7c2d5da88480",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "820c5fbc-a58d-4a4d-9aae-b1460aea9bfb",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 15,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdb89177-1fdc-4545-997a-2c7a76405c9d",
        "cursor": {
          "ref": "7c98c54d-f421-4cb0-8840-a7e6c42cbf97",
          "length": 252,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "378fb506-e4ac-4181-b57f-6e59ab6e1cea"
        },
        "item": {
          "id": "fdb89177-1fdc-4545-997a-2c7a76405c9d",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "7672cc28-4f52-4ed5-acfb-b61d188ad3ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdb89177-1fdc-4545-997a-2c7a76405c9d",
        "cursor": {
          "ref": "7c98c54d-f421-4cb0-8840-a7e6c42cbf97",
          "length": 252,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "378fb506-e4ac-4181-b57f-6e59ab6e1cea"
        },
        "item": {
          "id": "fdb89177-1fdc-4545-997a-2c7a76405c9d",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "7672cc28-4f52-4ed5-acfb-b61d188ad3ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a855f18c-5242-4bdf-8726-f84468d0c231",
        "cursor": {
          "ref": "89586a50-93b6-4a89-b488-01bffdcee07c",
          "length": 252,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "1d8d35fd-b18f-4047-b8b6-8fc9271c7fe3"
        },
        "item": {
          "id": "a855f18c-5242-4bdf-8726-f84468d0c231",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "04ae2bd8-7587-476e-a0cb-80dd329f7935",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97314762-2984-4ec7-a8e4-2ab8a2cf0d1a",
        "cursor": {
          "ref": "46dd5887-5be7-4bda-9427-64bf89bdf9d2",
          "length": 252,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "abe8026b-4327-4df5-bd64-0086bc489579"
        },
        "item": {
          "id": "97314762-2984-4ec7-a8e4-2ab8a2cf0d1a",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "aba4ae23-c8d6-42bf-8823-8e387099b3f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01ec01b3-831b-417d-aae3-437b5cfd2cea",
        "cursor": {
          "ref": "55e790f4-3211-4a67-8704-f5a2d9aeda7f",
          "length": 252,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "71febb7c-e73e-40c9-9298-ccf2e5bb5e01"
        },
        "item": {
          "id": "01ec01b3-831b-417d-aae3-437b5cfd2cea",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "629f947c-601c-45e1-a110-0e9013056d6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9eaeedf-d679-473a-ae73-6dd99a821c9a",
        "cursor": {
          "ref": "d2c51c92-85c2-48e3-bd27-edd43fa5edf0",
          "length": 252,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "6ffdcd31-a662-4734-a858-bf178db6c01e"
        },
        "item": {
          "id": "b9eaeedf-d679-473a-ae73-6dd99a821c9a",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "5687d951-32d5-4eab-b8df-f8f3f308c824",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2132a884-0af5-4eec-956f-0dfb99c0c322",
        "cursor": {
          "ref": "f03e1012-927d-4555-85a0-2021736a69c2",
          "length": 252,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "afba2d4a-cc7b-42ab-9ef5-2232ad0e55e1"
        },
        "item": {
          "id": "2132a884-0af5-4eec-956f-0dfb99c0c322",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "f8c41bac-6806-46a8-ab57-aba9e942cec7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50d7e713-7f73-489f-ae5c-a970153dc0f3",
        "cursor": {
          "ref": "2c4c1405-e928-48ba-be27-a50ca8e57302",
          "length": 252,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "a06ffc82-c37d-49fc-8980-05138b752d8c"
        },
        "item": {
          "id": "50d7e713-7f73-489f-ae5c-a970153dc0f3",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "edf04e2e-897c-4092-a525-4f5d116e62b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 476,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77b59b2c-6c8f-461e-8673-6de142d70c02",
        "cursor": {
          "ref": "0a3dbb1f-ab53-40f4-80a5-ac3f37c871e8",
          "length": 252,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "43844375-b455-4f88-a83d-a12d82e440eb"
        },
        "item": {
          "id": "77b59b2c-6c8f-461e-8673-6de142d70c02",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "b05df70e-807c-4557-b6d4-d3a2cff7611b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61c52de7-d912-4b35-a7cd-b03e26748fa3",
        "cursor": {
          "ref": "0e61fcd8-f656-4286-bc28-4498d19fed75",
          "length": 252,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "06b51fee-a3dd-421c-ba2f-f53970216ca1"
        },
        "item": {
          "id": "61c52de7-d912-4b35-a7cd-b03e26748fa3",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "f103b176-1c76-4987-a8b1-573857180c0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5a16ebf-80f9-4159-93d1-0da41d51dea6",
        "cursor": {
          "ref": "4c5487cf-4529-441e-a497-94edc75b7f57",
          "length": 252,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "cbb4e6a8-10a4-4073-9d8a-09627a6d6500"
        },
        "item": {
          "id": "a5a16ebf-80f9-4159-93d1-0da41d51dea6",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "0f8ecb3f-dca5-44d7-8b0d-31daf7cb7f11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38a6e837-b082-4447-9a48-621ef15caab3",
        "cursor": {
          "ref": "f69f174b-ae1c-4527-bdf6-08b25b5128d7",
          "length": 252,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "fa352288-5006-4b52-b7b3-2ed1c7e3c1fd"
        },
        "item": {
          "id": "38a6e837-b082-4447-9a48-621ef15caab3",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "2af6412f-9c11-42ca-8b25-fe28ee09c64f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "437aa50d-eebd-46ce-8497-2ac5ebd843eb",
        "cursor": {
          "ref": "1b856d9e-3194-4cb7-a7ac-89a1865e6e2e",
          "length": 252,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "4193698a-031e-43fc-ac77-7091b79e5469"
        },
        "item": {
          "id": "437aa50d-eebd-46ce-8497-2ac5ebd843eb",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "abf6f876-8e1b-445c-acdd-e485769d3c29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "688dc576-6e7c-49df-b983-6f5404e8870d",
        "cursor": {
          "ref": "228c716a-827c-4126-97c7-77e6a072798a",
          "length": 252,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "dde4c614-6c70-47a5-9835-0322d6f9625d"
        },
        "item": {
          "id": "688dc576-6e7c-49df-b983-6f5404e8870d",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "8f4548cb-2bcd-4b2b-92b5-b3157b46724b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4aa53f79-1ffe-42d9-8dd1-11ec739ff5fb",
        "cursor": {
          "ref": "5d86b291-b07d-4842-8979-161aa92d2e03",
          "length": 252,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "55125401-ca0c-48d8-a3c2-53a730012773"
        },
        "item": {
          "id": "4aa53f79-1ffe-42d9-8dd1-11ec739ff5fb",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "21b392ff-cb4a-485f-b8c0-7a1696d8c5b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c4900fc-b575-4770-9db5-b03f1221397d",
        "cursor": {
          "ref": "74df1a39-cb17-4679-991e-58a3d8a678c8",
          "length": 252,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "0ff0da31-98ed-4670-8efc-d6de44694571"
        },
        "item": {
          "id": "2c4900fc-b575-4770-9db5-b03f1221397d",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "4838bc47-2878-4c88-b273-604e1d1f4ccb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e44520c-39a7-49f9-b25c-00e393eb4822",
        "cursor": {
          "ref": "408fea67-d61d-4b83-aa2c-b69755355ecc",
          "length": 252,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "624ea39a-5914-402e-b5e7-aff6c90b6a97"
        },
        "item": {
          "id": "9e44520c-39a7-49f9-b25c-00e393eb4822",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "f70c1a33-68d8-420f-b45e-b69e8d565aec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e0e089c-7d07-454d-9296-e3a25ece4e73",
        "cursor": {
          "ref": "f0f49dbd-299b-4895-8080-1827b1384517",
          "length": 252,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "466597b5-39e0-42d1-b141-39840ae50c34"
        },
        "item": {
          "id": "1e0e089c-7d07-454d-9296-e3a25ece4e73",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "93a03a98-1243-4f3d-a246-c1d9ec9e9937",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ade0f1b4-a327-4252-be89-25b091b894d1",
        "cursor": {
          "ref": "e0929566-1910-4b8d-8fad-64bb2e5afb83",
          "length": 252,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "3df0408e-530b-4885-9c74-56613bdd8d62"
        },
        "item": {
          "id": "ade0f1b4-a327-4252-be89-25b091b894d1",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "3376f8c5-39c5-41ed-a04f-0a8f121a03bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 254,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57951bcb-44eb-460e-8d72-c909d2059c1e",
        "cursor": {
          "ref": "1ee4477b-25e3-435f-abfc-7fa94cb7b437",
          "length": 252,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "664f0ddd-3237-4801-b46e-916a5f21e1dc"
        },
        "item": {
          "id": "57951bcb-44eb-460e-8d72-c909d2059c1e",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "8711f4bc-c887-4269-9d40-870322f0f242",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 244,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1907a303-5f47-4fba-a065-1a12a8ae6316",
        "cursor": {
          "ref": "59cb3a42-e093-47e3-9c0a-5af7532a702d",
          "length": 252,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "e7835d57-dc36-4967-9ce7-f608a0a07a04"
        },
        "item": {
          "id": "1907a303-5f47-4fba-a065-1a12a8ae6316",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "0fbd85ef-5eae-46b6-a19c-df97dc09ecb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 232,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acbc314d-faa6-4884-ad39-7d1fdec3bc75",
        "cursor": {
          "ref": "8cf45dd9-e312-427a-8a8a-1f3225010487",
          "length": 252,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "c0c0d49d-251e-4d81-b996-4fa8e36102d9"
        },
        "item": {
          "id": "acbc314d-faa6-4884-ad39-7d1fdec3bc75",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "e24e5852-f103-4413-9856-16153fa39e44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 249,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e3cfbe9-6335-425b-81c0-6b8f48a9f663",
        "cursor": {
          "ref": "b4b11a4c-03b6-4cfd-ac18-e59eb40bfdc6",
          "length": 252,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "ab9bfbe9-2175-4e74-80e7-96567f7d6f4e"
        },
        "item": {
          "id": "8e3cfbe9-6335-425b-81c0-6b8f48a9f663",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "5cf5aa22-d561-4f88-ba12-2d7d02373e08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 257,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3beb0e6e-3735-45d8-bc3a-658761faf3d2",
        "cursor": {
          "ref": "ee5c6af2-b77b-4822-b5e9-f2c89dae990d",
          "length": 252,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "154cd0d4-9752-4cae-91fa-3bc7d82ad402"
        },
        "item": {
          "id": "3beb0e6e-3735-45d8-bc3a-658761faf3d2",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "5fce324a-6711-4d51-aa2b-7491ad449764",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 243,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8eb1dce0-de40-4061-863f-abf2db41acbc",
        "cursor": {
          "ref": "bef6de21-ab33-4f35-a867-64630a5f2da6",
          "length": 252,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "70054a42-56de-49a8-91f5-6e2ea99f150b"
        },
        "item": {
          "id": "8eb1dce0-de40-4061-863f-abf2db41acbc",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "0a35fb98-f60d-4140-8476-7f88f19fb762",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50606bf9-e470-49ea-9755-6eb1634d887c",
        "cursor": {
          "ref": "459fd9ed-b649-42cb-b865-21bd2cc2b10d",
          "length": 252,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "a5a1608c-8954-4503-9115-230ded888c6f"
        },
        "item": {
          "id": "50606bf9-e470-49ea-9755-6eb1634d887c",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "42eb4a0f-aac6-4045-b9c4-cfc142002faf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "267f429e-8637-46ec-88ed-7a16c0a4ec15",
        "cursor": {
          "ref": "3a13df26-7a94-4498-a6f0-423b6df86f20",
          "length": 252,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "e75f7d4d-91d7-4ef3-a6c3-ac6a48bca138"
        },
        "item": {
          "id": "267f429e-8637-46ec-88ed-7a16c0a4ec15",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "5355c0ab-ba75-4975-8eb3-74fa026ff9c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 239,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8289ad9-e6db-4686-8b0c-84946ee84eb4",
        "cursor": {
          "ref": "f3a725b5-2f2a-4995-a4a0-401a198c0b86",
          "length": 252,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "f514939b-e58e-4e1f-b434-91c4eaa8da91"
        },
        "item": {
          "id": "f8289ad9-e6db-4686-8b0c-84946ee84eb4",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "9b0fcbaf-4b40-4b7e-8f61-e79db3dd41f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45a3a797-f786-4803-a34c-1a012202ee46",
        "cursor": {
          "ref": "3437df75-9d4e-4eb6-bdad-0e8eff59fa31",
          "length": 252,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "8c8867a2-cd71-4406-9fda-276266dea6ef"
        },
        "item": {
          "id": "45a3a797-f786-4803-a34c-1a012202ee46",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "3cbde9ea-3275-456d-842c-77703be570b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a01978a0-98df-4c91-ba43-6fe3df916c39",
        "cursor": {
          "ref": "111a5e14-d310-46ba-97a5-3324a56e364f",
          "length": 252,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "a7aeeacc-5bc7-4163-800d-26eaa8206829"
        },
        "item": {
          "id": "a01978a0-98df-4c91-ba43-6fe3df916c39",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "a2192286-6570-4597-a5a4-e18c4773f5c4",
          "status": "OK",
          "code": 200,
          "responseTime": 249,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "fab577f6-bcca-4505-bf2a-fef4e1e110a0",
        "cursor": {
          "ref": "2e651619-945a-4c17-a33a-b0cbbd987f18",
          "length": 252,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "715bfebc-0416-4706-9d78-12912447d98b"
        },
        "item": {
          "id": "fab577f6-bcca-4505-bf2a-fef4e1e110a0",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "2943bffb-5e88-4829-9829-de2a0a1ac58c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9dbe7417-7905-4f55-81a5-ea80900e7bc3",
        "cursor": {
          "ref": "9e767af6-a34c-46cd-a863-e4e20db178b1",
          "length": 252,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "d261a77a-5b01-42ed-8ce4-7cca5a8789fe"
        },
        "item": {
          "id": "9dbe7417-7905-4f55-81a5-ea80900e7bc3",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "4ef61270-c97d-477d-942d-d7cc9ccc2381",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81c07e9b-0a7e-4564-b00e-ec91843f0f8f",
        "cursor": {
          "ref": "977e0e43-054d-4e42-8bd5-849de68ea2d0",
          "length": 252,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "a831ca35-cf4b-4173-bf71-3bf34a08f4d9"
        },
        "item": {
          "id": "81c07e9b-0a7e-4564-b00e-ec91843f0f8f",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "7a6d12c4-0805-48b3-85c5-0a1d0911d51d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2844f7f6-8af8-43e3-b2a1-b38860352b04",
        "cursor": {
          "ref": "e8d33d4a-6231-4092-875e-9d548012f62b",
          "length": 252,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "25cc831e-55d7-45c1-ab65-aea40b3fa1c8"
        },
        "item": {
          "id": "2844f7f6-8af8-43e3-b2a1-b38860352b04",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "1f3a04a2-eb61-4156-a54d-088d9f44d646",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 267,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e26d99ac-cf75-4c98-a3d5-50a9d055d20a",
        "cursor": {
          "ref": "10374817-a728-4327-a7e8-c13a5a3eb44e",
          "length": 252,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "c473c5fe-0ade-46f5-a6ea-4e7022983f15"
        },
        "item": {
          "id": "e26d99ac-cf75-4c98-a3d5-50a9d055d20a",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "d319453c-c780-4ab0-a8e9-875b4118e149",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c11feb3-46c7-426a-90aa-b88bc7778bf1",
        "cursor": {
          "ref": "ad9256ac-b661-474b-8271-2a7146dc2ee8",
          "length": 252,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "d38ab074-b4df-4054-8b5f-cecffeaf69f0"
        },
        "item": {
          "id": "0c11feb3-46c7-426a-90aa-b88bc7778bf1",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "19f9a1bb-7cc9-4cd4-bfbc-9079a9cd6596",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 244,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de81e7d5-d94e-4a9b-be17-c47758d5a9c2",
        "cursor": {
          "ref": "8ce89aed-ea34-4998-9c2b-75478eac84e5",
          "length": 252,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "08b1422e-9a6f-47dd-9fe2-0c6066666768"
        },
        "item": {
          "id": "de81e7d5-d94e-4a9b-be17-c47758d5a9c2",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "ecad7e7f-c4ea-4460-a2af-c85f4c4946e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 250,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a3e49f8-c266-4506-9a27-958ae49e95c5",
        "cursor": {
          "ref": "d861b3e6-d2d0-4bbb-bb0f-152544e6c5b1",
          "length": 252,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "e51e9b89-c22c-4b6c-8d57-82bf3fa5ae2d"
        },
        "item": {
          "id": "2a3e49f8-c266-4506-9a27-958ae49e95c5",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "7c102329-53f6-42ad-9487-d570c60c05bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 237,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64265d5b-d063-429f-ab3f-b21a733e6360",
        "cursor": {
          "ref": "651c730a-277d-4d59-b241-d7756b03564b",
          "length": 252,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "9dfaaf52-6df6-4b82-add9-190ae3c78b4f"
        },
        "item": {
          "id": "64265d5b-d063-429f-ab3f-b21a733e6360",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "39019345-065c-40cc-a61f-18fb043a361a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 251,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "407ca89f-537c-4362-84b1-98b0038ec29d",
        "cursor": {
          "ref": "d1e191c1-ee44-4a5d-aae9-c01deb944c14",
          "length": 252,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "6cb4b2fb-c262-4b12-99dc-0e396b859e81"
        },
        "item": {
          "id": "407ca89f-537c-4362-84b1-98b0038ec29d",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "d642c38a-18a8-49a9-b899-a67f7a5bb793",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 266,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b549eab2-4665-471e-8bbe-77a06333ac74",
        "cursor": {
          "ref": "0c6689c7-1bf3-48a7-abda-209a25a84130",
          "length": 252,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "3270ba16-6eda-4b2a-95f6-108803734b7c"
        },
        "item": {
          "id": "b549eab2-4665-471e-8bbe-77a06333ac74",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "295633d8-99af-49bb-950e-1f0cef00190b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 243,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fd7c6a8-8929-46c4-a60e-19bb16013937",
        "cursor": {
          "ref": "45f08e17-e0e8-4131-838f-b896dd6522ff",
          "length": 252,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "6d2d5605-e085-46c8-b1e3-88097354fdf1"
        },
        "item": {
          "id": "6fd7c6a8-8929-46c4-a60e-19bb16013937",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "31480ef3-1479-4279-8fca-eb60e260b630",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 254,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f1d25db-cf3e-4e77-b583-eb423090ff9b",
        "cursor": {
          "ref": "beea8fcb-ab07-43c7-bcc9-bab2846facea",
          "length": 252,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "2d564987-3351-41a7-b1a5-d31cdbd8a38c"
        },
        "item": {
          "id": "0f1d25db-cf3e-4e77-b583-eb423090ff9b",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "fb66e345-b4ef-4f62-b32d-9a7fcd6d0114",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 234,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8480733-fda5-45dd-b8c4-62b6c9ce9614",
        "cursor": {
          "ref": "4622004f-952a-46a6-9373-0ac248a21bae",
          "length": 252,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "d61eb438-e882-41ed-bd0c-74ef7cffa0c5"
        },
        "item": {
          "id": "c8480733-fda5-45dd-b8c4-62b6c9ce9614",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "29fab0fe-a5e5-4005-b60d-4d24f8b89425",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 258,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05dd8d36-aa1f-4155-b208-ff40a44bc623",
        "cursor": {
          "ref": "7d0e6be8-6039-4403-b120-f511c0feb5da",
          "length": 252,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "52f07850-0bae-43c2-905d-044c97978c0d"
        },
        "item": {
          "id": "05dd8d36-aa1f-4155-b208-ff40a44bc623",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "6dbd60d4-e5dc-4acd-8a23-d5e4a4efe09f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 237,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f8da23c-c50f-4c6f-b25a-f79c35498e57",
        "cursor": {
          "ref": "9bc74fac-0998-4e69-aa45-52690a276ce5",
          "length": 252,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "5375f3f7-6aeb-435c-8734-5dde4e8b8e90"
        },
        "item": {
          "id": "5f8da23c-c50f-4c6f-b25a-f79c35498e57",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "e72f1eb9-4e1c-43ca-aa7e-3e175f0d43cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 250,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8754718-ba7f-4035-8cbe-5497547182e7",
        "cursor": {
          "ref": "268d5b8f-8895-46e8-b064-74a1148020f7",
          "length": 252,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "53cc9bd6-a3f4-4eaf-a2c2-414fddccd456"
        },
        "item": {
          "id": "c8754718-ba7f-4035-8cbe-5497547182e7",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "aea83c5e-6a50-4fb4-a5ef-b0c84ec89f79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 245,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a17e97cb-6582-44ac-80fb-e9f5cdf58284",
        "cursor": {
          "ref": "a420a79a-2a6e-4c25-a7e9-d936a996366d",
          "length": 252,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "2187d753-ee6b-48bc-aff1-0abbbd6a34f5"
        },
        "item": {
          "id": "a17e97cb-6582-44ac-80fb-e9f5cdf58284",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "bf52de0c-b8c2-4bd3-8ab8-b437a4bbde31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 255,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12d07bd2-f2c1-4b39-87ce-c85ae0bf54c4",
        "cursor": {
          "ref": "e0ced617-fa0c-4d67-8104-16e3f6b87939",
          "length": 252,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "dd664271-4cbc-429f-a915-321d2dd4e935"
        },
        "item": {
          "id": "12d07bd2-f2c1-4b39-87ce-c85ae0bf54c4",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "10b08c68-ab22-4b39-aab8-97d9de17d515",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 269,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed463c70-095f-4db9-be44-bad05fc3742a",
        "cursor": {
          "ref": "b1d8cad9-b31d-4b36-b239-8b5b764c8f94",
          "length": 252,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "55df3bd2-d4cc-45a2-a45d-32be8f627106"
        },
        "item": {
          "id": "ed463c70-095f-4db9-be44-bad05fc3742a",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "7f8036dc-6621-423a-b270-ff6deb920afb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 279,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbcc5cff-b064-4d89-8209-610983496c3a",
        "cursor": {
          "ref": "c906fb57-29eb-454b-8fb0-66828d132168",
          "length": 252,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "06417d30-06c5-43e3-9764-51f8fe92e379"
        },
        "item": {
          "id": "dbcc5cff-b064-4d89-8209-610983496c3a",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "1295edfe-0ded-49af-bd2f-35f410371c0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 251,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5233217-ae28-42eb-a46b-86c0fcbf73c9",
        "cursor": {
          "ref": "7458162f-fe07-46ca-9abf-56cf2016412b",
          "length": 252,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "01b8393f-d44d-46f8-bbcc-3f87878b3153"
        },
        "item": {
          "id": "e5233217-ae28-42eb-a46b-86c0fcbf73c9",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "e016f111-9f59-4bcd-8b4f-a344e44a843e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 244,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62e618bb-ea19-41cc-953b-fa0ce34a38b2",
        "cursor": {
          "ref": "5ac95f84-2df3-40dc-bfb6-52d078e40500",
          "length": 252,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "d6c3df1b-f2fe-4289-8c59-16014cb9bfec"
        },
        "item": {
          "id": "62e618bb-ea19-41cc-953b-fa0ce34a38b2",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "cccdad55-da0e-412f-a1cf-e2e5e887db35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 235,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c3a1fe8-c35b-4dbf-8596-becee63b27a6",
        "cursor": {
          "ref": "6eec3e5b-4e1d-4d09-90d7-e4a590132f8f",
          "length": 252,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "33809029-8697-41e4-8914-df3c4efb9486"
        },
        "item": {
          "id": "9c3a1fe8-c35b-4dbf-8596-becee63b27a6",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "bf32dac3-48f9-499c-9e71-1e1a621abc49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 299,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "797edaa0-e221-4d72-b0f2-57a1621adea8",
        "cursor": {
          "ref": "e5e8b7e5-5cc0-4323-8232-8bed209210ff",
          "length": 252,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "58e2710f-228a-417f-8470-a56665c451d3"
        },
        "item": {
          "id": "797edaa0-e221-4d72-b0f2-57a1621adea8",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "ce82adbf-d97d-4242-80e0-2646d741f1e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d12fe76-3dfb-478c-a66f-580bd141c8f8",
        "cursor": {
          "ref": "4296510a-7f5a-4b1b-95ea-eddf6c73cc45",
          "length": 252,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "28032c2e-3a5a-4202-a335-32ab64ba141f"
        },
        "item": {
          "id": "5d12fe76-3dfb-478c-a66f-580bd141c8f8",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "84e67e7b-b71d-44f3-8d2e-a42eebbd9380",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33e0b8c6-94fb-4ab3-96da-a75cdb936561",
        "cursor": {
          "ref": "2865c9b4-0edd-43ae-b261-d57476f1fda2",
          "length": 252,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "8896b3ee-8261-4668-b0ca-25fb9edcc917"
        },
        "item": {
          "id": "33e0b8c6-94fb-4ab3-96da-a75cdb936561",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "0c3a6fd7-90a9-45b5-8d1d-072b5cbc1487",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f496df45-4cf6-4540-92c7-82b5e10e990f",
        "cursor": {
          "ref": "b81d0d76-c9bb-44cb-8019-2fc79014db4d",
          "length": 252,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "28779834-6aba-463e-91c9-b0c9f1d4180d"
        },
        "item": {
          "id": "f496df45-4cf6-4540-92c7-82b5e10e990f",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "a47c5c4c-35c9-4477-8341-c1534616a507",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 250,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba422951-e78a-4128-95bd-e298efe0bf96",
        "cursor": {
          "ref": "2a8ccf63-1e62-4dfc-a188-ed8324a0a028",
          "length": 252,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "655ba0c1-cc70-45ff-afe0-cf9786bef341"
        },
        "item": {
          "id": "ba422951-e78a-4128-95bd-e298efe0bf96",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "aca50a2b-df81-433c-a0a9-e9d32441ee0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7231eb2-716e-474c-97c1-887eb38acfdf",
        "cursor": {
          "ref": "c0d2baa4-971f-46ed-ba86-b477a68e4dfd",
          "length": 252,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "2835b990-a6dd-46b2-8cd5-ff72bd1a6b3d"
        },
        "item": {
          "id": "b7231eb2-716e-474c-97c1-887eb38acfdf",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "d82f5b53-9c4b-4fc1-aefb-b178d3acda9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "972f46bb-205a-4bd0-a259-430646686a5f",
        "cursor": {
          "ref": "84c2d077-ef97-4533-8448-5126153c24a8",
          "length": 252,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "92ac66ee-b2b6-42a2-a4a4-d3ef71d58eef"
        },
        "item": {
          "id": "972f46bb-205a-4bd0-a259-430646686a5f",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "b88762e9-ebf6-42e2-ac4c-dd87d44aad8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "702c4f07-c060-4d9c-8074-21c8956cbdb8",
        "cursor": {
          "ref": "56698040-f55e-40c1-8674-ece22f97b1f3",
          "length": 252,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "364f763f-dcc4-4992-968e-2ab591c9ba58"
        },
        "item": {
          "id": "702c4f07-c060-4d9c-8074-21c8956cbdb8",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "2d8370dc-861e-4f61-b338-f0e8466f7f0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d95db08-89d1-42af-864c-24f117e1cb43",
        "cursor": {
          "ref": "d4ec750a-ea4b-474b-8863-c7c4350934f8",
          "length": 252,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "c333b533-209e-48fb-afed-ef7a43da5f04"
        },
        "item": {
          "id": "7d95db08-89d1-42af-864c-24f117e1cb43",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "0eabfaa6-2b2a-42f3-af61-6b52ff9bc701",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 274,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96e31116-1355-4f85-864a-8e1e1cb99f52",
        "cursor": {
          "ref": "a2a59a81-bf02-4160-9d46-f01c589bcfdb",
          "length": 252,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "41cc8bb6-257f-4f86-982d-74486dfb8ac9"
        },
        "item": {
          "id": "96e31116-1355-4f85-864a-8e1e1cb99f52",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "01141b8c-9d9f-41bd-8af5-321b413d6307",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5065515d-cb08-49f4-a114-12f3f89d9a08",
        "cursor": {
          "ref": "592cabe3-336b-4f0e-865f-f43dd49226d7",
          "length": 252,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "f61ad1d2-b6dd-48a7-816b-e4833c615962"
        },
        "item": {
          "id": "5065515d-cb08-49f4-a114-12f3f89d9a08",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "cae3af67-7bac-48a4-ac2b-344f0ce14ef1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10ce7a07-1c19-4868-8544-ecea421e116b",
        "cursor": {
          "ref": "f2f67b59-3c48-43d1-b7ab-02f861252e99",
          "length": 252,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "d3e501d7-305a-4421-9cf4-8fdb713c0310"
        },
        "item": {
          "id": "10ce7a07-1c19-4868-8544-ecea421e116b",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "b047cd88-b5ba-4e41-ae3a-0b92e128e2a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f790f49a-39cc-4460-8f04-87c1fc71fd88",
        "cursor": {
          "ref": "fd1fa25b-ef40-4d6b-bbcd-7f91fd2a2740",
          "length": 252,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "9e3a1e2d-0f57-49c3-96e7-7a07a2be245f"
        },
        "item": {
          "id": "f790f49a-39cc-4460-8f04-87c1fc71fd88",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "e31a2205-2a62-4e5f-a7e0-1285ed07977f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6ffe67e-e939-40b3-8f8d-0dde529b224c",
        "cursor": {
          "ref": "32e0bad7-f511-4a9e-9042-b1f0d191bdb1",
          "length": 252,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "7042e4cf-e657-42e8-8a78-34754c098be1"
        },
        "item": {
          "id": "f6ffe67e-e939-40b3-8f8d-0dde529b224c",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "7566b729-1f57-4f29-a131-c3b22016eaf5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a58e8ada-0bd1-487f-9fb2-7ef94d87a933",
        "cursor": {
          "ref": "29ca1609-5b67-4469-8450-a221b862763c",
          "length": 252,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "02f49ea7-6e6f-4bb6-8607-055305809270"
        },
        "item": {
          "id": "a58e8ada-0bd1-487f-9fb2-7ef94d87a933",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "46596b8b-b43f-400b-b72a-3387426d3ea3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcca0c98-a6e5-47a5-8d03-08a89299aca6",
        "cursor": {
          "ref": "bfbbb4e0-9e9f-4e37-9105-d569e82e433c",
          "length": 252,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "14320a79-63c7-4693-9a71-a3e000aca895"
        },
        "item": {
          "id": "bcca0c98-a6e5-47a5-8d03-08a89299aca6",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "78ba143b-f7a3-4373-9893-0d4da30b51b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5074bb85-04d0-4af0-81b7-59f99a493a37",
        "cursor": {
          "ref": "e3e0654e-ecc3-46ab-8e11-a84cf975542c",
          "length": 252,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "18b675e3-07be-4ab5-aa1e-a78e6d046c98"
        },
        "item": {
          "id": "5074bb85-04d0-4af0-81b7-59f99a493a37",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "cfdda552-e5c8-4363-83f6-8be5bf865c91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c289b01e-d18d-4c8c-8f4d-644771d74b9d",
        "cursor": {
          "ref": "28b9714d-3a2f-47e4-aaba-9f3042cf86e0",
          "length": 252,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "3d1ae6f4-1355-4d2f-be7d-6a0fbe3e7b05"
        },
        "item": {
          "id": "c289b01e-d18d-4c8c-8f4d-644771d74b9d",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "ff4524ca-ee58-4f34-8967-a7ecc75bae91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fb72b79-225f-49fa-a736-df9effa0095c",
        "cursor": {
          "ref": "d4f8dbc6-c3c1-44ca-899a-8f885b47e2d7",
          "length": 252,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "c269a702-0811-4ef5-bc6b-6144adb9e90b"
        },
        "item": {
          "id": "7fb72b79-225f-49fa-a736-df9effa0095c",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "2523801f-de17-4ea2-8102-51f75e715c3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6c9d913-b15d-4de9-9940-5db10fcae814",
        "cursor": {
          "ref": "55d624e0-720e-4800-8ea1-6bfaa53cf9de",
          "length": 252,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "3e64d568-7338-4cb9-bfd5-43b4211fc0b9"
        },
        "item": {
          "id": "a6c9d913-b15d-4de9-9940-5db10fcae814",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "24db83cb-5d1d-4fa6-86ca-3f7e2fbaa913",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82551000-8058-4149-8f1b-52c5f01801d4",
        "cursor": {
          "ref": "6858193a-26ef-41f0-ad36-643eb18bbafb",
          "length": 252,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "80365171-9dcc-45ef-bd97-6f9f520a6ab4"
        },
        "item": {
          "id": "82551000-8058-4149-8f1b-52c5f01801d4",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "167b0b8e-6af3-4848-952f-e9134ca8853a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc99820d-d0e3-419c-a405-d1f247deb526",
        "cursor": {
          "ref": "5fc4ff8e-ec92-407a-b6be-2be39341ff62",
          "length": 252,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "5dfc1292-415c-4403-b7b3-2dea4b352f76"
        },
        "item": {
          "id": "fc99820d-d0e3-419c-a405-d1f247deb526",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "1fc854bb-dcf3-4ece-97d9-c4c8dbad85ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf0b4008-66b3-4d06-bc2d-ac4c9c136cbd",
        "cursor": {
          "ref": "83842e54-4c6f-406a-bb13-5221d9c32c4d",
          "length": 252,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "e5703f4e-07e8-41f7-865e-41dafc7fec88"
        },
        "item": {
          "id": "bf0b4008-66b3-4d06-bc2d-ac4c9c136cbd",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "3fafbc08-d7ef-41df-a25a-4dba26a75448",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82ead091-d7cb-4d62-81d9-94b187affd41",
        "cursor": {
          "ref": "80faca84-425b-47ff-9589-53e7d09a7f64",
          "length": 252,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "d1c3cd42-451e-4112-bd64-414971d8b08b"
        },
        "item": {
          "id": "82ead091-d7cb-4d62-81d9-94b187affd41",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "3e451acb-f6b0-4393-b04e-df6f560f0a91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f896cfb6-45b0-4bd6-b700-4ed4f4888c7f",
        "cursor": {
          "ref": "194175c3-27ee-4d76-9a9a-b5b4e29c6722",
          "length": 252,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "fbfd8a18-a910-431d-b5e1-31bee7b92107"
        },
        "item": {
          "id": "f896cfb6-45b0-4bd6-b700-4ed4f4888c7f",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "8254c7ee-dd9e-4220-9707-5f41384c6c4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ac4feba-4052-42d8-b119-f706b216af60",
        "cursor": {
          "ref": "b753b59d-9a46-4eab-8bf0-fb76ba592485",
          "length": 252,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "9784c45d-3659-478d-8d5f-cdc6fef4b5d0"
        },
        "item": {
          "id": "3ac4feba-4052-42d8-b119-f706b216af60",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "f6f50d55-5ba5-4064-8072-22605ceec911",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72624e4d-4171-40cf-a175-9e347b23fd1d",
        "cursor": {
          "ref": "b428a96a-60f4-46b5-808f-0898b5a86ca2",
          "length": 252,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "41eec4a5-c3cb-427b-b19b-bfd7c5a5046d"
        },
        "item": {
          "id": "72624e4d-4171-40cf-a175-9e347b23fd1d",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "9afbeb4d-d8bf-47f5-9a8b-005ab35c437d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "194acdc3-8c37-4001-af4a-9e6cebbd40e3",
        "cursor": {
          "ref": "68c99b95-de38-4025-81bc-f3553f4d0940",
          "length": 252,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "c4438b09-8da7-41da-82a1-da17be7cbbbc"
        },
        "item": {
          "id": "194acdc3-8c37-4001-af4a-9e6cebbd40e3",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "8d3a0ca6-3c88-4b74-b414-ae2727c80d3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e334e6c2-5fd3-4802-a2d5-5d1f546ca690",
        "cursor": {
          "ref": "708a92ef-9154-4dc2-ad0f-acfb83fbfa58",
          "length": 252,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "4dd589cf-2758-411f-8b6e-da71551e42b8"
        },
        "item": {
          "id": "e334e6c2-5fd3-4802-a2d5-5d1f546ca690",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "160e3ec8-c264-494a-a5b2-b5afecb2496a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9316bc1-d4d7-494e-bbfd-6d0050dfab32",
        "cursor": {
          "ref": "0a6bda82-7b48-406d-b928-ca075b6d91cf",
          "length": 252,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "d1d4be6f-4c16-4565-a75e-db9265560489"
        },
        "item": {
          "id": "f9316bc1-d4d7-494e-bbfd-6d0050dfab32",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "6e6c528a-c278-4ec0-bdec-d71b46db0274",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0eea2f1a-0a0f-445b-b659-4acd13434f21",
        "cursor": {
          "ref": "a915bc00-6cd3-48d6-837f-ff2f25c2619b",
          "length": 252,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "9443ccf4-97bf-4da1-98da-37aae9dd21a9"
        },
        "item": {
          "id": "0eea2f1a-0a0f-445b-b659-4acd13434f21",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "ca147e4a-f0ef-4c01-8c21-757c71fada96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c895d4f-c5d8-4c3e-88da-d24f946b1c4d",
        "cursor": {
          "ref": "51aa3b3b-6d60-4112-9f1b-7ca7f69ee830",
          "length": 252,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "29cf47f0-62a6-4576-a09b-5709ee13ce33"
        },
        "item": {
          "id": "4c895d4f-c5d8-4c3e-88da-d24f946b1c4d",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "79347543-c665-4cc9-9cf1-6a111924be87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3b69a2e-ab97-43ca-8880-31ac0ac8ae45",
        "cursor": {
          "ref": "4a316ba8-8723-4ac6-b562-c1792e6df67c",
          "length": 252,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "f377fd38-e2d4-498d-8647-8d0e962e6053"
        },
        "item": {
          "id": "c3b69a2e-ab97-43ca-8880-31ac0ac8ae45",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "2b9209f3-4f92-41ab-92a3-28efb6aa0b85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "188084a1-d631-4661-a7b5-c3cf70d9a433",
        "cursor": {
          "ref": "899dc5f6-2632-4c28-a59c-6a1507eefe06",
          "length": 252,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "56b593bd-0577-481c-a474-f95b24ab87c5"
        },
        "item": {
          "id": "188084a1-d631-4661-a7b5-c3cf70d9a433",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "cf993b5d-7a94-4db1-97cc-7b4864c08bb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7d8091e-3311-4583-b842-eac0c01b7a97",
        "cursor": {
          "ref": "36218328-d6c5-4adf-9251-86f377a4d557",
          "length": 252,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "9ae8e6a8-aa29-4cb5-b86e-67d77eba0662"
        },
        "item": {
          "id": "d7d8091e-3311-4583-b842-eac0c01b7a97",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "da037083-e4ab-40e5-aa5f-4fa803bb63f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b38c2057-efa3-49bf-ae58-ba9b140f55ae",
        "cursor": {
          "ref": "850a1516-c481-4ab5-baf0-3f2ef905b540",
          "length": 252,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "fa5eb80c-c039-4836-a286-3e0c009686d9"
        },
        "item": {
          "id": "b38c2057-efa3-49bf-ae58-ba9b140f55ae",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "a33c093c-a609-4c81-ae36-a4cce8854bfe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd88a3a8-0278-4e13-84af-7dfa73cb8c42",
        "cursor": {
          "ref": "69d62142-2d1c-4041-b36c-4be4880a4844",
          "length": 252,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "de32a21c-c95a-484c-a235-5b426cb3f70f"
        },
        "item": {
          "id": "dd88a3a8-0278-4e13-84af-7dfa73cb8c42",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "e4ca7f16-b919-465c-b37e-f8bf16c37de0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb84e8e8-dd2e-42dc-96dc-e16052a98501",
        "cursor": {
          "ref": "642f27f4-5124-4a8e-98eb-f3250547d9a5",
          "length": 252,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "3cb9b228-67bb-44ea-b64b-7a946dd93600"
        },
        "item": {
          "id": "bb84e8e8-dd2e-42dc-96dc-e16052a98501",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "a553133e-a0ed-4ad1-a266-f2f071130e06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5fecacc-67a0-43be-90fe-fb77db8c969e",
        "cursor": {
          "ref": "2c2ecc40-b83a-467d-94c4-244aafaedd06",
          "length": 252,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "2fbe2b1b-8afe-4a79-8315-0a0401163d5b"
        },
        "item": {
          "id": "c5fecacc-67a0-43be-90fe-fb77db8c969e",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "6015f04b-fb45-4bb4-b986-27ae88b4c16f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "696b0cc6-dda9-455e-b5b1-8f091ff20432",
        "cursor": {
          "ref": "6a15757e-952a-479e-afcd-146244afe395",
          "length": 252,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "2c456ad3-3533-4f6d-9814-4dd9e530bc7b"
        },
        "item": {
          "id": "696b0cc6-dda9-455e-b5b1-8f091ff20432",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "c1dead84-86ad-4150-80ae-b3832998aa25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7d634e8-690a-4559-a543-c97658493226",
        "cursor": {
          "ref": "5264feeb-1f0c-4434-a3be-d883d5b6bd18",
          "length": 252,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "f55d2397-5d70-43ce-9a1c-bc58cafa1591"
        },
        "item": {
          "id": "e7d634e8-690a-4559-a543-c97658493226",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "c3e8881d-f1f3-4091-8b31-f588232ecbeb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e2486aa-ce5d-4575-b751-2aa58049b13f",
        "cursor": {
          "ref": "77f46d4e-9871-481c-b06f-a6d260c647d8",
          "length": 252,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "ca626ec9-5447-4c00-9a87-7351eb30a243"
        },
        "item": {
          "id": "1e2486aa-ce5d-4575-b751-2aa58049b13f",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "3ec5fc43-7f80-4449-9db3-aedc58d78b17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3eac145f-1b8b-4c16-99e4-ba808e56d7cb",
        "cursor": {
          "ref": "c0601ab5-657d-405b-b958-1872958d72c3",
          "length": 252,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "974977d5-4809-4386-aec0-a31bd9b1c96c"
        },
        "item": {
          "id": "3eac145f-1b8b-4c16-99e4-ba808e56d7cb",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "45508eb6-4dd1-4c8f-ab17-6b8c4ebec887",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "babc7f09-58b0-4939-99c4-b21d28e1a5ce",
        "cursor": {
          "ref": "c704b570-7127-445c-9851-3a0e72bc4c48",
          "length": 252,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "4ef995d4-5bd4-4a6b-9427-f487a654f748"
        },
        "item": {
          "id": "babc7f09-58b0-4939-99c4-b21d28e1a5ce",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "20a8f376-dc58-4867-99b3-27ccfd67fd82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a722632-37ec-43b1-8e6e-853f1e7e6959",
        "cursor": {
          "ref": "f10231d2-ff84-429f-b43d-f6ed4f470250",
          "length": 252,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "a2328e20-754d-4b59-8967-21d5fb054242"
        },
        "item": {
          "id": "9a722632-37ec-43b1-8e6e-853f1e7e6959",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "03b0acf8-8f8e-48b9-9c51-73d04b90c2eb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 11,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c6bd925-b2f4-4417-8ad9-bafec23508bb",
        "cursor": {
          "ref": "b044283c-00d7-434e-a4e1-731a3c73a40b",
          "length": 252,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "868f57a5-9166-483a-94f1-13b798a53795"
        },
        "item": {
          "id": "7c6bd925-b2f4-4417-8ad9-bafec23508bb",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "a6e745c6-ab7e-4e23-99d6-457293f7e94c",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 10,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ed00280-cd0b-4de3-be62-72068562d9b8",
        "cursor": {
          "ref": "0b27e252-0424-4f41-947c-f6747b8ab7bd",
          "length": 252,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "3f9ca024-a217-41f8-83eb-e4ba39be4f7e"
        },
        "item": {
          "id": "6ed00280-cd0b-4de3-be62-72068562d9b8",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "2cc2be0e-7fe4-4ea4-b476-561133e9a7b6",
          "status": "OK",
          "code": 200,
          "responseTime": 238,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "89146054-3701-49ea-9bcc-583797864ee3",
        "cursor": {
          "ref": "050244cb-b053-4de9-8e1f-461eeb91e78a",
          "length": 252,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "7cb24eba-424f-4cb1-bea0-006deef9fa0d"
        },
        "item": {
          "id": "89146054-3701-49ea-9bcc-583797864ee3",
          "name": "credentials_verify"
        },
        "response": {
          "id": "00f53876-35b7-412a-9af2-4b5f041681fd",
          "status": "OK",
          "code": 200,
          "responseTime": 567,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ab6edcf-c9cc-4c98-96f0-9c7d3ffbf5f6",
        "cursor": {
          "ref": "39c91ed2-816e-454d-bab7-de77fde2cfa7",
          "length": 252,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "fb97f596-2050-42e0-9e37-a20beb1a3f76"
        },
        "item": {
          "id": "9ab6edcf-c9cc-4c98-96f0-9c7d3ffbf5f6",
          "name": "credentials_verify:id"
        },
        "response": {
          "id": "40896b8f-68a9-4a4e-a64c-94386e6ff118",
          "status": "OK",
          "code": 200,
          "responseTime": 641,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9c618ab-ed0d-426c-a482-bad4e07c14d8",
        "cursor": {
          "ref": "a093c2d1-15ec-4a98-be00-252d8eebef9d",
          "length": 252,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "0a12765e-f452-4897-99af-2145ef8c8d41"
        },
        "item": {
          "id": "a9c618ab-ed0d-426c-a482-bad4e07c14d8",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "6a6e2442-d35b-414c-b90f-b74f5888e9ac",
          "status": "OK",
          "code": 200,
          "responseTime": 516,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "18fd7b9d-edc5-427f-ac9f-4ab2a1745c08",
        "cursor": {
          "ref": "2cc90971-abe4-42aa-85a8-d391a657b094",
          "length": 252,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "faa5e4a9-d648-4aeb-93d7-4b736268570b"
        },
        "item": {
          "id": "18fd7b9d-edc5-427f-ac9f-4ab2a1745c08",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "62afab15-61cb-4088-93dc-909274a969e7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 11,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18fd7b9d-edc5-427f-ac9f-4ab2a1745c08",
        "cursor": {
          "ref": "2cc90971-abe4-42aa-85a8-d391a657b094",
          "length": 252,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "faa5e4a9-d648-4aeb-93d7-4b736268570b"
        },
        "item": {
          "id": "18fd7b9d-edc5-427f-ac9f-4ab2a1745c08",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "62afab15-61cb-4088-93dc-909274a969e7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 11,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18fd7b9d-edc5-427f-ac9f-4ab2a1745c08",
        "cursor": {
          "ref": "2cc90971-abe4-42aa-85a8-d391a657b094",
          "length": 252,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "faa5e4a9-d648-4aeb-93d7-4b736268570b"
        },
        "item": {
          "id": "18fd7b9d-edc5-427f-ac9f-4ab2a1745c08",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "62afab15-61cb-4088-93dc-909274a969e7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 11,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f80e8b41-742d-494d-a0c9-8e32d9859198",
        "cursor": {
          "ref": "de665169-fe14-4908-954e-101ebb921f97",
          "length": 252,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "6798e621-3b83-464a-9a01-fbe47068ceea"
        },
        "item": {
          "id": "f80e8b41-742d-494d-a0c9-8e32d9859198",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "b1083b1d-f089-47d6-a99d-8848942ec238",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 11,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "214a573c-cc9b-47b5-85ae-9a2a07dc9dc6",
        "cursor": {
          "ref": "28c791d7-b644-43bf-9f71-f1c9eb673e2c",
          "length": 252,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "03d00244-80c3-4f08-85ff-705f31b4fd9e"
        },
        "item": {
          "id": "214a573c-cc9b-47b5-85ae-9a2a07dc9dc6",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "05672287-ced5-476a-91c7-d95bbfe7f912",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "214a573c-cc9b-47b5-85ae-9a2a07dc9dc6",
        "cursor": {
          "ref": "28c791d7-b644-43bf-9f71-f1c9eb673e2c",
          "length": 252,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "03d00244-80c3-4f08-85ff-705f31b4fd9e"
        },
        "item": {
          "id": "214a573c-cc9b-47b5-85ae-9a2a07dc9dc6",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "05672287-ced5-476a-91c7-d95bbfe7f912",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "8066418b-5e11-413f-b32e-0e950206de73",
        "cursor": {
          "ref": "b99089e2-8119-445f-9d5f-020d5cf86d34",
          "length": 252,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "fc5807c9-9842-4bf4-8df7-1129aaa08eb0"
        },
        "item": {
          "id": "8066418b-5e11-413f-b32e-0e950206de73",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "cc0a40ec-845d-4d65-ab3d-eb607eb459d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "6d00cfa8-8982-4c36-ace1-2c248df08b9f",
        "cursor": {
          "ref": "1aded61b-770a-48a3-85ed-1a7f42baee97",
          "length": 252,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "790c5374-8590-4f3b-b367-2deea5d522b2"
        },
        "item": {
          "id": "6d00cfa8-8982-4c36-ace1-2c248df08b9f",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "6fdbbe2d-8a62-4378-95c8-ac78553b87ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "6d00cfa8-8982-4c36-ace1-2c248df08b9f",
        "cursor": {
          "ref": "1aded61b-770a-48a3-85ed-1a7f42baee97",
          "length": 252,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "790c5374-8590-4f3b-b367-2deea5d522b2"
        },
        "item": {
          "id": "6d00cfa8-8982-4c36-ace1-2c248df08b9f",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "6fdbbe2d-8a62-4378-95c8-ac78553b87ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "6f9f928e-586d-4506-9804-e136f17b5b69",
        "cursor": {
          "ref": "a7947812-ea00-41a8-80ea-376afea6c42c",
          "length": 252,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "eb6b153e-ad64-4680-883e-6dd65c8c80ba"
        },
        "item": {
          "id": "6f9f928e-586d-4506-9804-e136f17b5b69",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "e49cfde1-30f7-4b10-b300-de9373010927",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      }
    ]
  }
}