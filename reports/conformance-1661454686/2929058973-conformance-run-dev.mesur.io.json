{
  "collection": {
    "info": {
      "_postman_id": "691a6d66-244e-4521-a0e5-6768dd6cf6f4",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "b2fb8768-a9c4-4d38-aabe-86249755fe28",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "812f9579-e61e-41e0-bde4-3b70c2ccab0f",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d2518910-9e73-4cc1-a10a-5d92df3ad025",
                "name": "did_json",
                "request": {
                  "url": {
                    "path": [
                      "did.json"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "69863825-cf9c-4c9b-9e91-11a33692cbc0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ce698172-77df-43d4-9e06-40633f189edf"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "event": []
      },
      {
        "id": "547705bb-0c89-46fd-a08e-14e0020c49d1",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "1445f7d7-8ec8-405a-bf16-857d0437e71d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "44f139b1-1b94-402e-8aab-d106972082b6",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "8aa53248-d732-40eb-9825-aa7a5de7d8a7",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca1a4376-36e2-43dd-949b-9878bf85e12f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d5232816-aa0e-4216-ad78-6ab4ec42455b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ae741b9-013f-4b17-839e-0343f7d7f2df",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cde8157d-0e30-4cc9-b383-cdcc1b200c07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0e0e26b1-a8cc-4760-81f3-7f8ae44ad753"
                        }
                      }
                    ]
                  },
                  {
                    "id": "debbf98d-09df-4657-a287-34f6df07981c",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bfe8a24-3ae8-4fb7-8c87-f1c6bcf5ce28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "228c3294-4843-440e-946f-6c198b6bc10c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "ceaf3476-ab50-490f-bf24-a85064e3dc0d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7fce1e89-5a4e-4529-8f82-1761858d15b7",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b553003f-dc8d-4528-b1dc-1723dcdac721",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b72eea06-da1a-4035-b5a8-acb3e23f7ac0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d66cdc47-66ae-4cb9-bef5-d20d3b9f3ace",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54115fdf-61fa-45b2-853d-3bc7817aaf4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da6e0fc5-5a1a-4208-b8ee-237b7e7859dd",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43a7aedf-c835-423f-a374-369cdef98670",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ca7d00da-a319-45b8-9954-169173aa5e0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2482d923-8319-4aea-abb3-a58c85f12794",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "24bed430-8158-4dcc-850c-dd10282161fb"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "9bb0ce8c-b2ca-48ca-8bd8-ead2a8b1a74c",
            "name": "Positive Testing",
            "item": [
              {
                "id": "8d8cfb94-d940-44b4-9ed2-09565af7d9d9",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "05792ed3-2122-43f5-a4f1-02eb03b417b2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "0722c5ce-b926-4f62-b138-8d9cde4cb4de"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5b82713c-f11b-4e80-8c36-2f1d1e18ff4d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "fb373a2c-5bb5-4f13-a9d6-b03227cf4b97"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e4149528-97c3-4826-b2d4-21235dcbdebf",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6bb3b377-de99-435d-9daf-7041196d2230"
            }
          }
        ]
      },
      {
        "id": "76e5d944-5384-4c87-b494-be4ea10c4ece",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "cc72742a-5042-49fb-854e-2ee04424d5bc",
            "name": "Negative Testing",
            "item": [
              {
                "id": "576f1dd7-7d98-4ef5-9977-fe32c855da3f",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "e62e6cfb-beed-4f1c-b87f-1ea2eeb62d96",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5793441-9dcb-47c0-9421-d3633e01dbba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b956ed49-fdf4-433d-8658-3e754890fcae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "847957c1-f4f0-4664-a2fa-1132150323c2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential is required",
                            "delete rawBody.credential",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d844342c-7b16-4a2e-b337-1f4a1eab6d30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccb2a83b-4ce2-4769-9be2-0be8a13d0ef0",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4194793b-682e-4e63-b7f4-4c4f2c077b1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5021ab3-f2f0-4f6a-b2c3-0d8a2617c403"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4860b98-dd8d-412f-8451-06804928a3f0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context is required",
                            "delete rawBody.credential[\"@context\"]",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b74226f3-b0df-4210-a97d-1c873a19199e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b45daca-09b2-4d55-90fa-fcb78cf1300d",
                    "name": "credentials_issue:credential.@context:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4377d3c-3afb-468e-aac1-8db56c2162ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd137d73-9eff-4634-aaed-071cdbb8e74c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4b340df-0299-40ac-b1de-ce26fd579332",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context must be an array",
                            "rawBody.credential[\"@context\"] = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a65c184c-e738-4401-bc0d-1f78995630c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c77f120-f7fd-4e07-96b5-16aa4817c248",
                    "name": "credentials_issue:credential.@context.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0217477f-e992-4744-81bb-fe51a3a7d90f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9beac3b2-7dd1-4d83-a8d4-b44242f885d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ce382e7-1834-422b-8b4d-89d33da0e0e8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context array must contain only strings",
                            "rawBody.credential[\"@context\"] = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "004624be-7751-4a05-8fe5-c4cb1187228c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "269d6b7e-72e5-4a41-8e26-3f506bb080e1",
                    "name": "credentials_issue:credential.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "900b6314-ece9-4c60-862d-0a5f52b98d54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c9c0c64-dda2-4c1e-aed8-447ec1601ec7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d338477-1d6e-4c43-89a8-a71e7ab3abf4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.id must be string when present",
                            "rawBody.credential.id = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f5f794de-dd31-4754-979d-5b1602078065"
                        }
                      }
                    ]
                  },
                  {
                    "id": "087c6ac5-b80c-4ff7-8954-2b601dc06d31",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "396d1d20-d0b1-46a4-b871-a49e3b803c29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "555d21be-8956-4c42-b5ed-745340bde127"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33528890-d96c-4a1a-9a6f-ad7086befebc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type is required",
                            "delete rawBody.credential.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2e25584c-10fd-4316-9203-0b44409d33cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96af531a-3a32-4448-bed8-999cd9996e7d",
                    "name": "credentials_issue:credential.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c2b888a-f0b3-446f-9979-2031c368a158",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ca0a524-30fb-4305-a232-64292b21fbf5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9586e1d-a77b-4002-81b6-0d9e3006b9ae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type must be an array",
                            "rawBody.credential.type = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "db617fbd-293f-46b1-bc30-d0e47f1a914f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13557108-b323-4847-a719-cc8326763f85",
                    "name": "credentials_issue:credential.type.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f54b982-c51d-4f78-84ea-7aec49b94ade",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e27ce38c-e845-48c1-873b-f4f29076e57c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5eae6467-f561-458b-b4b8-ba48da8aefcc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type array must contain only strings",
                            "rawBody.credential.type = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "27c237cd-40fd-401b-a4f7-f6638d34ba17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b08583df-d13a-497d-af3d-b343c9b40649",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "805df473-9174-4d58-bc7e-08f96e6cd155",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c0465f8-0def-4a46-a367-ea8a63a8c27a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f826947a-d2d0-4dd7-89eb-2f35131653b0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer is required",
                            "delete rawBody.credential.issuer",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bec039d1-5585-4d18-9ee5-5f7052ed5c50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3937f981-501e-4ef5-bf85-dac1dca11c89",
                    "name": "credentials_issue:credential.issuer:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75e6262a-49b7-4cb9-9de4-33de877fc879",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4125cf61-92b7-4bb5-8f4d-8c09e6a627df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32ff82f8-a9bc-4649-9101-c8325fc7c7c7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a string or an object",
                            "rawBody.credential.issuer = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9ffd274a-859b-4dcf-8953-7b3c22fbb98f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddef2e84-e1e4-45ad-b55b-e95b8701f4d3",
                    "name": "credentials_issue.credential.issuer:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "633f81d6-69d4-45b5-97ef-94e9636d92f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ab5c254-0b1a-4892-bed1-569a97a2d46c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7d3bb3b-f6a2-4cc1-a1ab-55967bd4167b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a URI when it is a string value.",
                            "rawBody.credential.issuer = \"not.a.uri\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "6d6bfa7f-401b-4d83-b55a-8112dac3ec3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa58d3b5-4101-4dce-9bda-6df96fefcce7",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca21bf58-473c-4834-b3be-0e7c33b62577",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb057cdb-18dd-4914-8cc1-e25de7aeebdb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab3b9347-0ae3-48b0-83d3-01df219828a3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be known to the endpoint.",
                            "rawBody.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "74839d72-e143-450d-a8fe-913617170505"
                        }
                      }
                    ]
                  },
                  {
                    "id": "976a277c-8646-47cc-b29b-e9f9e37d8783",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab35bb2c-e756-4d35-af6b-ca34901bfd78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9fabf26-c5eb-4945-b35f-609e199f3a4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ec84208-1038-4bfb-af35-f7141f846506",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id is required when issuer is in object format",
                            "rawBody.credential.issuer = {};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "21701b56-401c-4950-8c61-e602471737cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0afd5a84-a40a-46a6-8adc-4765cf1ee571",
                    "name": "credentials_issue:credential.issuer.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cac7a19-46c6-45a9-b3e1-b9e92aab2f84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2243a0f-67e3-4f13-855d-6fedfc81248f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfd171f7-bb79-4c2d-9692-5a34934492d8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id must be a string.",
                            "rawBody.credential.issuer = {\"id\": [\"arrays are invalid\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7a3dc2db-2b56-4cff-94ae-86151eaf661e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7d1c8ea-d3a9-4b0e-b05c-08f5a1beadfe",
                    "name": "credentials_issue.credential.issuer.id:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "737c25db-499e-436d-a3e8-fdc564f51bbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6632cf0-7fc2-42d8-bc83-07785b850983"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0025310-4354-4fa9-aff1-00b9b4451c1a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id string must be a URI.",
                            "rawBody.credential.issuer = {\"id\": \"not.a.uri\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "a6e482cb-9e09-46f1-8511-24c501dfb757"
                        }
                      }
                    ]
                  },
                  {
                    "id": "886ec78c-b98a-4702-8e7e-ca39c38f10e2",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f08e5e83-dd89-438d-a671-f50b8af1365f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1946cd68-92a2-4b34-b6a2-5e1ff43f885b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50147752-eead-4108-a082-5a4b832a8a0b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id string must be known to the implementation.",
                            "rawBody.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "d2a2e2a3-79a5-4479-9397-a932c905f42f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a9c8904-a2e1-472b-a7fd-4ed787c35861",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ab05080-1009-40e6-8f32-42819c920cde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd304bad-f8d5-4640-a881-9d37100b8ca4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70353502-4d0a-4934-943f-41b195313b9b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate is required",
                            "delete rawBody.credential.issuanceDate",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b4729dfb-6abd-43cd-a375-b6f957ac7cbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da82a61e-de76-43a5-9490-ea3360ed6522",
                    "name": "credentials_issue:credential.issuanceDate:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc36a49d-d063-4de6-83d3-048fd3efa75a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2fd702a-a4cd-4eb1-94ab-c4f4b3f14c02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab4efd96-e8a5-4598-9257-0eed3d64a2b1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be a string",
                            "rawBody.credential.issuanceDate = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "86b12a27-02b1-4436-b5ca-e51ff672bcb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed587e35-f26d-4772-b52f-a240101c0201",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c32a9220-3182-429a-8415-e6f0043a4ae7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8b15740-7bf7-4706-9cd0-c43452a8c09b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe379d5f-3477-4580-8096-9a671c2344e0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be an XML Date Time String",
                            "rawBody.credential.issuanceDate = \"not an xml date time string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "66f75695-3df3-4f18-b49b-67136e711a6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2330784-9c8b-4307-a605-33a595139880",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "802f4be7-2c6f-4342-ad34-88c18d439980",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b129ae6d-d86a-44a0-b739-a190a333a678"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbf3adc0-07f3-4e33-bf2e-9773e716a1bf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject is required",
                            "delete rawBody.credential.credentialSubject",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8a4a46b1-3042-426c-8f99-aa08a272b126"
                        }
                      }
                    ]
                  },
                  {
                    "id": "945b2859-0f0f-4f8b-a14c-5eac715f0194",
                    "name": "credentials_issue:credential.credentialSubject:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c4ed2ab-b4fc-4150-a735-d99e52cc87b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5f8dd32-ddb6-4ba1-87c6-06c4f0afca9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94061c33-b86f-4097-b380-d42dd806c939",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject must be a string or an object",
                            "rawBody.credential.credentialSubject = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e91837ca-b01c-41cc-a388-24f9a08d0cdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adf9d99b-8376-414c-877c-fe8cc6d928ab",
                    "name": "credentials_issue:credential.credentialSubject.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "509200bf-08d8-4cbf-9e3d-96190e2a0969",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "939b6d70-f046-413f-ad65-a0fc74aee5c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88dfbbf4-f90c-4925-a714-84a22aab6200",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject can be an object with an optional \"id\"",
                            "// property that must be a string when present.",
                            "rawBody.credential.credentialSubject = {\"id\": [\"arrays are invalid\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a9f4ed80-2197-4fab-abc0-f593769b2628"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2f445f2-fd27-4d1a-9a81-06b460bd7cbe",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "128ece73-01c6-4e38-9815-5749120a337e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a0f4d1a-a0a1-4471-b0c2-228ab06e15e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fde8e82d-da48-4f00-8693-c4e391af8340",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options is required",
                            "delete rawBody.options",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4b297326-e92e-4dd2-8e4d-05ba75c3506d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fd4fafc-cead-4bcf-b3ec-8444eced107f",
                    "name": "credentials_issue:options:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "745ba68b-a335-4829-8d6c-e8d32ff59dc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "664ede22-3d4b-4a9d-a0b0-e7422ef71178"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d1108ab-c572-4fc8-895b-58d617b07a6e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options must be an object",
                            "rawBody.options = [\"array\", \"element\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "51eb84af-b3e7-4499-b542-16b9fe29debb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fccc69e8-41ec-4e50-86e1-499528ea812c",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b464063-8549-4a99-8258-f605aae7e357",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1417e376-420f-4a47-9f82-f91895627abb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1f634d4-9b66-4be6-b419-4bb9d8930e28",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type is required",
                            "delete rawBody.options.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6ed65dac-9c56-49c5-8986-3ed655dbaba0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2323094f-31e5-4fd9-8663-15e0ac1d739e",
                    "name": "credentials_issue:options.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7e8120a-f033-4a9e-bcf2-d3e3d5e2ce68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf0f1e2a-e4eb-4481-b4b9-ad751953c8ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "718636b4-62fd-4964-9eae-c3cd1b98987b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be a string",
                            "rawBody.options.type = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c34d6627-c094-4b8f-8471-5f2477cbf87f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bfa2933-d29a-4fe6-8db0-6d4b4f95b5dd",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3570f79a-0936-4f1e-8434-5041bb32d7d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58b93e47-8dbd-4f53-8791-b94d5024bc87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d844d70-8807-496e-b6cd-cbffc3690fa8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be valid",
                            "rawBody.options.type = \"invalid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "41f63f94-e030-42bd-aa4b-9012cc69a503"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b177693a-0bc6-4803-9777-d55daaee7545",
                    "name": "credentials_issue:options.created:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{access_token}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d068bf5e-ebd1-4e14-9f55-002ca661d182",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77368eb8-f60d-44d1-aea8-90bdd768bc1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83ddbbb1-3c17-4f32-9aff-38459883f019",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.created must be a string when present",
                            "rawBody.options.created = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a9995ab1-927f-4b14-8d72-09b01a0cc67e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4a86db3-4c00-4780-b7a9-82b05135904d",
                    "name": "credentials_issue:options.credentialStatus:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c028765-01e3-40b0-88d1-348fb442cb21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77e1646b-1de9-43ef-89ab-64ba13c8d8ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "241e00ef-66a7-455c-bc31-75ba56b4edd1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus must be an object when present",
                            "rawBody.options.credentialStatus = \"a string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f441b081-651e-4516-91be-3b74e9636f18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d423626-03bf-4c34-aafc-561cb6f90a8d",
                    "name": "credentials_issue:options.credentialStatus.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76127525-76a3-4386-adfc-220a4133d784",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68f74526-0c66-4220-9d32-0ad9cfd3ec62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a6c5b9b-20bc-46c8-a564-5b4e377d68c6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be a string when present",
                            "rawBody.options.credentialStatus = {\"type\": {\"foo\": 42}};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5ccc1834-f422-4c30-bf81-1c9b20038d1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec730300-0a6b-4460-b072-252d96f244a4",
                    "name": "credentials_issue:options.credentialStatus.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e00723d8-ca75-4b73-9cd7-1d86c4d397c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "99c43f92-43bd-46cb-b741-e8f766c22e6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bd26170-4383-4ec9-b921-111a15ca8eb8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be valid",
                            "rawBody.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7b3a9a92-47cd-481e-9194-a8951ad3538b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f50836a8-6b38-43d7-9e59-dc3a23a03a89",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ad817b38-963e-4c9c-87ff-338534afecd1",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "236da7ed-92fd-4181-9ba4-d5b1c0e9c763",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "39beaf78-3733-4717-9535-8c8b5a9b4f47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edb46688-e399-4fe1-9bd7-1781e721b021",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "80c55468-7efc-4053-82ad-8547d4f74d55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14c5e46d-7058-4d50-927d-4dda3fb4d393",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8889e8c4-405c-4d3b-9509-ba5c67730252",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "87f7df93-a1ac-4904-8807-3e2c331e394b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e7fb90c-dca1-426d-a12a-9d31d79df25e",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "b671effa-c79b-4e65-8165-130424674700"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "59546b5d-22a8-4743-b890-3dc198af2a53",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3dea62c5-b57b-428b-a550-5aa17c6f76bd"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e23cd6a9-13df-4389-b9ef-39f74d04dc69",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2e1de54f-2ed2-429a-87f1-0624131e7efd"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b16ca43e-9743-4e7d-a346-bb2fd57cadc2",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "fcd92cc2-6174-4f86-a5aa-8bd3d43242dc"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "370a73eb-2b7c-4787-ae86-b451684edcf3",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0a05c4c6-ae89-407a-a558-7cf6255af246"
                }
              }
            ]
          },
          {
            "id": "d918c002-ab94-472a-9a5a-54da5ca4a919",
            "name": "Positive Testing",
            "item": [
              {
                "id": "7b80909f-17ef-4b2d-85a9-60d523b76457",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "41d62488-b6d8-421d-a886-70bd6ad6928e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json();",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject).to.equal(pm.variables.get(\"credential_subject\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json();",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuance_date\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e25ef5b2-97d9-4364-8197-7a43ca3fbcca"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a4e15ec8-40e7-48cb-9c87-e32b6a089c55",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "a000c2dd-418e-4fe2-9b35-81369bb3f99c"
                    }
                  }
                ]
              },
              {
                "id": "6df53d20-7774-40f2-b5f9-445eb63af5a7",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "aa978c1c-bec8-4c72-bace-64956be4f10c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "52692c4f-6949-43e9-b929-8499a98f111a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "520332c0-3f7e-4039-b0e0-946f6d0b3f6d",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.id is optional",
                        "rawBody.credential.id = pm.variables.get(\"credential_id\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "864c2164-4787-466a-b88f-2a4f6444c56b"
                    }
                  }
                ]
              },
              {
                "id": "bbbfd685-e9a6-4add-8464-f4f57c8ea24e",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "11dd610e-871a-4ada-951d-816bb17f2ba6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9836cd12-8db6-40be-9f79-d08a13628f31"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7bc9449a-9d25-4142-9f56-66eddf130b35",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.issuer can be an object with required 'id' element",
                        "rawBody.credential.issuer = {\"id\": pm.variables.get(\"credential_issuer_id\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "05fd7f61-5b63-44b1-8559-be0791d7235e"
                    }
                  }
                ]
              },
              {
                "id": "6abe46f6-2ffb-42b5-9d39-205d89029913",
                "name": "credentials_issue:credential:alt.credentialSubject.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "546a8b51-e20e-4439-a0b1-3932b2f82b72",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2c3bba86-970c-4bad-862f-79f5672208b5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6086b6ed-d703-4368-b2e4-f4a1097aca8c",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.credentialSubject can be an object with optional 'id' element.",
                        "rawBody.credential.credentialSubject = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "bddcad5e-faf2-497f-adf6-73f8ee1d5c25"
                    }
                  }
                ]
              },
              {
                "id": "f79224af-47e2-4c77-a8d0-075b9d3bbe9e",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "179c45b0-891b-49e7-ae1a-31f2c62b21a4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof credentialSubject === 'string') {",
                        "  pm.expect(credentialSubject).to.equal(pm.variables.get(\"credential_subject\"))",
                        " } else {",
                        "  pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credential_subject\"))",
                        " }",
                        "});"
                      ],
                      "_lastExecutionId": "396d4796-86fe-4cec-984d-8571f2b465ca"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4a8d338e-3db0-45a7-92c8-2deafdad05a1",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.credentialSubject can be an object with optional 'id' element",
                        "rawBody.credential.credentialSubject = {\"id\": pm.variables.get(\"credential_subject\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "2d5dde14-e7c8-4bce-ad0d-47b902a5507a"
                    }
                  }
                ]
              },
              {
                "id": "eeedb9a0-2363-4117-9395-a53a87295673",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a95e5380-8ca5-45d0-ae6b-9158dc8380e8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7d4481f6-e862-48a2-aeef-fdd9ba1e6dfd"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d7a64ff6-f541-487b-8d3a-696fa55302cb",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.created can be an optional string value",
                        "rawBody.options.created = \"an arbitrary string\";",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "9d44f671-f8e0-4c8a-9829-441e9ec77d51"
                    }
                  }
                ]
              },
              {
                "id": "1549ed9a-fbb4-4cdf-ae5b-d4b3d0ccffc1",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "34d33eae-4633-4409-b622-3b7e2c7b5fd7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6a240a79-9171-4818-8919-3b6acfbde330"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2bbc48a5-9eec-4c9b-8bec-c594373aeddb",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus can be an optional object",
                        "rawBody.options.credentialStatus = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "d50fb576-6e42-4f8b-825e-090ce6376d2c"
                    }
                  }
                ]
              },
              {
                "id": "a8b69e99-0d35-4dc1-89a8-7e0c90d52783",
                "name": "credentials_issue:options:opt.credentialStatus.type",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a361e97e-6ec5-4016-8173-49bed19f21cb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a3db5737-e5c7-4109-80c8-802a1c3ec32f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "144720c8-a479-4eba-a8eb-330615778165",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus.type can specific string",
                        "rawBody.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "b578d325-9e7e-4591-bdab-2c6b2a75c5b7"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "58292d20-a471-49b2-8d16-ff705e704a23",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "51d3fc1f-9273-4799-8d49-937788b93538"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "0e860e80-2820-4cdc-8791-ce5e66d36ca6",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8e44e65c-c8d6-437f-b83a-c414ab1e0b47"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "718e2d6b-c26b-4601-b14e-872b62179859",
              "type": "text/javascript",
              "exec": [
                "// Raw body should exclude all optional items and should contain",
                "// first alternate version of any 'oneOf' elements defined in the",
                "// OpenAPI schema.",
                "",
                "pm.variables.set('issuance_date', '2006-01-02T15:04:05Z');",
                "",
                "pm.variables.set(\"rawBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": \"{{credential_issuer_id}}\",",
                "        \"issuanceDate\": \"{{issuance_date}}\",",
                "        \"credentialSubject\": \"{{credential_subject}}\"",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"created\": \"2020-04-02T18:48:36Z\"",
                "    }",
                "});",
                "",
                "// Obtain an access token with the required \"issue:credentials\" scope",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Obtain the credential issuer ID via did:web resolution",
                "utils(pm).getIssuerId();",
                "",
                "// Set the credential subject to use for testing",
                "if (!pm.variables.get('credential_subject')) {",
                "    pm.variables.set('credential_subject', 'did:example:123')",
                "}",
                "",
                "// Set the credential id to use for testing",
                "if (!pm.variables.get('credential_id')) {",
                "    pm.variables.set('credential_id', \"urn:uuid:{{$randomUUID}}\")",
                "}",
                ""
              ],
              "_lastExecutionId": "56b6c877-df7e-4003-b10d-f99acf6ff245"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "497e4fc4-a5a5-4be0-9844-ac6938c4228c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3ea8fa91-b7b7-4700-ac63-7964ad2b685b"
            }
          }
        ]
      },
      {
        "id": "5e31cb25-fd15-43fd-8050-e9fd6b518483",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "23a65169-ad48-4fc8-81a3-7bee83930f25",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4e2f0adb-5229-4a49-9550-4b64fbbbd8d9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e81bd076-7e39-4835-ac7c-c25c19581cd7",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6765bf33-6baa-4ffd-ab89-34d9dfa14750",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39ffbcce-4d01-48a0-9684-8891ed05027f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fec20557-24ba-467d-adc0-607ac68c513f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e874d9e2-fdcb-4b01-9eb9-044e1c8d1a6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28febbfc-6382-4308-979d-e8a70aa5193a",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdaffd0b-071c-45c4-aaaa-b55a39f374a5",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "20869185-5b0c-48ff-8935-c35e209d6e90"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69c41831-d1db-4817-8f62-2ff9b303aa8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2ca1a8e1-c6f7-44b8-9610-c764b64026b4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "463aa241-57fd-4f76-bfc1-f966b2024acf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cbcf6dd4-f702-41dd-bef8-c8f9f1747017"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0fee7e13-afe2-4859-9bec-23ab33e69989",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6fb78345-2b2d-4002-887d-10e3c204793a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "40ae9f06-13d0-4134-8d0a-d96b62413771",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"update:credentials\" scope",
                "utils(pm).getAccessToken('update:credentials');",
                ""
              ],
              "_lastExecutionId": "afad97c2-af54-441d-93ff-faf6672133a7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bc04557d-5772-480f-88a3-eb3503930668",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c9d4ef7c-fe48-4ff5-8756-ca99ddcdf10f"
            }
          }
        ]
      },
      {
        "id": "49815f21-c04a-4911-8305-f9b284a665d4",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "90dda0f9-cd45-4178-a961-3c700608f949",
            "name": "Negative Testing",
            "item": [
              {
                "id": "90e604da-d204-4710-a5f2-ec7e85074c55",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e178752c-8d4b-4d05-956c-738084876986",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7045047d-8da8-4f52-acac-5def541fbbd3",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"dummyVC\")));"
                          ],
                          "_lastExecutionId": "a650ce72-a3be-457f-a86c-1d7921ba408f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22f1b357-e9d4-4a36-bc0f-6ab4032fd2e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7fa2ffa6-e55b-465b-b735-8b0a923f03d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46b61257-71ab-4192-8856-682d331b0107",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07fd66f3-d301-401d-8a15-0f4e939d68ce",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"dummyVC\")));"
                          ],
                          "_lastExecutionId": "6d091eec-d1b8-4ea2-98d3-6449b8f392ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c240933-e44c-4217-b88a-45a06c01c3b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8541d9e6-675a-4348-abf3-9d5fface090e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "88702506-e8e1-4f50-9482-d55096def27f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dfee6407-890d-441a-aed5-8d77f4fd9db1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "01df0463-b11d-405d-84c7-76bee16bd015",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a9ac7f0d-6daf-4047-bc95-ee515aeb8fec"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c0eb1215-5cdb-4327-af99-8f67cb589cce",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"dummyVC\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": \"did:example:123\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "688b49d0-6f6f-49c0-887b-cb6d42c7411c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c9d88924-4a43-4aa1-8348-c9eb9656b06a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ae2bea4b-3d09-4f42-bc1d-96987c3e6cc5"
            }
          }
        ]
      },
      {
        "id": "c150856f-dc63-496b-b668-97c8886329ef",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "c48f25f9-e02f-4318-8f66-0c978fd25d48",
            "name": "Negative Testing",
            "item": [
              {
                "id": "dcefa80b-e6db-41cd-b791-23c2e587c4f7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e1dc030e-5ae5-4e80-8fff-cd1e39cee70d",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec607ad0-0c9c-4af5-8234-2f765a3ec9c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "047f4f37-a0f2-4dda-bcff-57e355e2b970"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "890bccba-86d5-4dbd-a599-0642e0b541b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7c85caa0-7c86-43db-aab9-056b4c7f655d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "118b65d9-826a-49c7-8758-60b62dc08840",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd43598c-1ebe-485b-af5f-0c02248485f0",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "2f7b2436-454a-444f-a29d-4d0b7ce1cee7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c2bbfd4-fc78-4f6b-b700-9fc945487c2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "db8ca949-7641-4db0-b990-5fabc93ea708"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5a485c81-4043-4235-9bfd-4b117a1b94e2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "03a20e07-c1f7-4cb0-b1d0-4e216632d35f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "30f025c7-db2c-4ce9-9b21-acaf5b8a4e38",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "50419cdc-51a4-465f-a356-917fcf12231a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "dab71101-c01b-4b52-bd2d-12a3caacde87",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope",
                "utils(pm).getAccessToken('submit:presentations');",
                ""
              ],
              "_lastExecutionId": "eab058b5-ebe3-4140-8b9a-2005d64e2166"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ab9f0784-933d-4ecf-86a1-6e4604e67d78",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1df64466-4e59-4777-aa5f-4aeb50c50538"
            }
          }
        ]
      },
      {
        "id": "bc260c2c-1f40-401c-b738-e618d6f43d77",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "8acb35a8-7bb1-4b97-b533-150cbe41eddd",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a53db966-984e-4c43-bd00-d021faca2b33",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f5cdde12-3305-4f9a-8ea8-9f299325dcc4",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e56c3227-5ed0-4e8d-a5be-65d8f2fd5d13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65e79bb0-0dc2-4366-9231-e0efb4e144b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a2cbac6-1757-4d7b-8b84-6e2858729897",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8239b78c-53fc-4ef7-bb0a-05ea7a3aebc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e6cb837-40d3-4c48-83ad-8437ce2b36a1",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bf60ae0-11ce-439a-a7ad-b9d07779cbaa",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "4974965c-b9b5-44dc-a2d0-7d4e5bb7d3ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b9eba0d-da3f-44d4-9239-e8fba1882467",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a9ee9ff3-2053-4800-bb77-1ec45f29a0a0"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "64b1cda4-026c-4342-8946-b74d67612b05",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "93a71a6b-b8b8-46d1-b804-923c726cc88f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "89461c8f-a240-4b22-af57-563efcb32f0e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cfe04283-27d0-480d-8512-9041c7e2c7fb"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e80a2a00-1364-42c1-b6db-df4903eb6b7a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope",
                "utils(pm).getAccessToken('prove:presentations');"
              ],
              "_lastExecutionId": "91dba392-12ab-4d45-80f3-d2f0041b91b4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9e7a0e86-272c-449a-ab6a-5556e0d14e78",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7ddf09ff-cfad-4e14-b261-44589f51afb0"
            }
          }
        ]
      },
      {
        "id": "3125aec0-34f6-4ac1-9ba4-f8567a429706",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "cdc906b4-f43c-4f57-b7e3-49d9a99c8ed1",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c5faab63-b623-4dc8-a41d-186f9df8dae0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "032d2aec-4707-4867-be19-eac712c0171a",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c771645-e9d8-464f-bb30-bdb8afab4d61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a338aa3b-ed59-4837-b1db-842f0d37bfc9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e1d8cda-52d6-468b-9754-cdb50ca5a57d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c83a3a38-23c1-4229-b4d3-9dfb1e0f61f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bb53f3f-7608-4b4c-941b-b0ae80bf54d5",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcc12bb0-b4e5-49da-b5ed-2c30732ba513",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "6936c9c0-2e9f-4e41-ae9c-0bd4343b7b48"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89eb79c8-f36d-4ee8-b737-311606f722c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f708ff02-e402-4eb1-9c43-543badbb6c76"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8f5681e3-9cb5-45c7-b90d-8bb800d3e675",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0aebdae0-c61b-4364-a73c-423a151e32bf"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "cb7654e4-dbf4-434e-95db-6b5f6f86fa9c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "10d63f62-982a-4a92-b282-c24b91a1b2bb"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2e00e281-7a9d-4c7d-a89e-de0ec251da7f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope",
                "utils(pm).getAccessToken('verify:presentations');"
              ],
              "_lastExecutionId": "157b1c61-9daa-4976-b7ec-b22e4d25ac1b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b2aa58cd-2954-45ef-9bc4-e0dca0b465d1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "52222b23-518f-4e2a-95fe-3443e6dedf69"
            }
          }
        ]
      },
      {
        "id": "67805670-ce3e-4327-addc-9e8562ff39d9",
        "name": "Presentations - Notify",
        "item": [],
        "event": []
      },
      {
        "id": "af1d81c2-4d23-4a34-8000-060f0a6c6f9f",
        "name": "Presentations - Submit",
        "item": [],
        "event": []
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 58,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 447,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 58,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 107,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 58,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 121,
        "pending": 0,
        "failed": 19
      },
      "testScripts": {
        "total": 226,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 221,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 118.99065420560744,
      "responseMin": 63,
      "responseMax": 816,
      "responseSd": 124.1174071344452,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1661454580974,
      "completed": 1661454597480
    },
    "executions": [
      {
        "id": "d2518910-9e73-4cc1-a10a-5d92df3ad025",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 58,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "2d7eaba0-f96f-4868-a27f-153bc042b2c6",
          "httpRequestId": "85ee1a26-cc95-4cf8-94d4-0e00acc4e90a"
        },
        "item": {
          "id": "d2518910-9e73-4cc1-a10a-5d92df3ad025",
          "name": "did_json"
        },
        "response": {
          "id": "c676f02e-3e83-4eb8-8b7b-6bff6fc94e04",
          "status": "OK",
          "code": 200,
          "responseTime": 279,
          "responseSize": 1002
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8aa53248-d732-40eb-9825-aa7a5de7d8a7",
        "cursor": {
          "ref": "aed5aa44-84df-49fa-9a2d-d5ed147e2095",
          "length": 58,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "9f8a72fe-089a-40b1-a1b4-2d50b99ca150"
        },
        "item": {
          "id": "8aa53248-d732-40eb-9825-aa7a5de7d8a7",
          "name": "did:invalid"
        },
        "response": {
          "id": "f72caba8-b58d-4a3e-9cfd-febdeb409b16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8aa53248-d732-40eb-9825-aa7a5de7d8a7",
        "cursor": {
          "ref": "aed5aa44-84df-49fa-9a2d-d5ed147e2095",
          "length": 58,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "9f8a72fe-089a-40b1-a1b4-2d50b99ca150"
        },
        "item": {
          "id": "8aa53248-d732-40eb-9825-aa7a5de7d8a7",
          "name": "did:invalid"
        },
        "response": {
          "id": "f72caba8-b58d-4a3e-9cfd-febdeb409b16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ae741b9-013f-4b17-839e-0343f7d7f2df",
        "cursor": {
          "ref": "a0af99a3-0c4f-4130-990c-654455ac2a14",
          "length": 58,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "7304b999-1a34-4f4e-87f8-7ac5851c1de7"
        },
        "item": {
          "id": "9ae741b9-013f-4b17-839e-0343f7d7f2df",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "c11c3625-c71d-4275-b718-ca92db1b7e51",
          "status": "Not Found",
          "code": 404,
          "responseTime": 114,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "debbf98d-09df-4657-a287-34f6df07981c",
        "cursor": {
          "ref": "e7ac053a-1119-4ed8-abbc-ed564854fcce",
          "length": 58,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "cedad0b5-33dd-4c7b-9faa-6dbb629aecd2"
        },
        "item": {
          "id": "debbf98d-09df-4657-a287-34f6df07981c",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "6ced5217-d47f-4085-8499-289aa22c33c8",
          "status": "Not Found",
          "code": 404,
          "responseTime": 66,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fce1e89-5a4e-4529-8f82-1761858d15b7",
        "cursor": {
          "ref": "287fe730-2d00-4bc5-8b77-ed31e67631be",
          "length": 58,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "5a26c58c-be73-4fa6-b466-43fa56b97360"
        },
        "item": {
          "id": "7fce1e89-5a4e-4529-8f82-1761858d15b7",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "362a33d9-9591-4a5e-be31-9ef985b2097e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 64,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da6e0fc5-5a1a-4208-b8ee-237b7e7859dd",
        "cursor": {
          "ref": "544fc71a-db5b-41b1-ab2c-486ce3e1d494",
          "length": 58,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "5a381d68-d697-473a-b5d3-6e0c9009d5cf"
        },
        "item": {
          "id": "da6e0fc5-5a1a-4208-b8ee-237b7e7859dd",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "77f1b191-7766-4892-bbda-bccddf55f1f8",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da6e0fc5-5a1a-4208-b8ee-237b7e7859dd",
        "cursor": {
          "ref": "544fc71a-db5b-41b1-ab2c-486ce3e1d494",
          "length": 58,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "5a381d68-d697-473a-b5d3-6e0c9009d5cf"
        },
        "item": {
          "id": "da6e0fc5-5a1a-4208-b8ee-237b7e7859dd",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "77f1b191-7766-4892-bbda-bccddf55f1f8",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d8cfb94-d940-44b4-9ed2-09565af7d9d9",
        "cursor": {
          "ref": "776cd827-a900-4f71-864a-dbb47a466918",
          "length": 58,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "4ee3649d-dbba-4b85-bf8e-ed7c12a3a3fb"
        },
        "item": {
          "id": "8d8cfb94-d940-44b4-9ed2-09565af7d9d9",
          "name": "identifiers"
        },
        "response": {
          "id": "a230b366-da7e-4c1a-b0c3-7fecd5bbf9c2",
          "status": "OK",
          "code": 200,
          "responseTime": 108,
          "responseSize": 1018
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e62e6cfb-beed-4f1c-b87f-1ea2eeb62d96",
        "cursor": {
          "ref": "27009009-cf75-43e2-8e0f-31054c592d33",
          "length": 58,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "20d662fa-5322-4113-9227-cde809a2eac7"
        },
        "item": {
          "id": "e62e6cfb-beed-4f1c-b87f-1ea2eeb62d96",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "6d8666a9-0a0f-4273-b5b6-9a624aee94aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e62e6cfb-beed-4f1c-b87f-1ea2eeb62d96",
        "cursor": {
          "ref": "27009009-cf75-43e2-8e0f-31054c592d33",
          "length": 58,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "20d662fa-5322-4113-9227-cde809a2eac7"
        },
        "item": {
          "id": "e62e6cfb-beed-4f1c-b87f-1ea2eeb62d96",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "6d8666a9-0a0f-4273-b5b6-9a624aee94aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e62e6cfb-beed-4f1c-b87f-1ea2eeb62d96",
        "cursor": {
          "ref": "27009009-cf75-43e2-8e0f-31054c592d33",
          "length": 58,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "20d662fa-5322-4113-9227-cde809a2eac7"
        },
        "item": {
          "id": "e62e6cfb-beed-4f1c-b87f-1ea2eeb62d96",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "6d8666a9-0a0f-4273-b5b6-9a624aee94aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccb2a83b-4ce2-4769-9be2-0be8a13d0ef0",
        "cursor": {
          "ref": "44532d7a-5aa2-436a-acfb-2fc5e608b406",
          "length": 58,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "4d7fa5da-2836-4fdf-bc8e-c516fba986b1"
        },
        "item": {
          "id": "ccb2a83b-4ce2-4769-9be2-0be8a13d0ef0",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "19b0d4c7-02a6-4e39-bbd8-f690a8d0d6cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccb2a83b-4ce2-4769-9be2-0be8a13d0ef0",
        "cursor": {
          "ref": "44532d7a-5aa2-436a-acfb-2fc5e608b406",
          "length": 58,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "4d7fa5da-2836-4fdf-bc8e-c516fba986b1"
        },
        "item": {
          "id": "ccb2a83b-4ce2-4769-9be2-0be8a13d0ef0",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "19b0d4c7-02a6-4e39-bbd8-f690a8d0d6cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b45daca-09b2-4d55-90fa-fcb78cf1300d",
        "cursor": {
          "ref": "84d68476-26f5-482f-bea3-8408783c3cd2",
          "length": 58,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "a870b935-1368-4cb3-a54e-d8bd7d3663b3"
        },
        "item": {
          "id": "1b45daca-09b2-4d55-90fa-fcb78cf1300d",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {
          "id": "b81c2fb6-17c6-43db-a2a1-c57fb21c5c47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b45daca-09b2-4d55-90fa-fcb78cf1300d",
        "cursor": {
          "ref": "84d68476-26f5-482f-bea3-8408783c3cd2",
          "length": 58,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "a870b935-1368-4cb3-a54e-d8bd7d3663b3"
        },
        "item": {
          "id": "1b45daca-09b2-4d55-90fa-fcb78cf1300d",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {
          "id": "b81c2fb6-17c6-43db-a2a1-c57fb21c5c47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c77f120-f7fd-4e07-96b5-16aa4817c248",
        "cursor": {
          "ref": "00fae052-a87e-4907-8af7-363ed11839f2",
          "length": 58,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "66118812-3ed7-493d-af97-86f6c7d9a062"
        },
        "item": {
          "id": "5c77f120-f7fd-4e07-96b5-16aa4817c248",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {
          "id": "eb168711-643b-4620-a176-46b544b2e941",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c77f120-f7fd-4e07-96b5-16aa4817c248",
        "cursor": {
          "ref": "00fae052-a87e-4907-8af7-363ed11839f2",
          "length": 58,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "66118812-3ed7-493d-af97-86f6c7d9a062"
        },
        "item": {
          "id": "5c77f120-f7fd-4e07-96b5-16aa4817c248",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {
          "id": "eb168711-643b-4620-a176-46b544b2e941",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "269d6b7e-72e5-4a41-8e26-3f506bb080e1",
        "cursor": {
          "ref": "7a6d840c-04c6-4c9d-9b9f-cf73d1515b86",
          "length": 58,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "92f22f40-38e3-494a-a885-4f6f71e5af38"
        },
        "item": {
          "id": "269d6b7e-72e5-4a41-8e26-3f506bb080e1",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {
          "id": "18a0d63a-8e9e-430c-bee6-8258602658f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "269d6b7e-72e5-4a41-8e26-3f506bb080e1",
        "cursor": {
          "ref": "7a6d840c-04c6-4c9d-9b9f-cf73d1515b86",
          "length": 58,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "92f22f40-38e3-494a-a885-4f6f71e5af38"
        },
        "item": {
          "id": "269d6b7e-72e5-4a41-8e26-3f506bb080e1",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {
          "id": "18a0d63a-8e9e-430c-bee6-8258602658f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "087c6ac5-b80c-4ff7-8954-2b601dc06d31",
        "cursor": {
          "ref": "152e27fa-6e05-4219-9f50-4c0c408d3f55",
          "length": 58,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "1528eed1-46d5-424e-ab93-386794ed7558"
        },
        "item": {
          "id": "087c6ac5-b80c-4ff7-8954-2b601dc06d31",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "a171e691-abd5-4dd8-9864-7d48eb50d11e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "087c6ac5-b80c-4ff7-8954-2b601dc06d31",
        "cursor": {
          "ref": "152e27fa-6e05-4219-9f50-4c0c408d3f55",
          "length": 58,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "1528eed1-46d5-424e-ab93-386794ed7558"
        },
        "item": {
          "id": "087c6ac5-b80c-4ff7-8954-2b601dc06d31",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "a171e691-abd5-4dd8-9864-7d48eb50d11e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96af531a-3a32-4448-bed8-999cd9996e7d",
        "cursor": {
          "ref": "3419a179-7923-42bd-84a3-af23ea3a1125",
          "length": 58,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "a310a40f-80f0-4a85-85cf-4247ee6cc327"
        },
        "item": {
          "id": "96af531a-3a32-4448-bed8-999cd9996e7d",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {
          "id": "8c51a2e9-5845-4bf1-a7fe-a3bbb7d605ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96af531a-3a32-4448-bed8-999cd9996e7d",
        "cursor": {
          "ref": "3419a179-7923-42bd-84a3-af23ea3a1125",
          "length": 58,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "a310a40f-80f0-4a85-85cf-4247ee6cc327"
        },
        "item": {
          "id": "96af531a-3a32-4448-bed8-999cd9996e7d",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {
          "id": "8c51a2e9-5845-4bf1-a7fe-a3bbb7d605ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13557108-b323-4847-a719-cc8326763f85",
        "cursor": {
          "ref": "f3be093a-a7c2-435a-90e3-0bfc1b1e6b4d",
          "length": 58,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "a742e4e0-6eb9-4131-8d89-12406abb8d8a"
        },
        "item": {
          "id": "13557108-b323-4847-a719-cc8326763f85",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {
          "id": "167a9e4c-f8e7-47f5-a8d8-a543e8581733",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13557108-b323-4847-a719-cc8326763f85",
        "cursor": {
          "ref": "f3be093a-a7c2-435a-90e3-0bfc1b1e6b4d",
          "length": 58,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "a742e4e0-6eb9-4131-8d89-12406abb8d8a"
        },
        "item": {
          "id": "13557108-b323-4847-a719-cc8326763f85",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {
          "id": "167a9e4c-f8e7-47f5-a8d8-a543e8581733",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b08583df-d13a-497d-af3d-b343c9b40649",
        "cursor": {
          "ref": "8c9ce0a5-b00c-4d9c-999e-3d8d965cbd5a",
          "length": 58,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "0fdf713d-9f8d-472c-a4e8-8114ca294ed5"
        },
        "item": {
          "id": "b08583df-d13a-497d-af3d-b343c9b40649",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "da6abfe0-c649-4942-b315-b9f007c2f014",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b08583df-d13a-497d-af3d-b343c9b40649",
        "cursor": {
          "ref": "8c9ce0a5-b00c-4d9c-999e-3d8d965cbd5a",
          "length": 58,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "0fdf713d-9f8d-472c-a4e8-8114ca294ed5"
        },
        "item": {
          "id": "b08583df-d13a-497d-af3d-b343c9b40649",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "da6abfe0-c649-4942-b315-b9f007c2f014",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3937f981-501e-4ef5-bf85-dac1dca11c89",
        "cursor": {
          "ref": "6500d09b-5049-4886-9b90-67d93f76895e",
          "length": 58,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "73061d88-1f37-4673-97f8-25951afe54ec"
        },
        "item": {
          "id": "3937f981-501e-4ef5-bf85-dac1dca11c89",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {
          "id": "dced65ca-fb61-4ad2-ae62-3ccee2eb35ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3937f981-501e-4ef5-bf85-dac1dca11c89",
        "cursor": {
          "ref": "6500d09b-5049-4886-9b90-67d93f76895e",
          "length": 58,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "73061d88-1f37-4673-97f8-25951afe54ec"
        },
        "item": {
          "id": "3937f981-501e-4ef5-bf85-dac1dca11c89",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {
          "id": "dced65ca-fb61-4ad2-ae62-3ccee2eb35ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddef2e84-e1e4-45ad-b55b-e95b8701f4d3",
        "cursor": {
          "ref": "7c02e6ea-0080-4cd2-80c9-6c9e4ad43858",
          "length": 58,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "f4970da0-8c7c-4d23-b00e-a0bd5ce1d1aa"
        },
        "item": {
          "id": "ddef2e84-e1e4-45ad-b55b-e95b8701f4d3",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {
          "id": "966e6ae1-7ba2-4ee3-8958-ffb9b81c4cd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddef2e84-e1e4-45ad-b55b-e95b8701f4d3",
        "cursor": {
          "ref": "7c02e6ea-0080-4cd2-80c9-6c9e4ad43858",
          "length": 58,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "f4970da0-8c7c-4d23-b00e-a0bd5ce1d1aa"
        },
        "item": {
          "id": "ddef2e84-e1e4-45ad-b55b-e95b8701f4d3",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {
          "id": "966e6ae1-7ba2-4ee3-8958-ffb9b81c4cd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa58d3b5-4101-4dce-9bda-6df96fefcce7",
        "cursor": {
          "ref": "f44141a6-e265-49bd-9bab-66282454b099",
          "length": 58,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "51109470-cab3-443a-8db2-c0e04cf0e3ea"
        },
        "item": {
          "id": "aa58d3b5-4101-4dce-9bda-6df96fefcce7",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "4abcaf88-546e-43f6-9401-2fde24be5295",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa58d3b5-4101-4dce-9bda-6df96fefcce7",
        "cursor": {
          "ref": "f44141a6-e265-49bd-9bab-66282454b099",
          "length": 58,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "51109470-cab3-443a-8db2-c0e04cf0e3ea"
        },
        "item": {
          "id": "aa58d3b5-4101-4dce-9bda-6df96fefcce7",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "4abcaf88-546e-43f6-9401-2fde24be5295",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "976a277c-8646-47cc-b29b-e9f9e37d8783",
        "cursor": {
          "ref": "6ba885f5-0d21-43ed-8d77-bfea9242c320",
          "length": 58,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "ae3ebaf6-f413-4f79-8fee-16f9c7a9983a"
        },
        "item": {
          "id": "976a277c-8646-47cc-b29b-e9f9e37d8783",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "11d586d8-cfed-4aeb-acc4-a01438bdcf52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "976a277c-8646-47cc-b29b-e9f9e37d8783",
        "cursor": {
          "ref": "6ba885f5-0d21-43ed-8d77-bfea9242c320",
          "length": 58,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "ae3ebaf6-f413-4f79-8fee-16f9c7a9983a"
        },
        "item": {
          "id": "976a277c-8646-47cc-b29b-e9f9e37d8783",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "11d586d8-cfed-4aeb-acc4-a01438bdcf52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0afd5a84-a40a-46a6-8adc-4765cf1ee571",
        "cursor": {
          "ref": "811d1ec0-4a37-4b50-bf5b-a2e8aca97fdc",
          "length": 58,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "23be4793-296d-4a64-b7dc-d07bcb37fdca"
        },
        "item": {
          "id": "0afd5a84-a40a-46a6-8adc-4765cf1ee571",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {
          "id": "1433cae0-ce7a-451b-9aaa-af6fc1f8a5a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0afd5a84-a40a-46a6-8adc-4765cf1ee571",
        "cursor": {
          "ref": "811d1ec0-4a37-4b50-bf5b-a2e8aca97fdc",
          "length": 58,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "23be4793-296d-4a64-b7dc-d07bcb37fdca"
        },
        "item": {
          "id": "0afd5a84-a40a-46a6-8adc-4765cf1ee571",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {
          "id": "1433cae0-ce7a-451b-9aaa-af6fc1f8a5a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7d1c8ea-d3a9-4b0e-b05c-08f5a1beadfe",
        "cursor": {
          "ref": "05e1d4c4-a137-4977-b963-a90acca5ed3c",
          "length": 58,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "68c0e281-558b-4d93-b5d2-bb7816590ca7"
        },
        "item": {
          "id": "e7d1c8ea-d3a9-4b0e-b05c-08f5a1beadfe",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {
          "id": "76c8285d-f283-4170-a0e0-2f8ff54362dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7d1c8ea-d3a9-4b0e-b05c-08f5a1beadfe",
        "cursor": {
          "ref": "05e1d4c4-a137-4977-b963-a90acca5ed3c",
          "length": 58,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "68c0e281-558b-4d93-b5d2-bb7816590ca7"
        },
        "item": {
          "id": "e7d1c8ea-d3a9-4b0e-b05c-08f5a1beadfe",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {
          "id": "76c8285d-f283-4170-a0e0-2f8ff54362dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "886ec78c-b98a-4702-8e7e-ca39c38f10e2",
        "cursor": {
          "ref": "cf636a50-83c7-4c11-9441-80457e22770f",
          "length": 58,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "9504db5c-690c-43d0-bc47-e51226398b75"
        },
        "item": {
          "id": "886ec78c-b98a-4702-8e7e-ca39c38f10e2",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "c479ed2d-d598-4d5e-a191-70b44a677832",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "886ec78c-b98a-4702-8e7e-ca39c38f10e2",
        "cursor": {
          "ref": "cf636a50-83c7-4c11-9441-80457e22770f",
          "length": 58,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "9504db5c-690c-43d0-bc47-e51226398b75"
        },
        "item": {
          "id": "886ec78c-b98a-4702-8e7e-ca39c38f10e2",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "c479ed2d-d598-4d5e-a191-70b44a677832",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a9c8904-a2e1-472b-a7fd-4ed787c35861",
        "cursor": {
          "ref": "451a08d7-5523-4351-92e0-e61bd9b6e0b8",
          "length": 58,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "65d3c309-6d43-4069-a4e2-66094cd028ea"
        },
        "item": {
          "id": "1a9c8904-a2e1-472b-a7fd-4ed787c35861",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "c74e44ab-609f-49a5-be8c-ad35b8bb9c50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a9c8904-a2e1-472b-a7fd-4ed787c35861",
        "cursor": {
          "ref": "451a08d7-5523-4351-92e0-e61bd9b6e0b8",
          "length": 58,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "65d3c309-6d43-4069-a4e2-66094cd028ea"
        },
        "item": {
          "id": "1a9c8904-a2e1-472b-a7fd-4ed787c35861",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "c74e44ab-609f-49a5-be8c-ad35b8bb9c50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da82a61e-de76-43a5-9490-ea3360ed6522",
        "cursor": {
          "ref": "2abe2e50-82e5-4498-9912-2cabf4fb22af",
          "length": 58,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "5a3ef9db-6f56-470b-8714-83d1359251b0"
        },
        "item": {
          "id": "da82a61e-de76-43a5-9490-ea3360ed6522",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {
          "id": "3cf0bbcb-b843-45dd-9c2b-b594c457e728",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da82a61e-de76-43a5-9490-ea3360ed6522",
        "cursor": {
          "ref": "2abe2e50-82e5-4498-9912-2cabf4fb22af",
          "length": 58,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "5a3ef9db-6f56-470b-8714-83d1359251b0"
        },
        "item": {
          "id": "da82a61e-de76-43a5-9490-ea3360ed6522",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {
          "id": "3cf0bbcb-b843-45dd-9c2b-b594c457e728",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed587e35-f26d-4772-b52f-a240101c0201",
        "cursor": {
          "ref": "90634d84-6c1f-44b4-9e91-170be41bc5dc",
          "length": 58,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "918b14d4-5078-42f3-a86d-d553965ad0e2"
        },
        "item": {
          "id": "ed587e35-f26d-4772-b52f-a240101c0201",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "27fcda13-b76c-4c0e-9c5d-2a499971130f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed587e35-f26d-4772-b52f-a240101c0201",
        "cursor": {
          "ref": "90634d84-6c1f-44b4-9e91-170be41bc5dc",
          "length": 58,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "918b14d4-5078-42f3-a86d-d553965ad0e2"
        },
        "item": {
          "id": "ed587e35-f26d-4772-b52f-a240101c0201",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "27fcda13-b76c-4c0e-9c5d-2a499971130f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2330784-9c8b-4307-a605-33a595139880",
        "cursor": {
          "ref": "07f3d1b0-5b30-4d6c-af97-db19a92666fc",
          "length": 58,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "b52bf150-bfb5-49a6-8369-83859debfb4c"
        },
        "item": {
          "id": "b2330784-9c8b-4307-a605-33a595139880",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "ab1f1aa3-3106-4dae-8965-5acfa78951dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2330784-9c8b-4307-a605-33a595139880",
        "cursor": {
          "ref": "07f3d1b0-5b30-4d6c-af97-db19a92666fc",
          "length": 58,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "b52bf150-bfb5-49a6-8369-83859debfb4c"
        },
        "item": {
          "id": "b2330784-9c8b-4307-a605-33a595139880",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "ab1f1aa3-3106-4dae-8965-5acfa78951dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "945b2859-0f0f-4f8b-a14c-5eac715f0194",
        "cursor": {
          "ref": "a7be3213-c81a-4a6c-ad11-0f980a0556d5",
          "length": 58,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "104c7fde-c09f-41d5-8b5d-6ca199d884ed"
        },
        "item": {
          "id": "945b2859-0f0f-4f8b-a14c-5eac715f0194",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {
          "id": "6e3c160a-eaee-4a31-9ca8-299cd02a575e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "945b2859-0f0f-4f8b-a14c-5eac715f0194",
        "cursor": {
          "ref": "a7be3213-c81a-4a6c-ad11-0f980a0556d5",
          "length": 58,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "104c7fde-c09f-41d5-8b5d-6ca199d884ed"
        },
        "item": {
          "id": "945b2859-0f0f-4f8b-a14c-5eac715f0194",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {
          "id": "6e3c160a-eaee-4a31-9ca8-299cd02a575e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "adf9d99b-8376-414c-877c-fe8cc6d928ab",
        "cursor": {
          "ref": "771dc583-f49e-479f-bd8a-36c9fe1bf03c",
          "length": 58,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "8d297a1c-58a9-43b1-8f92-a83cef9d68dc"
        },
        "item": {
          "id": "adf9d99b-8376-414c-877c-fe8cc6d928ab",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {
          "id": "e6c0d2c9-f748-46aa-98aa-208b3a8e516f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "adf9d99b-8376-414c-877c-fe8cc6d928ab",
        "cursor": {
          "ref": "771dc583-f49e-479f-bd8a-36c9fe1bf03c",
          "length": 58,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "8d297a1c-58a9-43b1-8f92-a83cef9d68dc"
        },
        "item": {
          "id": "adf9d99b-8376-414c-877c-fe8cc6d928ab",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {
          "id": "e6c0d2c9-f748-46aa-98aa-208b3a8e516f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2f445f2-fd27-4d1a-9a81-06b460bd7cbe",
        "cursor": {
          "ref": "ccb031ed-5737-4a7a-be1f-63127f3fee86",
          "length": 58,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "cbfd1404-eadd-4669-8166-ae555696d492"
        },
        "item": {
          "id": "c2f445f2-fd27-4d1a-9a81-06b460bd7cbe",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "3a5063e0-4072-41f5-b05f-0733f3b3cc5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2f445f2-fd27-4d1a-9a81-06b460bd7cbe",
        "cursor": {
          "ref": "ccb031ed-5737-4a7a-be1f-63127f3fee86",
          "length": 58,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "cbfd1404-eadd-4669-8166-ae555696d492"
        },
        "item": {
          "id": "c2f445f2-fd27-4d1a-9a81-06b460bd7cbe",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "3a5063e0-4072-41f5-b05f-0733f3b3cc5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fd4fafc-cead-4bcf-b3ec-8444eced107f",
        "cursor": {
          "ref": "af0f1608-c011-4a72-9f44-04c75d614179",
          "length": 58,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "f4fac86f-bb8d-4fff-907e-97678e0672ee"
        },
        "item": {
          "id": "2fd4fafc-cead-4bcf-b3ec-8444eced107f",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {
          "id": "8fbafee9-dd18-41a7-a852-df11abb5153f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 395
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fd4fafc-cead-4bcf-b3ec-8444eced107f",
        "cursor": {
          "ref": "af0f1608-c011-4a72-9f44-04c75d614179",
          "length": 58,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "f4fac86f-bb8d-4fff-907e-97678e0672ee"
        },
        "item": {
          "id": "2fd4fafc-cead-4bcf-b3ec-8444eced107f",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {
          "id": "8fbafee9-dd18-41a7-a852-df11abb5153f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 395
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fccc69e8-41ec-4e50-86e1-499528ea812c",
        "cursor": {
          "ref": "04128501-1c2d-4cb7-9030-9b93bd829e19",
          "length": 58,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "7f722b95-a6bf-4e40-83aa-9018b83f44fd"
        },
        "item": {
          "id": "fccc69e8-41ec-4e50-86e1-499528ea812c",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "ea11da12-a85e-48ab-9876-92c6f6d03fb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fccc69e8-41ec-4e50-86e1-499528ea812c",
        "cursor": {
          "ref": "04128501-1c2d-4cb7-9030-9b93bd829e19",
          "length": 58,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "7f722b95-a6bf-4e40-83aa-9018b83f44fd"
        },
        "item": {
          "id": "fccc69e8-41ec-4e50-86e1-499528ea812c",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "ea11da12-a85e-48ab-9876-92c6f6d03fb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2323094f-31e5-4fd9-8663-15e0ac1d739e",
        "cursor": {
          "ref": "dda07564-2715-4627-aacd-ed11388d904c",
          "length": 58,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "f0d7c382-3faa-4aee-b97d-fe0f043992de"
        },
        "item": {
          "id": "2323094f-31e5-4fd9-8663-15e0ac1d739e",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {
          "id": "8c41aeea-713f-4c36-88b9-f722fe479641",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2323094f-31e5-4fd9-8663-15e0ac1d739e",
        "cursor": {
          "ref": "dda07564-2715-4627-aacd-ed11388d904c",
          "length": 58,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "f0d7c382-3faa-4aee-b97d-fe0f043992de"
        },
        "item": {
          "id": "2323094f-31e5-4fd9-8663-15e0ac1d739e",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {
          "id": "8c41aeea-713f-4c36-88b9-f722fe479641",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bfa2933-d29a-4fe6-8db0-6d4b4f95b5dd",
        "cursor": {
          "ref": "6b7fcb7d-7d8f-4f3e-879a-e14e3b9d9cac",
          "length": 58,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "c512ffec-0923-42c4-8c00-c87cffbf5d61"
        },
        "item": {
          "id": "1bfa2933-d29a-4fe6-8db0-6d4b4f95b5dd",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "fd70bd94-287d-4813-a506-bbf756d94680",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 340,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bfa2933-d29a-4fe6-8db0-6d4b4f95b5dd",
        "cursor": {
          "ref": "6b7fcb7d-7d8f-4f3e-879a-e14e3b9d9cac",
          "length": 58,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "c512ffec-0923-42c4-8c00-c87cffbf5d61"
        },
        "item": {
          "id": "1bfa2933-d29a-4fe6-8db0-6d4b4f95b5dd",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "fd70bd94-287d-4813-a506-bbf756d94680",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 340,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b177693a-0bc6-4803-9777-d55daaee7545",
        "cursor": {
          "ref": "a83cffb8-316a-442a-8d80-2d124503e5ff",
          "length": 58,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "f1885172-ef98-4773-8c08-f3d309e54d08"
        },
        "item": {
          "id": "b177693a-0bc6-4803-9777-d55daaee7545",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {
          "id": "10cc4925-fe88-4df7-a84d-f23a6cfe9ed1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 347
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b177693a-0bc6-4803-9777-d55daaee7545",
        "cursor": {
          "ref": "a83cffb8-316a-442a-8d80-2d124503e5ff",
          "length": 58,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "f1885172-ef98-4773-8c08-f3d309e54d08"
        },
        "item": {
          "id": "b177693a-0bc6-4803-9777-d55daaee7545",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {
          "id": "10cc4925-fe88-4df7-a84d-f23a6cfe9ed1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 347
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4a86db3-4c00-4780-b7a9-82b05135904d",
        "cursor": {
          "ref": "6aa0c799-b539-477e-91f1-697f82acc2b8",
          "length": 58,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "780b74c4-c5c0-49a3-bc11-de51716f6531"
        },
        "item": {
          "id": "d4a86db3-4c00-4780-b7a9-82b05135904d",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {
          "id": "688a9e1c-7e3f-4e8f-969d-0cfb57dee4cd",
          "status": "Created",
          "code": 201,
          "responseTime": 816,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "d4a86db3-4c00-4780-b7a9-82b05135904d",
        "cursor": {
          "ref": "6aa0c799-b539-477e-91f1-697f82acc2b8",
          "length": 58,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "780b74c4-c5c0-49a3-bc11-de51716f6531"
        },
        "item": {
          "id": "d4a86db3-4c00-4780-b7a9-82b05135904d",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {
          "id": "688a9e1c-7e3f-4e8f-969d-0cfb57dee4cd",
          "status": "Created",
          "code": 201,
          "responseTime": 816,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "2d423626-03bf-4c34-aafc-561cb6f90a8d",
        "cursor": {
          "ref": "8f310ee6-c1b7-463f-b12a-692a8a331176",
          "length": 58,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "da73f47a-810b-4e5f-aa5b-28a69c9575f5"
        },
        "item": {
          "id": "2d423626-03bf-4c34-aafc-561cb6f90a8d",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {
          "id": "962ce9bb-b0e9-4abf-a908-25b8dad55c44",
          "status": "Created",
          "code": 201,
          "responseTime": 381,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "2d423626-03bf-4c34-aafc-561cb6f90a8d",
        "cursor": {
          "ref": "8f310ee6-c1b7-463f-b12a-692a8a331176",
          "length": 58,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "da73f47a-810b-4e5f-aa5b-28a69c9575f5"
        },
        "item": {
          "id": "2d423626-03bf-4c34-aafc-561cb6f90a8d",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {
          "id": "962ce9bb-b0e9-4abf-a908-25b8dad55c44",
          "status": "Created",
          "code": 201,
          "responseTime": 381,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "ec730300-0a6b-4460-b072-252d96f244a4",
        "cursor": {
          "ref": "dcf0b8e9-4720-4fde-9e6c-eedf7b311d0e",
          "length": 58,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "79990eab-5921-4a4c-b87f-c8bca89e6d73"
        },
        "item": {
          "id": "ec730300-0a6b-4460-b072-252d96f244a4",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {
          "id": "df44b3a7-d667-47f0-8d34-d0245e1df17f",
          "status": "Created",
          "code": 201,
          "responseTime": 375,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "ec730300-0a6b-4460-b072-252d96f244a4",
        "cursor": {
          "ref": "dcf0b8e9-4720-4fde-9e6c-eedf7b311d0e",
          "length": 58,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "79990eab-5921-4a4c-b87f-c8bca89e6d73"
        },
        "item": {
          "id": "ec730300-0a6b-4460-b072-252d96f244a4",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {
          "id": "df44b3a7-d667-47f0-8d34-d0245e1df17f",
          "status": "Created",
          "code": 201,
          "responseTime": 375,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "ad817b38-963e-4c9c-87ff-338534afecd1",
        "cursor": {
          "ref": "e66ced3f-0e75-4fe2-b594-20fb73c2c65f",
          "length": 58,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "e15f577c-3d6c-4ed7-95dc-2f8ff2d58914"
        },
        "item": {
          "id": "ad817b38-963e-4c9c-87ff-338534afecd1",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "c24b4c38-9d42-48d2-bf59-c80d1ceb027f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 65,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad817b38-963e-4c9c-87ff-338534afecd1",
        "cursor": {
          "ref": "e66ced3f-0e75-4fe2-b594-20fb73c2c65f",
          "length": 58,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "e15f577c-3d6c-4ed7-95dc-2f8ff2d58914"
        },
        "item": {
          "id": "ad817b38-963e-4c9c-87ff-338534afecd1",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "c24b4c38-9d42-48d2-bf59-c80d1ceb027f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 65,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14c5e46d-7058-4d50-927d-4dda3fb4d393",
        "cursor": {
          "ref": "5553d6c8-b04d-4b51-b912-588aa06d9220",
          "length": 58,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "67ec81c9-982d-492a-874e-ca383b019bec"
        },
        "item": {
          "id": "14c5e46d-7058-4d50-927d-4dda3fb4d393",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "4eab3b87-e4cf-476a-a6a9-c2ae3c243a37",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 70,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14c5e46d-7058-4d50-927d-4dda3fb4d393",
        "cursor": {
          "ref": "5553d6c8-b04d-4b51-b912-588aa06d9220",
          "length": 58,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "67ec81c9-982d-492a-874e-ca383b019bec"
        },
        "item": {
          "id": "14c5e46d-7058-4d50-927d-4dda3fb4d393",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "4eab3b87-e4cf-476a-a6a9-c2ae3c243a37",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 70,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b80909f-17ef-4b2d-85a9-60d523b76457",
        "cursor": {
          "ref": "23caefff-09bc-4507-b156-683743f397c7",
          "length": 58,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "b12f0745-b6ad-4fa1-a2c5-cb0a58b2acfe"
        },
        "item": {
          "id": "7b80909f-17ef-4b2d-85a9-60d523b76457",
          "name": "credentials_issue"
        },
        "response": {
          "id": "eb4eb9fb-0098-432d-9f01-588e3ef00363",
          "status": "Created",
          "code": 201,
          "responseTime": 357,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:41)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b80909f-17ef-4b2d-85a9-60d523b76457",
        "cursor": {
          "ref": "23caefff-09bc-4507-b156-683743f397c7",
          "length": 58,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "b12f0745-b6ad-4fa1-a2c5-cb0a58b2acfe"
        },
        "item": {
          "id": "7b80909f-17ef-4b2d-85a9-60d523b76457",
          "name": "credentials_issue"
        },
        "response": {
          "id": "eb4eb9fb-0098-432d-9f01-588e3ef00363",
          "status": "Created",
          "code": 201,
          "responseTime": 357,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:41)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          }
        ]
      },
      {
        "id": "6df53d20-7774-40f2-b5f9-445eb63af5a7",
        "cursor": {
          "ref": "f94dc8f2-2f98-4107-b1f5-dce9e54981e9",
          "length": 58,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "ffc3ea1f-9f5f-481a-9270-b2a8034fbafe"
        },
        "item": {
          "id": "6df53d20-7774-40f2-b5f9-445eb63af5a7",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "00b66da3-7060-4384-82d2-37371352c757",
          "status": "Created",
          "code": 201,
          "responseTime": 361,
          "responseSize": 671
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "6df53d20-7774-40f2-b5f9-445eb63af5a7",
        "cursor": {
          "ref": "f94dc8f2-2f98-4107-b1f5-dce9e54981e9",
          "length": 58,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "ffc3ea1f-9f5f-481a-9270-b2a8034fbafe"
        },
        "item": {
          "id": "6df53d20-7774-40f2-b5f9-445eb63af5a7",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "00b66da3-7060-4384-82d2-37371352c757",
          "status": "Created",
          "code": 201,
          "responseTime": 361,
          "responseSize": 671
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "bbbfd685-e9a6-4add-8464-f4f57c8ea24e",
        "cursor": {
          "ref": "b922d5ef-2979-4ef7-91ac-5f37ded999a6",
          "length": 58,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "f52e3ff9-b5bd-451b-9914-ef2ea77acacd"
        },
        "item": {
          "id": "bbbfd685-e9a6-4add-8464-f4f57c8ea24e",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "dcca45f7-5747-4ca5-92cc-60eb50a17323",
          "status": "Created",
          "code": 201,
          "responseTime": 361,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:43)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbbfd685-e9a6-4add-8464-f4f57c8ea24e",
        "cursor": {
          "ref": "b922d5ef-2979-4ef7-91ac-5f37ded999a6",
          "length": 58,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "f52e3ff9-b5bd-451b-9914-ef2ea77acacd"
        },
        "item": {
          "id": "bbbfd685-e9a6-4add-8464-f4f57c8ea24e",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "dcca45f7-5747-4ca5-92cc-60eb50a17323",
          "status": "Created",
          "code": 201,
          "responseTime": 361,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:43)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "6abe46f6-2ffb-42b5-9d39-205d89029913",
        "cursor": {
          "ref": "b11ae86b-1c10-448d-bd22-730eb7eb44dc",
          "length": 58,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "917e4bd4-ef28-4024-b479-d3585839632a"
        },
        "item": {
          "id": "6abe46f6-2ffb-42b5-9d39-205d89029913",
          "name": "credentials_issue:credential:alt.credentialSubject.object"
        },
        "response": {
          "id": "435209c9-25fc-486e-9330-baa69fd8ff00",
          "status": "Created",
          "code": 201,
          "responseTime": 378,
          "responseSize": 603
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "6abe46f6-2ffb-42b5-9d39-205d89029913",
        "cursor": {
          "ref": "b11ae86b-1c10-448d-bd22-730eb7eb44dc",
          "length": 58,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "917e4bd4-ef28-4024-b479-d3585839632a"
        },
        "item": {
          "id": "6abe46f6-2ffb-42b5-9d39-205d89029913",
          "name": "credentials_issue:credential:alt.credentialSubject.object"
        },
        "response": {
          "id": "435209c9-25fc-486e-9330-baa69fd8ff00",
          "status": "Created",
          "code": 201,
          "responseTime": 378,
          "responseSize": 603
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "f79224af-47e2-4c77-a8d0-075b9d3bbe9e",
        "cursor": {
          "ref": "fc15bc76-bc44-446c-8862-cfaf738c75ce",
          "length": 58,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "a24c46c9-2167-4a74-b740-499516ea201f"
        },
        "item": {
          "id": "f79224af-47e2-4c77-a8d0-075b9d3bbe9e",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "b94c5f9b-6f31-4677-86aa-4ced509b8d64",
          "status": "Created",
          "code": 201,
          "responseTime": 379,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:45)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "f79224af-47e2-4c77-a8d0-075b9d3bbe9e",
        "cursor": {
          "ref": "fc15bc76-bc44-446c-8862-cfaf738c75ce",
          "length": 58,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "a24c46c9-2167-4a74-b740-499516ea201f"
        },
        "item": {
          "id": "f79224af-47e2-4c77-a8d0-075b9d3bbe9e",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "b94c5f9b-6f31-4677-86aa-4ced509b8d64",
          "status": "Created",
          "code": 201,
          "responseTime": 379,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:45)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "eeedb9a0-2363-4117-9395-a53a87295673",
        "cursor": {
          "ref": "3f3611f9-9596-4f71-b231-8ac4a1e0541b",
          "length": 58,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "317e18f9-77d5-4baa-873a-620eb4c61d74"
        },
        "item": {
          "id": "eeedb9a0-2363-4117-9395-a53a87295673",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "4dcb3bdd-1abf-4915-b71d-ac66381e512e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "eeedb9a0-2363-4117-9395-a53a87295673",
        "cursor": {
          "ref": "3f3611f9-9596-4f71-b231-8ac4a1e0541b",
          "length": 58,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "317e18f9-77d5-4baa-873a-620eb4c61d74"
        },
        "item": {
          "id": "eeedb9a0-2363-4117-9395-a53a87295673",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "4dcb3bdd-1abf-4915-b71d-ac66381e512e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "1549ed9a-fbb4-4cdf-ae5b-d4b3d0ccffc1",
        "cursor": {
          "ref": "16ee2028-4615-4d76-b3d4-6485abb30df0",
          "length": 58,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "a99bb6a0-ee05-42d4-a271-96d871050155"
        },
        "item": {
          "id": "1549ed9a-fbb4-4cdf-ae5b-d4b3d0ccffc1",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "500120f4-3da7-417e-9e94-7e6a48037765",
          "status": "Created",
          "code": 201,
          "responseTime": 382,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "1549ed9a-fbb4-4cdf-ae5b-d4b3d0ccffc1",
        "cursor": {
          "ref": "16ee2028-4615-4d76-b3d4-6485abb30df0",
          "length": 58,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "a99bb6a0-ee05-42d4-a271-96d871050155"
        },
        "item": {
          "id": "1549ed9a-fbb4-4cdf-ae5b-d4b3d0ccffc1",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "500120f4-3da7-417e-9e94-7e6a48037765",
          "status": "Created",
          "code": 201,
          "responseTime": 382,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "a8b69e99-0d35-4dc1-89a8-7e0c90d52783",
        "cursor": {
          "ref": "d1d30731-3244-4b29-9799-05e22bb34c4a",
          "length": 58,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "45e3f6d0-9a25-4583-9cd6-77992659bdd5"
        },
        "item": {
          "id": "a8b69e99-0d35-4dc1-89a8-7e0c90d52783",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {
          "id": "80d46b9c-514d-4df3-bcec-2321bac862b3",
          "status": "Created",
          "code": 201,
          "responseTime": 366,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "a8b69e99-0d35-4dc1-89a8-7e0c90d52783",
        "cursor": {
          "ref": "d1d30731-3244-4b29-9799-05e22bb34c4a",
          "length": 58,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "45e3f6d0-9a25-4583-9cd6-77992659bdd5"
        },
        "item": {
          "id": "a8b69e99-0d35-4dc1-89a8-7e0c90d52783",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {
          "id": "80d46b9c-514d-4df3-bcec-2321bac862b3",
          "status": "Created",
          "code": 201,
          "responseTime": 366,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "e81bd076-7e39-4835-ac7c-c25c19581cd7",
        "cursor": {
          "ref": "2f70c493-883f-4431-91e7-43ba58a2df65",
          "length": 58,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "cdadafbb-b158-45c7-8f5b-d673858ea3dc"
        },
        "item": {
          "id": "e81bd076-7e39-4835-ac7c-c25c19581cd7",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "8a83694e-cbae-47f0-aaf6-10251d5cfa29",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 65,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e81bd076-7e39-4835-ac7c-c25c19581cd7",
        "cursor": {
          "ref": "2f70c493-883f-4431-91e7-43ba58a2df65",
          "length": 58,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "cdadafbb-b158-45c7-8f5b-d673858ea3dc"
        },
        "item": {
          "id": "e81bd076-7e39-4835-ac7c-c25c19581cd7",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "8a83694e-cbae-47f0-aaf6-10251d5cfa29",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 65,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28febbfc-6382-4308-979d-e8a70aa5193a",
        "cursor": {
          "ref": "c0b9ef26-aa9f-4a69-a55e-6c1429e184d4",
          "length": 58,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "f569b3d2-e5c3-473b-943e-6a148a141664"
        },
        "item": {
          "id": "28febbfc-6382-4308-979d-e8a70aa5193a",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "f35c8880-a659-4e6e-b655-e5c4720c39dc",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e178752c-8d4b-4d05-956c-738084876986",
        "cursor": {
          "ref": "a5bf63ab-272e-44cc-901e-04bee21e06ca",
          "length": 58,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "cae6127c-9648-4de6-a3a3-97d5f62bb4a6"
        },
        "item": {
          "id": "e178752c-8d4b-4d05-956c-738084876986",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "76bee02d-dec8-4beb-ba65-b8d28fbfef9c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 65,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e178752c-8d4b-4d05-956c-738084876986",
        "cursor": {
          "ref": "a5bf63ab-272e-44cc-901e-04bee21e06ca",
          "length": 58,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "cae6127c-9648-4de6-a3a3-97d5f62bb4a6"
        },
        "item": {
          "id": "e178752c-8d4b-4d05-956c-738084876986",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "76bee02d-dec8-4beb-ba65-b8d28fbfef9c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 65,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46b61257-71ab-4192-8856-682d331b0107",
        "cursor": {
          "ref": "8ca6ca99-df37-4e50-8bd7-b6b36ab66d8b",
          "length": 58,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "83770fbb-9f3e-4174-b74b-e2bf440376d8"
        },
        "item": {
          "id": "46b61257-71ab-4192-8856-682d331b0107",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "27334fe3-be4a-45ff-b586-2df5c91bc0ca",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 73,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1dc030e-5ae5-4e80-8fff-cd1e39cee70d",
        "cursor": {
          "ref": "63fcf81f-88a5-4ece-9867-afc948e8b70a",
          "length": 58,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "4220371c-734a-4f34-b069-2c20987d2906"
        },
        "item": {
          "id": "e1dc030e-5ae5-4e80-8fff-cd1e39cee70d",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "8845592a-39e0-44e0-b183-9892562cf994",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 64,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1dc030e-5ae5-4e80-8fff-cd1e39cee70d",
        "cursor": {
          "ref": "63fcf81f-88a5-4ece-9867-afc948e8b70a",
          "length": 58,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "4220371c-734a-4f34-b069-2c20987d2906"
        },
        "item": {
          "id": "e1dc030e-5ae5-4e80-8fff-cd1e39cee70d",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "8845592a-39e0-44e0-b183-9892562cf994",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 64,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "118b65d9-826a-49c7-8758-60b62dc08840",
        "cursor": {
          "ref": "0b1bf2af-7745-4d93-9b9a-c8aaf019eee4",
          "length": 58,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "49fb63da-5272-4150-8a50-eaf7f9079881"
        },
        "item": {
          "id": "118b65d9-826a-49c7-8758-60b62dc08840",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "2a6b6db9-7897-41fe-af99-fc4947bab62b",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5cdde12-3305-4f9a-8ea8-9f299325dcc4",
        "cursor": {
          "ref": "566bcefa-9f8c-4c2e-95de-8e116c074b43",
          "length": 58,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "9906c6fd-42ce-4575-9999-6190b4ca1a7d"
        },
        "item": {
          "id": "f5cdde12-3305-4f9a-8ea8-9f299325dcc4",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "5501672d-0f4e-4a70-b71b-e5522e106575",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "f5cdde12-3305-4f9a-8ea8-9f299325dcc4",
        "cursor": {
          "ref": "566bcefa-9f8c-4c2e-95de-8e116c074b43",
          "length": 58,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "9906c6fd-42ce-4575-9999-6190b4ca1a7d"
        },
        "item": {
          "id": "f5cdde12-3305-4f9a-8ea8-9f299325dcc4",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "5501672d-0f4e-4a70-b71b-e5522e106575",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "1e6cb837-40d3-4c48-83ad-8437ce2b36a1",
        "cursor": {
          "ref": "c4787af8-0a06-4b3f-8279-1c9797c41585",
          "length": 58,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "101c841a-4aba-482a-9218-2a2be82011e0"
        },
        "item": {
          "id": "1e6cb837-40d3-4c48-83ad-8437ce2b36a1",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "afa02b4b-ac76-41ed-8043-4c4a2780d9a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "032d2aec-4707-4867-be19-eac712c0171a",
        "cursor": {
          "ref": "de841c4c-06fd-43bf-b99d-20984245d083",
          "length": 58,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "f666ee20-1625-4009-8b6e-e0d9a35b4161"
        },
        "item": {
          "id": "032d2aec-4707-4867-be19-eac712c0171a",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "17ca5db7-83f1-48e1-a5fb-fa1b5fa06ead",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 67,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "032d2aec-4707-4867-be19-eac712c0171a",
        "cursor": {
          "ref": "de841c4c-06fd-43bf-b99d-20984245d083",
          "length": 58,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "f666ee20-1625-4009-8b6e-e0d9a35b4161"
        },
        "item": {
          "id": "032d2aec-4707-4867-be19-eac712c0171a",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "17ca5db7-83f1-48e1-a5fb-fa1b5fa06ead",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 67,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bb53f3f-7608-4b4c-941b-b0ae80bf54d5",
        "cursor": {
          "ref": "d225353e-6956-4d01-8659-6307ec9916e5",
          "length": 58,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "f118b9c9-adcc-4702-af5f-05b1531401f3"
        },
        "item": {
          "id": "0bb53f3f-7608-4b4c-941b-b0ae80bf54d5",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "8e0d67a9-de03-4656-bc0c-15c4e67d4f1f",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}